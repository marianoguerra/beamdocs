{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,[3,35,32,105]},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,[3,35,32,105]},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,68,101,98,117,103,103,101,114,47,73,110,116,101,114,112,114,
             101,116,101,114,32,73,110,116,101,114,102,97,99,101,46]}],
          0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,[3,42,105,42]},
                 {sep,
                  [{text,
                    "xmodule provides short forms for some of the functions used by the graphical Debugger and some of the functions in module"}],
                  0,false},
                 {text,"\n[int](int)"},
                 {sep,
                  [{text,
                    [25,44,32,116,104,101,32,69,114,108,97,110,103,32,105,110,
                     116,101,114,112,114,101,116,101,114,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "tThis module also provides facilities for displaying status information about interpreted processes and break points."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ÃžIt is possible to attach to interpreted processes by giving the corresponding process identity only. By default, an attachment window is displayed. Processes at other Erlang nodes can be attached manually or automatically."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "8By preference, these functions can be included in module"}],
                  0,false},
                 {text,"'[stdlib/shell_default](./shell_default)"},
                 {sep,
                  [{text,"/. By default, they are included in that module."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,[16,35,35,32,105,109,40,41,32,45,62,32,112,105,100,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [26,83,116,97,114,116,32,97,32,103,114,97,112,104,105,99,97,108,
             32,109,111,110,105,116,111,114,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [274,83,116,97,114,116,115,32,97,32,110,101,119,32,103,114,97,
               112,104,105,99,97,108,32,109,111,110,105,116,111,114,46,32,84,
               104,105,115,32,105,115,32,116,104,101,32,77,111,110,105,116,
               111,114,32,119,105,110,100,111,119,44,32,116,104,101,32,109,97,
               105,110,32,119,105,110,100,111,119,32,111,102,32,68,101,98,117,
               103,103,101,114,46,32,65,108,108,32,116,104,101,32,68,101,98,
               117,103,103,101,114,32,97,110,100,32,105,110,116,101,114,112,
               114,101,116,101,114,32,102,117,110,99,116,105,111,110,97,108,
               105,116,121,32,105,115,32,97,99,99,101,115,115,101,100,32,102,
               114,111,109,32,116,104,101,32,77,111,110,105,116,111,114,32,
               119,105,110,100,111,119,46,32,84,104,105,115,32,119,105,110,
               100,111,119,32,100,105,115,112,108,97,121,115,32,116,104,101,
               32,115,116,97,116,117,115,32,111,102,32,97,108,108,32,112,114,
               111,99,101,115,115,101,115,32,116,104,97,116,32,104,97,118,101,
               32,98,101,101,110,32,111,114,32,97,114,101,32,101,120,101,99,
               117,116,105,110,103,32,105,110,116,101,114,112,114,101,116,101,
               100,32,109,111,100,117,108,101,115,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [23,35,35,32,105,105,40,65,98,115,77,111,100,117,108,101,115,41,32,45,
         62,32,111,107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,",## ii(AbsModule) -> {module, Module} | error"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [24,35,35,32,105,110,105,40,65,98,115,77,111,100,117,108,101,115,41,
         32,45,62,32,111,107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"-## ini(AbsModule) -> {module, Module} | error"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [19,73,110,116,101,114,112,114,101,116,32,97,32,109,111,100,117,
             108,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [24,65,98,115,77,111,100,117,108,101,115,32,61,32,91,65,98,115,77,
             111,100,117,108,101,93]}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [25,65,98,115,77,111,100,117,108,101,32,61,32,77,111,100,117,108,
             101,32,124,32,70,105,108,101]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,194,160,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [17,194,160,70,105,108,101,32,61,32,115,116,114,105,110,103,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"#Interprets the specified module(s)."}],0,false},
             {text,[6,42,105,105,47,49,42]},
             {sep,
              [{text,
                "6interprets the module(s) only at the current node, see"}],
              0,false},
             {text,
              [20,91,105,110,116,58,105,47,49,93,40,46,47,105,110,116,35,105,
               47,49,41]},
             {sep,[{text,[1,46]}],0,false},
             {text,[7,42,105,110,105,47,49,42]},
             {sep,
              [{text,"0interprets the module(s) at all known nodes, see"}],
              0,false},
             {text,
              [22,91,105,110,116,58,110,105,47,49,93,40,46,47,105,110,116,35,
               110,105,47,49,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [22,35,35,32,105,113,40,65,98,115,77,111,100,117,108,101,41,32,45,62,
         32,111,107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [23,35,35,32,105,110,113,40,65,98,115,77,111,100,117,108,101,41,32,45,
         62,32,111,107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,[{sep,[{text,"\eStop interpreting a module."}],0,false}],0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [25,65,98,115,77,111,100,117,108,101,32,61,32,77,111,100,117,108,
            101,32,124,32,70,105,108,101]}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,194,160,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [17,194,160,70,105,108,101,32,61,32,115,116,114,105,110,103,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"(Stops interpreting the specified module."}],
              0,false},
             {text,[6,42,105,113,47,49,42]},
             {sep,
              [{text,
                "7stops interpreting the module only at the current node."}],
              0,false},
             {text,[7,42,105,110,113,47,49,42]},
             {sep,
              [{text,"1stops interpreting the module at all known nodes."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\r## il() -> ok"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"*Make a printout of all interpreted modules"}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [136,77,97,107,101,115,32,97,32,112,114,105,110,116,111,117,116,
               32,111,102,32,97,108,108,32,105,110,116,101,114,112,114,101,
               116,101,100,32,109,111,100,117,108,101,115,46,32,77,111,100,
               117,108,101,115,32,97,114,101,32,112,114,105,110,116,101,100,
               32,116,111,103,101,116,104,101,114,32,119,105,116,104,32,116,
               104,101,32,102,117,108,108,32,112,97,116,104,32,110,97,109,101,
               32,111,102,32,116,104,101,32,99,111,114,114,101,115,112,111,
               110,100,105,110,103,32,115,111,117,114,99,101,32,99,111,100,
               101,32,102,105,108,101,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\r## ip() -> ok"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"6Print the current status of all interpreted processes."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "7Prints the current status of all interpreted processes."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\r## ic() -> ok"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "=Clear information about processes executing interpreted code."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "uClears information about processes executing interpreted code by removing all information about terminated processes."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [21,35,35,32,105,97,97,40,70,108,97,103,115,41,32,45,62,32,116,114,
         117,101]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [31,35,35,32,105,97,97,40,70,108,97,103,115,44,32,70,117,110,99,116,
         105,111,110,41,32,45,62,32,116,114,117,101]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"(Set when and how to attach to a process."}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [29,70,108,97,103,115,32,61,32,91,105,110,105,116,32,124,32,98,
             114,101,97,107,32,124,32,101,120,105,116,93]}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [29,70,117,110,99,116,105,111,110,32,61,32,123,77,111,100,117,108,
             101,44,78,97,109,101,44,65,114,103,115,125]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [24,194,160,77,111,100,117,108,101,32,61,32,78,97,109,101,32,61,32,
            97,116,111,109,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [17,194,160,65,114,103,115,32,61,32,91,116,101,114,109,40,41,93]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "DSets when and how to attach to a debugged process automatically, see"}],
              0,false},
             {text,"([int:auto_attach/2](./int#auto_attach/0)"},
             {sep,[{text,[1,46]}],0,false},
             {text,"\n*Function*"},
             {sep,
              [{text,"3defaults to the standard function used by Debugger."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [20,35,35,32,105,115,116,40,70,108,97,103,41,32,45,62,32,116,114,117,
         101]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [28,83,101,116,32,104,111,119,32,116,111,32,115,97,118,101,32,99,
             97,108,108,32,102,114,97,109,101,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [28,70,108,97,103,32,61,32,97,108,108,32,124,32,110,111,95,116,97,
          105,108,32,124,32,102,97,108,115,101]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,".Sets how to save call frames in the stack, see"}],
              0,false},
             {text,"([int:stack_trace/1](./int#stack_trace/0)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [26,35,35,32,105,97,40,80,105,100,41,32,45,62,32,111,107,32,124,32,
         110,111,95,112,114,111,99]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,65,116,116,97,99,104,101,32,116,111,32,97,32,112,114,111,99,
             101,115,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,[{text,[1,42]},{sep,[{text,"\vPid = pid()"}],0,false}],0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text," Attaches to the debugged process"}],0,false},
             {text,[5,42,80,105,100,42]},
             {sep,
              [{text,
                "5. An Attach Process window is opened for the process."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [28,35,35,32,105,97,40,88,44,89,44,90,41,32,45,62,32,111,107,32,124,
         32,110,111,95,112,114,111,99]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,65,116,116,97,99,104,101,32,116,111,32,97,32,112,114,111,99,
             101,115,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[17,88,32,61,32,89,32,61,32,90,32,61,32,105,110,116,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,"\t*ia(Pid)*"},
             {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
             {text,[5,42,80,105,100,42]},
             {sep,
              [{text,"+is the result of calling the shell function"}],
              0,false},
             {text,"\f*pid(X,Y,Z)*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"$## ia(Pid, Function) -> ok | no_proc"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,65,116,116,97,99,104,101,32,116,111,32,97,32,112,114,111,99,
             101,115,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,[{text,[1,42]},{sep,[{text,"\vPid = pid()"}],0,false}],0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [24,70,117,110,99,116,105,111,110,32,61,32,123,77,111,100,117,108,
            101,44,78,97,109,101,125]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [24,194,160,77,111,100,117,108,101,32,61,32,78,97,109,101,32,61,32,
           97,116,111,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text," Attaches to the debugged process"}],0,false},
             {text,[5,42,80,105,100,42]},
             {sep,
              [{text,
                [23,46,32,84,104,101,32,105,110,116,101,114,112,114,101,116,
                 101,114,32,99,97,108,108,115]}],
              0,false},
             {text,
              [28,42,115,112,97,119,110,40,77,111,100,117,108,101,44,32,78,97,
               109,101,44,32,91,80,105,100,93,41,42]},
             {sep,
              [{text,
                [25,40,97,110,100,32,105,103,110,111,114,101,115,32,116,104,
                 101,32,114,101,115,117,108,116,41,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"&## ia(X,Y,Z, Function) -> ok | no_proc"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,65,116,116,97,99,104,101,32,116,111,32,97,32,112,114,111,99,
             101,115,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[17,88,32,61,32,89,32,61,32,90,32,61,32,105,110,116,40,41]}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [24,70,117,110,99,116,105,111,110,32,61,32,123,77,111,100,117,108,
            101,44,78,97,109,101,125]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [24,194,160,77,111,100,117,108,101,32,61,32,78,97,109,101,32,61,32,
           97,116,111,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              [19,42,105,97,40,80,105,100,44,32,70,117,110,99,116,105,111,110,
               41,42]},
             {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
             {text,[5,42,80,105,100,42]},
             {sep,
              [{text,"+is the result of calling the shell function"}],
              0,false},
             {text,"\f*pid(X,Y,Z)*"},
             {sep,
              [{text,
                "A. An attached process is expected to call the unofficial function"}],
              0,false},
             {text,
              [19,42,105,110,116,58,97,116,116,97,99,104,101,100,40,80,105,
               100,41,42]},
             {sep,
              [{text,
                "Kand to be able to handle messages from the interpreter. For an example, see"}],
              0,false},
             {text,
              [18,42,100,98,103,95,119,120,95,116,114,97,99,101,46,101,114,
               108,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"1## ib(Module, Line) -> ok | {error, break_exists}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [20,67,114,101,97,116,101,32,97,32,98,114,101,97,107,112,111,105,
             110,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
        0,false}],
      0,false},
     {sep,[{text,[1,42]},{sep,[{text,"\fLine = int()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [23,67,114,101,97,116,101,115,32,97,32,98,114,101,97,107,112,
                 111,105,110,116,32,97,116]}],
              0,false},
             {text,[6,42,76,105,110,101,42]},
             {sep,[{text,[2,105,110]}],0,false},
             {text,"\b*Module*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "?## ib(Module, Name, Arity) -> ok | {error, function_not_found}\n"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"-Create breakpoints in the specified function."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [22,77,111,100,117,108,101,32,61,32,78,97,109,101,32,61,32,97,116,
           111,109,40,41]}],
        0,false}],
      0,false},
     {sep,[{text,[1,42]},{sep,[{text,"\rArity = int()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ACreates breakpoints at the first line of every clause of function"}],
              0,false},
             {text,
              [19,42,77,111,100,117,108,101,58,78,97,109,101,47,65,114,105,
               116,121,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\r## ir() -> ok"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [23,68,101,108,101,116,101,32,97,108,108,32,98,114,101,97,107,112,
             111,105,110,116,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [24,68,101,108,101,116,101,115,32,97,108,108,32,98,114,101,97,
               107,112,111,105,110,116,115,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [19,35,35,32,105,114,40,77,111,100,117,108,101,41,32,45,62,32,111,
         107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"#Delete all breakpoints in a module."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [26,68,101,108,101,116,101,115,32,97,108,108,32,98,114,101,97,
                 107,112,111,105,110,116,115,32,105,110]}],
              0,false},
             {text,"\b*Module*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [25,35,35,32,105,114,40,77,111,100,117,108,101,44,32,76,105,110,101,
         41,32,45,62,32,111,107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [20,68,101,108,101,116,101,32,97,32,98,114,101,97,107,112,111,105,
             110,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
        0,false}],
      0,false},
     {sep,[{text,[1,42]},{sep,[{text,"\fLine = int()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [25,68,101,108,101,116,101,115,32,116,104,101,32,98,114,101,
                 97,107,112,111,105,110,116,32,97,116]}],
              0,false},
             {text,[6,42,76,105,110,101,42]},
             {sep,[{text,[2,105,110]}],0,false},
             {text,"\b*Module*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "?## ir(Module, Name, Arity) -> ok | {error, function_not_found}\n"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"/Delete breakpoints from the specified function."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [22,77,111,100,117,108,101,32,61,32,78,97,109,101,32,61,32,97,116,
           111,109,40,41]}],
        0,false}],
      0,false},
     {sep,[{text,[1,42]},{sep,[{text,"\rArity = int()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "EDeletes the breakpoints at the first line of every clause of function"}],
              0,false},
             {text,
              [19,42,77,111,100,117,108,101,58,78,97,109,101,47,65,114,105,
               116,121,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [26,35,35,32,105,98,100,40,77,111,100,117,108,101,44,32,76,105,110,
         101,41,32,45,62,32,111,107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,[{sep,[{text,"\eMake a breakpoint inactive."}],0,false}],0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
        0,false}],
      0,false},
     {sep,[{text,[1,42]},{sep,[{text,"\fLine = int()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [23,77,97,107,101,115,32,116,104,101,32,98,114,101,97,107,112,
                 111,105,110,116,32,97,116]}],
              0,false},
             {text,[6,42,76,105,110,101,42]},
             {sep,[{text,[2,105,110]}],0,false},
             {text,"\b*Module*"},
             {sep,[{text,"\tinactive."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [26,35,35,32,105,98,101,40,77,111,100,117,108,101,44,32,76,105,110,
         101,41,32,45,62,32,111,107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [25,77,97,107,101,32,97,32,98,114,101,97,107,112,111,105,110,116,
             32,97,99,116,105,118,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
        0,false}],
      0,false},
     {sep,[{text,[1,42]},{sep,[{text,"\fLine = int()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [23,77,97,107,101,115,32,116,104,101,32,98,114,101,97,107,112,
                 111,105,110,116,32,97,116]}],
              0,false},
             {text,[6,42,76,105,110,101,42]},
             {sep,[{text,[2,105,110]}],0,false},
             {text,"\b*Module*"},
             {sep,[{text,[7,97,99,116,105,118,101,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\"## iba(Module, Line, Action) -> ok"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"'Set the trigger action of a breakpoint."}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[15,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
         0,false}],
       0,false},
      {sep,[{text,[1,42]},{sep,[{text,"\fLine = int()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"\"Action = enable | disable | delete"}],0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,",Sets the trigger action of the breakpoint at"}],
              0,false},
             {text,[6,42,76,105,110,101,42]},
             {sep,[{text,[2,105,110]}],0,false},
             {text,"\b*Module*"},
             {sep,[{text,[2,116,111]}],0,false},
             {text,"\b*Action*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"$## ibc(Module, Line, Function) -> ok"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,")Set the conditional test of a breakpoint."}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[15,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
          0,false}],
        0,false},
       {sep,[{text,[1,42]},{sep,[{text,"\fLine = int()"}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [24,70,117,110,99,116,105,111,110,32,61,32,123,77,111,100,117,108,
            101,44,78,97,109,101,125]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,194,160,78,97,109,101,32,61,32,97,116,111,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,".Sets the conditional test of the breakpoint at"}],
              0,false},
             {text,[6,42,76,105,110,101,42]},
             {sep,[{text,[2,105,110]}],0,false},
             {text,"\b*Module*"},
             {sep,[{text,[2,116,111]}],0,false},
             {text,"\n*Function*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,",The conditional test is performed by calling"}],
              0,false},
             {text,
              [23,42,77,111,100,117,108,101,58,78,97,109,101,40,66,105,110,
               100,105,110,103,115,41,42]},
             {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
             {text,"\n*Bindings*"},
             {sep,
              [{text,
                ":is the current variable bindings. The function must return"}],
              0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"\n(break) or"}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,"3(do not break). To retrieve the value of a variable"}],
              0,false},
             {text,[5,42,86,97,114,42]},
             {sep,[{text,[5,44,32,117,115,101]}],0,false},
             {text,"5[int:get_binding(Var, Bindings)](./int#get_binding/2)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,[14,35,35,32,105,112,98,40,41,32,45,62,32,111,107]},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,80,114,105,110,116,32,97,108,108,32,101,120,105,115,116,105,
             110,103,32,98,114,101,97,107,112,111,105,110,116,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,[{text," Prints all existing breakpoints."}],0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [20,35,35,32,105,112,98,40,77,111,100,117,108,101,41,32,45,62,32,111,
         107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"+Print all existing breakpoints in a module."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,77,111,100,117,108,101,32,61,32,97,116,111,109,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\"Prints all existing breakpoints in"}],0,false},
             {text,"\b*Module*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,[17,35,35,32,105,118,40,41,32,45,62,32,97,116,111,109,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"5Return the current version number of the interpreter."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "nReturns the current version number of the interpreter. Same as the version number of the Debugger application."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,[15,35,35,32,104,101,108,112,40,41,32,45,62,32,111,107]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [16,80,114,105,110,116,32,104,101,108,112,32,116,101,120,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [17,80,114,105,110,116,115,32,104,101,108,112,32,116,101,120,
               116,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## See Also"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{sep,[{sep,[{text,"\n[int](int)"}],0,false}],0,true},null},
     null}}],
  0,false}}
