{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,[6,35,32,108,101,101,120]},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,[6,35,32,108,101,101,120]},null},null}}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,[{text,"%Lexical analyzer generator for Erlang"}],0,false}],
            0,true},
           null},
          null}}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "YA regular expression based lexical analyzer generator for Erlang, similar to lex or flex."}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        "fThe Leex module should be considered experimental as it will be subject to changes in future releases."}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,"\r## DATA TYPES"},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "Z\nErrorInfo = {ErrorLine,module(),error_descriptor()}\nErrorLine = integer()\nToken = tuple()"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\v# Functions"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [28,35,35,32,102,105,108,101,40,70,105,108,101,78,97,109,101,41,32,
            45,62,32,76,101,101,120,82,101,116]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"%## file(FileName, Options) -> LeexRet"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,[{text,"\eGenerate a lexical analyzer"}],0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    [21,70,105,108,101,78,97,109,101,32,61,32,102,105,108,101,
                     110,97,109,101,40,41]}],
                  0,false}],
                0,false},
               {sep,
                [{text,[1,42]},
                 {sep,[{text,"\eOptions = Option | [Option]"}],0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   [25,79,112,116,105,111,110,32,61,194,160,45,194,160,115,
                    101,101,32,98,101,108,111,119,194,160,45]}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "]LeexRet = {ok, Scannerfile} | {ok, Scannerfile, Warnings} | error | {error, Errors, Warnings}"}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [24,83,99,97,110,110,101,114,102,105,108,101,32,61,32,102,
                  105,108,101,110,97,109,101,40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,"/Warnings = Errors = [{filename(), [ErrorInfo]}]"}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,")ErrorInfo = {ErrorLine, module(), Reason}"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [21,69,114,114,111,114,76,105,110,101,32,61,32,105,110,116,101,
               103,101,114,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,",Reason =Â -Â formatable by format_error/1Â -"}],
           0,false}],
         0,false}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "dGenerates a lexical analyzer from the definition in the input file. The input file has the extension"}],
                 0,false},
                {text,[6,42,46,120,114,108,42]},
                {sep,
                 [{text,
                   "h. This is added to the filename if it is not given. The resulting module is the Xrl filename without the"}],
                 0,false},
                {text,[6,42,46,120,114,108,42]},
                {sep,[{text,"\nextension."}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [24,84,104,101,32,99,117,114,114,101,110,116,32,111,112,116,
                  105,111,110,115,32,97,114,101,58]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,
           {text,[4,60,100,108,62]},
           {nest,4,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,
                            {above,
                             {above,
                              {above,
                               {above,
                                {above,
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{text,[4,60,100,116,62]},
                                      {sep,[{text,"\tdfa_graph"}],0,false},
                                      {text,[5,60,47,100,116,62]}],
                                     0,true},
                                    null},
                                   null}},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{text,[4,60,100,100,62]},
                                      {above,
                                       {above,{above,{text,[0]},null},null},
                                       {above,
                                        {above,
                                         {sep,
                                          [{sep,
                                            [{sep,
                                              [{text,"\vGenerates a"}],
                                              0,false},
                                             {text,[4,46,100,111,116]},
                                             {sep,
                                              [{text,
                                                "[file which contains a description of the DFA in a format which can be viewed with Graphviz,"}],
                                              0,false},
                                             {text,
                                              [16,119,119,119,46,103,114,97,
                                               112,104,118,105,122,46,99,111,
                                               109]},
                                             {sep,[{text,[1,46]}],0,false}],
                                            0,false}],
                                          0,true},
                                         null},
                                        null}},
                                      {text,[5,60,47,100,100,62]}],
                                     0,true},
                                    null},
                                   null}}},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{text,[4,60,100,116,62]},
                                     {sep,
                                      [{text,
                                        [25,123,105,110,99,108,117,100,101,
                                         102,105,108,101,44,73,110,99,108,117,
                                         100,101,102,105,108,101,125]}],
                                      0,false},
                                     {text,[5,60,47,100,116,62]}],
                                    0,true},
                                   null},
                                  null}}},
                               {above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{text,[4,60,100,100,62]},
                                    {above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{sep,
                                          [{sep,
                                            [{text,
                                              ">Uses a specific or customised prologue file instead of default"}],
                                            0,false},
                                           {text,
                                            "\"lib/parsetools/include/leexinc.hrl"},
                                           {sep,
                                            [{text,
                                              [28,119,104,105,99,104,32,105,
                                               115,32,111,116,104,101,114,119,
                                               105,115,101,32,105,110,99,108,
                                               117,100,101,100,46]}],
                                            0,false}],
                                          0,false}],
                                        0,true},
                                       null},
                                      null}},
                                    {text,[5,60,47,100,100,62]}],
                                   0,true},
                                  null},
                                 null}}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,116,62]},
                                   {sep,
                                    [{text,
                                      [23,123,114,101,112,111,114,116,95,101,
                                       114,114,111,114,115,44,32,98,111,111,
                                       108,40,41,125]}],
                                    0,false},
                                   {text,[5,60,47,100,116,62]}],
                                  0,true},
                                 null},
                                null}}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{text,[4,60,100,100,62]},
                                  {above,
                                   {above,{above,{text,[0]},null},null},
                                   {above,
                                    {above,
                                     {sep,
                                      [{sep,
                                        [{sep,
                                          [{text,
                                            "5Causes errors to be printed as they occur. Default is"}],
                                          0,false},
                                         {text,[4,116,114,117,101]},
                                         {sep,[{text,[1,46]}],0,false}],
                                        0,false}],
                                      0,true},
                                     null},
                                    null}},
                                  {text,[5,60,47,100,100,62]}],
                                 0,true},
                                null},
                               null}}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,116,62]},
                                 {sep,
                                  [{text,
                                    [25,123,114,101,112,111,114,116,95,119,97,
                                     114,110,105,110,103,115,44,32,98,111,111,
                                     108,40,41,125]}],
                                  0,false},
                                 {text,[5,60,47,100,116,62]}],
                                0,true},
                               null},
                              null}}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{text,[4,60,100,100,62]},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{sep,
                                      [{sep,
                                        [{text,
                                          "7Causes warnings to be printed as they occur. Default is"}],
                                        0,false},
                                       {text,[4,116,114,117,101]},
                                       {sep,[{text,[1,46]}],0,false}],
                                      0,false}],
                                    0,true},
                                   null},
                                  null}},
                                {text,[5,60,47,100,100,62]}],
                               0,true},
                              null},
                             null}}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,116,62]},
                               {sep,
                                [{text,
                                  [18,119,97,114,110,105,110,103,115,95,97,
                                   115,95,101,114,114,111,114,115]}],
                                0,false},
                               {text,[5,60,47,100,116,62]}],
                              0,true},
                             null},
                            null}}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,100,62]},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{text,
                                      "(Causes warnings to be treated as errors."}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {text,[5,60,47,100,100,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,
                              [{text,
                                [16,123,114,101,112,111,114,116,44,32,98,111,
                                 111,108,40,41,125]}],
                              0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,
                                  [{sep,
                                    [{text,
                                      [29,84,104,105,115,32,105,115,32,97,32,
                                       115,104,111,114,116,32,102,111,114,109,
                                       32,102,111,114,32,98,111,116,104]}],
                                    0,false},
                                   {text,"\rreport_errors"},
                                   {sep,[{text,[3,97,110,100]}],0,false},
                                   {text,
                                    [15,114,101,112,111,114,116,95,119,97,114,
                                     110,105,110,103,115]},
                                   {sep,[{text,[1,46]}],0,false}],
                                  0,false}],
                                0,true},
                               null},
                              null}},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,
                            [{text,
                              [23,123,114,101,116,117,114,110,95,101,114,114,
                               111,114,115,44,32,98,111,111,108,40,41,125]}],
                            0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    [20,73,102,32,116,104,105,115,32,102,108,
                                     97,103,32,105,115,32,115,101,116,44]}],
                                  0,false},
                                 {text,
                                  [25,123,101,114,114,111,114,44,32,69,114,
                                   114,111,114,115,44,32,87,97,114,110,105,
                                   110,103,115,125]},
                                 {sep,
                                  [{text,
                                    "-is returned when there are errors. Default is"}],
                                  0,false},
                                 {text,[5,102,97,108,115,101]},
                                 {sep,[{text,[1,46]}],0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,
                          [{text,
                            [25,123,114,101,116,117,114,110,95,119,97,114,110,
                             105,110,103,115,44,32,98,111,111,108,40,41,125]}],
                          0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{sep,
                                [{text,
                                  ".If this flag is set, an extra field containing"}],
                                0,false},
                               {text,"\bWarnings"},
                               {sep,
                                [{text,
                                  "7is added to the tuple returned upon success. Default is"}],
                                0,false},
                               {text,[5,102,97,108,115,101]},
                               {sep,[{text,[1,46]}],0,false}],
                              0,false}],
                            0,true},
                           null},
                          null}},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,
                        [{text,
                          [16,123,114,101,116,117,114,110,44,32,98,111,111,
                           108,40,41,125]}],
                        0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{sep,
                              [{text,
                                [29,84,104,105,115,32,105,115,32,97,32,115,
                                 104,111,114,116,32,102,111,114,109,32,102,
                                 111,114,32,98,111,116,104]}],
                              0,false},
                             {text,"\rreturn_errors"},
                             {sep,[{text,[3,97,110,100]}],0,false},
                             {text,
                              [15,114,101,116,117,114,110,95,119,97,114,110,
                               105,110,103,115]},
                             {sep,[{text,[1,46]}],0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{text,
                        [26,123,115,99,97,110,110,101,114,102,105,108,101,44,
                         32,83,99,97,110,110,101,114,102,105,108,101,125]}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,"\vScannerfile"},
                           {sep,
                            [{text,
                              "bis the name of the file that will contain the Erlang scanner code that is generated. The default ("}],
                            0,false},
                           {text,[2,34,34]},
                           {sep,
                            [{text,
                              [25,41,32,105,115,32,116,111,32,97,100,100,32,
                               116,104,101,32,101,120,116,101,110,115,105,111,
                               110]}],
                            0,false},
                           {text,[4,46,101,114,108]},
                           {sep,[{text,[2,116,111]}],0,false},
                           {text,"\bFileName"},
                           {sep,
                            [{text,
                              [15,115,116,114,105,112,112,101,100,32,111,102,
                               32,116,104,101]}],
                            0,false},
                           {text,[4,46,120,114,108]},
                           {sep,[{text,"\nextension."}],0,false}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,
                    [{text,
                      [17,123,118,101,114,98,111,115,101,44,32,98,111,111,108,
                       40,41,125]}],
                    0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "SOutputs information from parsing the input file and generating the internal tables."}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}}}},
          {text,[5,60,47,100,108,62]}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"(Any of the Boolean options can be set to"}],
                 0,false},
                {text,[6,42,116,114,117,101,42]},
                {sep,
                 [{text,"/by stating the name of the option. For example,"}],
                 0,false},
                {text,"\t*verbose*"},
                {sep,
                 [{text,
                   [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,
                    116,111]}],
                 0,false},
                {text,
                 [17,42,123,118,101,114,98,111,115,101,44,32,116,114,117,101,
                  125,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\eLeex will add the extension"}],0,false},
                {text,[6,42,46,104,114,108,42]},
                {sep,[{text,[6,116,111,32,116,104,101]}],0,false},
                {text,"\r*Includefile*"},
                {sep,
                 [{text,
                   [22,110,97,109,101,32,97,110,100,32,116,104,101,32,101,120,
                    116,101,110,115,105,111,110]}],
                 0,false},
                {text,[6,42,46,101,114,108,42]},
                {sep,[{text,[6,116,111,32,116,104,101]}],0,false},
                {text,"\r*Scannerfile*"},
                {sep,
                 [{text,",name, unless the extension is already there."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"### format_error(ErrorInfo) -> Chars"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"2Return an English description of a an error tuple."}],
             0,false}],
           0,true},
          null},
         null}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [24,67,104,97,114,115,32,61,32,91,99,104,97,114,40,41,32,124,32,
             67,104,97,114,115,93]}],
          0,false}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"*Returns a string which describes the error"}],
                 0,false},
                {text,"\v*ErrorInfo*"},
                {sep,
                 [{text,
                   "8returned when there is an error in a regular expression."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [28,35,35,32,71,69,78,69,82,65,84,69,68,32,83,67,65,78,78,69,82,32,
           69,88,80,79,82,84,83]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              ">The following functions are exported by the generated scanner."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\v# Functions"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [30,35,35,32,115,116,114,105,110,103,40,83,116,114,105,110,103,41,32,
          45,62,32,83,116,114,105,110,103,82,101,116]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,")## string(String, StartLine) -> StringRet"},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [17,71,101,110,101,114,97,116,101,100,32,98,121,32,76,101,101,
              120]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [17,83,116,114,105,110,103,32,61,32,115,116,114,105,110,103,40,
              41]}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"+StringRet = {ok,Tokens,EndLine} | ErrorInfo"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [16,84,111,107,101,110,115,32,61,32,91,84,111,107,101,110,93]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [31,69,110,100,76,105,110,101,32,61,32,83,116,97,114,116,76,105,
            110,101,32,61,32,105,110,116,101,103,101,114,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[5,83,99,97,110,115]}],0,false},
              {text,"\b*String*"},
              {sep,
               [{text,".and returns all the tokens in it, or an error."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
            {sep,
             [{text,[4,32,32,32,32]},
              {sep,
               [{sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            ".It is an error if not all of the characters in"}],
                          0,false},
                         {text,"\b*String*"},
                         {sep,[{text,"\rare consumed."}],0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false}],
               0,true}],
             0,false}},
           {text,[0]}},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         "B## token(Cont, Chars) -> {more,Cont1} | {done,TokenRet,RestChars}\n"},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         "[## token(Cont, Chars, StartLine) -> {more,Cont1} \n             | {done,TokenRet,RestChars}\n"},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [17,71,101,110,101,114,97,116,101,100,32,98,121,32,76,101,101,
              120]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [17,67,111,110,116,32,61,32,91,93,32,124,32,67,111,110,116,49]}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[15,67,111,110,116,49,32,61,32,116,117,112,108,101,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,[{text,"\"Chars = RestChars = string() | eof"}],0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            "<TokenRet = {ok, Token, EndLine} | {eof, EndLine} | ErrorInfo"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [31,83,116,97,114,116,76,105,110,101,32,61,32,69,110,100,76,105,
            110,101,32,61,32,105,110,116,101,103,101,114,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "8This is a re-entrant call to try and scan one token from"}],
               0,false},
              {text,[7,42,67,104,97,114,115,42]},
              {sep,[{text,"#. If there are enough characters in"}],0,false},
              {text,[7,42,67,104,97,114,115,42]},
              {sep,
               [{text,
                 "Ito either scan a token or detect an error then this will be returned with"}],
               0,false},
              {text,"\f*{done,...}*"},
              {sep,[{text,"\v. Otherwise"}],0,false},
              {text,"\r*{cont,Cont}*"},
              {sep,
               [{text,
                 [22,119,105,108,108,32,98,101,32,114,101,116,117,114,110,101,
                  100,32,119,104,101,114,101]}],
               0,false},
              {text,[6,42,67,111,110,116,42]},
              {sep,[{text,"\eis used in the next call to"}],0,false},
              {text,"\t*token()*"},
              {sep,
               [{text,
                 "`with more characters to try an scan the token. This is continued until a token has been scanned."}],
               0,false},
              {text,[6,42,67,111,110,116,42]},
              {sep,[{text,"\fis initially"}],0,false},
              {text,[4,42,91,93,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [145,73,116,32,105,115,32,110,111,116,32,100,101,115,105,103,
                110,101,100,32,116,111,32,98,101,32,99,97,108,108,101,100,32,
                100,105,114,101,99,116,108,121,32,98,121,32,97,110,32,97,112,
                112,108,105,99,97,116,105,111,110,32,98,117,116,32,117,115,
                101,100,32,116,104,114,111,117,103,104,32,116,104,101,32,105,
                47,111,32,115,121,115,116,101,109,32,119,104,101,114,101,32,
                105,116,32,99,97,110,32,116,121,112,105,99,97,108,108,121,32,
                98,101,32,99,97,108,108,101,100,32,105,110,32,97,110,32,97,
                112,112,108,105,99,97,116,105,111,110,32,98,121,58]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "I\nio:request(InFile, {get_until,Prompt,Module,token,[Line]})\n  -> TokenRet"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         "D## tokens(Cont, Chars) -> {more,Cont1} | {done,TokensRet,RestChars}\n"},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         "_## tokens(Cont, Chars, StartLine) -> \n               {more,Cont1} | {done,TokensRet,RestChars}\n"},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [17,71,101,110,101,114,97,116,101,100,32,98,121,32,76,101,101,
              120]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [17,67,111,110,116,32,61,32,91,93,32,124,32,67,111,110,116,
                49]}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [15,67,111,110,116,49,32,61,32,116,117,112,108,101,40,41]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,[{text,"\"Chars = RestChars = string() | eof"}],0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             ">TokensRet = {ok, Tokens, EndLine} | {eof, EndLine} | ErrorInfo"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [16,84,111,107,101,110,115,32,61,32,91,84,111,107,101,110,93]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [31,83,116,97,114,116,76,105,110,101,32,61,32,69,110,100,76,105,
            110,101,32,61,32,105,110,116,101,103,101,114,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "5This is a re-entrant call to try and scan tokens from"}],
               0,false},
              {text,[7,42,67,104,97,114,115,42]},
              {sep,[{text,"#. If there are enough characters in"}],0,false},
              {text,[7,42,67,104,97,114,115,42]},
              {sep,
               [{text,
                 "Hto either scan tokens or detect an error then this will be returned with"}],
               0,false},
              {text,"\f*{done,...}*"},
              {sep,[{text,"\v. Otherwise"}],0,false},
              {text,"\r*{cont,Cont}*"},
              {sep,
               [{text,
                 [22,119,105,108,108,32,98,101,32,114,101,116,117,114,110,101,
                  100,32,119,104,101,114,101]}],
               0,false},
              {text,[6,42,67,111,110,116,42]},
              {sep,[{text,"\eis used in the next call to"}],0,false},
              {text,"\n*tokens()*"},
              {sep,
               [{text,
                 "ewith more characters to try an scan the tokens. This is continued until all tokens have been scanned."}],
               0,false},
              {text,[6,42,67,111,110,116,42]},
              {sep,[{text,"\fis initially"}],0,false},
              {text,[4,42,91,93,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\eThis functions differs from"}],0,false},
              {text,[7,42,116,111,107,101,110,42]},
              {sep,
               [{text,
                 "=in that it will continue to scan tokens upto and including an"}],
               0,false},
              {text,
               [19,42,123,101,110,100,95,116,111,107,101,110,44,84,111,107,
                101,110,125,42]},
              {sep,
               [{text,
                 "§has been scanned (see next section). It will then return all the tokens. This is typically used for scanning grammars like Erlang where there is an explicit end token,"}],
               0,false},
              {text,[5,42,39,46,39,42]},
              {sep,
               [{text,
                 "¦. If no end token is found then the whole file will be scanned and returned. If an error occurs then all tokens upto and including the next end token will be skipped."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [145,73,116,32,105,115,32,110,111,116,32,100,101,115,105,103,
                110,101,100,32,116,111,32,98,101,32,99,97,108,108,101,100,32,
                100,105,114,101,99,116,108,121,32,98,121,32,97,110,32,97,112,
                112,108,105,99,97,116,105,111,110,32,98,117,116,32,117,115,
                101,100,32,116,104,114,111,117,103,104,32,116,104,101,32,105,
                47,111,32,115,121,115,116,101,109,32,119,104,101,114,101,32,
                105,116,32,99,97,110,32,116,121,112,105,99,97,108,108,121,32,
                98,101,32,99,97,108,108,101,100,32,105,110,32,97,110,32,97,
                112,112,108,105,99,97,116,105,111,110,32,98,121,58]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "K\nio:request(InFile, {get_until,Prompt,Module,tokens,[Line]})\n  -> TokensRet"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [20,35,35,32,73,110,112,117,116,32,70,105,108,101,32,70,111,114,109,
         97,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"%Erlang style comments starting with a"}],0,false},
           {text,[3,42,37,42]},
           {sep,
            [{text,
              "Iare allowed in scanner files. A definition file has the following format:"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "`\n<Header>\n\nDefinitions.\n\n<Macro Definitions>\n\nRules.\n\n<Token Rules>\n\nErlang code.\n\n<Erlang code>"}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "çThe \"Definitions.\", \"Rules.\" and \"Erlang code.\" headings are mandatory and must occur at the beginning of a source line. The <Header>, <Macro Definitions> and <Erlang code> sections may be empty but there must be at least one rule."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Macro definitions have the following format:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,{text,[3,96,96,96]},{sep,[{text,"\r\nNAME = VALUE"}],0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [31,97,110,100,32,116,104,101,114,101,32,109,117,115,116,32,98,
               101,32,115,112,97,99,101,115,32,97,114,111,117,110,100]}],
            0,false},
           {text,[3,42,61,42]},
           {sep,
            [{text,
              "C. Macros can be used in the regular expressions of rules by writing"}],
            0,false},
           {text,"\b*{NAME}*"},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
         {sep,
          [{text,[4,32,32,32,32]},
           {sep,
            [{sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [144,87,104,101,110,32,109,97,99,114,111,115,32,97,114,
                        101,32,101,120,112,97,110,100,101,100,32,105,110,32,
                        101,120,112,114,101,115,115,105,111,110,115,32,116,
                        104,101,32,109,97,99,114,111,32,99,97,108,108,115,32,
                        97,114,101,32,114,101,112,108,97,99,101,100,32,98,121,
                        32,116,104,101,32,109,97,99,114,111,32,118,97,108,117,
                        101,32,119,105,116,104,111,117,116,32,97,110,121,32,
                        102,111,114,109,32,111,102,32,113,117,111,116,105,110,
                        103,32,111,114,32,101,110,99,108,111,115,105,110,103,
                        32,105,110,32,112,97,114,101,110,116,104,101,115,101,
                        115,46]}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,true}],
          0,false}},
        {text,[0]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Rules have the following format:"}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [26,10,60,82,101,103,101,120,112,62,32,58,32,60,69,114,108,97,110,
             103,32,99,111,100,101,62,46]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "NThe <Regexp> must occur at the start of a line and not include any blanks; use"}],
            0,false},
           {text,[4,42,92,116,42]},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,[4,42,92,115,42]},
           {sep,
            [{text,
              "Ato include TAB and SPACE characters in the regular expression. If"}],
            0,false},
           {sep,[{text,"'<Regexp> matches then the corresponding"}],0,false},
           {sep,
            [{text,
              "v<Erlang code> is evaluated to generate a token. With the Erlang code the following predefined variables are available:"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {text,[4,60,100,108,62]},
      {nest,4,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[{text,"\nTokenChars"}],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         ".A list of the characters in the matched token."}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,"\bTokenLen"}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       ".The number of characters in the matched token."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,116,62]},
              {sep,[{text,"\tTokenLine"}],0,false},
              {text,[5,60,47,100,116,62]}],
             0,true},
            null},
           null}}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{text,[4,60,100,100,62]},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,")The line number where the token occurred."}],
                   0,false}],
                 0,true},
                null},
               null}},
             {text,[5,60,47,100,100,62]}],
            0,true},
           null},
          null}}}}},
     {text,[5,60,47,100,108,62]}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,84,104,101,32,99,111,100,101,32,109,117,115,116,32,114,101,
             116,117,114,110,58]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {text,[4,60,100,108,62]},
      {nest,4,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,"\r{token,Token}"}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,[{text,[6,82,101,116,117,114,110]}],0,false},
                          {text,[5,84,111,107,101,110]},
                          {sep,
                           [{text,
                             [14,116,111,32,116,104,101,32,99,97,108,108,101,
                              114,46]}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,
                   [{text,
                     [17,123,101,110,100,95,116,111,107,101,110,44,84,111,107,
                      101,110,125]}],
                   0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,[{text,[6,82,101,116,117,114,110]}],0,false},
                        {text,[5,84,111,107,101,110]},
                        {sep,
                         [{text,"#and is last token in a tokens call."}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,"\nskip_token"}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,[{text,"\eSkip this token completely."}],0,false}],
                   0,true},
                  null},
                 null}},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,116,62]},
              {sep,
               [{text,
                 [17,123,101,114,114,111,114,44,69,114,114,83,116,114,105,110,
                  103,125]}],
               0,false},
              {text,[5,60,47,100,116,62]}],
             0,true},
            null},
           null}}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{text,[4,60,100,100,62]},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [22,65,110,32,101,114,114,111,114,32,105,110,32,116,
                        104,101,32,116,111,107,101,110,44]}],
                     0,false},
                    {text,"\tErrString"},
                    {sep,
                     [{text,"!is a string describing the error."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {text,[5,60,47,100,100,62]}],
            0,true},
           null},
          null}}}}},
     {text,[5,60,47,100,108,62]}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "aIt is also possible to push back characters into the input characters with the following returns:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {text,
         [28,42,123,116,111,107,101,110,44,84,111,107,101,110,44,80,117,115,
          104,66,97,99,107,76,105,115,116,125,42]}],
       0,false},
      {sep,
       [{text,[1,42]},{text," *{end_token,Token,PushBackList}*"}],
       0,false}},
     {sep,[{text,[1,42]},{text,"\e*{skip_token,PushBackList}*"}],0,false}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "HThese have the same meanings as the normal returns but the characters in"}],
            0,false},
           {text,[14,42,80,117,115,104,66,97,99,107,76,105,115,116,42]},
           {sep,
            [{text,
              "¢will be prepended to the input characters and scanned for the next token. Note that pushing back a newline will mean the line numbering will no longer be correct."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
         {sep,
          [{text,[4,32,32,32,32]},
           {sep,
            [{sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "XPushing back characters gives you unexpected possibilities to cause the scanner to loop!"}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,true}],
          0,false}},
        {text,[0]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [127,84,104,101,32,102,111,108,108,111,119,105,110,103,32,101,120,
             97,109,112,108,101,32,119,111,117,108,100,32,109,97,116,99,104,
             32,97,32,115,105,109,112,108,101,32,69,114,108,97,110,103,32,105,
             110,116,101,103,101,114,32,111,114,32,102,108,111,97,116,32,97,
             110,100,32,114,101,116,117,114,110,32,97,32,116,111,107,101,110,
             32,119,104,105,99,104,32,99,111,117,108,100,32,98,101,32,115,101,
             110,116,32,116,111,32,116,104,101,32,69,114,108,97,110,103,32,
             112,97,114,115,101,114,58]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "¦\nD = [0-9]\n\n{D}+ :\n  {token,{integer,TokenLine,list_to_integer(TokenChars)}}.\n\n{D}+\\.{D}+((E|e)(\\+|\\-)?{D}+)? :\n  {token,{float,TokenLine,list_to_float(TokenChars)}}."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [268,84,104,101,32,69,114,108,97,110,103,32,99,111,100,101,32,105,
             110,32,116,104,101,32,34,69,114,108,97,110,103,32,99,111,100,101,
             46,34,32,115,101,99,116,105,111,110,32,105,115,32,119,114,105,
             116,116,101,110,32,105,110,116,111,32,116,104,101,32,111,117,116,
             112,117,116,32,102,105,108,101,32,100,105,114,101,99,116,108,121,
             32,97,102,116,101,114,32,116,104,101,32,109,111,100,117,108,101,
             32,100,101,99,108,97,114,97,116,105,111,110,32,97,110,100,32,112,
             114,101,100,101,102,105,110,101,100,32,101,120,112,111,114,116,
             115,32,100,101,99,108,97,114,97,116,105,111,110,32,115,111,32,
             105,116,32,105,115,32,112,111,115,115,105,98,108,101,32,116,111,
             32,97,100,100,32,101,120,116,114,97,32,101,120,112,111,114,116,
             115,44,32,100,101,102,105,110,101,32,105,109,112,111,114,116,115,
             32,97,110,100,32,111,116,104,101,114,32,97,116,116,114,105,98,
             117,116,101,115,32,119,104,105,99,104,32,97,114,101,32,116,104,
             101,110,32,118,105,115,105,98,108,101,32,105,110,32,116,104,101,
             32,119,104,111,108,101,32,102,105,108,101,46]}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [22,35,35,32,82,101,103,117,108,97,114,32,69,120,112,114,101,115,115,
        105,111,110,115]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "DThe regular expressions allowed here is a subset of the set found in"}],
           0,false},
          {text,[7,42,101,103,114,101,112,42]},
          {sep,
           [{text,
             "ºand in the AWK programming language, as defined in the book, The AWK Programming Language, by A. V. Aho, B. W. Kernighan, P. J. Weinberger. They are composed of the following characters:"}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {text,[4,60,100,108,62]},
     {nest,4,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,
                            {above,
                             {above,
                              {above,
                               {above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{text,[4,60,100,116,62]},
                                    {sep,[{text,[1,99]}],0,false},
                                    {text,[5,60,47,100,116,62]}],
                                   0,true},
                                  null},
                                 null}},
                               {above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{text,[4,60,100,100,62]},
                                    {above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{sep,
                                          [{text,
                                            " Matches the non-metacharacter c."}],
                                          0,false}],
                                        0,true},
                                       null},
                                      null}},
                                    {text,[5,60,47,100,100,62]}],
                                   0,true},
                                  null},
                                 null}}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,116,62]},
                                   {sep,[{text,[2,92,99]}],0,false},
                                   {text,[5,60,47,100,116,62]}],
                                  0,true},
                                 null},
                                null}}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{text,[4,60,100,100,62]},
                                  {above,
                                   {above,{above,{text,[0]},null},null},
                                   {above,
                                    {above,
                                     {sep,
                                      [{sep,
                                        [{text,
                                          "3Matches the escape sequence or literal character c."}],
                                        0,false}],
                                      0,true},
                                     null},
                                    null}},
                                  {text,[5,60,47,100,100,62]}],
                                 0,true},
                                null},
                               null}}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,116,62]},
                                 {sep,[{text,[1,46]}],0,false},
                                 {text,[5,60,47,100,116,62]}],
                                0,true},
                               null},
                              null}}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{text,[4,60,100,100,62]},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{sep,
                                      [{text,
                                        [22,77,97,116,99,104,101,115,32,97,
                                         110,121,32,99,104,97,114,97,99,116,
                                         101,114,46]}],
                                      0,false}],
                                    0,true},
                                   null},
                                  null}},
                                {text,[5,60,47,100,100,62]}],
                               0,true},
                              null},
                             null}}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,116,62]},
                               {sep,[{text,[1,94]}],0,false},
                               {text,[5,60,47,100,116,62]}],
                              0,true},
                             null},
                            null}}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,100,62]},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{text,
                                      "\"Matches the beginning of a string."}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {text,[5,60,47,100,100,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,[{text,[1,36]}],0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,
                                  [{text,
                                    [28,77,97,116,99,104,101,115,32,116,104,
                                     101,32,101,110,100,32,111,102,32,97,32,
                                     115,116,114,105,110,103,46]}],
                                  0,false}],
                                0,true},
                               null},
                              null}},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,[{text,"\b[abc...]"}],0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    "4Character class, which matches any of the characters"}],
                                  0,false},
                                 {text,[6,97,98,99,46,46,46]},
                                 {sep,
                                  [{text,
                                    "G. Character ranges are specified by a pair of characters separated by a"}],
                                  0,false},
                                 {text,[1,45]},
                                 {sep,[{text,[1,46]}],0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,[{text,"\t[^abc...]"}],0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{sep,
                                [{text,
                                  ";Negated character class, which matches any character except"}],
                                0,false},
                               {text,[6,97,98,99,46,46,46]},
                               {sep,[{text,[1,46]}],0,false}],
                              0,false}],
                            0,true},
                           null},
                          null}},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,[{text,[7,114,49,32,124,32,114,50]}],0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{sep,
                              [{text,
                                [30,65,108,116,101,114,110,97,116,105,111,110,
                                 46,32,73,116,32,109,97,116,99,104,101,115,32,
                                 101,105,116,104,101,114]}],
                              0,false},
                             {text,[2,114,49]},
                             {sep,[{text,[2,111,114]}],0,false},
                             {text,[2,114,50]},
                             {sep,[{text,[1,46]}],0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,[{text,[4,114,49,114,50]}],0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{sep,
                            [{text,
                              [25,67,111,110,99,97,116,101,110,97,116,105,111,
                               110,46,32,73,116,32,109,97,116,99,104,101,
                               115]}],
                            0,false},
                           {text,[2,114,49]},
                           {sep,[{text,"\band then"}],0,false},
                           {text,[2,114,50]},
                           {sep,[{text,[1,46]}],0,false}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,[2,114,43]}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            [19,77,97,116,99,104,101,115,32,111,110,101,32,
                             111,114,32,109,111,114,101]}],
                          0,false},
                         {text,[2,114,115]},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[{text,[2,114,42]}],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          [20,77,97,116,99,104,101,115,32,122,101,114,111,32,
                           111,114,32,109,111,114,101]}],
                        0,false},
                       {text,[2,114,115]},
                       {sep,[{text,[1,46]}],0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[{text,[2,114,63]}],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [19,77,97,116,99,104,101,115,32,122,101,114,111,32,
                         111,114,32,111,110,101]}],
                      0,false},
                     {text,[2,114,115]},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{text,[4,60,100,116,62]},
             {sep,[{text,[3,40,114,41]}],0,false},
             {text,[5,60,47,100,116,62]}],
            0,true},
           null},
          null}}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,100,62]},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [20,71,114,111,117,112,105,110,103,46,32,73,116,32,109,
                       97,116,99,104,101,115]}],
                    0,false},
                   {text,[1,114]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {text,[5,60,47,100,100,62]}],
           0,true},
          null},
         null}}}}},
    {text,[5,60,47,100,108,62]}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "@The escape sequences allowed are the same as for Erlang strings:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {text,[4,60,100,108,62]},
     {nest,4,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,
                            {above,
                             {above,
                              {above,
                               {above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{text,[4,60,100,116,62]},
                                    {sep,[{text,[2,92,98]}],0,false},
                                    {text,[5,60,47,100,116,62]}],
                                   0,true},
                                  null},
                                 null}},
                               {above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{text,[4,60,100,100,62]},
                                    {above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{sep,
                                          [{text,"\nBackspace."}],
                                          0,false}],
                                        0,true},
                                       null},
                                      null}},
                                    {text,[5,60,47,100,100,62]}],
                                   0,true},
                                  null},
                                 null}}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,116,62]},
                                   {sep,[{text,[2,92,102]}],0,false},
                                   {text,[5,60,47,100,116,62]}],
                                  0,true},
                                 null},
                                null}}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{text,[4,60,100,100,62]},
                                  {above,
                                   {above,{above,{text,[0]},null},null},
                                   {above,
                                    {above,
                                     {sep,
                                      [{sep,[{text,"\nForm feed."}],0,false}],
                                      0,true},
                                     null},
                                    null}},
                                  {text,[5,60,47,100,100,62]}],
                                 0,true},
                                null},
                               null}}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,116,62]},
                                 {sep,[{text,[2,92,110]}],0,false},
                                 {text,[5,60,47,100,116,62]}],
                                0,true},
                               null},
                              null}}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{text,[4,60,100,100,62]},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{sep,
                                      [{text,
                                        [20,78,101,119,108,105,110,101,32,40,
                                         108,105,110,101,32,102,101,101,100,
                                         41,46]}],
                                      0,false}],
                                    0,true},
                                   null},
                                  null}},
                                {text,[5,60,47,100,100,62]}],
                               0,true},
                              null},
                             null}}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,116,62]},
                               {sep,[{text,[2,92,114]}],0,false},
                               {text,[5,60,47,100,116,62]}],
                              0,true},
                             null},
                            null}}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,100,62]},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{text,
                                      [16,67,97,114,114,105,97,103,101,32,114,
                                       101,116,117,114,110,46]}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {text,[5,60,47,100,100,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,[{text,[2,92,116]}],0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,[{text,[4,84,97,98,46]}],0,false}],
                                0,true},
                               null},
                              null}},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,[{text,[2,92,101]}],0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,[7,69,115,99,97,112,101,46]}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,[{text,[2,92,118]}],0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,[{text,"\rVertical tab."}],0,false}],
                            0,true},
                           null},
                          null}},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,[{text,[2,92,115]}],0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,[{text,[6,83,112,97,99,101,46]}],0,false}],
                          0,true},
                         null},
                        null}},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,[{text,[2,92,100]}],0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,[{text,[7,68,101,108,101,116,101,46]}],0,false}],
                        0,true},
                       null},
                      null}},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,[4,92,100,100,100]}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            [15,84,104,101,32,111,99,116,97,108,32,118,97,108,
                             117,101]}],
                          0,false},
                         {text,[3,100,100,100]},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[{text,[4,92,120,104,104]}],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          [21,84,104,101,32,104,101,120,97,100,101,99,105,109,
                           97,108,32,118,97,108,117,101]}],
                        0,false},
                       {text,[2,104,104]},
                       {sep,[{text,[1,46]}],0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[{text,"\b\\x{h...}"}],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [21,84,104,101,32,104,101,120,97,100,101,99,105,109,
                         97,108,32,118,97,108,117,101]}],
                      0,false},
                     {text,[4,104,46,46,46]},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{text,[4,60,100,116,62]},
             {sep,[{text,[2,92,99]}],0,false},
             {text,[5,60,47,100,116,62]}],
            0,true},
           null},
          null}}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,100,62]},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,"*Any other character literally, for example"}],
                    0,false},
                   {text,[2,92,92]},
                   {sep,
                    [{text,
                      [14,102,111,114,32,98,97,99,107,115,108,97,115,104,44]}],
                    0,false},
                   {text,[2,92,34]},
                   {sep,[{text,[3,102,111,114]}],0,false},
                   {text,[1,34]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {text,[5,60,47,100,100,62]}],
           0,true},
          null},
         null}}}}},
    {text,[5,60,47,100,108,62]}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "MThe following examples define simplified versions of a few Erlang data types:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "l \nAtoms [a-z][0-9a-zA-Z_]*\n\nVariables [A-Z_][0-9a-zA-Z_]*\n\nFloats (\\+|-)?[0-9]+\\.[0-9]+((E|e)(\\+|-)?[0-9]+)?"}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
        {sep,
         [{text,[4,32,32,32,32]},
          {sep,
           [{sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,"#Anchoring a regular expression with"}],
                      0,false},
                     {text,[3,42,94,42]},
                     {sep,[{text,[3,97,110,100]}],0,false},
                     {text,[3,42,36,42]},
                     {sep,
                      [{text,
                        "Sis not implemented in the current version of Leex and just generates a parse error."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false}],
           0,true}],
         0,false}},
       {text,[0]}},
      null},
     null}}],
  0,false}}
