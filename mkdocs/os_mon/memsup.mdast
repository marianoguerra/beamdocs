{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\b# memsup"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\b# memsup"},null},null}}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,[{sep,[{text,"\eA Memory Supervisor Process"}],0,false}],0,true},
        null},
       null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"\b*memsup*"},
                  {sep,
                   [{text,
                     [133,105,115,32,97,32,112,114,111,99,101,115,115,32,119,
                      104,105,99,104,32,115,117,112,101,114,118,105,115,101,
                      115,32,116,104,101,32,109,101,109,111,114,121,32,117,
                      115,97,103,101,32,102,111,114,32,116,104,101,32,115,121,
                      115,116,101,109,32,97,110,100,32,102,111,114,32,105,110,
                      100,105,118,105,100,117,97,108,32,112,114,111,99,101,
                      115,115,101,115,46,32,73,116,32,105,115,32,112,97,114,
                      116,32,111,102,32,116,104,101,32,79,83,95,77,111,110,32,
                      97,112,112,108,105,99,97,116,105,111,110,44,32,115,101,
                      101]}],
                   0,false},
                  {text,
                   [23,91,111,115,95,109,111,110,40,54,41,93,40,111,115,95,
                    109,111,110,95,97,112,112,41]},
                  {sep,
                   [{text,"*. Available for Unix, Windows and VxWorks."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"%Periodically performs a memory check:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [128,73,102,32,109,111,114,101,32,116,104,97,110,32,97,32,
                    99,101,114,116,97,105,110,32,97,109,111,117,110,116,32,
                    111,102,32,97,118,97,105,108,97,98,108,101,32,115,121,115,
                    116,101,109,32,109,101,109,111,114,121,32,105,115,32,97,
                    108,108,111,99,97,116,101,100,44,32,97,115,32,114,101,112,
                    111,114,116,101,100,32,98,121,32,116,104,101,32,117,110,
                    100,101,114,108,121,105,110,103,32,111,112,101,114,97,116,
                    105,110,103,32,115,121,115,116,101,109,44,32,116,104,101,
                    32,97,108,97,114,109]}],
                 0,false},
                {text,"$*{system_memory_high_watermark, []}*"},
                {sep,[{text,[7,105,115,32,115,101,116,46]}],0,false}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [21,73,102,32,97,110,121,32,69,114,108,97,110,103,32,112,
                    114,111,99,101,115,115]}],
                 0,false},
                {text,[5,42,80,105,100,42]},
                {sep,
                 [{text,
                   "Xin the system has allocated more than a certain amount of total system memory, the alarm"}],
                 0,false},
                {text,"&*{process_memory_high_watermark, Pid}*"},
                {sep,[{text,[7,105,115,32,115,101,116,46]}],0,false}],
               0,false}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "2Alarms are reported to the SASL alarm handler, see"}],
                   0,false},
                  {text,"#[alarm_handler(3)](./alarm_handler)"},
                  {sep,
                   [{text,
                     [18,46,32,84,111,32,115,101,116,32,97,110,32,97,108,97,
                      114,109,44]}],
                   0,false},
                  {text," *alarm_handler:set_alarm(Alarm)*"},
                  {sep,
                   [{text,
                     [15,105,115,32,99,97,108,108,101,100,32,119,104,101,114,
                      101]}],
                   0,false},
                  {text,[7,42,65,108,97,114,109,42]},
                  {sep,
                   [{text,"(is either of the alarms specified above."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "MThe alarms are cleared automatically when the alarm cause is no longer valid."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\fThe function"}],0,false},
                  {text,"'[get_memory_data()](#get_memory_data/0)"},
                  {sep,
                   [{text,
                     "Gcan be used to retrieve the result of the latest periodic memory check."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     ":There is also a interface to system dependent memory data,"}],
                   0,false},
                  {text,
                   "5[get_system_memory_data()](#get_system_memory_data/0)"},
                  {sep,
                   [{text,
                     "Ã£. The result is highly dependent on the underlying operating system and the interface is targeted primarily for systems without virtual memory (e.g. VxWorks). The output on other systems is however still valid, although sparse."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\tA call to"}],0,false},
                  {text,
                   [26,42,103,101,116,95,115,121,115,116,101,109,95,109,101,
                    109,111,114,121,95,100,97,116,97,47,48,42]},
                  {sep,
                   [{text,
                     [29,105,115,32,109,111,114,101,32,99,111,115,116,108,121,
                      32,116,104,97,110,32,97,32,99,97,108,108,32,116,111]}],
                   0,false},
                  {text,
                   [19,42,103,101,116,95,109,101,109,111,114,121,95,100,97,
                    116,97,47,48,42]},
                  {sep,
                   [{text,
                     "@as data is collected synchronously when this function is called."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [373,84,104,101,32,116,111,116,97,108,32,115,121,115,116,
                    101,109,32,109,101,109,111,114,121,32,114,101,112,111,114,
                    116,101,100,32,117,110,100,101,114,32,85,78,73,88,32,105,
                    115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,
                    32,112,104,121,115,105,99,97,108,32,112,97,103,101,115,32,
                    111,102,32,109,101,109,111,114,121,32,116,105,109,101,115,
                    32,116,104,101,32,112,97,103,101,32,115,105,122,101,44,32,
                    97,110,100,32,116,104,101,32,97,118,97,105,108,97,98,108,
                    101,32,109,101,109,111,114,121,32,105,115,32,116,104,101,
                    32,110,117,109,98,101,114,32,111,102,32,97,118,97,105,108,
                    97,98,108,101,32,112,104,121,115,105,99,97,108,32,112,97,
                    103,101,115,32,116,105,109,101,115,32,116,104,101,32,112,
                    97,103,101,32,115,105,122,101,46,32,84,104,105,115,32,105,
                    115,32,97,32,114,101,97,115,111,110,97,98,108,101,32,109,
                    101,97,115,117,114,101,32,97,115,32,115,119,97,112,112,
                    105,110,103,32,115,104,111,117,108,100,32,98,101,32,97,
                    118,111,105,100,101,100,32,97,110,121,119,97,121,44,32,98,
                    117,116,32,116,104,101,32,116,97,115,107,32,111,102,32,
                    100,101,102,105,110,105,110,103,32,116,111,116,97,108,32,
                    109,101,109,111,114,121,32,97,110,100,32,97,118,97,105,
                    108,97,98,108,101,32,109,101,109,111,114,121,32,105,115,
                    32,100,105,102,102,105,99,117,108,116,32,98,101,99,97,117,
                    115,101,32,111,102,32,118,105,114,116,117,97,108,32,109,
                    101,109,111,114,121,32,97,110,100,32,115,119,97,112,112,
                    105,110,103,46]}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}],
        0,true},
       null},
      null}}},
   {sep,
    [{text,"\e<a name=\"config\">config</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[16,35,35,32,67,111,110,102,105,103,117,114,97,116,105,111,110]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "rThe following configuration parameters can be used to change the default values for time intervals and thresholds:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,116,62]},
                      {sep,
                       [{text,
                         [31,109,101,109,111,114,121,95,99,104,101,99,107,95,
                          105,110,116,101,114,118,97,108,32,61,32,105,110,116,
                          40,41,62,48]}],
                       0,false},
                      {text,[5,60,47,100,116,62]}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{text,
                              "XThe time interval, in minutes, for the periodic memory check. The default is one minute."}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{text,"&system_memory_high_watermark = float()"}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,
                            [156,84,104,101,32,116,104,114,101,115,104,111,
                             108,100,44,32,97,115,32,112,101,114,99,101,110,
                             116,97,103,101,32,111,102,32,115,121,115,116,101,
                             109,32,109,101,109,111,114,121,44,32,102,111,114,
                             32,104,111,119,32,109,117,99,104,32,115,121,115,
                             116,101,109,32,109,101,109,111,114,121,32,99,97,
                             110,32,98,101,32,97,108,108,111,99,97,116,101,
                             100,32,98,101,102,111,114,101,32,116,104,101,32,
                             99,111,114,114,101,115,112,111,110,100,105,110,
                             103,32,97,108,97,114,109,32,105,115,32,115,101,
                             116,46,32,84,104,101,32,100,101,102,97,117,108,
                             116,32,105,115,32,48,46,56,48,32,40,56,48,37,41,
                             46]}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,
                    [{text,"'process_memory_high_watermark = float()"}],
                    0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "Â±The threshold, as percentage of system memory, for how much system memory can be allocated by one Erlang process before the corresponding alarm is set. The default is 0.05 (5%)."}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{text,
                    [31,109,101,109,115,117,112,95,104,101,108,112,101,114,95,
                     116,105,109,101,111,117,116,32,61,32,105,110,116,40,41,
                     62,48]}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,"'A timeout, in seconds, for how long the"}],
                          0,false},
                         {text,[6,109,101,109,115,117,112]},
                         {sep,
                          [{text,
                            "_process should wait for a result from a memory check. If the timeout expires, a warning message"}],
                          0,false},
                         {text,
                          [25,34,79,83,95,77,79,78,32,40,109,101,109,115,117,
                           112,41,32,116,105,109,101,111,117,116,34]},
                         {sep,[{text,"\ris issued via"}],0,false},
                         {text,"\ferror_logger"},
                         {sep,
                          [{text,
                            [267,97,110,100,32,97,110,121,32,112,101,110,100,
                             105,110,103,44,32,115,121,110,99,104,114,111,110,
                             111,117,115,32,99,108,105,101,110,116,32,99,97,
                             108,108,115,32,119,105,108,108,32,114,101,116,
                             117,114,110,32,97,32,100,117,109,109,121,32,118,
                             97,108,117,101,46,32,78,111,114,109,97,108,108,
                             121,44,32,116,104,105,115,32,115,105,116,117,97,
                             116,105,111,110,32,115,104,111,117,108,100,32,
                             110,111,116,32,111,99,99,117,114,46,32,84,104,
                             101,114,101,32,104,97,118,101,32,98,101,101,110,
                             32,99,97,115,101,115,32,111,110,32,76,105,110,
                             117,120,44,32,104,111,119,101,118,101,114,44,32,
                             119,104,101,114,101,32,116,104,101,32,112,115,
                             101,117,100,111,32,102,105,108,101,32,102,114,
                             111,109,32,119,104,105,99,104,32,115,121,115,116,
                             101,109,32,100,97,116,97,32,105,115,32,114,101,
                             97,100,32,105,115,32,116,101,109,112,111,114,97,
                             114,105,108,121,32,117,110,97,118,97,105,108,97,
                             98,108,101,32,119,104,101,110,32,116,104,101,32,
                             115,121,115,116,101,109,32,105,115,32,104,101,97,
                             118,105,108,121,32,108,111,97,100,101,100,46]}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          [26,84,104,101,32,100,101,102,97,117,108,116,32,105,
                           115,32,51,48,32,115,101,99,111,110,100,115,46]}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[{text,"\ememsup_system_only = bool()"}],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          [21,83,112,101,99,105,102,105,101,115,32,119,104,
                           101,116,104,101,114,32,116,104,101]}],
                        0,false},
                       {text,[6,109,101,109,115,117,112]},
                       {sep,
                        [{text,
                          "/process should only check system memory usage ("}],
                        0,false},
                       {text,[4,116,114,117,101]},
                       {sep,
                        [{text,
                          [24,41,32,111,114,32,110,111,116,46,32,84,104,101,
                           32,100,101,102,97,117,108,116,32,105,115]}],
                        0,false},
                       {text,[5,102,97,108,115,101]},
                       {sep,
                        [{text,
                          "k, meaning that information regarding both system memory usage and Erlang process memory usage is collected."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,"*It is recommended to set this parameter to"}],
                        0,false},
                       {text,[5,102,97,108,115,101]},
                       {sep,
                        [{text,
                          "zon systems with many concurrent processes, as each process memory check makes a traversal of the entire list of processes."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,83,101,101]}],0,false},
            {text,
             [21,91,99,111,110,102,105,103,40,52,41,93,40,46,47,99,111,110,
              102,105,103,41]},
            {sep,
             [{text,
               "Jfor information about how to change the value of configuration parameters."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"/## get_memory_data() -> {Total,Allocated,Worst}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"%Get data for the memory in the system"}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [25,84,111,116,97,108,32,61,32,65,108,108,111,99,97,116,101,100,
             32,61,32,105,110,116,40,41]}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"'Worst = {Pid, PidAllocated} | undefined"}],0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\rÃÂ Pid = pid()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [22,194,160,80,105,100,65,108,108,111,99,97,116,101,100,32,61,32,
           105,110,116,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"4Returns the result of the latest memory check, where"}],
              0,false},
             {text,[7,42,84,111,116,97,108,42]},
             {sep,
              [{text,
                [28,105,115,32,116,104,101,32,116,111,116,97,108,32,109,101,
                 109,111,114,121,32,115,105,122,101,32,97,110,100]}],
              0,false},
             {text,"\v*Allocated*"},
             {sep,[{text,"$the allocated memory size, in bytes."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[7,42,87,111,114,115,116,42]},
             {sep,
              [{text,
                "Vis the pid and number of allocated bytes of the largest Erlang process on the node. If"}],
              0,false},
             {text,"\b*memsup*"},
             {sep,
              [{text,
                "Gshould not collect process data, that is if the configuration parameter"}],
              0,false},
             {text,
              [20,42,109,101,109,115,117,112,95,115,121,115,116,101,109,95,
               111,110,108,121,42]},
             {sep,[{text,"\nwas set to"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[7,42,87,111,114,115,116,42]},
             {sep,[{text,[2,105,115]}],0,false},
             {text,"\v*undefined*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [295,84,104,101,32,102,117,110,99,116,105,111,110,32,105,115,32,
               110,111,114,109,97,108,108,121,32,97,115,121,110,99,104,114,
               111,110,111,117,115,32,105,110,32,116,104,101,32,115,101,110,
               115,101,32,116,104,97,116,32,105,116,32,100,111,101,115,32,110,
               111,116,32,105,110,118,111,107,101,32,97,32,109,101,109,111,
               114,121,32,99,104,101,99,107,44,32,98,117,116,32,114,101,116,
               117,114,110,115,32,116,104,101,32,108,97,116,101,115,116,32,97,
               118,97,105,108,97,98,108,101,32,118,97,108,117,101,46,32,84,
               104,101,32,111,110,101,32,101,120,99,101,112,116,105,111,110,
               32,105,102,32,105,115,32,116,104,101,32,102,117,110,99,116,105,
               111,110,32,105,115,32,99,97,108,108,101,100,32,98,101,102,111,
               114,101,32,97,32,102,105,114,115,116,32,109,101,109,111,114,
               121,32,99,104,101,99,107,32,105,115,32,102,105,110,105,115,104,
               101,100,44,32,105,110,32,119,104,105,99,104,32,99,97,115,101,
               32,105,116,32,100,111,101,115,32,110,111,116,32,114,101,116,
               117,114,110,32,97,32,118,97,108,117,101,32,117,110,116,105,108,
               32,116,104,101,32,109,101,109,111,114,121,32,99,104,101,99,107,
               32,105,115,32,102,105,110,105,115,104,101,100,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,
              [17,42,123,48,44,48,44,123,112,105,100,40,41,44,48,125,125,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,
              [17,42,123,48,44,48,44,117,110,100,101,102,105,110,101,100,125,
               42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\b*memsup*"},
             {sep,
              [{text,
                "@is not available, or if all memory checks so far have timed out."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## get_system_memory_data() -> MemDataList"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Get system dependent memory data"}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},{sep,[{text,"\eMemDataList = [{Tag, Size}]"}],0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[14,194,160,84,97,103,32,61,32,97,116,111,109,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,194,160,83,105,122,101,32,61,32,105,110,116,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "jInvokes a memory check and returns the resulting, system dependent, data as a list of tagged tuples, where"}],
              0,false},
             {text,[5,42,84,97,103,42]},
             {sep,
              [{text,
                [28,99,97,110,32,98,101,32,111,110,101,32,111,102,32,116,104,
                 101,32,102,111,108,108,111,119,105,110,103,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,116,62]},
                               {sep,[{text,"\ftotal_memory"}],0,false},
                               {text,[5,60,47,100,116,62]}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,100,62]},
                               {text,
                                [154,84,104,101,32,116,111,116,97,108,32,97,
                                 109,111,117,110,116,32,111,102,32,109,101,
                                 109,111,114,121,32,97,118,97,105,108,97,98,
                                 108,101,32,116,111,32,116,104,101,32,69,114,
                                 108,97,110,103,32,101,109,117,108,97,116,111,
                                 114,44,32,97,108,108,111,99,97,116,101,100,
                                 32,97,110,100,32,102,114,101,101,46,32,77,97,
                                 121,32,111,114,32,109,97,121,32,110,111,116,
                                 32,98,101,32,101,113,117,97,108,32,116,111,
                                 32,116,104,101,32,97,109,111,117,110,116,32,
                                 111,102,32,109,101,109,111,114,121,32,99,111,
                                 110,102,105,103,117,114,101,100,32,105,110,
                                 32,116,104,101,32,115,121,115,116,101,109,
                                 46]},
                               {text,[5,60,47,100,100,62]}],
                              0,true},
                             null},
                            null}}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,116,62]},
                              {sep,[{text,"\vfree_memory"}],0,false},
                              {text,[5,60,47,100,116,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,100,62]},
                             {text,
                              "JThe amount of free memory available to the Erlang emulator for allocation."},
                             {text,[5,60,47,100,100,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,116,62]},
                            {sep,
                             [{text,
                               [19,115,121,115,116,101,109,95,116,111,116,97,
                                108,95,109,101,109,111,114,121]}],
                             0,false},
                            {text,[5,60,47,100,116,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,100,62]},
                           {sep,
                            [{sep,
                              [{text,
                                "WThe amount of memory available to the whole operating system. This may well be equal to"}],
                              0,false},
                             {text,"\ftotal_memory"},
                             {sep,
                              [{text,
                                [20,98,117,116,32,110,111,116,32,110,101,99,
                                 101,115,115,97,114,105,108,121,46]}],
                              0,false}],
                            0,false},
                           {text,[5,60,47,100,100,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,116,62]},
                          {sep,[{text,"\flargest_free"}],0,false},
                          {text,[5,60,47,100,116,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,100,62]},
                         {text,
                          "VThe size of the largest contiguous free memory block available to the Erlang emulator."},
                         {text,[5,60,47,100,100,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,116,62]},
                        {sep,
                         [{text,
                           [14,110,117,109,98,101,114,95,111,102,95,102,114,
                            101,101]}],
                         0,false},
                        {text,[5,60,47,100,116,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,100,62]},
                       {text,
                        [127,84,104,101,32,110,117,109,98,101,114,32,111,102,
                         32,102,114,101,101,32,98,108,111,99,107,115,32,97,
                         118,97,105,108,97,98,108,101,32,116,111,32,116,104,
                         101,32,69,114,108,97,110,103,32,114,117,110,116,105,
                         109,101,32,115,121,115,116,101,109,46,32,84,104,105,
                         115,32,103,105,118,101,115,32,97,32,102,97,105,114,
                         32,105,110,100,105,99,97,116,105,111,110,32,111,102,
                         32,104,111,119,32,102,114,97,103,109,101,110,116,101,
                         100,32,116,104,101,32,109,101,109,111,114,121,32,105,
                         115,46]},
                       {text,[5,60,47,100,100,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,116,62]},
                      {sep,
                       [{text,
                         [15,98,117,102,102,101,114,101,100,95,109,101,109,
                          111,114,121]}],
                       0,false},
                      {text,[5,60,47,100,116,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {text,
                      "KThe amount of memory the system uses for temporary storing raw disk blocks."},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,[{text,"\rcached_memory"}],0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {text,
                    "EThe amount of memory the system uses for cached files read from disk."},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,"\ntotal_swap"}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {text,
                  "LThe amount of total amount of memory the system has available for disk swap."},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,"\tfree_swap"}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {text,
                "<The amount of memory the system has available for disk swap."},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"+All memory sizes are presented as number of"}],
              0,false},
             {text,"\t**bytes**"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,[14,42,108,97,114,103,101,115,116,95,102,114,101,101,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [16,42,110,117,109,98,101,114,95,111,102,95,102,114,101,101,42]},
             {sep,
              [{text,
                "5tags are currently only returned on a VxWorks system."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [28,82,101,116,117,114,110,115,32,116,104,101,32,101,109,112,
                 116,121,32,108,105,115,116,32,91,93,32,105,102]}],
              0,false},
             {text,"\b*memsup*"},
             {sep,
              [{text,"3is not available, or if the memory check times out."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           "0On linux the memory available to the emulator is"}],
                         0,false},
                        {text,
                         [15,42,99,97,99,104,101,100,95,109,101,109,111,114,
                          121,42]},
                        {sep,[{text,[3,97,110,100]}],0,false},
                        {text,
                         [17,42,98,117,102,102,101,114,101,100,95,109,101,109,
                          111,114,121,42]},
                        {sep,
                         [{text,
                           [14,105,110,32,97,100,100,105,116,105,111,110,32,
                            116,111]}],
                         0,false},
                        {text,"\r*free_memory*"},
                        {sep,[{text,[1,46]}],0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text," ## get_os_wordsize() -> Wordsize"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,71,101,116,32,116,104,101,32,119,111,114,100,115,105,122,101,
             32,111,102,32,114,117,110,110,105,110,103,32,111,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,[{text,"#Wordsize = 32 | 64 | unsupported_os"}],0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "=Returns the wordsize of the current running operating system."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [29,35,35,32,103,101,116,95,99,104,101,99,107,95,105,110,116,101,114,
         118,97,108,40,41,32,45,62,32,77,83]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "AGet time interval, in milliseconds, for the periodic memory check"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,[{text,[1,42]},{sep,[{text,"\nMS = int()"}],0,false}],0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "JReturns the time interval, in milliseconds, for the periodic memory check."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"$## set_check_interval(Minutes) -> ok"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "<Set time interval, in minutes, for the periodic memory check"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [17,77,105,110,117,116,101,115,32,61,32,105,110,116,40,41,62,48]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "KChanges the time interval, given in minutes, for the periodic memory check."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ÂµThe change will take effect after the next memory check and is non-persistent. That is, in case of a process restart, this value is forgotten and the default value will be used. See"}],
              0,false},
             {text,
              [24,91,67,111,110,102,105,103,117,114,97,116,105,111,110,93,40,
               35,99,111,110,102,105,103,41]},
             {sep,[{text,[6,97,98,111,118,101,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"(## get_procmem_high_watermark() -> int()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"8Get threshold, in percent, for process memory allocation"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "AReturns the threshold, in percent, for process memory allocation."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## set_procmem_high_watermark(Float) -> ok"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "RSet threshold, as percentage represented by a float, for process memory allocation"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "GChanges the threshold, given as a float, for process memory allocation."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "Â¿The change will take effect during the next periodic memory check and is non-persistent. That is, in case of a process restart, this value is forgotten and the default value will be used. See"}],
              0,false},
             {text,
              [24,91,67,111,110,102,105,103,117,114,97,116,105,111,110,93,40,
               35,99,111,110,102,105,103,41]},
             {sep,[{text,[6,97,98,111,118,101,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"'## get_sysmem_high_watermark() -> int()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"7Get threshold, in percent, for system memory allocation"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "@Returns the threshold, in percent, for system memory allocation."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,")## set_sysmem_high_watermark(Float) -> ok"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "=Set threshold, given as a float, for system memory allocation"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "FChanges the threshold, given as a float, for system memory allocation."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "Â¿The change will take effect during the next periodic memory check and is non-persistent. That is, in case of a process restart, this value is forgotten and the default value will be used. See"}],
              0,false},
             {text,
              [24,91,67,111,110,102,105,103,117,114,97,116,105,111,110,93,40,
               35,99,111,110,102,105,103,41]},
             {sep,[{text,[6,97,98,111,118,101,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\"## get_helper_timeout() -> Seconds"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"4Get the timeout value, in seconds, for memory checks"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,83,101,99,111,110,100,115,32,61,32,105,110,116,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "9Returns the timeout value, in seconds, for memory checks."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"$## set_helper_timeout(Seconds) -> ok"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"4Set the timeout value, in seconds, for memory checks"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [22,83,101,99,111,110,100,115,32,61,32,105,110,116,40,41,32,40,62,61,
          32,49,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "?Changes the timeout value, given in seconds, for memory checks."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "Â·The change will take effect for the next memory check and is non-persistent. That is, in the case of a process restart, this value is forgotten and the default value will be used. See"}],
              0,false},
             {text,
              [24,91,67,111,110,102,105,103,117,114,97,116,105,111,110,93,40,
               35,99,111,110,102,105,103,41]},
             {sep,[{text,[6,97,98,111,118,101,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## See Also"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"#[alarm_handler(3)](./alarm_handler)"},
          {sep,[{text,[1,44]}],0,false},
          {text,
           [23,91,111,115,95,109,111,110,40,51,41,93,40,111,115,95,109,111,
            110,95,97,112,112,41]}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
