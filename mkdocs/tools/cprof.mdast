{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,[7,35,32,99,112,114,111,102]},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,[7,35,32,99,112,114,111,102]},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "\\A simple Call Count Profiling Tool using breakpoints for minimal runtime performance impact."}],
          0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,[7,42,99,112,114,111,102,42]},
                 {sep,
                  [{text,
                    "Òmodule is used to profile a program to find out how many times different functions are called. Breakpoints similar to local call trace, but containing a counter, are used to minimise runtime performance impact."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [155,83,105,110,99,101,32,98,114,101,97,107,112,111,105,
                     110,116,115,32,97,114,101,32,117,115,101,100,32,116,104,
                     101,114,101,32,105,115,32,110,111,32,110,101,101,100,32,
                     102,111,114,32,115,112,101,99,105,97,108,32,99,111,109,
                     112,105,108,97,116,105,111,110,32,111,102,32,97,110,121,
                     32,109,111,100,117,108,101,32,116,111,32,98,101,32,112,
                     114,111,102,105,108,101,100,46,32,70,111,114,32,110,111,
                     119,32,116,104,101,115,101,32,98,114,101,97,107,112,111,
                     105,110,116,115,32,99,97,110,32,111,110,108,121,32,98,
                     101,32,115,101,116,32,111,110,32,66,69,65,77,32,99,111,
                     100,101,32,115,111]}],
                  0,false},
                 {sep,[{text,[3,66,73,70]}],0,false},
                 {sep,
                  [{text,
                    [30,115,32,99,97,110,110,111,116,32,98,101,32,99,97,108,
                     108,32,99,111,117,110,116,32,116,114,97,99,101,100,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "¤The size of the call counters is the host machine word size. One bit is used when pausing the counter, so the maximum counter value for a 32-bit host is 2147483647."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ÔThe profiling result is delivered as a term containing a sorted list of entries, one per module. Each module entry contains a sorted list of functions. The sorting order in both cases is of decreasing call count."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "ÈCall count tracing is very lightweight compared to other forms of tracing since no trace message has to be generated. Some measurements indicates performance degradation in the vicinity of 10 percent."}],
                  0,false},
                 {text,
                  [29,60,97,32,110,97,109,101,61,34,97,110,97,108,121,115,101,
                   34,62,97,110,97,108,121,115,101,60,47,97,62]}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"/## analyse() -> {AllCallCount, ModAnalysisList}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"4## analyse(Limit) -> {AllCallCount, ModAnalysisList}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [30,35,35,32,97,110,97,108,121,115,101,40,77,111,100,41,32,45,62,32,
         77,111,100,65,110,97,108,121,115,105,115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"%## analyse(Mod, Limit) -> ModAnalysis"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"\"Collect and analyse call counters."}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [17,76,105,109,105,116,32,61,32,105,110,116,101,103,101,114,
                   40,41]}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},{sep,[{text,"\fMod = atom()"}],0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [24,65,108,108,67,97,108,108,67,111,117,110,116,32,61,32,105,
                  110,116,101,103,101,114,40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [31,77,111,100,65,110,97,108,121,115,105,115,76,105,115,116,
                 32,61,32,91,77,111,100,65,110,97,108,121,115,105,115,93]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"3ModAnalysis = {Mod, ModCallCount, FuncAnalysisList}"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [24,77,111,100,67,97,108,108,67,111,117,110,116,32,61,32,105,
               110,116,101,103,101,114,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             "8FuncAnalysisList = [{{Mod, Func, Arity}, FuncCallCount}]"}],
           0,false}],
         0,false}},
       {sep,[{text,[1,42]},{sep,[{text,"\rFunc = atom()"}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,65,114,105,116,121,32,61,32,105,110,116,101,103,101,114,40,
            41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [25,70,117,110,99,67,97,108,108,67,111,117,110,116,32,61,32,105,110,
           116,101,103,101,114,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "OCollects and analyses the call counters presently in the node for either module"}],
              0,false},
             {text,[5,42,77,111,100,42]},
             {sep,
              [{text,
                [28,44,32,111,114,32,102,111,114,32,97,108,108,32,109,111,100,
                 117,108,101,115,32,40,101,120,99,101,112,116]}],
              0,false},
             {text,[7,42,99,112,114,111,102,42]},
             {sep,
              [{text,
                [21,105,116,115,101,108,102,41,44,32,97,110,100,32,114,101,
                 116,117,114,110,115,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{text,
                        [16,70,117,110,99,65,110,97,108,121,115,105,115,76,
                         105,115,116]}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {sep,
                      [{sep,
                        [{text,
                          "BA list of tuples, one for each function in a module, in decreasing"}],
                        0,false},
                       {text,"\rFuncCallCount"},
                       {sep,[{text,[6,111,114,100,101,114,46]}],0,false}],
                      0,false},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,[{text,"\fModCallCount"}],0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {sep,
                    [{sep,[{text,"\nThe sum of"}],0,false},
                     {text,"\rFuncCallCount"},
                     {sep,
                      [{text,"\"values for all functions in module"}],
                      0,false},
                     {text,[3,77,111,100]},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,"\fAllCallCount"}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {sep,
                  [{sep,[{text,"\nThe sum of"}],0,false},
                   {text,"\fModCallCount"},
                   {sep,
                    [{text,"#values for all modules concerned in"}],
                    0,false},
                   {text,
                    [15,77,111,100,65,110,97,108,121,115,105,115,76,105,115,
                     116]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,
                 [{text,
                   [15,77,111,100,65,110,97,108,121,115,105,115,76,105,115,
                    116]}],
                 0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {sep,
                [{sep,
                  [{text,",A list of tuples, one for each module except"}],
                  0,false},
                 {text,[5,99,112,114,111,102]},
                 {sep,
                  [{text,
                    [15,44,32,105,110,32,100,101,99,114,101,97,115,105,110,
                     103]}],
                  0,false},
                 {text,"\fModCallCount"},
                 {sep,[{text,[6,111,114,100,101,114,46]}],0,false}],
                0,false},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"(If call counters are still running while"}],
              0,false},
             {text,[14,42,97,110,97,108,121,115,101,47,48,46,46,50,42]},
             {sep,
              [{text,
                "Yis executing, you might get an inconsistent result. This happens if the process executing"}],
              0,false},
             {text,[14,42,97,110,97,108,121,115,101,47,48,46,46,50,42]},
             {sep,
              [{text,
                "dgets scheduled out so some other process can increment the counters that are being analysed, Calling"}],
              0,false},
             {text,"\t*pause()*"},
             {sep,
              [{text,"+before analysing takes care of the problem."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[6,73,102,32,116,104,101]}],0,false},
             {text,[5,42,77,111,100,42]},
             {sep,
              [{text,"(argument is given, the result contains a"}],
              0,false},
             {text,"\r*ModAnalysis*"},
             {sep,
              [{text,
                [16,116,117,112,108,101,32,102,111,114,32,109,111,100,117,108,
                 101]}],
              0,false},
             {text,[5,42,77,111,100,42]},
             {sep,[{text,"'only, otherwise the result contains one"}],0,false},
             {text,"\r*ModAnalysis*"},
             {sep,[{text,"#tuple for all modules returned from"}],0,false},
             {text,
              [19,42,99,111,100,101,58,97,108,108,95,108,111,97,100,101,100,
               40,41,42]},
             {sep,[{text,[6,101,120,99,101,112,116]}],0,false},
             {text,[7,42,99,112,114,111,102,42]},
             {sep,[{text,[7,105,116,115,101,108,102,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [20,65,108,108,32,102,117,110,99,116,105,111,110,115,32,119,
                 105,116,104,32,97]}],
              0,false},
             {text,[15,42,70,117,110,99,67,97,108,108,67,111,117,110,116,42]},
             {sep,[{text,"\nlower than"}],0,false},
             {text,[7,42,76,105,109,105,116,42]},
             {sep,
              [{text,
                [17,97,114,101,32,101,120,99,108,117,100,101,100,32,102,114,
                 111,109]}],
              0,false},
             {text,
              [18,42,70,117,110,99,65,110,97,108,121,115,105,115,76,105,115,
               116,42]},
             {sep,
              [{text,
                [28,46,32,84,104,101,121,32,97,114,101,32,115,116,105,108,108,
                 32,105,110,99,108,117,100,101,100,32,105,110]}],
              0,false},
             {text,[14,42,77,111,100,67,97,108,108,67,111,117,110,116,42]},
             {sep,
              [{text,
                [31,44,32,116,104,111,117,103,104,46,32,84,104,101,32,100,101,
                 102,97,117,108,116,32,118,97,108,117,101,32,102,111,114]}],
              0,false},
             {text,[7,42,76,105,109,105,116,42]},
             {sep,[{text,[2,105,115]}],0,false},
             {text,[3,42,49,42]},
             {sep,[{text,[1,46]}],0,false},
             {text,
              [29,60,97,32,110,97,109,101,61,34,112,97,117,115,101,95,48,34,
               62,112,97,117,115,101,95,48,60,47,97,62]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [23,35,35,32,112,97,117,115,101,40,41,32,45,62,32,105,110,116,101,103,
         101,114,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"1Pause running call count trace for all functions."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [132,80,97,117,115,101,32,99,97,108,108,32,99,111,117,110,116,
                 32,116,114,97,99,105,110,103,32,102,111,114,32,97,108,108,32,
                 102,117,110,99,116,105,111,110,115,32,105,110,32,97,108,108,
                 32,109,111,100,117,108,101,115,32,97,110,100,32,115,116,111,
                 112,32,105,116,32,102,111,114,32,97,108,108,32,102,117,110,
                 99,116,105,111,110,115,32,105,110,32,109,111,100,117,108,101,
                 115,32,116,111,32,98,101,32,108,111,97,100,101,100,46,32,84,
                 104,105,115,32,105,115,32,116,104,101,32,115,97,109,101,32,
                 97,115]}],
              0,false},
             {text,"(*(pause({'_','_','_'})+stop({on_load}))*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,
              [20,91,112,97,117,115,101,47,49,46,46,51,93,40,35,112,97,117,
               115,101,41]},
             {sep,[{text,[6,98,101,108,111,119,46]}],0,false},
             {text,
              [25,60,97,32,110,97,109,101,61,34,112,97,117,115,101,34,62,112,
               97,117,115,101,60,47,97,62]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [31,35,35,32,112,97,117,115,101,40,70,117,110,99,83,112,101,99,41,32,
         45,62,32,105,110,116,101,103,101,114,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text," ## pause(Mod, Func) -> integer()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"'## pause(Mod, Func, Arity) -> integer()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"6Pause running call count trace for matching functions."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,[{text,"'FuncSpec = Mod | {Mod,Func,Arity}, {FS}"}],0,false}],
         0,false},
        {sep,[{text,[1,42]},{sep,[{text,"\fMod = atom()"}],0,false}],0,false}},
       {sep,[{text,[1,42]},{sep,[{text,"\rFunc = atom()"}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,65,114,105,116,121,32,61,32,105,110,116,101,103,101,114,40,
            41]}],
         0,false}],
       0,false}},
     {sep,[{text,[1,42]},{sep,[{text,"\vFS = term()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "CPause call counters for matching functions in matching modules. The"}],
              0,false},
             {text,[4,42,70,83,42]},
             {sep,
              [{text,
                "5argument can be used to specify the first argument to"}],
              0,false},
             {text,
              [24,42,101,114,108,97,110,103,58,116,114,97,99,101,95,112,97,
               116,116,101,114,110,47,51,42]},
             {sep,
              [{text,
                [16,46,32,83,101,101,32,101,114,108,97,110,103,40,51,41,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "sThe call counters for all matching functions that has got call count breakpoints are paused at their current count."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "YReturn the number of matching functions that can have call count breakpoints, the same as"}],
              0,false},
             {text,"\f*start/0..3*"},
             {sep,
              [{text,",with the same arguments would have returned."}],
              0,false},
             {text,
              [29,60,97,32,110,97,109,101,61,34,114,101,115,116,97,114,116,34,
               62,114,101,115,116,97,114,116,60,47,97,62]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [25,35,35,32,114,101,115,116,97,114,116,40,41,32,45,62,32,105,110,116,
         101,103,101,114,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## restart(FuncSpec) -> integer()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\"## restart(Mod, Func) -> integer()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,")## restart(Mod, Func, Arity) -> integer()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"6Restart existing call counters for matching functions."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,[{text,"'FuncSpec = Mod | {Mod,Func,Arity}, {FS}"}],0,false}],
         0,false},
        {sep,[{text,[1,42]},{sep,[{text,"\fMod = atom()"}],0,false}],0,false}},
       {sep,[{text,[1,42]},{sep,[{text,"\rFunc = atom()"}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,65,114,105,116,121,32,61,32,105,110,116,101,103,101,114,40,
            41]}],
         0,false}],
       0,false}},
     {sep,[{text,[1,42]},{sep,[{text,"\vFS = term()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "dRestart call counters for the matching functions in matching modules that are call count traced. The"}],
              0,false},
             {text,[4,42,70,83,42]},
             {sep,
              [{text,
                "5argument can be used to specify the first argument to"}],
              0,false},
             {text,
              [24,42,101,114,108,97,110,103,58,116,114,97,99,101,95,112,97,
               116,116,101,114,110,47,51,42]},
             {sep,
              [{text,
                [16,46,32,83,101,101,32,101,114,108,97,110,103,40,51,41,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "mThe call counters for all matching functions that has got call count breakpoints are set to zero and running."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "YReturn the number of matching functions that can have call count breakpoints, the same as"}],
              0,false},
             {text,"\f*start/0..3*"},
             {sep,
              [{text,",with the same arguments would have returned."}],
              0,false},
             {text,
              [29,60,97,32,110,97,109,101,61,34,115,116,97,114,116,95,48,34,
               62,115,116,97,114,116,95,48,60,47,97,62]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [23,35,35,32,115,116,97,114,116,40,41,32,45,62,32,105,110,116,101,103,
         101,114,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"+Start call count tracing for all functions."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [130,83,116,97,114,116,32,99,97,108,108,32,99,111,117,110,116,
                 32,116,114,97,99,105,110,103,32,102,111,114,32,97,108,108,32,
                 102,117,110,99,116,105,111,110,115,32,105,110,32,97,108,108,
                 32,109,111,100,117,108,101,115,44,32,97,110,100,32,97,108,
                 115,111,32,102,111,114,32,97,108,108,32,102,117,110,99,116,
                 105,111,110,115,32,105,110,32,109,111,100,117,108,101,115,32,
                 116,111,32,98,101,32,108,111,97,100,101,100,46,32,84,104,105,
                 115,32,105,115,32,116,104,101,32,115,97,109,101,32,97,115]}],
              0,false},
             {text,")*(start({'_','_','_'})+start({on_load}))*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,
              [20,91,115,116,97,114,116,47,49,46,46,51,93,40,35,115,116,97,
               114,116,41]},
             {sep,[{text,[6,98,101,108,111,119,46]}],0,false},
             {text,
              [25,60,97,32,110,97,109,101,61,34,115,116,97,114,116,34,62,115,
               116,97,114,116,60,47,97,62]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [31,35,35,32,115,116,97,114,116,40,70,117,110,99,83,112,101,99,41,32,
         45,62,32,105,110,116,101,103,101,114,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text," ## start(Mod, Func) -> integer()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"'## start(Mod, Func, Arity) -> integer()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"0Start call count tracing for matching functions."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,[{text,"'FuncSpec = Mod | {Mod,Func,Arity}, {FS}"}],0,false}],
         0,false},
        {sep,[{text,[1,42]},{sep,[{text,"\fMod = atom()"}],0,false}],0,false}},
       {sep,[{text,[1,42]},{sep,[{text,"\rFunc = atom()"}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,65,114,105,116,121,32,61,32,105,110,116,101,103,101,114,40,
            41]}],
         0,false}],
       0,false}},
     {sep,[{text,[1,42]},{sep,[{text,"\vFS = term()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "HStart call count tracing for matching functions in matching modules. The"}],
              0,false},
             {text,[4,42,70,83,42]},
             {sep,
              [{text,
                "5argument can be used to specify the first argument to"}],
              0,false},
             {text,
              [24,42,101,114,108,97,110,103,58,116,114,97,99,101,95,112,97,
               116,116,101,114,110,47,51,42]},
             {sep,[{text,"\r, for example"}],0,false},
             {text,"\t*on_load*"},
             {sep,
              [{text,
                [16,46,32,83,101,101,32,101,114,108,97,110,103,40,51,41,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [158,83,101,116,32,99,97,108,108,32,99,111,117,110,116,32,98,
               114,101,97,107,112,111,105,110,116,115,32,111,110,32,116,104,
               101,32,109,97,116,99,104,105,110,103,32,102,117,110,99,116,105,
               111,110,115,32,116,104,97,116,32,104,97,115,32,110,111,32,99,
               97,108,108,32,99,111,117,110,116,32,98,114,101,97,107,112,111,
               105,110,116,115,46,32,67,97,108,108,32,99,111,117,110,116,101,
               114,115,32,97,114,101,32,115,101,116,32,116,111,32,122,101,114,
               111,32,97,110,100,32,114,117,110,110,105,110,103,32,102,111,
               114,32,97,108,108,32,109,97,116,99,104,105,110,103,32,102,117,
               110,99,116,105,111,110,115,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "LReturn the number of matching functions that has got call count breakpoints."}],
              0,false},
             {text,"\e<a name=\"stop_0\">stop_0</a>"}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [22,35,35,32,115,116,111,112,40,41,32,45,62,32,105,110,116,101,103,
         101,114,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"*Stop call count tracing for all functions."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [129,83,116,111,112,32,99,97,108,108,32,99,111,117,110,116,32,
                 116,114,97,99,105,110,103,32,102,111,114,32,97,108,108,32,
                 102,117,110,99,116,105,111,110,115,32,105,110,32,97,108,108,
                 32,109,111,100,117,108,101,115,44,32,97,110,100,32,97,108,
                 115,111,32,102,111,114,32,97,108,108,32,102,117,110,99,116,
                 105,111,110,115,32,105,110,32,109,111,100,117,108,101,115,32,
                 116,111,32,98,101,32,108,111,97,100,101,100,46,32,84,104,105,
                 115,32,105,115,32,116,104,101,32,115,97,109,101,32,97,115]}],
              0,false},
             {text,"'*(stop({'_','_','_'})+stop({on_load}))*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,
              [18,91,115,116,111,112,47,49,46,46,51,93,40,35,115,116,111,112,
               41]},
             {sep,[{text,[6,98,101,108,111,119,46]}],0,false},
             {text,
              [23,60,97,32,110,97,109,101,61,34,115,116,111,112,34,62,115,116,
               111,112,60,47,97,62]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [30,35,35,32,115,116,111,112,40,70,117,110,99,83,112,101,99,41,32,45,
         62,32,105,110,116,101,103,101,114,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [31,35,35,32,115,116,111,112,40,77,111,100,44,32,70,117,110,99,41,32,
         45,62,32,105,110,116,101,103,101,114,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"&## stop(Mod, Func, Arity) -> integer()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"/Stop call count tracing for matching functions."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,[{text,"'FuncSpec = Mod | {Mod,Func,Arity}, {FS}"}],0,false}],
         0,false},
        {sep,[{text,[1,42]},{sep,[{text,"\fMod = atom()"}],0,false}],0,false}},
       {sep,[{text,[1,42]},{sep,[{text,"\rFunc = atom()"}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,65,114,105,116,121,32,61,32,105,110,116,101,103,101,114,40,
            41]}],
         0,false}],
       0,false}},
     {sep,[{text,[1,42]},{sep,[{text,"\vFS = term()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "GStop call count tracing for matching functions in matching modules. The"}],
              0,false},
             {text,[4,42,70,83,42]},
             {sep,
              [{text,
                "5argument can be used to specify the first argument to"}],
              0,false},
             {text,
              [24,42,101,114,108,97,110,103,58,116,114,97,99,101,95,112,97,
               116,116,101,114,110,47,51,42]},
             {sep,[{text,"\r, for example"}],0,false},
             {text,"\t*on_load*"},
             {sep,
              [{text,
                [16,46,32,83,101,101,32,101,114,108,97,110,103,40,51,41,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ZRemove call count breakpoints from the matching functions that has call count breakpoints."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "YReturn the number of matching functions that can have call count breakpoints, the same as"}],
              0,false},
             {text,"\f*start/0..3*"},
             {sep,
              [{text,",with the same arguments would have returned."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## See Also"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,[14,91,101,112,114,111,102,93,40,101,112,114,111,102,41]},
          {sep,[{text,[4,40,51,41,44]}],0,false},
          {text,[14,91,102,112,114,111,102,93,40,102,112,114,111,102,41]},
          {sep,
           [{text,[15,40,51,41,44,32,101,114,108,97,110,103,40,51,41,44]}],
           0,false},
          {text,
           [29,91,85,115,101,114,39,115,32,71,117,105,100,101,93,40,99,112,
            114,111,102,95,99,104,97,112,116,101,114,41]}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
