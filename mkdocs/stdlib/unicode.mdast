{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\t# unicode"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\t# unicode"},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Functions for converting Unicode characters."}],
          0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ûThis module contains functions for converting between different character representations. It converts between ISO Latin-1 characters and Unicode characters, but it can also convert between different Unicode encodings (like UTF-8, UTF-16, and UTF-32)."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [321,84,104,101,32,100,101,102,97,117,108,116,32,85,110,105,
                   99,111,100,101,32,101,110,99,111,100,105,110,103,32,105,
                   110,32,69,114,108,97,110,103,32,105,115,32,105,110,32,98,
                   105,110,97,114,105,101,115,32,85,84,70,45,56,44,32,119,104,
                   105,99,104,32,105,115,32,97,108,115,111,32,116,104,101,32,
                   102,111,114,109,97,116,32,105,110,32,119,104,105,99,104,32,
                   98,117,105,108,116,45,105,110,32,102,117,110,99,116,105,
                   111,110,115,32,97,110,100,32,108,105,98,114,97,114,105,101,
                   115,32,105,110,32,79,84,80,32,101,120,112,101,99,116,32,
                   116,111,32,102,105,110,100,32,98,105,110,97,114,121,32,85,
                   110,105,99,111,100,101,32,100,97,116,97,46,32,73,110,32,
                   108,105,115,116,115,44,32,85,110,105,99,111,100,101,32,100,
                   97,116,97,32,105,115,32,101,110,99,111,100,101,100,32,97,
                   115,32,105,110,116,101,103,101,114,115,44,32,101,97,99,104,
                   32,105,110,116,101,103,101,114,32,114,101,112,114,101,115,
                   101,110,116,105,110,103,32,111,110,101,32,99,104,97,114,97,
                   99,116,101,114,32,97,110,100,32,101,110,99,111,100,101,100,
                   32,115,105,109,112,108,121,32,97,115,32,116,104,101,32,85,
                   110,105,99,111,100,101,32,99,111,100,101,32,112,111,105,
                   110,116,32,102,111,114,32,116,104,101,32,99,104,97,114,97,
                   99,116,101,114,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ÎOther Unicode encodings than integers representing code points or UTF-8 in binaries are referred to as \"external encodings\". The ISO Latin-1 encoding is in binaries and lists referred to as latin1-encoding."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [393,73,116,32,105,115,32,114,101,99,111,109,109,101,110,
                   100,101,100,32,116,111,32,111,110,108,121,32,117,115,101,
                   32,101,120,116,101,114,110,97,108,32,101,110,99,111,100,
                   105,110,103,115,32,102,111,114,32,99,111,109,109,117,110,
                   105,99,97,116,105,111,110,32,119,105,116,104,32,101,120,
                   116,101,114,110,97,108,32,101,110,116,105,116,105,101,115,
                   32,119,104,101,114,101,32,116,104,105,115,32,105,115,32,
                   114,101,113,117,105,114,101,100,46,32,87,104,101,110,32,
                   119,111,114,107,105,110,103,32,105,110,115,105,100,101,32,
                   116,104,101,32,69,114,108,97,110,103,47,79,84,80,32,101,
                   110,118,105,114,111,110,109,101,110,116,44,32,105,116,32,
                   105,115,32,114,101,99,111,109,109,101,110,100,101,100,32,
                   116,111,32,107,101,101,112,32,98,105,110,97,114,105,101,
                   115,32,105,110,32,85,84,70,45,56,32,119,104,101,110,32,114,
                   101,112,114,101,115,101,110,116,105,110,103,32,85,110,105,
                   99,111,100,101,32,99,104,97,114,97,99,116,101,114,115,46,
                   32,73,83,79,32,76,97,116,105,110,45,49,32,101,110,99,111,
                   100,105,110,103,32,105,115,32,115,117,112,112,111,114,116,
                   101,100,32,98,111,116,104,32,102,111,114,32,98,97,99,107,
                   119,97,114,100,32,99,111,109,112,97,116,105,98,105,108,105,
                   116,121,32,97,110,100,32,102,111,114,32,99,111,109,109,117,
                   110,105,99,97,116,105,111,110,32,119,105,116,104,32,101,
                   120,116,101,114,110,97,108,32,101,110,116,105,116,105,101,
                   115,32,110,111,116,32,115,117,112,112,111,114,116,105,110,
                   103,32,85,110,105,99,111,100,101,32,99,104,97,114,97,99,
                   116,101,114,32,115,101,116,115,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [274,80,114,111,103,114,97,109,115,32,115,104,111,117,108,
                     100,32,97,108,119,97,121,115,32,111,112,101,114,97,116,
                     101,32,111,110,32,97,32,110,111,114,109,97,108,105,122,
                     101,100,32,102,111,114,109,32,97,110,100,32,99,111,109,
                     112,97,114,101,32,99,97,110,111,110,105,99,97,108,45,101,
                     113,117,105,118,97,108,101,110,116,32,85,110,105,99,111,
                     100,101,32,99,104,97,114,97,99,116,101,114,115,32,97,115,
                     32,101,113,117,97,108,46,32,65,108,108,32,99,104,97,114,
                     97,99,116,101,114,115,32,115,104,111,117,108,100,32,116,
                     104,117,115,32,98,101,32,110,111,114,109,97,108,105,122,
                     101,100,32,116,111,32,111,110,101,32,102,111,114,109,32,
                     111,110,99,101,32,111,110,32,116,104,101,32,115,121,115,
                     116,101,109,32,98,111,114,100,101,114,115,46,32,79,110,
                     101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,
                     105,110,103,32,102,117,110,99,116,105,111,110,115,32,99,
                     97,110,32,99,111,110,118,101,114,116,32,99,104,97,114,97,
                     99,116,101,114,115,32,116,111,32,116,104,101,105,114,32,
                     110,111,114,109,97,108,105,122,101,100,32,102,111,114,
                     109,115]}],
                  0,false},
                 {text,
                  "5[characters_to_nfc_list/1](#characters_to_nfc_list/1)"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,
                  "9[characters_to_nfc_binary/1](#characters_to_nfc_binary/1)"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,
                  "5[characters_to_nfd_list/1](#characters_to_nfd_list/1)"},
                 {sep,[{text,[2,111,114]}],0,false},
                 {text,
                  "9[characters_to_nfd_binary/1](#characters_to_nfd_binary/1)"},
                 {sep,
                  [{text,
                    [18,46,32,70,111,114,32,103,101,110,101,114,97,108,32,116,
                     101,120,116]}],
                  0,false},
                 {text,
                  "5[characters_to_nfc_list/1](#characters_to_nfc_list/1)"},
                 {sep,[{text,[2,111,114]}],0,false},
                 {text,
                  "9[characters_to_nfc_binary/1](#characters_to_nfc_binary/1)"},
                 {sep,
                  [{text,
                    "[is preferred, and for identifiers one of the compatibility normalization functions, such as"}],
                  0,false},
                 {text,
                  "7[characters_to_nfkc_list/1](#characters_to_nfkc_list/1)"},
                 {sep,
                  [{text,
                    [152,44,32,105,115,32,112,114,101,102,101,114,114,101,100,
                     32,102,111,114,32,115,101,99,117,114,105,116,121,32,114,
                     101,97,115,111,110,115,46,32,84,104,101,32,110,111,114,
                     109,97,108,105,122,97,116,105,111,110,32,102,117,110,99,
                     116,105,111,110,115,32,119,104,101,114,101,32,105,110,
                     116,114,111,100,117,99,101,100,32,105,110,32,79,84,80,32,
                     50,48,46,32,65,100,100,105,116,105,111,110,97,108,32,105,
                     110,102,111,114,109,97,116,105,111,110,32,111,110,32,110,
                     111,114,109,97,108,105,122,97,116,105,111,110,32,99,97,
                     110,32,98,101,32,102,111,117,110,100,32,105,110,32,116,
                     104,101]}],
                  0,false},
                 {text,
                  "8[Unicode FAQ](http://unicode.org/faq/normalization.html)"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f# Data Types"},null},null}},
    {sep,[{sep,[{text,"\bencoding"}],0,false}],0,false},
    {sep,[{sep,[{text,[6,101,110,100,105,97,110]}],0,false}],0,false},
    {sep,
     [{sep,
       [{text,[14,117,110,105,99,111,100,101,95,98,105,110,97,114,121]}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[1,65]}],0,false},
               {text,"\n*binary()*"},
               {sep,
                [{text,
                  "5with characters encoded in the UTF-8 coding standard."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,[{sep,[{text,"\bchardata"}],0,false}],0,false},
    {sep,[{sep,[{text,"\bcharlist"}],0,false}],0,false},
    {sep,
     [{sep,
       [{text,
         [23,101,120,116,101,114,110,97,108,95,117,110,105,99,111,100,101,95,
          98,105,110,97,114,121]}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[1,65]}],0,false},
               {text,"\n*binary()*"},
               {sep,
                [{text,
                  "hwith characters coded in a user-specified Unicode encoding other than UTF-8 (that is, UTF-16 or UTF-32)."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{sep,
       [{text,
         [17,101,120,116,101,114,110,97,108,95,99,104,97,114,100,97,116,97]}],
       0,false}],
     0,false},
    {sep,
     [{sep,
       [{text,
         [17,101,120,116,101,114,110,97,108,95,99,104,97,114,108,105,115,
          116]}],
       0,false}],
     0,false},
    {sep,
     [{sep,[{text,"\rlatin1_binary"}],0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[1,65]}],0,false},
               {text,"\n*binary()*"},
               {sep,
                [{text,"%with characters coded in ISO Latin-1."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{sep,[{text,"\vlatin1_char"}],0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[2,65,110]}],0,false},
               {text,"\v*integer()*"},
               {sep,
                [{text,
                  "3representing a valid ISO Latin-1 character (0-255)."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{sep,
       [{text,[15,108,97,116,105,110,49,95,99,104,97,114,100,97,116,97]}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
               {text,"\n*iodata()*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{sep,
       [{text,[15,108,97,116,105,110,49,95,99,104,97,114,108,105,115,116]}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
               {text,"\n*iolist()*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,98,111,109,95,116,111,95,101,110,99,111,100,105,110,103,
        47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"*Identify UTF byte order marks in a binary."}],0,false}],
       0,true},
      null},
     null}},
   {sep,[{text,[1,42]},{text,[6,101,110,100,105,97,110]}],0,false},
   {above,
    {above,
     {text,[4,60,100,108,62]},
     {nest,4,
      {above,
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,116,62]},
            {sep,[{text,[3,66,105,110]}],0,false},
            {text,[5,60,47,100,116,62]}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,100,62]},
            {sep,
             [{sep,[{text,[1,65]}],0,false},
              {text,"\bbinary()"},
              {sep,[{text,"\tsuch that"}],0,false},
              {sep,
               [{sep,[{text,"\nbyte_size("}],0,false},
                {sep,[{text,[3,66,105,110]}],0,false},
                {sep,[{text,[1,41]}],0,false},
                {sep,[{text,[4,62,61,32,52]}],0,false}],
               0,false},
              {sep,[{text,[1,46]}],0,false}],
             0,false},
            {text,[5,60,47,100,100,62]}],
           0,true},
          null},
         null}}}}},
    {text,[5,60,47,100,108,62]}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "[Checks for a UTF Byte Order Mark (BOM) in the beginning of a binary. If the supplied binary"}],
             0,false},
            {text,[5,42,66,105,110,42]},
            {sep,
             [{text,
               [141,98,101,103,105,110,115,32,119,105,116,104,32,97,32,118,97,
                108,105,100,32,66,79,77,32,102,111,114,32,101,105,116,104,101,
                114,32,85,84,70,45,56,44,32,85,84,70,45,49,54,44,32,111,114,
                32,85,84,70,45,51,50,44,32,116,104,101,32,102,117,110,99,116,
                105,111,110,32,114,101,116,117,114,110,115,32,116,104,101,32,
                101,110,99,111,100,105,110,103,32,105,100,101,110,116,105,102,
                105,101,100,32,97,108,111,110,103,32,119,105,116,104,32,116,
                104,101,32,66,79,77,32,108,101,110,103,116,104,32,105,110,32,
                98,121,116,101,115,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"(If no BOM is found, the function returns"}],0,false},
            {text,"\f*{latin1,0}*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [25,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,98,105,
        110,97,114,121,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"5Convert a collection of characters to a UTF-8 binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [21,99,104,97,114,97,99,116,101,114,115,95,116,111,95,98,
                    105,110,97,114,121,40]}],
                 0,false},
                {sep,[{text,[4,68,97,116,97]}],0,false},
                {sep,
                 [{text,
                   [19,44,32,117,110,105,99,111,100,101,44,32,117,110,105,99,
                    111,100,101,41]}],
                 0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [25,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,98,105,
        110,97,114,121,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"5Convert a collection of characters to a UTF-8 binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [21,99,104,97,114,97,99,116,101,114,115,95,116,111,95,98,
                    105,110,97,114,121,40]}],
                 0,false},
                {sep,[{text,[4,68,97,116,97]}],0,false},
                {sep,[{text,[1,44]}],0,false},
                {sep,[{text,"\nInEncoding"}],0,false},
                {sep,[{text,"\n, unicode)"}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [25,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,98,105,
        110,97,114,121,47,51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"5Convert a collection of characters to a UTF-8 binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\nBehaves as"}],0,false},
            {text,"-[characters_to_list/2](#characters_to_list/2)"},
            {sep,
             [{text,"2, but produces a binary instead of a Unicode list."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\f*InEncoding*"},
            {sep,
             [{text,
               "Adefines how input is to be interpreted if binaries are present in"}],
             0,false},
            {text,[6,42,68,97,116,97,42]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\r*OutEncoding*"},
            {sep,
             [{text,"1defines in what format output is to be generated."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOptions:"}],0,false}],0,true},null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,[7,117,110,105,99,111,100,101]}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,[{text,"\fAn alias for"}],0,false},
                         {text,[4,117,116,102,56]},
                         {sep,
                          [{text,
                            "G, as this is the preferred encoding for Unicode characters in binaries."}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[{text,[5,117,116,102,49,54]}],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,[{text,"\fAn alias for"}],0,false},
                       {text,"\v{utf16,big}"},
                       {sep,[{text,[1,46]}],0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[{text,[5,117,116,102,51,50]}],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,[{text,"\fAn alias for"}],0,false},
                     {text,"\v{utf32,big}"},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\tThe atoms"}],0,false},
            {text,[5,42,98,105,103,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,"\b*little*"},
            {sep,[{text,"&denote big- or little-endian encoding."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"!Errors and exceptions occur as in"}],0,false},
            {text,"-[characters_to_list/2](#characters_to_list/2)"},
            {sep,[{text,"!, but the second element in tuple"}],0,false},
            {text,[7,42,101,114,114,111,114,42]},
            {sep,[{text,[2,111,114]}],0,false},
            {text,"\f*incomplete*"},
            {sep,[{text,[4,105,115,32,97]}],0,false},
            {text,"\n*binary()*"},
            {sep,[{text,"\tand not a"}],0,false},
            {text,"\b*list()*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [23,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,108,105,
        115,116,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "CConvert a collection of characters to a list of Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [19,99,104,97,114,97,99,116,101,114,115,95,116,111,95,108,
                    105,115,116,40]}],
                 0,false},
                {sep,[{text,[4,68,97,116,97]}],0,false},
                {sep,[{text,"\n, unicode)"}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [23,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,108,105,
        115,116,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "CConvert a collection of characters to a list of Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¾Converts a possibly deep list of integers and binaries into a list of integers representing Unicode characters. The binaries in the input can have characters encoded as one of the following:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{text,
             "AISO Latin-1 (0-255, one character per byte). Here, case parameter"}],
           0,false},
          {text,"\f*InEncoding*"},
          {sep,
           [{text,
             [21,105,115,32,116,111,32,98,101,32,115,112,101,99,105,102,105,
              101,100,32,97,115]}],
           0,false},
          {text,"\b*latin1*"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{text,
             "9One of the UTF-encodings, which is specified as parameter"}],
           0,false},
          {text,"\f*InEncoding*"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "INote that integers in the list always represent code points regardless of"}],
             0,false},
            {text,"\f*InEncoding*"},
            {sep,[{text,"\npassed. If"}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\nInEncoding"}],0,false},
                {sep,[{text,[6,108,97,116,105,110,49]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,"\eis passed, only code points"}],0,false},
            {sep,
             [{text,
               "H< 256 are allowed; otherwise, all valid unicode code points are allowed."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,"\f*InEncoding*"},
            {sep,[{text,[2,105,115]}],0,false},
            {text,"\b*latin1*"},
            {sep,[{text,"\v, parameter"}],0,false},
            {text,[6,42,68,97,116,97,42]},
            {sep,
             [{text,
               [18,99,111,114,114,101,115,112,111,110,100,115,32,116,111,32,
                116,104,101]}],
             0,false},
            {text,"\n*iodata()*"},
            {sep,[{text,"\rtype, but for"}],0,false},
            {text,"\t*unicode*"},
            {sep,[{text,"\v, parameter"}],0,false},
            {text,[6,42,68,97,116,97,42]},
            {sep,
             [{text,
               [20,99,97,110,32,99,111,110,116,97,105,110,32,105,110,116,101,
                103,101,114,115]}],
             0,false},
            {sep,
             [{text,
               "R> 255 (Unicode characters beyond the ISO Latin-1 range), which makes it invalid as"}],
             0,false},
            {text,"\n*iodata()*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "ÞThe purpose of the function is mainly to convert combinations of Unicode characters into a pure Unicode string in list representation for further processing. For writing the data to an external entity, the reverse function"}],
             0,false},
            {text,"1[characters_to_binary/3](#characters_to_binary/3)"},
            {sep,
             [{text,
               [15,99,111,109,101,115,32,105,110,32,104,97,110,100,121,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
            {text,"\t*unicode*"},
            {sep,
             [{text,
               [15,105,115,32,97,110,32,97,108,105,97,115,32,102,111,114]}],
             0,false},
            {text,[6,42,117,116,102,56,42]},
            {sep,
             [{text,
               "G, as this is the preferred encoding for Unicode characters in binaries."}],
             0,false},
            {text,[7,42,117,116,102,49,54,42]},
            {sep,
             [{text,
               [15,105,115,32,97,110,32,97,108,105,97,115,32,102,111,114]}],
             0,false},
            {text,"\r*{utf16,big}*"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[7,42,117,116,102,51,50,42]},
            {sep,
             [{text,
               [15,105,115,32,97,110,32,97,108,105,97,115,32,102,111,114]}],
             0,false},
            {text,"\r*{utf32,big}*"},
            {sep,[{text,"\v. The atoms"}],0,false},
            {text,[5,42,98,105,103,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,"\b*little*"},
            {sep,[{text,"&denote big- or little-endian encoding."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "×If the data cannot be converted, either because of illegal Unicode/ISO Latin-1 characters in the list, or because of invalid UTF encoding in any binaries, an error tuple is returned. The error tuple contains the tag"}],
             0,false},
            {text,[7,42,101,114,114,111,114,42]},
            {sep,
             [{text,
               [427,44,32,97,32,108,105,115,116,32,114,101,112,114,101,115,
                101,110,116,105,110,103,32,116,104,101,32,99,104,97,114,97,99,
                116,101,114,115,32,116,104,97,116,32,99,111,117,108,100,32,98,
                101,32,99,111,110,118,101,114,116,101,100,32,98,101,102,111,
                114,101,32,116,104,101,32,101,114,114,111,114,32,111,99,99,
                117,114,114,101,100,32,97,110,100,32,97,32,114,101,112,114,
                101,115,101,110,116,97,116,105,111,110,32,111,102,32,116,104,
                101,32,99,104,97,114,97,99,116,101,114,115,32,105,110,99,108,
                117,100,105,110,103,32,97,110,100,32,97,102,116,101,114,32,
                116,104,101,32,111,102,102,101,110,100,105,110,103,32,105,110,
                116,101,103,101,114,47,98,121,116,101,115,46,32,84,104,101,32,
                108,97,115,116,32,112,97,114,116,32,105,115,32,109,111,115,
                116,108,121,32,102,111,114,32,100,101,98,117,103,103,105,110,
                103,44,32,97,115,32,105,116,32,115,116,105,108,108,32,99,111,
                110,115,116,105,116,117,116,101,115,32,97,32,112,111,115,115,
                105,98,108,121,32,100,101,101,112,32,111,114,32,109,105,120,
                101,100,32,108,105,115,116,44,32,111,114,32,98,111,116,104,44,
                32,110,111,116,32,110,101,99,101,115,115,97,114,105,108,121,
                32,111,102,32,116,104,101,32,115,97,109,101,32,100,101,112,
                116,104,32,97,115,32,116,104,101,32,111,114,105,103,105,110,
                97,108,32,100,97,116,97,46,32,84,104,101,32,101,114,114,111,
                114,32,111,99,99,117,114,115,32,119,104,101,110,32,116,114,97,
                118,101,114,115,105,110,103,32,116,104,101,32,108,105,115,116,
                32,97,110,100,32,119,104,97,116,101,118,101,114,32,105,115,32,
                108,101,102,116,32,116,111,32,100,101,99,111,100,101,32,105,
                115,32,114,101,116,117,114,110,101,100,32,34,97,115,32,105,
                115,34,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [21,72,111,119,101,118,101,114,44,32,105,102,32,116,104,101,32,
                105,110,112,117,116]}],
             0,false},
            {text,[6,42,68,97,116,97,42]},
            {sep,
             [{text,
               "Yis a pure binary, the third part of the error tuple is guaranteed to be a binary as well."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"'Errors occur for the following reasons:"}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [22,73,110,116,101,103,101,114,115,32,111,117,116,32,111,
                   102,32,114,97,110,103,101,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[2,73,102]}],0,false},
                 {text,"\f*InEncoding*"},
                 {sep,[{text,[2,105,115]}],0,false},
                 {text,"\b*latin1*"},
                 {sep,
                  [{text,"%, an error occurs whenever an integer"}],
                  0,false},
                 {sep,
                  [{text,
                    [28,62,32,50,53,53,32,105,115,32,102,111,117,110,100,32,
                     105,110,32,116,104,101,32,108,105,115,116,115,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[2,73,102]}],0,false},
                 {text,"\f*InEncoding*"},
                 {sep,
                  [{text,
                    "Pis of a Unicode type, an error occurs whenever either of the following is found:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "6An integer > 16#10FFFF (the maximum Unicode character)"}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "^An integer in the range 16#D800 to 16#DFFF (invalid range reserved for UTF-16 surrogate pairs)"}],
              0,false}],
            0,false}}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [23,73,110,99,111,114,114,101,99,116,32,85,84,70,32,101,110,
                   99,111,100,105,110,103,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[2,73,102]}],0,false},
                 {text,"\f*InEncoding*"},
                 {sep,
                  [{text,
                    "Ris one of the UTF types, the bytes in any binaries must be valid in that encoding."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  ">Errors can occur for various reasons, including the following:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "F\"Pure\" decoding errors (like the upper bits of the bytes being wrong)."}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,",The bytes are decoded to a too large number."}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 "CThe bytes are decoded to a code point in the invalid Unicode range."}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "VEncoding is \"overlong\", meaning that a number should have been encoded in fewer bytes."}],
              0,false}],
            0,false}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "dThe case of a truncated UTF is handled specially, see the paragraph about incomplete binaries below."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[2,73,102]}],0,false},
                 {text,"\f*InEncoding*"},
                 {sep,[{text,[2,105,115]}],0,false},
                 {text,"\b*latin1*"},
                 {sep,
                  [{text,
                    "u, binaries are always valid as long as they contain whole bytes, as each byte falls into the valid ISO Latin-1 range."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "]A special type of error is when no actual invalid integers or bytes are found, but a trailing"}],
             0,false},
            {text,"\n*binary()*"},
            {sep,
             [{text,
               "¿consists of too few bytes to decode the last character. This error can occur if bytes are read from a file in chunks or if binaries in other ways are split on non-UTF character boundaries. An"}],
             0,false},
            {text,"\f*incomplete*"},
            {sep,[{text,"%tuple is then returned instead of the"}],0,false},
            {text,[7,42,101,114,114,111,114,42]},
            {sep,
             [{text,"+tuple. It consists of the same parts as the"}],
             0,false},
            {text,[7,42,101,114,114,111,114,42]},
            {sep,
             [{text,
               [21,116,117,112,108,101,44,32,98,117,116,32,116,104,101,32,116,
                97,103,32,105,115]}],
             0,false},
            {text,"\f*incomplete*"},
            {sep,[{text,"\ninstead of"}],0,false},
            {text,[7,42,101,114,114,111,114,42]},
            {sep,
             [{text,
               "xand the last element is always guaranteed to be a binary consisting of the first part of a (so far) valid UTF character."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "BIf one UTF character is split over two consecutive binaries in the"}],
             0,false},
            {text,[6,42,68,97,116,97,42]},
            {sep,
             [{text,
               "©, the conversion succeeds. This means that a character can be decoded from a range of binaries as long as the whole range is specified as input without errors occurring."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [309,10,100,101,99,111,100,101,95,100,97,116,97,40,68,97,116,97,
              41,32,45,62,10,32,32,32,99,97,115,101,32,117,110,105,99,111,100,
              101,58,99,104,97,114,97,99,116,101,114,115,95,116,111,95,108,
              105,115,116,40,68,97,116,97,44,117,110,105,99,111,100,101,41,32,
              111,102,10,32,32,32,32,32,32,123,105,110,99,111,109,112,108,101,
              116,101,44,69,110,99,111,100,101,100,44,32,82,101,115,116,125,
              32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,77,111,114,101,
              32,61,32,103,101,116,95,115,111,109,101,95,109,111,114,101,95,
              100,97,116,97,40,41,44,10,32,32,32,32,32,32,32,32,32,32,32,32,
              69,110,99,111,100,101,100,32,43,43,32,100,101,99,111,100,101,95,
              100,97,116,97,40,91,82,101,115,116,44,32,77,111,114,101,93,41,
              59,10,32,32,32,32,32,32,123,101,114,114,111,114,44,69,110,99,
              111,100,101,100,44,82,101,115,116,125,32,45,62,10,32,32,32,32,
              32,32,32,32,32,32,32,32,104,97,110,100,108,101,95,101,114,114,
              111,114,40,69,110,99,111,100,101,100,44,82,101,115,116,41,59,10,
              32,32,32,32,32,32,76,105,115,116,32,45,62,10,32,32,32,32,32,32,
              32,32,32,32,32,32,76,105,115,116,10,32,32,32,101,110,100,46]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [138,72,111,119,101,118,101,114,44,32,98,105,116,32,115,116,114,
              105,110,103,115,32,116,104,97,116,32,97,114,101,32,110,111,116,
              32,119,104,111,108,101,32,98,121,116,101,115,32,97,114,101,32,
              110,111,116,32,97,108,108,111,119,101,100,44,32,115,111,32,97,
              32,85,84,70,32,99,104,97,114,97,99,116,101,114,32,109,117,115,
              116,32,98,101,32,115,112,108,105,116,32,97,108,111,110,103,32,
              56,45,98,105,116,32,98,111,117,110,100,97,114,105,101,115,32,
              116,111,32,101,118,101,114,32,98,101,32,100,101,99,111,100,101,
              100,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[1,65]}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,",exception is thrown for the following cases:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {sep,
        [{text,[1,42]},{text,"%Any parameters are of the wrong type."}],
        0,false},
       {sep,
        [{text,[1,42]},
         {text,"1The list structure is invalid (a number as tail)."}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {text,"6The binaries do not contain whole bytes (bit strings)."}],
       0,false}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\e## characters_to_nfc_list/1"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "SNormalize characters to a list of canonical equivalent composed Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [158,67,111,110,118,101,114,116,115,32,97,32,112,111,115,115,105,
              98,108,121,32,100,101,101,112,32,108,105,115,116,32,111,102,32,
              99,104,97,114,97,99,116,101,114,115,32,97,110,100,32,98,105,110,
              97,114,105,101,115,32,105,110,116,111,32,97,32,78,111,114,109,
              97,108,105,122,101,100,32,70,111,114,109,32,111,102,32,99,97,
              110,111,110,105,99,97,108,32,101,113,117,105,118,97,108,101,110,
              116,32,67,111,109,112,111,115,101,100,32,99,104,97,114,97,99,
              116,101,114,115,32,97,99,99,111,114,100,105,110,103,32,116,111,
              32,116,104,101,32,85,110,105,99,111,100,101,32,115,116,97,110,
              100,97,114,100,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=Any binaries in the input must be encoded with utf8 encoding."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"#The result is a list of characters."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "Z\n3> unicode:characters_to_nfc_list([<<\"abc..a\">>,[778],$a,[776],$o,[776]]).\n\"abc..Ã¥Ã¤Ã¶\"\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [29,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,110,102,
        99,95,98,105,110,97,114,121,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "ZNormalize characters to a utf8 binary of canonical equivalent composed Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [158,67,111,110,118,101,114,116,115,32,97,32,112,111,115,115,105,
              98,108,121,32,100,101,101,112,32,108,105,115,116,32,111,102,32,
              99,104,97,114,97,99,116,101,114,115,32,97,110,100,32,98,105,110,
              97,114,105,101,115,32,105,110,116,111,32,97,32,78,111,114,109,
              97,108,105,122,101,100,32,70,111,114,109,32,111,102,32,99,97,
              110,111,110,105,99,97,108,32,101,113,117,105,118,97,108,101,110,
              116,32,67,111,109,112,111,115,101,100,32,99,104,97,114,97,99,
              116,101,114,115,32,97,99,99,111,114,100,105,110,103,32,116,111,
              32,116,104,101,32,85,110,105,99,111,100,101,32,115,116,97,110,
              100,97,114,100,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=Any binaries in the input must be encoded with utf8 encoding."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"%The result is an utf8 encoded binary."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "e\n4> unicode:characters_to_nfc_binary([<<\"abc..a\">>,[778],$a,[776],$o,[776]]).\n<<\"abc..Ã¥Ã¤Ã¶\"/utf8>>\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\e## characters_to_nfd_list/1"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "UNormalize characters to a list of canonical equivalent decomposed Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             " Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Decomposed characters according to the Unicode standard."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=Any binaries in the input must be encoded with utf8 encoding."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"#The result is a list of characters."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "Z\n1> unicode:characters_to_nfd_list(\"abc..Ã¥Ã¤Ã¶\").\n[97,98,99,46,46,97,778,97,776,111,776]\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [29,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,110,102,
        100,95,98,105,110,97,114,121,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "\\Normalize characters to a utf8 binary of canonical equivalent decomposed Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             " Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Decomposed characters according to the Unicode standard."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=Any binaries in the input must be encoded with utf8 encoding."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"%The result is an utf8 encoded binary."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "j\n2> unicode:characters_to_nfd_binary(\"abc..Ã¥Ã¤Ã¶\").\n<<97,98,99,46,46,97,204,138,97,204,136,111,204,136>>\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [28,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,110,102,
        107,99,95,108,105,115,116,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "SNormalize characters to a list of canonical equivalent composed Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [159,67,111,110,118,101,114,116,115,32,97,32,112,111,115,115,105,
              98,108,121,32,100,101,101,112,32,108,105,115,116,32,111,102,32,
              99,104,97,114,97,99,116,101,114,115,32,97,110,100,32,98,105,110,
              97,114,105,101,115,32,105,110,116,111,32,97,32,78,111,114,109,
              97,108,105,122,101,100,32,70,111,114,109,32,111,102,32,99,111,
              109,112,97,116,105,98,108,121,32,101,113,117,105,118,97,108,101,
              110,116,32,67,111,109,112,111,115,101,100,32,99,104,97,114,97,
              99,116,101,114,115,32,97,99,99,111,114,100,105,110,103,32,116,
              111,32,116,104,101,32,85,110,105,99,111,100,101,32,115,116,97,
              110,100,97,114,100,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=Any binaries in the input must be encoded with utf8 encoding."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"#The result is a list of characters."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "k\n3> unicode:characters_to_nfkc_list([<<\"abc..a\">>,[778],$a,[776],$o,[776],[65299,65298]]).\n\"abc..Ã¥Ã¤Ã¶32\"\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [30,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,110,102,
        107,99,95,98,105,110,97,114,121,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "[Normalize characters to a utf8 binary of compatibly equivalent composed Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [159,67,111,110,118,101,114,116,115,32,97,32,112,111,115,115,105,
              98,108,121,32,100,101,101,112,32,108,105,115,116,32,111,102,32,
              99,104,97,114,97,99,116,101,114,115,32,97,110,100,32,98,105,110,
              97,114,105,101,115,32,105,110,116,111,32,97,32,78,111,114,109,
              97,108,105,122,101,100,32,70,111,114,109,32,111,102,32,99,111,
              109,112,97,116,105,98,108,121,32,101,113,117,105,118,97,108,101,
              110,116,32,67,111,109,112,111,115,101,100,32,99,104,97,114,97,
              99,116,101,114,115,32,97,99,99,111,114,100,105,110,103,32,116,
              111,32,116,104,101,32,85,110,105,99,111,100,101,32,115,116,97,
              110,100,97,114,100,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=Any binaries in the input must be encoded with utf8 encoding."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"%The result is an utf8 encoded binary."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "v\n4> unicode:characters_to_nfkc_binary([<<\"abc..a\">>,[778],$a,[776],$o,[776],[65299,65298]]).\n<<\"abc..Ã¥Ã¤Ã¶32\"/utf8>>\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [28,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,110,102,
        107,100,95,108,105,115,116,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "VNormalize characters to a list of compatibly equivalent decomposed Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¡Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Decomposed characters according to the Unicode standard."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=Any binaries in the input must be encoded with utf8 encoding."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"#The result is a list of characters."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "q\n1> unicode:characters_to_nfkd_list([\"abc..Ã¥Ã¤Ã¶\",[65299,65298]]).\n[97,98,99,46,46,97,778,97,776,111,776,51,50]\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [30,35,35,32,99,104,97,114,97,99,116,101,114,115,95,116,111,95,110,102,
        107,100,95,98,105,110,97,114,121,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "]Normalize characters to a utf8 binary of compatibly equivalent decomposed Unicode characters."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¡Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Decomposed characters according to the Unicode standard."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=Any binaries in the input must be encoded with utf8 encoding."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"%The result is an utf8 encoded binary."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [129,10,50,62,32,117,110,105,99,111,100,101,58,99,104,97,114,97,
              99,116,101,114,115,95,116,111,95,110,102,107,100,95,98,105,110,
              97,114,121,40,91,34,97,98,99,46,46,195,165,195,164,195,182,34,
              44,91,54,53,50,57,57,44,54,53,50,57,56,93,93,41,46,10,60,60,57,
              55,44,57,56,44,57,57,44,52,54,44,52,54,44,57,55,44,50,48,52,44,
              49,51,56,44,57,55,44,50,48,52,44,49,51,54,44,49,49,49,44,50,48,
              52,44,49,51,54,44,53,49,44,53,48,62,62,10]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,101,110,99,111,100,105,110,103,95,116,111,95,98,111,109,
        47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"2Create a binary UTF byte order mark from encoding."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {text,[4,60,100,108,62]},
     {nest,4,
      {above,
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,116,62]},
            {sep,[{text,[3,66,105,110]}],0,false},
            {text,[5,60,47,100,116,62]}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,100,62]},
            {sep,
             [{sep,[{text,[1,65]}],0,false},
              {text,"\bbinary()"},
              {sep,[{text,"\tsuch that"}],0,false},
              {sep,
               [{sep,[{text,"\nbyte_size("}],0,false},
                {sep,[{text,[3,66,105,110]}],0,false},
                {sep,[{text,[6,41,32,62,61,32,52]}],0,false}],
               0,false},
              {sep,[{text,[1,46]}],0,false}],
             0,false},
            {text,[5,60,47,100,100,62]}],
           0,true},
          null},
         null}}}}},
    {text,[5,60,47,100,108,62]}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "ACreates a UTF Byte Order Mark (BOM) as a binary from the supplied"}],
             0,false},
            {text,"\f*InEncoding*"},
            {sep,
             [{text,
               "`. The BOM is, if supported at all, expected to be placed first in UTF encoded files or messages."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [20,84,104,101,32,102,117,110,99,116,105,111,110,32,114,101,
                116,117,114,110,115]}],
             0,false},
            {text,[6,42,60,60,62,62,42]},
            {sep,[{text,[3,102,111,114]}],0,false},
            {text,"\b*latin1*"},
            {sep,
             [{text,"-encoding, as there is no BOM for ISO Latin-1."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "DNotice that the BOM for UTF-8 is seldom used, and it is really not a"}],
             0,false},
            {text,[14,42,42,98,121,116,101,32,111,114,100,101,114,42,42]},
            {sep,
             [{text,
               [139,109,97,114,107,46,32,84,104,101,114,101,32,97,114,101,32,
                111,98,118,105,111,117,115,108,121,32,110,111,32,98,121,116,
                101,32,111,114,100,101,114,32,105,115,115,117,101,115,32,119,
                105,116,104,32,85,84,70,45,56,44,32,115,111,32,116,104,101,32,
                66,79,77,32,105,115,32,111,110,108,121,32,116,104,101,114,101,
                32,116,111,32,100,105,102,102,101,114,101,110,116,105,97,116,
                101,32,85,84,70,45,56,32,101,110,99,111,100,105,110,103,32,
                102,114,111,109,32,111,116,104,101,114,32,85,84,70,32,102,111,
                114,109,97,116,115,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
