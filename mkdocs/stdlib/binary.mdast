{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\b# binary"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\b# binary"},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"!Library for handling binary data."}],0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [311,84,104,105,115,32,109,111,100,117,108,101,32,99,111,
                   110,116,97,105,110,115,32,102,117,110,99,116,105,111,110,
                   115,32,102,111,114,32,109,97,110,105,112,117,108,97,116,
                   105,110,103,32,98,121,116,101,45,111,114,105,101,110,116,
                   101,100,32,98,105,110,97,114,105,101,115,46,32,65,108,116,
                   104,111,117,103,104,32,116,104,101,32,109,97,106,111,114,
                   105,116,121,32,111,102,32,102,117,110,99,116,105,111,110,
                   115,32,99,111,117,108,100,32,98,101,32,112,114,111,118,105,
                   100,101,100,32,117,115,105,110,103,32,98,105,116,45,115,
                   121,110,116,97,120,44,32,116,104,101,32,102,117,110,99,116,
                   105,111,110,115,32,105,110,32,116,104,105,115,32,108,105,
                   98,114,97,114,121,32,97,114,101,32,104,105,103,104,108,121,
                   32,111,112,116,105,109,105,122,101,100,32,97,110,100,32,97,
                   114,101,32,101,120,112,101,99,116,101,100,32,116,111,32,
                   101,105,116,104,101,114,32,101,120,101,99,117,116,101,32,
                   102,97,115,116,101,114,32,111,114,32,99,111,110,115,117,
                   109,101,32,108,101,115,115,32,109,101,109,111,114,121,44,
                   32,111,114,32,98,111,116,104,44,32,116,104,97,110,32,97,32,
                   99,111,117,110,116,101,114,112,97,114,116,32,119,114,105,
                   116,116,101,110,32,105,110,32,112,117,114,101,32,69,114,
                   108,97,110,103,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "IThe module is provided according to Erlang Enhancement Proposal (EEP) 31."}],
                0,false}],
              0,true},
             null},
            null}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "vThe library handles byte-oriented data. For bitstrings that are not binaries (does not contain whole octets of bits) a"}],
                    0,false},
                   {text,"\b*badarg*"},
                   {sep,
                    [{text,
                      "=exception is thrown from any of the functions in this module."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f# Data Types"},null},null}},
    {sep,
     [{sep,[{text,[2,99,112]}],0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "KOpaque data type representing a compiled search pattern. Guaranteed to be a"}],
                0,false},
               {text,"\t*tuple()*"},
               {sep,
                [{text,
                  "Ito allow programs to distinguish it from non-precompiled search patterns."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{sep,[{text,[4,112,97,114,116]}],0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,"1A representaion of a part (or range) in a binary."}],
                0,false},
               {text,[7,42,83,116,97,114,116,42]},
               {sep,
                [{text,
                  [29,105,115,32,97,32,122,101,114,111,45,98,97,115,101,100,
                   32,111,102,102,115,101,116,32,105,110,116,111,32,97]}],
                0,false},
               {text,"\n*binary()*"},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,"\b*Length*"},
               {sep,
                [{text,
                  [134,105,115,32,116,104,101,32,108,101,110,103,116,104,32,
                   111,102,32,116,104,97,116,32,112,97,114,116,46,32,65,115,
                   32,105,110,112,117,116,32,116,111,32,102,117,110,99,116,
                   105,111,110,115,32,105,110,32,116,104,105,115,32,109,111,
                   100,117,108,101,44,32,97,32,114,101,118,101,114,115,101,32,
                   112,97,114,116,32,115,112,101,99,105,102,105,99,97,116,105,
                   111,110,32,105,115,32,97,108,108,111,119,101,100,44,32,99,
                   111,110,115,116,114,117,99,116,101,100,32,119,105,116,104,
                   32,97,32,110,101,103,97,116,105,118,101]}],
                0,false},
               {text,"\b*Length*"},
               {sep,
                [{text,"*, so that the part of the binary begins at"}],
                0,false},
               {text,[7,42,83,116,97,114,116,42]},
               {sep,[{text,[1,43]}],0,false},
               {text,"\b*Length*"},
               {sep,[{text,"\band is -"}],0,false},
               {text,"\b*Length*"},
               {sep,
                [{text,"-long. This is useful for referencing the last"}],
                0,false},
               {text,[3,42,78,42]},
               {sep,
                [{text,
                  [20,98,121,116,101,115,32,111,102,32,97,32,98,105,110,97,
                   114,121,32,97,115]}],
                0,false},
               {text,
                [20,42,123,115,105,122,101,40,66,105,110,97,114,121,41,44,32,
                 45,78,125,42]},
               {sep,
                [{text,",. The functions in this module always return"}],
                0,false},
               {text,"\b*part()*"},
               {sep,
                [{text,
                  [15,115,32,119,105,116,104,32,112,111,115,105,116,105,118,
                   101]}],
                0,false},
               {text,"\b*Length*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,[7,35,35,32,97,116,47,50]},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"3Return the byte at a specific position in a binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [28,82,101,116,117,114,110,115,32,116,104,101,32,98,121,116,
                101,32,97,116,32,112,111,115,105,116,105,111,110]}],
             0,false},
            {text,[5,42,80,111,115,42]},
            {sep,
             [{text,
               [22,40,122,101,114,111,45,98,97,115,101,100,41,32,105,110,32,
                98,105,110,97,114,121]}],
             0,false},
            {text,"\t*Subject*"},
            {sep,
             [{text,
               [17,97,115,32,97,110,32,105,110,116,101,103,101,114,46,32,73,
                102]}],
             0,false},
            {text,[5,42,80,111,115,42]},
            {sep,[{text,[2,62,61]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\nbyte_size("}],0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[1,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[3,44,32,97]}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[16,35,35,32,98,105,110,95,116,111,95,108,105,115,116,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"'Convert a binary to a list of integers."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\fbin_to_list("}],0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,
                 [{text,
                   [15,44,32,123,48,44,98,121,116,101,95,115,105,122,101,40]}],
                 0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[3,41,125,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[16,35,35,32,98,105,110,95,116,111,95,108,105,115,116,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"'Convert a binary to a list of integers."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\bConverts"}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,"\fto a list of"}],0,false},
            {text,"\b*byte()*"},
            {sep,
             [{text,"+s, each representing the value of one byte."}],
             0,false},
            {text,"\b*part()*"},
            {sep,
             [{text,
               [25,100,101,110,111,116,101,115,32,119,104,105,99,104,32,112,
                97,114,116,32,111,102,32,116,104,101]}],
             0,false},
            {text,"\n*binary()*"},
            {sep,[{text,"\vto convert."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "W\n1> binary:bin_to_list(<<\"erlang\">>, {1,3}).\n\"rla\"\n%% or [114,108,97] in list notation."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,"\b*PosLen*"},
            {sep,
             [{text,"+in any way references outside the binary, a"}],
             0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[16,35,35,32,98,105,110,95,116,111,95,108,105,115,116,47,51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"'Convert a binary to a list of integers."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\fbin_to_list("}],0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[3,44,32,123]}],0,false},
                {sep,[{text,[3,80,111,115]}],0,false},
                {sep,[{text,[1,44]}],0,false},
                {sep,[{text,[3,76,101,110]}],0,false},
                {sep,[{text,[2,125,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,99,111,109,112,105,108,101,95,112,97,116,116,101,114,110,
        47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"#Precompile a binary search pattern."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "jBuilds an internal structure representing a compilation of a search pattern, later to be used in functions"}],
             0,false},
            {text,
             [19,91,109,97,116,99,104,45,51,93,40,35,109,97,116,99,104,45,51,
              41]},
            {sep,[{text,[1,44]}],0,false},
            {text,
             [23,91,109,97,116,99,104,101,115,45,51,93,40,35,109,97,116,99,
              104,101,115,45,51,41]},
            {sep,[{text,[1,44]}],0,false},
            {text,
             [19,91,115,112,108,105,116,45,51,93,40,35,115,112,108,105,116,45,
              51,41]},
            {sep,[{text,[4,44,32,111,114]}],0,false},
            {text,
             [23,91,114,101,112,108,97,99,101,45,52,93,40,35,114,101,112,108,
              97,99,101,45,52,41]},
            {sep,[{text,[5,46,32,84,104,101]}],0,false},
            {text,[6,42,99,112,40,41,42]},
            {sep,
             [{text,
               [30,114,101,116,117,114,110,101,100,32,105,115,32,103,117,97,
                114,97,110,116,101,101,100,32,116,111,32,98,101,32,97]}],
             0,false},
            {text,"\t*tuple()*"},
            {sep,
             [{text,
               "Ito allow programs to distinguish it from non-precompiled search patterns."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "mWhen a list of binaries is specified, it denotes a set of alternative binaries to search for. For example, if"}],
             0,false},
            {text,"&*[<<\"functional\">>,<<\"programming\">>]*"},
            {sep,
             [{text,
               [15,105,115,32,115,112,101,99,105,102,105,101,100,32,97,115]}],
             0,false},
            {text,"\t*Pattern*"},
            {sep,
             [{text,
               [19,44,32,116,104,105,115,32,109,101,97,110,115,32,101,105,116,
                104,101,114]}],
             0,false},
            {text,
             [18,42,60,60,34,102,117,110,99,116,105,111,110,97,108,34,62,62,
              42]},
            {sep,[{text,[2,111,114]}],0,false},
            {text,
             [19,42,60,60,34,112,114,111,103,114,97,109,109,105,110,103,34,62,
              62,42]},
            {sep,
             [{text,
               "©\". The pattern is a set of alternatives; when only a single binary is specified, the set has only one element. The order of alternatives in a pattern is not significant."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "JThe list of binaries used for search alternatives must be flat and proper."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,"\t*Pattern*"},
            {sep,
             [{text,
               "=is not a binary or a flat proper list of binaries with length"}],
             0,false},
            {sep,[{text,[6,62,32,48,44,32,97]}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## copy/1"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [31,67,114,101,97,116,101,32,97,32,100,117,112,108,105,99,97,116,
            101,32,111,102,32,97,32,98,105,110,97,114,121,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,[5,99,111,112,121,40]}],0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[4,44,32,49,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## copy/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [18,68,117,112,108,105,99,97,116,101,32,97,32,98,105,110,97,114,
              121]}],
           0,false},
          {text,[3,42,78,42]},
          {sep,
           [{text,
             [23,116,105,109,101,115,32,97,110,100,32,99,114,101,97,116,101,
              32,97,32,110,101,119,46]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"$Creates a binary with the content of"}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,"\nduplicated"}],0,false},
            {text,[3,42,78,42]},
            {sep,[{text,[6,116,105,109,101,115,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"2This function always creates a new binary, even if"}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,[1,78]}],0,false},
                {sep,[{text,[3,61,32,49]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,"\n. By using"}],0,false},
            {text,
             [17,91,99,111,112,121,47,49,93,40,35,99,111,112,121,47,49,41]},
            {sep,
             [{text,
               "bon a binary referencing a larger binary, one can free up the larger binary for garbage collection."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
          {sep,
           [{text,[4,32,32,32,32]},
            {sep,
             [{sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        [397,66,121,32,100,101,108,105,98,101,114,97,116,101,
                         108,121,32,99,111,112,121,105,110,103,32,97,32,115,
                         105,110,103,108,101,32,98,105,110,97,114,121,32,116,
                         111,32,97,118,111,105,100,32,114,101,102,101,114,101,
                         110,99,105,110,103,32,97,32,108,97,114,103,101,114,
                         32,98,105,110,97,114,121,44,32,111,110,101,32,99,97,
                         110,44,32,105,110,115,116,101,97,100,32,111,102,32,
                         102,114,101,101,105,110,103,32,117,112,32,116,104,
                         101,32,108,97,114,103,101,114,32,98,105,110,97,114,
                         121,32,102,111,114,32,108,97,116,101,114,32,103,97,
                         114,98,97,103,101,32,99,111,108,108,101,99,116,105,
                         111,110,44,32,99,114,101,97,116,101,32,109,117,99,
                         104,32,109,111,114,101,32,98,105,110,97,114,121,32,
                         100,97,116,97,32,116,104,97,110,32,110,101,101,100,
                         101,100,46,32,83,104,97,114,105,110,103,32,98,105,
                         110,97,114,121,32,100,97,116,97,32,105,115,32,117,
                         115,117,97,108,108,121,32,103,111,111,100,46,32,79,
                         110,108,121,32,105,110,32,115,112,101,99,105,97,108,
                         32,99,97,115,101,115,44,32,119,104,101,110,32,115,
                         109,97,108,108,32,112,97,114,116,115,32,114,101,102,
                         101,114,101,110,99,101,32,108,97,114,103,101,32,98,
                         105,110,97,114,105,101,115,32,97,110,100,32,116,104,
                         101,32,108,97,114,103,101,32,98,105,110,97,114,105,
                         101,115,32,97,114,101,32,110,111,32,108,111,110,103,
                         101,114,32,117,115,101,100,32,105,110,32,97,110,121,
                         32,112,114,111,99,101,115,115,44,32,100,101,108,105,
                         98,101,114,97,116,101,32,99,111,112,121,105,110,103,
                         32,99,97,110,32,98,101,32,97,32,103,111,111,100,32,
                         105,100,101,97,46]}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,true}],
           0,false}},
         {text,[0]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,[3,42,78,42]},
            {sep,[{text,[1,60]}],0,false},
            {text,[3,42,48,42]},
            {sep,[{text,[3,44,32,97]}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,100,101,99,111,100,101,95,117,110,115,105,103,110,101,100,
        47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"8Decode a whole binary into an integer of arbitrary size."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [16,100,101,99,111,100,101,95,117,110,115,105,103,110,101,
                    100,40]}],
                 0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[6,44,32,98,105,103,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,100,101,99,111,100,101,95,117,110,115,105,103,110,101,100,
        47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"8Decode a whole binary into an integer of arbitrary size."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "bConverts the binary digit representation, in big endian or little endian, of a positive integer in"}],
             0,false},
            {text,"\t*Subject*"},
            {sep,[{text,"\fto an Erlang"}],0,false},
            {text,"\v*integer()*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "9\n1> binary:decode_unsigned(<<169,138,199>>,big).\n11111111"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,101,110,99,111,100,101,95,117,110,115,105,103,110,101,100,
        47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"3Encode an unsigned integer into the minimal binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [16,101,110,99,111,100,101,95,117,110,115,105,103,110,101,
                    100,40]}],
                 0,false},
                {sep,[{text,"\bUnsigned"}],0,false},
                {sep,[{text,[6,44,32,98,105,103,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,101,110,99,111,100,101,95,117,110,115,105,103,110,101,100,
        47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"3Encode an unsigned integer into the minimal binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [137,67,111,110,118,101,114,116,115,32,97,32,112,111,115,105,116,
              105,118,101,32,105,110,116,101,103,101,114,32,116,111,32,116,
              104,101,32,115,109,97,108,108,101,115,116,32,112,111,115,115,
              105,98,108,101,32,114,101,112,114,101,115,101,110,116,97,116,
              105,111,110,32,105,110,32,97,32,98,105,110,97,114,121,32,100,
              105,103,105,116,32,114,101,112,114,101,115,101,110,116,97,116,
              105,111,110,44,32,101,105,116,104,101,114,32,98,105,103,32,101,
              110,100,105,97,110,32,111,114,32,108,105,116,116,108,101,32,101,
              110,100,105,97,110,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             ":\n1> binary:encode_unsigned(11111111, big).\n<<169,138,199>>"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## first/1"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"\"Return the first byte of a binary."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text," Returns the first byte of binary"}],0,false},
            {text,"\t*Subject*"},
            {sep,
             [{text,
               [29,97,115,32,97,110,32,105,110,116,101,103,101,114,46,32,73,
                102,32,116,104,101,32,115,105,122,101,32,111,102]}],
             0,false},
            {text,"\t*Subject*"},
            {sep,[{text,"\nis zero, a"}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## last/1"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"!Return the last byte of a binary."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [31,82,101,116,117,114,110,115,32,116,104,101,32,108,97,115,
                116,32,98,121,116,101,32,111,102,32,98,105,110,97,114,121]}],
             0,false},
            {text,"\t*Subject*"},
            {sep,
             [{text,
               [29,97,115,32,97,110,32,105,110,116,101,103,101,114,46,32,73,
                102,32,116,104,101,32,115,105,122,101,32,111,102]}],
             0,false},
            {text,"\t*Subject*"},
            {sep,[{text,"\nis zero, a"}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[16,35,35,32,108,105,115,116,95,116,111,95,98,105,110,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"4Convert a list of integers and binaries to a binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [16,87,111,114,107,115,32,101,120,97,99,116,108,121,32,97,
                115]}],
             0,false},
            {text,
             "?[erts/erlang#list_to_binary/1](../erts/erlang#list_to_binary/1)"},
            {sep,
             [{text,
               [25,44,32,97,100,100,101,100,32,102,111,114,32,99,111,109,112,
                108,101,116,101,110,101,115,115,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [26,35,35,32,108,111,110,103,101,115,116,95,99,111,109,109,111,110,95,
        112,114,101,102,105,120,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "=Return length of longest common prefix for a set of binaries."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "GReturns the length of the longest common prefix of the binaries in list"}],
             0,false},
            {text,"\n*Binaries*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [130,10,49,62,32,98,105,110,97,114,121,58,108,111,110,103,101,
              115,116,95,99,111,109,109,111,110,95,112,114,101,102,105,120,40,
              91,60,60,34,101,114,108,97,110,103,34,62,62,44,32,60,60,34,101,
              114,103,111,110,111,109,121,34,62,62,93,41,46,10,50,10,50,62,32,
              98,105,110,97,114,121,58,108,111,110,103,101,115,116,95,99,111,
              109,109,111,110,95,112,114,101,102,105,120,40,91,60,60,34,101,
              114,108,97,110,103,34,62,62,44,32,60,60,34,112,101,114,108,34,
              62,62,93,41,46,10,48]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,"\n*Binaries*"},
            {sep,[{text,"!is not a flat list of binaries, a"}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [26,35,35,32,108,111,110,103,101,115,116,95,99,111,109,109,111,110,95,
        115,117,102,102,105,120,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "=Return length of longest common suffix for a set of binaries."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "GReturns the length of the longest common suffix of the binaries in list"}],
             0,false},
            {text,"\n*Binaries*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "~\n1> binary:longest_common_suffix([<<\"erlang\">>, <<\"fang\">>]).\n3\n2> binary:longest_common_suffix([<<\"erlang\">>, <<\"perl\">>]).\n0"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,"\n*Binaries*"},
            {sep,[{text,"!is not a flat list of binaries, a"}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## match/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"4Search for the first match of a pattern in a binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,[6,109,97,116,99,104,40]}],0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[1,44]}],0,false},
                {sep,[{text,[7,80,97,116,116,101,114,110]}],0,false},
                {sep,[{text,[5,44,32,91,93,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## match/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"4Search for the first match of a pattern in a binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,[{text,[1,42]},{text,[4,112,97,114,116]}],0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"$Searches for the first occurrence of"}],0,false},
            {text,"\t*Pattern*"},
            {sep,[{text,[2,105,110]}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,"$and returns the position and length."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [20,84,104,101,32,102,117,110,99,116,105,111,110,32,114,101,
                116,117,114,110,115]}],
             0,false},
            {text,[15,42,123,80,111,115,44,32,76,101,110,103,116,104,125,42]},
            {sep,
             [{text,
               [17,102,111,114,32,116,104,101,32,98,105,110,97,114,121,32,105,
                110]}],
             0,false},
            {text,"\t*Pattern*"},
            {sep,[{text,"$, starting at the lowest position in"}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "?\n1> binary:match(<<\"abcde\">>, [<<\"bcde\">>, <<\"cd\">>],[]).\n{1,4}"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\vEven though"}],0,false},
            {text,"\n*<<\"cd\">>*"},
            {sep,[{text,"\vends before"}],0,false},
            {text,"\f*<<\"bcde\">>*"},
            {sep,[{text,[1,44]}],0,false},
            {text,"\f*<<\"bcde\">>*"},
            {sep,
             [{text,
               "~begins first and is therefore the first match. If two overlapping matches begin at the same position, the longest is returned."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [23,83,117,109,109,97,114,121,32,111,102,32,116,104,101,32,111,
              112,116,105,111,110,115,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,116,62]},
              {sep,
               [{sep,
                 [{sep,[{text,"\t{scope, {"}],0,false},
                  {sep,[{text,[5,83,116,97,114,116]}],0,false},
                  {sep,[{text,[1,44]}],0,false},
                  {sep,[{text,[6,76,101,110,103,116,104]}],0,false},
                  {sep,[{text,[2,125,125]}],0,false}],
                 0,false}],
               0,false},
              {text,[5,60,47,100,116,62]}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        "[Only the specified part is searched. Return values still have offsets from the beginning of"}],
                      0,false},
                     {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                     {sep,[{text,"\f. A negative"}],0,false},
                     {text,[6,76,101,110,103,116,104]},
                     {sep,
                      [{text,
                        "=is allowed as described in section Data Types in this manual."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [25,73,102,32,110,111,110,101,32,111,102,32,116,104,101,32,115,
                116,114,105,110,103,115,32,105,110]}],
             0,false},
            {text,"\t*Pattern*"},
            {sep,
             [{text,
               [18,105,115,32,102,111,117,110,100,44,32,116,104,101,32,97,116,
                111,109]}],
             0,false},
            {text,"\t*nomatch*"},
            {sep,[{text,"\fis returned."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [20,70,111,114,32,97,32,100,101,115,99,114,105,112,116,105,111,
                110,32,111,102]}],
             0,false},
            {text,"\t*Pattern*"},
            {sep,
             [{text,[14,44,32,115,101,101,32,102,117,110,99,116,105,111,110]}],
             0,false},
            {text,"'[compile_pattern-1](#compile_pattern-1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,
             [25,42,123,115,99,111,112,101,44,32,123,83,116,97,114,116,44,76,
              101,110,103,116,104,125,125,42]},
            {sep,[{text,"%is specified in the options such that"}],0,false},
            {text,[7,42,83,116,97,114,116,42]},
            {sep,[{text,"\t> size of"}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,[1,44]}],0,false},
            {text,[7,42,83,116,97,114,116,42]},
            {sep,[{text,[1,43]}],0,false},
            {text,"\b*Length*"},
            {sep,[{text,[6,60,32,48,32,111,114]}],0,false},
            {text,[7,42,83,116,97,114,116,42]},
            {sep,[{text,[1,43]}],0,false},
            {text,"\b*Length*"},
            {sep,[{text,"\t> size of"}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,[3,44,32,97]}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\f## matches/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"0Search for all matches of a pattern in a binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\bmatches("}],0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[1,44]}],0,false},
                {sep,[{text,[7,80,97,116,116,101,114,110]}],0,false},
                {sep,[{text,[5,44,32,91,93,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\f## matches/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"0Search for all matches of a pattern in a binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,[{text,[1,42]},{text,[4,112,97,114,116]}],0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,65,115]}],0,false},
            {text,
             [19,91,109,97,116,99,104,45,50,93,40,35,109,97,116,99,104,45,50,
              41]},
            {sep,[{text,[5,44,32,98,117,116]}],0,false},
            {text,"\t*Subject*"},
            {sep,
             [{text,
               "Lis searched until exhausted and a list of all non-overlapping parts matching"}],
             0,false},
            {text,"\t*Pattern*"},
            {sep,
             [{text,
               [23,105,115,32,114,101,116,117,114,110,101,100,32,40,105,110,
                32,111,114,100,101,114,41,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "eThe first and longest match is preferred to a shorter, which is illustrated by the following example:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "]\n1> binary:matches(<<\"abcde\">>,\n                  [<<\"bcde\">>,<<\"bc\">>,<<\"de\">>],[]).\n[{1,4}]"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [279,84,104,101,32,114,101,115,117,108,116,32,115,104,111,119,
                115,32,116,104,97,116,32,60,60,34,98,99,100,101,34,62,62,32,
                105,115,32,115,101,108,101,99,116,101,100,32,105,110,115,116,
                101,97,100,32,111,102,32,116,104,101,32,115,104,111,114,116,
                101,114,32,109,97,116,99,104,32,60,60,34,98,99,34,62,62,32,40,
                119,104,105,99,104,32,119,111,117,108,100,32,104,97,118,101,
                32,103,105,118,101,110,32,114,97,105,115,101,32,116,111,32,
                111,110,101,32,109,111,114,101,32,109,97,116,99,104,44,32,60,
                60,34,100,101,34,62,62,41,46,32,84,104,105,115,32,99,111,114,
                114,101,115,112,111,110,100,115,32,116,111,32,116,104,101,32,
                98,101,104,97,118,105,111,114,32,111,102,32,80,79,83,73,88,32,
                114,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,
                111,110,115,32,40,97,110,100,32,112,114,111,103,114,97,109,
                115,32,108,105,107,101,32,97,119,107,41,44,32,98,117,116,32,
                105,115,32,110,111,116,32,99,111,110,115,105,115,116,101,110,
                116,32,119,105,116,104,32,97,108,116,101,114,110,97,116,105,
                118,101,32,109,97,116,99,104,101,115,32,105,110]}],
             0,false},
            {text,[4,42,114,101,42]},
            {sep,
             [{text,
               "^(and Perl), where instead lexical ordering in the search pattern selects which string matches."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "HIf none of the strings in a pattern is found, an empty list is returned."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [20,70,111,114,32,97,32,100,101,115,99,114,105,112,116,105,111,
                110,32,111,102]}],
             0,false},
            {text,"\t*Pattern*"},
            {sep,[{text,[5,44,32,115,101,101]}],0,false},
            {text,"'[compile_pattern-1](#compile_pattern-1)"},
            {sep,
             [{text,"-. For a description of available options, see"}],
             0,false},
            {text,
             [19,91,109,97,116,99,104,45,51,93,40,35,109,97,116,99,104,45,51,
              41]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\t{scope, {"}],0,false},
                {sep,[{text,[5,83,116,97,114,116]}],0,false},
                {sep,[{text,[1,44]}],0,false},
                {sep,[{text,[6,76,101,110,103,116,104]}],0,false},
                {sep,[{text,[2,125,125]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,"%is specified in the options such that"}],0,false},
            {text,[7,42,83,116,97,114,116,42]},
            {sep,[{text,"\t> size of"}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,[1,44]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,[5,83,116,97,114,116]}],0,false},
                {sep,[{text,[1,43]}],0,false},
                {sep,[{text,[6,76,101,110,103,116,104]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[6,60,32,48,32,111,114]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,[5,83,116,97,114,116]}],0,false},
                {sep,[{text,[1,43]}],0,false},
                {sep,[{text,[6,76,101,110,103,116,104]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[2,105,115]}],0,false},
            {sep,[{text,"\t> size of"}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,[3,44,32,97]}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## part/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,[{sep,[{text,"\eExtract a part of a binary."}],0,false}],0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\eExtracts the part of binary"}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,"\fdescribed by"}],0,false},
            {text,"\b*PosLen*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "FA negative length can be used to extract bytes at the end of a binary:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "]\n1> Bin = <<1,2,3,4,5,6,7,8,9,10>>.\n2> binary:part(Bin, {byte_size(Bin), -5}).\n<<6,7,8,9,10>>"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
          {sep,
           [{text,[4,32,32,32,32]},
            {sep,
             [{sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        [17,91,112,97,114,116,47,50,93,40,35,112,97,114,116,
                         45,50,41]},
                       {sep,[{text,[3,97,110,100]}],0,false},
                       {text,
                        [17,91,112,97,114,116,47,51,93,40,35,112,97,114,116,
                         45,51,41]},
                       {sep,
                        [{text,
                          [25,97,114,101,32,97,108,115,111,32,97,118,97,105,
                           108,97,98,108,101,32,105,110,32,116,104,101]}],
                        0,false},
                       {text,
                        [23,91,101,114,116,115,47,101,114,108,97,110,103,93,
                         40,46,47,101,114,108,97,110,103,41]},
                       {sep,
                        [{text,
                          [22,109,111,100,117,108,101,32,117,110,100,101,114,
                           32,116,104,101,32,110,97,109,101,115]}],
                        0,false},
                       {text,
                        [15,42,98,105,110,97,114,121,95,112,97,114,116,47,50,
                         42]},
                       {sep,[{text,[3,97,110,100]}],0,false},
                       {text,
                        [15,42,98,105,110,97,114,121,95,112,97,114,116,47,51,
                         42]},
                       {sep,
                        [{text,"(. Those BIFs are allowed in guard tests."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,true}],
           0,false}},
         {text,[0]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,"\b*PosLen*"},
            {sep,
             [{text,"+in any way references outside the binary, a"}],
             0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## part/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,[{sep,[{text,"\eExtract a part of a binary."}],0,false}],0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,[5,112,97,114,116,40]}],0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[3,44,32,123]}],0,false},
                {sep,[{text,[3,80,111,115]}],0,false},
                {sep,[{text,[1,44]}],0,false},
                {sep,[{text,[3,76,101,110]}],0,false},
                {sep,[{text,[2,125,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [25,35,35,32,114,101,102,101,114,101,110,99,101,100,95,98,121,116,101,
        95,115,105,122,101,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "<Determine the size of the binary pointed out by a subbinary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "ÆIf a binary references a larger binary (often described as being a subbinary), it can be useful to get the size of the referenced binary. This function can be used in a program to trigger the use of"}],
             0,false},
            {text,
             [17,91,99,111,112,121,47,49,93,40,35,99,111,112,121,47,49,41]},
            {sep,
             [{text,
               "x. By copying a binary, one can dereference the original, possibly large, binary that a smaller binary is a reference to."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "û\nstore(Binary, GBSet) ->\n  NewBin =\n      case binary:referenced_byte_size(Binary) of\n          Large when Large > 2 * byte_size(Binary) ->\n             binary:copy(Binary);\n          _ ->\n             Binary\n      end,\n  gb_sets:insert(NewBin,GBSet)."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "KIn this example, we chose to copy the binary content before inserting it in"}],
             0,false},
            {text,[15,42,103,98,95,115,101,116,115,58,115,101,116,40,41,42]},
            {sep,
             [{text,
               [141,105,102,32,105,116,32,114,101,102,101,114,101,110,99,101,
                115,32,97,32,98,105,110,97,114,121,32,109,111,114,101,32,116,
                104,97,110,32,116,119,105,99,101,32,116,104,101,32,100,97,116,
                97,32,115,105,122,101,32,119,101,32,119,97,110,116,32,116,111,
                32,107,101,101,112,46,32,79,102,32,99,111,117,114,115,101,44,
                32,100,105,102,102,101,114,101,110,116,32,114,117,108,101,115,
                32,97,112,112,108,121,32,119,104,101,110,32,99,111,112,121,
                105,110,103,32,116,111,32,100,105,102,102,101,114,101,110,116,
                32,112,114,111,103,114,97,109,115,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [261,66,105,110,97,114,121,32,115,104,97,114,105,110,103,32,
                111,99,99,117,114,115,32,119,104,101,110,101,118,101,114,32,
                98,105,110,97,114,105,101,115,32,97,114,101,32,116,97,107,101,
                110,32,97,112,97,114,116,46,32,84,104,105,115,32,105,115,32,
                116,104,101,32,102,117,110,100,97,109,101,110,116,97,108,32,
                114,101,97,115,111,110,32,119,104,121,32,98,105,110,97,114,
                105,101,115,32,97,114,101,32,102,97,115,116,44,32,100,101,99,
                111,109,112,111,115,105,116,105,111,110,32,99,97,110,32,97,
                108,119,97,121,115,32,98,101,32,100,111,110,101,32,119,105,
                116,104,32,79,40,49,41,32,99,111,109,112,108,101,120,105,116,
                121,46,32,73,110,32,114,97,114,101,32,99,105,114,99,117,109,
                115,116,97,110,99,101,115,32,116,104,105,115,32,100,97,116,97,
                32,115,104,97,114,105,110,103,32,105,115,32,104,111,119,101,
                118,101,114,32,117,110,100,101,115,105,114,97,98,108,101,44,
                32,119,104,121,32,116,104,105,115,32,102,117,110,99,116,105,
                111,110,32,116,111,103,101,116,104,101,114,32,119,105,116,
                104]}],
             0,false},
            {text,"\b*copy/1*"},
            {sep,
             [{text,"-can be useful when optimizing for memory use."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [26,69,120,97,109,112,108,101,32,111,102,32,98,105,110,97,114,
              121,32,115,104,97,114,105,110,103,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "â\n1> A = binary:copy(<<1>>, 100).\n<<1,1,1,1,1 ...\n2> byte_size(A).\n100\n3> binary:referenced_byte_size(A)\n100\n4> <<_:10/binary,B:10/binary,_/binary>> = A.\n<<1,1,1,1,1 ...\n5> byte_size(B).\n10\n6> binary:referenced_byte_size(B)\n100"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
          {sep,
           [{text,[4,32,32,32,32]},
            {sep,
             [{sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        [312,66,105,110,97,114,121,32,100,97,116,97,32,105,
                         115,32,115,104,97,114,101,100,32,97,109,111,110,103,
                         32,112,114,111,99,101,115,115,101,115,46,32,73,102,
                         32,97,110,111,116,104,101,114,32,112,114,111,99,101,
                         115,115,32,115,116,105,108,108,32,114,101,102,101,
                         114,101,110,99,101,115,32,116,104,101,32,108,97,114,
                         103,101,114,32,98,105,110,97,114,121,44,32,99,111,
                         112,121,105,110,103,32,116,104,101,32,112,97,114,116,
                         32,116,104,105,115,32,112,114,111,99,101,115,115,32,
                         117,115,101,115,32,111,110,108,121,32,99,111,110,115,
                         117,109,101,115,32,109,111,114,101,32,109,101,109,
                         111,114,121,32,97,110,100,32,100,111,101,115,32,110,
                         111,116,32,102,114,101,101,32,117,112,32,116,104,101,
                         32,108,97,114,103,101,114,32,98,105,110,97,114,121,
                         32,102,111,114,32,103,97,114,98,97,103,101,32,99,111,
                         108,108,101,99,116,105,111,110,46,32,85,115,101,32,
                         116,104,105,115,32,107,105,110,100,32,111,102,32,105,
                         110,116,114,117,115,105,118,101,32,102,117,110,99,
                         116,105,111,110,115,32,119,105,116,104,32,101,120,
                         116,114,101,109,101,32,99,97,114,101,32,97,110,100,
                         32,111,110,108,121,32,105,102,32,97,32,114,101,97,
                         108,32,112,114,111,98,108,101,109,32,105,115,32,100,
                         101,116,101,99,116,101,100,46]}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,true}],
           0,false}},
         {text,[0]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\f## replace/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"1Replace bytes in a binary according to a pattern."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\breplace("}],0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[1,44]}],0,false},
                {sep,[{text,[7,80,97,116,116,101,114,110]}],0,false},
                {sep,[{text,[1,44]}],0,false},
                {sep,[{text,"\vReplacement"}],0,false},
                {sep,[{text,[4,44,91,93,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\f## replace/4"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"1Replace bytes in a binary according to a pattern."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {text,[4,60,100,108,62]},
     {nest,4,
      {above,
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,116,62]},
            {sep,[{text,[6,79,110,101,80,111,115]}],0,false},
            {text,[5,60,47,100,116,62]}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,100,62]},
            {sep,
             [{sep,
               [{text,
                 [26,65,110,32,105,110,116,101,103,101,114,40,41,32,61,60,32,
                  98,121,116,101,95,115,105,122,101,40]}],
               0,false},
              {sep,[{text,"\vReplacement"}],0,false},
              {sep,[{text,[1,41]}],0,false}],
             0,false},
            {text,[5,60,47,100,100,62]}],
           0,true},
          null},
         null}}}}},
    {text,[5,60,47,100,108,62]}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"1Constructs a new binary by replacing the parts in"}],
             0,false},
            {text,"\t*Subject*"},
            {sep,[{text,"\bmatching"}],0,false},
            {text,"\t*Pattern*"},
            {sep,
             [{text,
               [19,119,105,116,104,32,116,104,101,32,99,111,110,116,101,110,
                116,32,111,102]}],
             0,false},
            {text,"\r*Replacement*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [26,73,102,32,116,104,101,32,109,97,116,99,104,105,110,103,32,
                115,117,98,112,97,114,116,32,111,102]}],
             0,false},
            {text,"\t*Subject*"},
            {sep,
             [{text,
               "Ggiving raise to the replacement is to be inserted in the result, option"}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [17,123,105,110,115,101,114,116,95,114,101,112,108,97,99,
                    101,100,44]}],
                 0,false},
                {sep,[{text,[6,73,110,115,80,111,115]}],0,false},
                {sep,[{text,[1,125]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,
             [{text,
               [30,105,110,115,101,114,116,115,32,116,104,101,32,109,97,116,
                99,104,105,110,103,32,112,97,114,116,32,105,110,116,111]}],
             0,false},
            {text,"\r*Replacement*"},
            {sep,
             [{text,
               "9at the specified position (or positions) before inserting"}],
             0,false},
            {text,"\r*Replacement*"},
            {sep,[{text,[4,105,110,116,111]}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [413,10,49,62,32,98,105,110,97,114,121,58,114,101,112,108,97,99,
              101,40,60,60,34,97,98,99,100,101,34,62,62,44,60,60,34,98,34,62,
              62,44,60,60,34,91,93,34,62,62,44,32,91,123,105,110,115,101,114,
              116,95,114,101,112,108,97,99,101,100,44,49,125,93,41,46,10,60,
              60,34,97,91,98,93,99,100,101,34,62,62,10,50,62,32,98,105,110,97,
              114,121,58,114,101,112,108,97,99,101,40,60,60,34,97,98,99,100,
              101,34,62,62,44,91,60,60,34,98,34,62,62,44,60,60,34,100,34,62,
              62,93,44,60,60,34,91,93,34,62,62,44,91,103,108,111,98,97,108,44,
              123,105,110,115,101,114,116,95,114,101,112,108,97,99,101,100,44,
              49,125,93,41,46,10,60,60,34,97,91,98,93,99,91,100,93,101,34,62,
              62,10,51,62,32,98,105,110,97,114,121,58,114,101,112,108,97,99,
              101,40,60,60,34,97,98,99,100,101,34,62,62,44,91,60,60,34,98,34,
              62,62,44,60,60,34,100,34,62,62,93,44,60,60,34,91,93,34,62,62,44,
              91,103,108,111,98,97,108,44,123,105,110,115,101,114,116,95,114,
              101,112,108,97,99,101,100,44,91,49,44,49,93,125,93,41,46,10,60,
              60,34,97,91,98,98,93,99,91,100,100,93,101,34,62,62,10,52,62,32,
              98,105,110,97,114,121,58,114,101,112,108,97,99,101,40,60,60,34,
              97,98,99,100,101,34,62,62,44,91,60,60,34,98,34,62,62,44,60,60,
              34,100,34,62,62,93,44,60,60,34,91,45,93,34,62,62,44,91,103,108,
              111,98,97,108,44,123,105,110,115,101,114,116,95,114,101,112,108,
              97,99,101,100,44,91,49,44,50,93,125,93,41,46,10,60,60,34,97,91,
              98,45,98,93,99,91,100,45,100,93,101,34,62,62]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [28,73,102,32,97,110,121,32,112,111,115,105,116,105,111,110,32,
                115,112,101,99,105,102,105,101,100,32,105,110]}],
             0,false},
            {text,"\b*InsPos*"},
            {sep,[{text,"#> size of the replacement binary, a"}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [20,101,120,99,101,112,116,105,111,110,32,105,115,32,114,97,
                105,115,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,79,112,116,105,111,110,115]}],0,false},
            {text,"\b*global*"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,
             [17,42,123,115,99,111,112,101,44,32,112,97,114,116,40,41,125,42]},
            {sep,[{text,"\vwork as for"}],0,false},
            {text,
             [19,91,115,112,108,105,116,45,51,93,40,35,115,112,108,105,116,45,
              51,41]},
            {sep,
             [{text,
               [29,46,32,84,104,101,32,114,101,116,117,114,110,32,116,121,112,
                101,32,105,115,32,97,108,119,97,121,115,32,97]}],
             0,false},
            {text,"\n*binary()*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [20,70,111,114,32,97,32,100,101,115,99,114,105,112,116,105,111,
                110,32,111,102]}],
             0,false},
            {text,"\t*Pattern*"},
            {sep,[{text,[5,44,32,115,101,101]}],0,false},
            {text,"'[compile_pattern-1](#compile_pattern-1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## split/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"&Split a binary according to a pattern."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,[6,115,112,108,105,116,40]}],0,false},
                {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                {sep,[{text,[1,44]}],0,false},
                {sep,[{text,[7,80,97,116,116,101,114,110]}],0,false},
                {sep,[{text,[5,44,32,91,93,41]}],0,false}],
               0,false},
              {text,[1,42]}],
             0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## split/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"&Split a binary according to a pattern."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[6,83,112,108,105,116,115]}],0,false},
            {text,"\t*Subject*"},
            {sep,[{text," into a list of binaries based on"}],0,false},
            {text,"\t*Pattern*"},
            {sep,[{text,"\v. If option"}],0,false},
            {text,"\b*global*"},
            {sep,
             [{text,".is not specified, only the first occurrence of"}],
             0,false},
            {text,"\t*Pattern*"},
            {sep,[{text,[2,105,110]}],0,false},
            {text,"\t*Subject*"},
            {sep,
             [{text,
               [22,103,105,118,101,115,32,114,105,115,101,32,116,111,32,97,32,
                115,112,108,105,116,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\fThe parts of"}],0,false},
            {text,"\t*Pattern*"},
            {sep,[{text,"\bfound in"}],0,false},
            {text,"\t*Subject*"},
            {sep,
             [{text,
               [31,97,114,101,32,110,111,116,32,105,110,99,108,117,100,101,
                100,32,105,110,32,116,104,101,32,114,101,115,117,108,116,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "¶\n1> binary:split(<<1,255,4,0,0,0,2,3>>, [<<0,0,0>>,<<2>>],[]).\n[<<1,255,4>>, <<2,3>>]\n2> binary:split(<<0,1,0,0,4,255,255,9>>, [<<0,0>>, <<255,255>>],[global]).\n[<<0,1>>,<<4>>,<<9>>]"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [19,83,117,109,109,97,114,121,32,111,102,32,111,112,116,105,111,
              110,115,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{text,
                       [15,123,115,99,111,112,101,44,32,112,97,114,116,40,41,
                        125]}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{sep,[{text,"\vWorks as in"}],0,false},
                           {text,[7,109,97,116,99,104,45,51]},
                           {sep,[{text,[3,97,110,100]}],0,false},
                           {text,"\tmatches-3"},
                           {sep,
                            [{text,
                              "Î. Notice that this only defines the scope of the search for matching strings, it does not cut the binary before splitting. The bytes before and after the scope are kept in the result. See the example below."}],
                            0,false}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,[4,116,114,105,109]}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            "3Removes trailing empty parts of the result (as does"}],
                          0,false},
                         {text,[4,116,114,105,109]},
                         {sep,[{text,[2,105,110]}],0,false},
                         {text,"\nre#split/3"},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[{text,"\btrim_all"}],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,"&Removes all empty parts of the result."}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[{text,[6,103,108,111,98,97,108]}],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [23,82,101,112,101,97,116,115,32,116,104,101,32,115,
                         112,108,105,116,32,117,110,116,105,108]}],
                      0,false},
                     {sep,[{text,[7,83,117,98,106,101,99,116]}],0,false},
                     {sep,
                      [{text,"!is exhausted. Conceptually option"}],
                      0,false},
                     {text,[6,103,108,111,98,97,108]},
                     {sep,
                      [{text,
                        "-makes split work on the positions returned by"}],
                      0,false},
                     {text,"\tmatches-3"},
                     {sep,
                      [{text,
                        "5, while it normally works on the position returned by"}],
                      0,false},
                     {text,[7,109,97,116,99,104,45,51]},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "WExample of the difference between a scope and taking the binary apart before splitting:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "¡\n1> binary:split(<<\"banana\">>, [<<\"a\">>],[{scope,{2,3}}]).\n[<<\"ban\">>,<<\"na\">>]\n2> binary:split(binary:part(<<\"banana\">>,{2,3}), [<<\"a\">>],[]).\n[<<\"n\">>,<<\"n\">>]"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "EThe return type is always a list of binaries that are all referencing"}],
             0,false},
            {text,"\t*Subject*"},
            {sep,
             [{text,
               [29,46,32,84,104,105,115,32,109,101,97,110,115,32,116,104,97,
                116,32,116,104,101,32,100,97,116,97,32,105,110]}],
             0,false},
            {text,"\t*Subject*"},
            {sep,[{text,"'is not copied to new binaries, and that"}],0,false},
            {text,"\t*Subject*"},
            {sep,
             [{text,
               "Tcannot be garbage collected until the results of the split are no longer referenced."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [20,70,111,114,32,97,32,100,101,115,99,114,105,112,116,105,111,
                110,32,111,102]}],
             0,false},
            {text,"\t*Pattern*"},
            {sep,[{text,[5,44,32,115,101,101]}],0,false},
            {text,"'[compile_pattern-1](#compile_pattern-1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
