{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {text,
                 [25,35,32,84,104,101,32,69,114,108,97,110,103,32,73,47,79,32,
                  80,114,111,116,111,99,111,108]},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "\\The I/O protocol in Erlang enables bi-directional communication between clients and servers."}],
                   0,false}],
                 0,true},
                null},
               null}}},
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "uThe I/O server is a process that handles the requests and performs the requested task on, for example, an I/O device."}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "VThe client is any Erlang process wishing to read or write data from/to the I/O device."}],
                0,false}],
              0,false}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [266,84,104,101,32,99,111,109,109,111,110,32,73,47,79,32,
                    112,114,111,116,111,99,111,108,32,104,97,115,32,98,101,
                    101,110,32,112,114,101,115,101,110,116,32,105,110,32,79,
                    84,80,32,115,105,110,99,101,32,116,104,101,32,98,101,103,
                    105,110,110,105,110,103,44,32,98,117,116,32,104,97,115,32,
                    98,101,101,110,32,117,110,100,111,99,117,109,101,110,116,
                    101,100,32,97,110,100,32,104,97,115,32,97,108,115,111,32,
                    101,118,111,108,118,101,100,32,111,118,101,114,32,116,104,
                    101,32,121,101,97,114,115,46,32,73,110,32,97,110,32,97,
                    100,100,101,110,100,117,109,32,116,111,32,82,111,98,101,
                    114,116,32,86,105,114,100,105,110,103,39,115,32,114,97,
                    116,105,111,110,97,108,101,44,32,116,104,101,32,111,114,
                    105,103,105,110,97,108,32,73,47,79,32,112,114,111,116,111,
                    99,111,108,32,105,115,32,100,101,115,99,114,105,98,101,
                    100,46,32,84,104,105,115,32,115,101,99,116,105,111,110,32,
                    100,101,115,99,114,105,98,101,115,32,116,104,101,32,99,
                    117,114,114,101,110,116,32,73,47,79,32,112,114,111,116,
                    111,99,111,108,46]}],
                 0,false}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [397,84,104,101,32,111,114,105,103,105,110,97,108,32,73,47,
                   79,32,112,114,111,116,111,99,111,108,32,119,97,115,32,115,
                   105,109,112,108,101,32,97,110,100,32,102,108,101,120,105,
                   98,108,101,46,32,68,101,109,97,110,100,115,32,102,111,114,
                   32,109,101,109,111,114,121,32,101,102,102,105,99,105,101,
                   110,99,121,32,97,110,100,32,101,120,101,99,117,116,105,111,
                   110,32,116,105,109,101,32,101,102,102,105,99,105,101,110,
                   99,121,32,104,97,118,101,32,116,114,105,103,103,101,114,
                   101,100,32,101,120,116,101,110,115,105,111,110,115,32,116,
                   111,32,116,104,101,32,112,114,111,116,111,99,111,108,32,
                   111,118,101,114,32,116,104,101,32,121,101,97,114,115,44,32,
                   109,97,107,105,110,103,32,116,104,101,32,112,114,111,116,
                   111,99,111,108,32,108,97,114,103,101,114,32,97,110,100,32,
                   115,111,109,101,119,104,97,116,32,108,101,115,115,32,101,
                   97,115,121,32,116,111,32,105,109,112,108,101,109,101,110,
                   116,32,116,104,97,110,32,116,104,101,32,111,114,105,103,
                   105,110,97,108,46,32,73,116,32,99,97,110,32,99,101,114,116,
                   97,105,110,108,121,32,98,101,32,97,114,103,117,101,100,32,
                   116,104,97,116,32,116,104,101,32,99,117,114,114,101,110,
                   116,32,112,114,111,116,111,99,111,108,32,105,115,32,116,
                   111,111,32,99,111,109,112,108,101,120,44,32,98,117,116,32,
                   116,104,105,115,32,115,101,99,116,105,111,110,32,100,101,
                   115,99,114,105,98,101,115,32,104,111,119,32,105,116,32,108,
                   111,111,107,115,32,116,111,100,97,121,44,32,110,111,116,32,
                   104,111,119,32,105,116,32,115,104,111,117,108,100,32,104,
                   97,118,101,32,108,111,111,107,101,100,46]}],
                0,false}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [348,84,104,101,32,98,97,115,105,99,32,105,100,101,97,115,32,
                  102,114,111,109,32,116,104,101,32,111,114,105,103,105,110,
                  97,108,32,112,114,111,116,111,99,111,108,32,115,116,105,108,
                  108,32,104,111,108,100,46,32,84,104,101,32,73,47,79,32,115,
                  101,114,118,101,114,32,97,110,100,32,99,108,105,101,110,116,
                  32,99,111,109,109,117,110,105,99,97,116,101,32,119,105,116,
                  104,32,111,110,101,32,115,105,110,103,108,101,44,32,114,97,
                  116,104,101,114,32,115,105,109,112,108,105,115,116,105,99,
                  32,112,114,111,116,111,99,111,108,32,97,110,100,32,110,111,
                  32,115,101,114,118,101,114,32,115,116,97,116,101,32,105,115,
                  32,101,118,101,114,32,112,114,101,115,101,110,116,32,105,
                  110,32,116,104,101,32,99,108,105,101,110,116,46,32,65,110,
                  121,32,73,47,79,32,115,101,114,118,101,114,32,99,97,110,32,
                  98,101,32,117,115,101,100,32,116,111,103,101,116,104,101,
                  114,32,119,105,116,104,32,97,110,121,32,99,108,105,101,110,
                  116,32,99,111,100,101,44,32,97,110,100,32,116,104,101,32,99,
                  108,105,101,110,116,32,99,111,100,101,32,100,111,101,115,32,
                  110,111,116,32,110,101,101,100,32,116,111,32,98,101,32,97,
                  119,97,114,101,32,111,102,32,116,104,101,32,73,47,79,32,100,
                  101,118,105,99,101,32,116,104,97,116,32,116,104,101,32,73,
                  47,79,32,115,101,114,118,101,114,32,99,111,109,109,117,110,
                  105,99,97,116,101,115,32,119,105,116,104,46]}],
               0,false}],
             0,true},
            null},
           null}}},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [18,35,35,32,80,114,111,116,111,99,111,108,32,66,97,115,105,99,
               115]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "IAs described in Robert's paper, I/O servers and clients communicate using"}],
                  0,false},
                 {text,"\f*io_request*"},
                 {sep,[{text,[1,47]}],0,false},
                 {text,"\n*io_reply*"},
                 {sep,
                  [{text,
                    [18,116,117,112,108,101,115,32,97,115,32,102,111,108,108,
                     111,119,115,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "@\n{io_request, From, ReplyAs, Request}\n{io_reply, ReplyAs, Reply}"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [19,84,104,101,32,99,108,105,101,110,116,32,115,101,110,
                     100,115,32,97,110]}],
                  0,false},
                 {text,"\f*io_request*"},
                 {sep,
                  [{text,
                    "Gtuple to the I/O server and the server eventually sends a corresponding"}],
                  0,false},
                 {text,"\n*io_reply*"},
                 {sep,[{text,[6,116,117,112,108,101,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,[6,42,70,114,111,109,42]},
                {sep,[{text,[6,105,115,32,116,104,101]}],0,false},
                {text,[7,42,112,105,100,40,41,42]},
                {sep,
                 [{text,
                   "Gof the client, the process which the I/O server sends the I/O reply to."}],
                 0,false}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,"\t*ReplyAs*"},
                       {sep,
                        [{text,
                          "5can be any datum and is returned in the corresponding"}],
                        0,false},
                       {text,"\n*io_reply*"},
                       {sep,[{text,[5,46,32,84,104,101]}],0,false},
                       {text,
                        [17,91,115,116,100,108,105,98,47,105,111,93,40,46,47,
                         105,111,41]},
                       {sep,
                        [{text,
                          "Hmodule monitors the the I/O server and uses the monitor reference as the"}],
                        0,false},
                       {text,"\t*ReplyAs*"},
                       {sep,
                        [{text,
                          "Ìdatum. A more complicated client can have many outstanding I/O requests to the same I/O server and can use different references (or something else) to differentiate among the incoming I/O replies. Element"}],
                        0,false},
                       {text,"\t*ReplyAs*"},
                       {sep,
                        [{text,
                          "-is to be considered opaque by the I/O server."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          [15,78,111,116,105,99,101,32,116,104,97,116,32,116,
                           104,101]}],
                        0,false},
                       {text,[7,42,112,105,100,40,41,42]},
                       {sep,
                        [{text,
                          "4of the I/O server is not explicitly present in tuple"}],
                        0,false},
                       {text,"\n*io_reply*"},
                       {sep,
                        [{text,
                          "P. The reply can be sent from any process, not necessarily the actual I/O server."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,"\t*Request*"},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[7,42,82,101,112,108,121,42]},
               {sep,
                [{text,
                  [20,97,114,101,32,100,101,115,99,114,105,98,101,100,32,98,
                   101,108,111,119,46]}],
                0,false}],
              0,false}],
            0,false}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [30,87,104,101,110,32,97,110,32,73,47,79,32,115,101,114,
                     118,101,114,32,114,101,99,101,105,118,101,115,32,97,
                     110]}],
                  0,false},
                 {text,"\f*io_request*"},
                 {sep,
                  [{text,
                    [23,116,117,112,108,101,44,32,105,116,32,97,99,116,115,32,
                     117,112,111,110,32,116,104,101]}],
                  0,false},
                 {text,"\t*Request*"},
                 {sep,
                  [{text,
                    [28,112,97,114,116,32,97,110,100,32,101,118,101,110,116,
                     117,97,108,108,121,32,115,101,110,100,115,32,97,110]}],
                  0,false},
                 {text,"\n*io_reply*"},
                 {sep,
                  [{text,
                    [28,116,117,112,108,101,32,119,105,116,104,32,116,104,101,
                     32,99,111,114,114,101,115,112,111,110,100,105,110,103]}],
                  0,false},
                 {text,[7,42,82,101,112,108,121,42]},
                 {sep,[{text,[5,112,97,114,116,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [18,35,35,32,79,117,116,112,117,116,32,82,101,113,117,101,115,
              116,115]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "4To output characters on an I/O device, the following"}],
                 0,false},
                {text,"\t*Request*"},
                {sep,[{text,"\bs exist:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "P\n{put_chars, Encoding, Characters}\n{put_chars, Encoding, Module, Function, Args}"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,"\n*Encoding*"},
                      {sep,[{text,[2,105,115]}],0,false},
                      {text,"\t*unicode*"},
                      {sep,[{text,[2,111,114]}],0,false},
                      {text,"\b*latin1*"},
                      {sep,
                       [{text,
                         "Ç, meaning that the characters are (in case of binaries) encoded as UTF-8 or ISO Latin-1 (pure bytes). A well-behaved I/O server is also to return an error indication if list elements contain integers"}],
                       0,false},
                      {sep,[{text,"\n> 255 when"}],0,false},
                      {text,"\n*Encoding*"},
                      {sep,[{text,"\tis set to"}],0,false},
                      {text,"\b*latin1*"},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [266,78,111,116,105,99,101,32,116,104,97,116,32,116,
                          104,105,115,32,100,111,101,115,32,110,111,116,32,
                          105,110,32,97,110,121,32,119,97,121,32,116,101,108,
                          108,32,104,111,119,32,99,104,97,114,97,99,116,101,
                          114,115,32,97,114,101,32,116,111,32,98,101,32,112,
                          117,116,32,111,110,32,116,104,101,32,73,47,79,32,
                          100,101,118,105,99,101,32,111,114,32,104,97,110,100,
                          108,101,100,32,98,121,32,116,104,101,32,73,47,79,32,
                          115,101,114,118,101,114,46,32,68,105,102,102,101,
                          114,101,110,116,32,73,47,79,32,115,101,114,118,101,
                          114,115,32,99,97,110,32,104,97,110,100,108,101,32,
                          116,104,101,32,99,104,97,114,97,99,116,101,114,115,
                          32,104,111,119,101,118,101,114,32,116,104,101,121,
                          32,119,97,110,116,44,32,116,104,105,115,32,111,110,
                          108,121,32,116,101,108,108,115,32,116,104,101,32,73,
                          47,79,32,115,101,114,118,101,114,32,119,104,105,99,
                          104,32,102,111,114,109,97,116,32,116,104,101,32,100,
                          97,116,97,32,105,115,32,101,120,112,101,99,116,101,
                          100,32,116,111,32,104,97,118,101,46,32,73,110,32,
                          116,104,101]}],
                       0,false},
                      {text,"\b*Module*"},
                      {sep,[{text,[1,47]}],0,false},
                      {text,"\n*Function*"},
                      {sep,[{text,[1,47]}],0,false},
                      {text,[6,42,65,114,103,115,42]},
                      {sep,[{text,[5,99,97,115,101,44]}],0,false},
                      {text,"\n*Encoding*"},
                      {sep,
                       [{text,
                         "4tells which format the designated function produces."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "TNotice also that byte-oriented data is simplest sent using the ISO Latin-1 encoding."}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,"\f*Characters*"},
               {sep,
                [{text,",are the data to be put on the I/O device. If"}],
                0,false},
               {text,"\n*Encoding*"},
               {sep,[{text,[2,105,115]}],0,false},
               {text,"\b*latin1*"},
               {sep,[{text,"\f, this is an"}],0,false},
               {text,"\n*iolist()*"},
               {sep,[{text,[4,46,32,73,102]}],0,false},
               {text,"\n*Encoding*"},
               {sep,[{text,[2,105,115]}],0,false},
               {text,"\t*unicode*"},
               {sep,
                [{text,
                  [131,44,32,116,104,105,115,32,105,115,32,97,110,32,69,114,
                   108,97,110,103,32,115,116,97,110,100,97,114,100,32,109,105,
                   120,101,100,32,85,110,105,99,111,100,101,32,108,105,115,
                   116,32,40,111,110,101,32,105,110,116,101,103,101,114,32,
                   105,110,32,97,32,108,105,115,116,32,112,101,114,32,99,104,
                   97,114,97,99,116,101,114,44,32,99,104,97,114,97,99,116,101,
                   114,115,32,105,110,32,98,105,110,97,114,105,101,115,32,114,
                   101,112,114,101,115,101,110,116,101,100,32,97,115,32,85,84,
                   70,45,56,41,46]}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,"\b*Module*"},
                     {sep,[{text,[1,44]}],0,false},
                     {text,"\n*Function*"},
                     {sep,[{text,[5,44,32,97,110,100]}],0,false},
                     {text,[6,42,65,114,103,115,42]},
                     {sep,
                      [{text,
                        ":denote a function that is called to produce the data (like"}],
                      0,false},
                     {text,
                      "3[stdlib/io_lib#format/2](../stdlib/io_lib#format/2)"},
                     {sep,[{text,[2,41,46]}],0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,[6,42,65,114,103,115,42]},
                     {sep,
                      [{text,
                        "Xis a list of arguments to the function. The function is to produce data in the specified"}],
                      0,false},
                     {text,"\n*Encoding*"},
                     {sep,
                      [{text,"+. The I/O server is to call the function as"}],
                      0,false},
                     {text,
                      [24,42,97,112,112,108,121,40,77,111,100,44,32,70,117,
                       110,99,44,32,65,114,103,115,41,42]},
                     {sep,
                      [{text,
                        "Band put the returned data on the I/O device as if it was sent in a"}],
                      0,false},
                     {text,"#*{put_chars, Encoding, Characters}*"},
                     {sep,
                      [{text,
                        [136,114,101,113,117,101,115,116,46,32,73,102,32,116,
                         104,101,32,102,117,110,99,116,105,111,110,32,114,101,
                         116,117,114,110,115,32,97,110,121,116,104,105,110,
                         103,32,101,108,115,101,32,116,104,97,110,32,97,32,98,
                         105,110,97,114,121,32,111,114,32,108,105,115,116,44,
                         32,111,114,32,116,104,114,111,119,115,32,97,110,32,
                         101,120,99,101,112,116,105,111,110,44,32,97,110,32,
                         101,114,114,111,114,32,105,115,32,116,111,32,98,101,
                         32,115,101,110,116,32,98,97,99,107,32,116,111,32,116,
                         104,101,32,99,108,105,101,110,116,46]}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false}],
           0,false}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,",The I/O server replies to the client with an"}],
                 0,false},
                {text,"\n*io_reply*"},
                {sep,
                 [{text,
                   [20,116,117,112,108,101,44,32,119,104,101,114,101,32,101,
                    108,101,109,101,110,116]}],
                 0,false},
                {text,[7,42,82,101,112,108,121,42]},
                {sep,[{text,"\nis one of:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [18,10,111,107,10,123,101,114,114,111,114,44,32,69,114,114,
                  111,114,125]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[7,42,69,114,114,111,114,42]},
             {sep,
              [{text,
                "Ndescribes the error to the client, which can do whatever it wants with it. The"}],
              0,false},
             {text,
              [17,91,115,116,100,108,105,98,47,105,111,93,40,46,47,105,111,
               41]},
             {sep,[{text,"$module typically returns it \"as is\"."}],0,false}],
            0,false}],
          0,false},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,")For backward compatibility, the following"}],
                 0,false},
                {text,"\t*Request*"},
                {sep,
                 [{text,
                   "]s are also to be handled by an I/O server (they are not to be present after Erlang/OTP R15B):"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "<\n{put_chars, Characters}\n{put_chars, Module, Function, Args}"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [22,84,104,101,115,101,32,97,114,101,32,116,111,32,98,101,
                    104,97,118,101,32,97,115]}],
                 0,false},
                {text,"!*{put_chars, latin1, Characters}*"},
                {sep,[{text,[3,97,110,100]}],0,false},
                {text,"-*{put_chars, latin1, Module, Function, Args}*"},
                {sep,
                 [{text,
                   [15,44,32,114,101,115,112,101,99,116,105,118,101,108,121,
                    46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [17,35,35,32,73,110,112,117,116,32,82,101,113,117,101,115,116,
             115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "4To read characters from an I/O device, the following"}],
                0,false},
               {text,"\t*Request*"},
               {sep,[{text,"\bs exist:"}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                ";\n{get_until, Encoding, Prompt, Module, Function, ExtraArgs}"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,"\n*Encoding*"},
                     {sep,
                      [{text,
                        "bdenotes how data is to be sent back to the client and what data is sent to the function denoted by"}],
                      0,false},
                     {text,"\b*Module*"},
                     {sep,[{text,[1,47]}],0,false},
                     {text,"\n*Function*"},
                     {sep,[{text,[1,47]}],0,false},
                     {text,"\v*ExtraArgs*"},
                     {sep,
                      [{text,
                        "þ. If the function supplied returns data as a list, the data is converted to this encoding. If the function supplied returns data in some other format, no conversion can be done, and it is up to the client-supplied function to return data in a proper way."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,[{text,[2,73,102]}],0,false},
                     {text,"\n*Encoding*"},
                     {sep,[{text,[2,105,115]}],0,false},
                     {text,"\b*latin1*"},
                     {sep,
                      [{text,
                        [19,44,32,108,105,115,116,115,32,111,102,32,105,110,
                         116,101,103,101,114,115]}],
                      0,false},
                     {text,"\b*0..255*"},
                     {sep,
                      [{text,
                        "Por binaries containing plain bytes are sent back to the client when possible. If"}],
                      0,false},
                     {text,"\n*Encoding*"},
                     {sep,[{text,[2,105,115]}],0,false},
                     {text,"\t*unicode*"},
                     {sep,
                      [{text,
                        "Ð, lists with integers in the whole Unicode range or binaries encoded in UTF-8 are sent to the client. The user-supplied function always sees lists of integers, never binaries, but the list can contain numbers"}],
                      0,false},
                     {sep,[{text,"\b> 255 if"}],0,false},
                     {text,"\n*Encoding*"},
                     {sep,[{text,[2,105,115]}],0,false},
                     {text,"\t*unicode*"},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"\b*Prompt*"},
              {sep,
               [{text,
                 "qis a list of characters (not mixed, no binaries) or an atom to be output as a prompt for input on the I/O device."}],
               0,false},
              {text,"\b*Prompt*"},
              {sep,
               [{text,"-is often ignored by the I/O server; if set to"}],
               0,false},
              {text,[4,42,39,39,42]},
              {sep,
               [{text,
                 "V, it is always to be ignored (and results in nothing being written to the I/O device)."}],
               0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,"\b*Module*"},
                    {sep,[{text,[1,44]}],0,false},
                    {text,"\n*Function*"},
                    {sep,[{text,[5,44,32,97,110,100]}],0,false},
                    {text,"\v*ExtraArgs*"},
                    {sep,
                     [{text,
                       "Ádenote a function and arguments to determine when enough data is written. The function is to take two more arguments, the last state, and a list of characters. The function is to return one of:"}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     "/\n{done, Result, RestChars}\n{more, Continuation}"}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,"\b*Result*"},
                    {sep,
                     [{text,"&can be any Erlang term, but if it is a"}],
                     0,false},
                    {text,"\b*list()*"},
                    {sep,
                     [{text,"$, the I/O server can convert it to a"}],
                     0,false},
                    {text,"\n*binary()*"},
                    {sep,
                     [{text,
                       "mof appropriate format before returning it to the client, if the I/O server is set in binary mode (see below)."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "^The function is called with the data the I/O server finds on its I/O device, returning one of:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,"\e*{done, Result, RestChars}*"},
                  {sep,
                   [{text,"&when enough data is read. In this case"}],
                   0,false},
                  {text,"\b*Result*"},
                  {sep,
                   [{text,
                     [25,105,115,32,115,101,110,116,32,116,111,32,116,104,101,
                      32,99,108,105,101,110,116,32,97,110,100]}],
                   0,false},
                  {text,"\v*RestChars*"},
                  {sep,
                   [{text,
                     "6is kept in the I/O server as a buffer for later input."}],
                   0,false}],
                 0,false}],
               0,false},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   [22,42,123,109,111,114,101,44,32,67,111,110,116,105,110,
                    117,97,116,105,111,110,125,42]},
                  {sep,
                   [{text,
                     "J, which indicates that more characters are needed to complete the request."}],
                   0,false}],
                 0,false}],
               0,false}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     [14,42,67,111,110,116,105,110,117,97,116,105,111,110,42]},
                    {sep,
                     [{text,
                       [151,105,115,32,115,101,110,116,32,97,115,32,116,104,
                        101,32,115,116,97,116,101,32,105,110,32,108,97,116,
                        101,114,32,99,97,108,108,115,32,116,111,32,116,104,
                        101,32,102,117,110,99,116,105,111,110,32,119,104,101,
                        110,32,109,111,114,101,32,99,104,97,114,97,99,116,101,
                        114,115,32,97,114,101,32,97,118,97,105,108,97,98,108,
                        101,46,32,87,104,101,110,32,110,111,32,109,111,114,
                        101,32,99,104,97,114,97,99,116,101,114,115,32,97,114,
                        101,32,97,118,97,105,108,97,98,108,101,44,32,116,104,
                        101,32,102,117,110,99,116,105,111,110,32,109,117,115,
                        116,32,114,101,116,117,114,110]}],
                     0,false},
                    {text,
                     [19,42,123,100,111,110,101,44,32,101,111,102,44,32,82,
                      101,115,116,125,42]},
                    {sep,
                     [{text,
                       "k. The initial state is the empty list. The data when an end of file is reached on the IO device is the atom"}],
                     0,false},
                    {text,[5,42,101,111,102,42]},
                    {sep,[{text,[1,46]}],0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [19,65,110,32,101,109,117,108,97,116,105,111,110,32,
                        111,102,32,116,104,101]}],
                     0,false},
                    {text,"\n*get_line*"},
                    {sep,
                     [{text,
                       "Irequest can be (inefficiently) implemented using the following functions:"}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     [649,10,45,109,111,100,117,108,101,40,100,101,109,111,41,
                      46,10,45,101,120,112,111,114,116,40,91,117,110,116,105,
                      108,95,110,101,119,108,105,110,101,47,51,44,32,103,101,
                      116,95,108,105,110,101,47,49,93,41,46,10,10,117,110,116,
                      105,108,95,110,101,119,108,105,110,101,40,95,84,104,105,
                      115,70,97,114,44,101,111,102,44,95,77,121,83,116,111,
                      112,67,104,97,114,97,99,116,101,114,41,32,45,62,10,32,
                      32,32,32,123,100,111,110,101,44,101,111,102,44,91,93,
                      125,59,10,117,110,116,105,108,95,110,101,119,108,105,
                      110,101,40,84,104,105,115,70,97,114,44,67,104,97,114,76,
                      105,115,116,44,77,121,83,116,111,112,67,104,97,114,97,
                      99,116,101,114,41,32,45,62,10,32,32,32,32,99,97,115,101,
                      10,32,32,32,32,32,32,32,32,108,105,115,116,115,58,115,
                      112,108,105,116,119,105,116,104,40,102,117,110,40,88,41,
                      32,45,62,32,88,32,61,47,61,32,77,121,83,116,111,112,67,
                      104,97,114,97,99,116,101,114,32,101,110,100,44,32,32,67,
                      104,97,114,76,105,115,116,41,10,32,32,32,32,111,102,10,
                      9,123,76,44,91,93,125,32,45,62,10,32,32,32,32,32,32,32,
                      32,32,32,32,32,123,109,111,114,101,44,84,104,105,115,70,
                      97,114,43,43,76,125,59,10,9,123,76,50,44,91,77,121,83,
                      116,111,112,67,104,97,114,97,99,116,101,114,124,82,101,
                      115,116,93,125,32,45,62,10,9,32,32,32,32,123,100,111,
                      110,101,44,84,104,105,115,70,97,114,43,43,76,50,43,43,
                      91,77,121,83,116,111,112,67,104,97,114,97,99,116,101,
                      114,93,44,82,101,115,116,125,10,32,32,32,32,101,110,100,
                      46,10,10,103,101,116,95,108,105,110,101,40,73,111,83,
                      101,114,118,101,114,41,32,45,62,10,32,32,32,32,73,111,
                      83,101,114,118,101,114,32,33,32,123,105,111,95,114,101,
                      113,117,101,115,116,44,10,32,32,32,32,32,32,32,32,32,32,
                      32,32,32,32,32,32,115,101,108,102,40,41,44,10,32,32,32,
                      32,32,32,32,32,32,32,32,32,32,32,32,32,73,111,83,101,
                      114,118,101,114,44,10,32,32,32,32,32,32,32,32,32,32,32,
                      32,32,32,32,32,123,103,101,116,95,117,110,116,105,108,
                      44,32,117,110,105,99,111,100,101,44,32,39,39,44,32,63,
                      77,79,68,85,76,69,44,32,117,110,116,105,108,95,110,101,
                      119,108,105,110,101,44,32,91,36,92,110,93,125,125,44,10,
                      32,32,32,32,114,101,99,101,105,118,101,10,32,32,32,32,
                      32,32,32,32,123,105,111,95,114,101,112,108,121,44,32,73,
                      111,83,101,114,118,101,114,44,32,68,97,116,97,125,32,45,
                      62,10,9,32,32,32,32,68,97,116,97,10,32,32,32,32,101,110,
                      100,46]}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,"#Notice that the last element in the"}],
                     0,false},
                    {text,"\t*Request*"},
                    {sep,[{text,[7,116,117,112,108,101,32,40]}],0,false},
                    {text,[7,42,91,36,92,110,93,42]},
                    {sep,
                     [{text,
                       "a) is appended to the argument list when the function is called. The function is to be called like"}],
                     0,false},
                    {text,
                     "6*apply(Module, Function, [ State, Data | ExtraArgs ])*"},
                    {sep,
                     [{text,
                       [18,98,121,32,116,104,101,32,73,47,79,32,115,101,114,
                        118,101,114,46]}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}}],
            0,false}],
          0,false}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "=A fixed number of characters is requested using the following"}],
                0,false},
               {text,"\t*Request*"},
               {sep,[{text,[1,58]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,[{text,"!\n{get_chars, Encoding, Prompt, N}"}],0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"\n*Encoding*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\b*Prompt*"},
             {sep,[{text,[6,97,115,32,102,111,114]}],0,false},
             {text,"\v*get_until*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[3,42,78,42]},
             {sep,
              [{text,
                ";is the number of characters to be read from the I/O device."}],
              0,false}],
            0,false}],
          0,false}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "DA single line (as in former example) is requested with the following"}],
                0,false},
               {text,"\t*Request*"},
               {sep,[{text,[1,58]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [29,10,123,103,101,116,95,108,105,110,101,44,32,69,110,99,111,
                 100,105,110,103,44,32,80,114,111,109,112,116,125]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"\n*Encoding*"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,"\b*Prompt*"},
            {sep,[{text,[6,97,115,32,102,111,114]}],0,false},
            {text,"\v*get_until*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,false},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,"\bClearly,"}],0,false},
               {text,"\v*get_chars*"},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,"\n*get_line*"},
               {sep,
                [{text,
                  [29,99,111,117,108,100,32,98,101,32,105,109,112,108,101,109,
                   101,110,116,101,100,32,119,105,116,104,32,116,104,101]}],
                0,false},
               {text,"\v*get_until*"},
               {sep,
                [{text,
                  "jrequest (and indeed they were originally), but demands for efficiency have made these additions necessary."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,",The I/O server replies to the client with an"}],
                0,false},
               {text,"\n*io_reply*"},
               {sep,
                [{text,
                  [20,116,117,112,108,101,44,32,119,104,101,114,101,32,101,
                   108,101,109,101,110,116]}],
                0,false},
               {text,[7,42,82,101,112,108,121,42]},
               {sep,[{text,"\nis one of:"}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [24,10,68,97,116,97,10,101,111,102,10,123,101,114,114,111,114,
                 44,32,69,114,114,111,114,125]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,[6,42,68,97,116,97,42]},
              {sep,
               [{text,
                 "his the characters read, in list or binary form (depending on the I/O server mode, see the next section)."}],
               0,false}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,[5,42,101,111,102,42]},
              {sep,
               [{text,
                 "Zis returned when input end is reached and no more data is available to the client process."}],
               0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[7,42,69,114,114,111,114,42]},
             {sep,
              [{text,
                "Ndescribes the error to the client, which can do whatever it wants with it. The"}],
              0,false},
             {text,
              [17,91,115,116,100,108,105,98,47,105,111,93,40,46,47,105,111,
               41]},
             {sep,[{text,"\"module typically returns it as is."}],0,false}],
            0,false}],
          0,false}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,")For backward compatibility, the following"}],
                0,false},
               {text,"\t*Request*"},
               {sep,
                [{text,
                  "]s are also to be handled by an I/O server (they are not to be present after Erlang/OTP R15B):"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "[\n{get_until, Prompt, Module, Function, ExtraArgs}\n{get_chars, Prompt, N}\n{get_line, Prompt}"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [22,84,104,101,115,101,32,97,114,101,32,116,111,32,98,101,
                   104,97,118,101,32,97,115]}],
                0,false},
               {text,
                ":*{get_until, latin1, Prompt, Module, Function, ExtraArgs}*"},
               {sep,[{text,[1,44]}],0,false},
               {text," *{get_chars, latin1, Prompt, N}*"},
               {sep,[{text,[5,44,32,97,110,100]}],0,false},
               {text,
                [28,42,123,103,101,116,95,108,105,110,101,44,32,108,97,116,
                 105,110,49,44,32,80,114,111,109,112,116,125,42]},
               {sep,
                [{text,
                  [15,44,32,114,101,115,112,101,99,116,105,118,101,108,121,
                   46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [19,35,35,32,73,47,79,32,83,101,114,118,101,114,32,77,111,100,101,
            115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "dDemands for efficiency when reading data from an I/O server has not only lead to the addition of the"}],
               0,false},
              {text,"\n*get_line*"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"\v*get_chars*"},
              {sep,
               [{text,
                 "¥requests, but has also added the concept of I/O server options. No options are mandatory to implement, but all I/O servers in the Erlang standard libraries honor the"}],
               0,false},
              {text,"\b*binary*"},
              {sep,
               [{text,
                 [28,111,112,116,105,111,110,44,32,119,104,105,99,104,32,97,
                  108,108,111,119,115,32,101,108,101,109,101,110,116]}],
               0,false},
              {text,[6,42,68,97,116,97,42]},
              {sep,[{text,[6,111,102,32,116,104,101]}],0,false},
              {text,"\n*io_reply*"},
              {sep,[{text,"&tuple to be a binary instead of a list"}],0,false},
              {text,
               [17,42,42,119,104,101,110,32,112,111,115,115,105,98,108,101,42,
                42]},
              {sep,
               [{text,
                 [142,46,32,73,102,32,116,104,101,32,100,97,116,97,32,105,115,
                  32,115,101,110,116,32,97,115,32,97,32,98,105,110,97,114,121,
                  44,32,85,110,105,99,111,100,101,32,100,97,116,97,32,105,115,
                  32,115,101,110,116,32,105,110,32,116,104,101,32,115,116,97,
                  110,100,97,114,100,32,69,114,108,97,110,103,32,85,110,105,
                  99,111,100,101,32,102,111,114,109,97,116,44,32,116,104,97,
                  116,32,105,115,44,32,85,84,70,45,56,32,40,110,111,116,105,
                  99,101,32,116,104,97,116,32,116,104,101,32,102,117,110,99,
                  116,105,111,110,32,111,102,32,116,104,101]}],
               0,false},
              {text,"\v*get_until*"},
              {sep,
               [{text,
                 "@request still gets list data regardless of the I/O server mode)."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [15,78,111,116,105,99,101,32,116,104,97,116,32,116,104,101]}],
               0,false},
              {text,"\v*get_until*"},
              {sep,
               [{text,
                 "°request allows for a function with the data specified as always being a list. Also, the return value data from such a function can be of any type (as is indeed the case when an"}],
               0,false},
              {text,")[stdlib/io#fread/2](../stdlib/io#fread/2)"},
              {sep,
               [{text,
                 "ýrequest is sent to an I/O server). The client must be prepared for data received as answers to those requests to be in various forms. However, the I/O server is to convert the results to binaries whenever possible (that is, when the function supplied to"}],
               0,false},
              {text,"\v*get_until*"},
              {sep,
               [{text,
                 "7returns a list). This is done in the example in section"}],
               0,false},
              {text,
               "A[An Annotated and Working Example I/O Server](#example_io_server)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "×An I/O server in binary mode affects the data sent to the client, so that it must be able to handle binary data. For convenience, the modes of an I/O server can be set and retrieved using the following I/O requests:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [16,10,123,115,101,116,111,112,116,115,44,32,79,112,116,115,
                125]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[6,42,79,112,116,115,42]},
           {sep,
            [{text,"4is a list of options in the format recognized by the"}],
            0,false},
           {text,
            [31,91,115,116,100,108,105,98,47,112,114,111,112,108,105,115,116,
             115,93,40,46,47,112,114,111,112,108,105,115,116,115,41]},
           {sep,
            [{text,
              [31,109,111,100,117,108,101,32,40,97,110,100,32,98,121,32,116,
               104,101,32,73,47,79,32,115,101,114,118,101,114,41,46]}],
            0,false}],
          0,false}],
        0,false},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 ";As an example, the I/O server for the interactive shell (in"}],
               0,false},
              {text,"\v*group.erl*"},
              {sep,[{text,"$) understands the following options:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "z\n{binary, boolean()} (or binary/list)\n{echo, boolean()}\n{expand_fun, fun()}\n{encoding, unicode/latin1} (or unicode/latin1)"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[7,79,112,116,105,111,110,115]}],0,false},
              {text,"\b*binary*"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"\n*encoding*"},
              {sep,
               [{text,",are common for all I/O servers in OTP, while"}],
               0,false},
              {text,[6,42,101,99,104,111,42]},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"\b*expand*"},
              {sep,
               [{text,"*are valid only for this I/O server. Option"}],
               0,false},
              {text,"\t*unicode*"},
              {sep,
               [{text,
                 [257,110,111,116,105,102,105,101,115,32,104,111,119,32,99,
                  104,97,114,97,99,116,101,114,115,32,97,114,101,32,112,117,
                  116,32,111,110,32,116,104,101,32,112,104,121,115,105,99,97,
                  108,32,73,47,79,32,100,101,118,105,99,101,44,32,116,104,97,
                  116,32,105,115,44,32,105,102,32,116,104,101,32,116,101,114,
                  109,105,110,97,108,32,105,116,115,101,108,102,32,105,115,32,
                  85,110,105,99,111,100,101,45,97,119,97,114,101,46,32,73,116,
                  32,100,111,101,115,32,110,111,116,32,97,102,102,101,99,116,
                  32,104,111,119,32,99,104,97,114,97,99,116,101,114,115,32,97,
                  114,101,32,115,101,110,116,32,105,110,32,116,104,101,32,73,
                  47,79,32,112,114,111,116,111,99,111,108,44,32,119,104,101,
                  114,101,32,101,97,99,104,32,114,101,113,117,101,115,116,32,
                  99,111,110,116,97,105,110,115,32,101,110,99,111,100,105,110,
                  103,32,105,110,102,111,114,109,97,116,105,111,110,32,102,
                  111,114,32,116,104,101,32,112,114,111,118,105,100,101,100,
                  32,111,114,32,114,101,116,117,114,110,101,100,32,100,97,116,
                  97,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,"1The I/O server is to send one of the following as"}],
               0,false},
              {text,[7,42,82,101,112,108,121,42]},
              {sep,[{text,[1,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [18,10,111,107,10,123,101,114,114,111,114,44,32,69,114,114,111,
                114,125]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [20,65,110,32,101,114,114,111,114,32,40,112,114,101,102,101,
                  114,97,98,108,121]}],
               0,false},
              {text,"\t*enotsup*"},
              {sep,
               [{text,
                 "P) is to be expected if the option is not supported by the I/O server (like if an"}],
               0,false},
              {text,[6,42,101,99,104,111,42]},
              {sep,
               [{text,
                 [19,111,112,116,105,111,110,32,105,115,32,115,101,110,116,32,
                  105,110,32,97]}],
               0,false},
              {text,"\t*setopts*"},
              {sep,
               [{text,
                 [25,114,101,113,117,101,115,116,32,116,111,32,97,32,112,108,
                  97,105,110,32,102,105,108,101,41,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"3To retrieve options, the following request is used:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,{text,[3,96,96,96]},{sep,[{text,"\b\ngetopts"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "qThis request asks for a complete list of all options supported by the I/O server as well as their current values."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [23,84,104,101,32,73,47,79,32,115,101,114,118,101,114,32,114,
                101,112,108,105,101,115,58]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [23,10,79,112,116,76,105,115,116,10,123,101,114,114,111,114,44,
                32,69,114,114,111,114,125]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"\t*OptList*"},
           {sep,
            [{text,
              [19,105,115,32,97,32,108,105,115,116,32,111,102,32,116,117,112,
               108,101,115]}],
            0,false},
           {text,
            [17,42,123,79,112,116,105,111,110,44,32,86,97,108,117,101,125,42]},
           {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
           {text,"\b*Option*"},
           {sep,
            [{text,
              [18,97,108,119,97,121,115,32,105,115,32,97,110,32,97,116,111,
               109,46]}],
            0,false}],
          0,false}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [24,35,35,32,77,117,108,116,105,112,108,101,32,73,47,79,32,82,101,
           113,117,101,115,116,115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,"\t*Request*"},
             {sep,[{text,"\"element can in itself contain many"}],0,false},
             {text,"\t*Request*"},
             {sep,[{text," s by using the following format:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [21,10,123,114,101,113,117,101,115,116,115,44,32,82,101,113,117,
               101,115,116,115,125]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,"\n*Requests*"},
          {sep,
           [{text,
             [18,105,115,32,97,32,108,105,115,116,32,111,102,32,118,97,108,
              105,100]}],
           0,false},
          {text,"\f*io_request*"},
          {sep,
           [{text,
             "øtuples for the protocol. They must be executed in the order that they appear in the list. The execution is to continue until one of the requests results in an error or the list is consumed. The result of the last request is sent back to the client."}],
           0,false}],
         0,false}],
       0,false},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [136,84,104,101,32,73,47,79,32,115,101,114,118,101,114,32,99,97,
               110,44,32,102,111,114,32,97,32,108,105,115,116,32,111,102,32,
               114,101,113,117,101,115,116,115,44,32,115,101,110,100,32,97,
               110,121,32,111,102,32,116,104,101,32,102,111,108,108,111,119,
               105,110,103,32,118,97,108,105,100,32,114,101,115,117,108,116,
               115,32,105,110,32,116,104,101,32,114,101,112,108,121,44,32,100,
               101,112,101,110,100,105,110,103,32,111,110,32,116,104,101,32,
               114,101,113,117,101,115,116,115,32,105,110,32,116,104,101,32,
               108,105,115,116,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,"+\nok\n{ok, Data}\n{ok, Options}\n{error, Error}"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [23,35,35,32,79,112,116,105,111,110,97,108,32,73,47,79,32,82,101,113,
          117,101,115,116]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "fThe following I/O request is optional to implement and a client is to be prepared for an error return:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [25,10,123,103,101,116,95,103,101,111,109,101,116,114,121,44,32,
              71,101,111,109,101,116,114,121,125]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,"\n*Geometry*"},
         {sep,[{text,"\vis the atom"}],0,false},
         {text,[6,42,114,111,119,115,42]},
         {sep,[{text,"\vor the atom"}],0,false},
         {text,"\t*columns*"},
         {sep,[{text,[1,46]}],0,false}],
        0,false}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,101,32,73,47,79,32,115,101,114,118,101,114,32,105,
                115,32,116,111,32,115,101,110,100,32,116,104,101]}],
             0,false},
            {text,[7,42,82,101,112,108,121,42]},
            {sep,[{text,[3,97,115,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [23,10,123,111,107,44,32,78,125,10,123,101,114,114,111,114,44,32,
              69,114,114,111,114,125]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[3,42,78,42]},
         {sep,
          [{text,
            [136,105,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,
             32,99,104,97,114,97,99,116,101,114,32,114,111,119,115,32,111,114,
             32,99,111,108,117,109,110,115,32,116,104,97,116,32,116,104,101,
             32,73,47,79,32,100,101,118,105,99,101,32,104,97,115,44,32,105,
             102,32,97,112,112,108,105,99,97,98,108,101,32,116,111,32,116,104,
             101,32,73,47,79,32,100,101,118,105,99,101,32,104,97,110,100,108,
             101,100,32,98,121,32,116,104,101,32,73,47,79,32,115,101,114,118,
             101,114,44,32,111,116,104,101,114,119,105,115,101]}],
          0,false},
         {text,
          [18,42,123,101,114,114,111,114,44,32,101,110,111,116,115,117,112,
           125,42]},
         {sep,
          [{text,
            [17,105,115,32,97,32,103,111,111,100,32,97,110,115,119,101,114,
             46]}],
          0,false}],
        0,false}],
      0,false}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [30,35,35,32,85,110,105,109,112,108,101,109,101,110,116,101,100,32,82,
         101,113,117,101,115,116,32,84,121,112,101,115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "NIf an I/O server encounters a request that it does not recognize (that is, the"}],
            0,false},
           {text,"\f*io_request*"},
           {sep,[{text,"&tuple has the expected format, but the"}],0,false},
           {text,"\t*Request*"},
           {sep,
            [{text,
              "Jis unknown), the I/O server is to send a valid reply with the error tuple:"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [17,10,123,101,114,114,111,114,44,32,114,101,113,117,101,115,116,
             125]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "|This makes it possible to extend the protocol with optional requests and for the clients to be somewhat backward compatible."}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,".## An Annotated and Working Example I/O Server"},null},
     null}},
   {text,"1<a name=\"example_io_server\">example_io_server</a>"},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [289,65,110,32,73,47,79,32,115,101,114,118,101,114,32,105,115,32,
            97,110,121,32,112,114,111,99,101,115,115,32,99,97,112,97,98,108,
            101,32,111,102,32,104,97,110,100,108,105,110,103,32,116,104,101,
            32,73,47,79,32,112,114,111,116,111,99,111,108,46,32,84,104,101,
            114,101,32,105,115,32,110,111,32,103,101,110,101,114,105,99,32,73,
            47,79,32,115,101,114,118,101,114,32,98,101,104,97,118,105,111,114,
            44,32,98,117,116,32,99,111,117,108,100,32,119,101,108,108,32,98,
            101,46,32,84,104,101,32,102,114,97,109,101,119,111,114,107,32,105,
            115,32,115,105,109,112,108,101,44,32,97,32,112,114,111,99,101,115,
            115,32,104,97,110,100,108,105,110,103,32,105,110,99,111,109,105,
            110,103,32,114,101,113,117,101,115,116,115,44,32,117,115,117,97,
            108,108,121,32,98,111,116,104,32,73,47,79,45,114,101,113,117,101,
            115,116,115,32,97,110,100,32,111,116,104,101,114,32,73,47,79,32,
            100,101,118,105,99,101,45,115,112,101,99,105,102,105,99,32,114,
            101,113,117,101,115,116,115,32,40,112,111,115,105,116,105,111,110,
            105,110,103,44,32,99,108,111,115,105,110,103,44,32,97,110,100,32,
            115,111,32,111,110,41,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "\\The example I/O server stores characters in an ETS table, making up a fairly crude RAM file."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "vThe module begins with the usual directives, a function to start the I/O server and a main loop handling the requests:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [984,10,45,109,111,100,117,108,101,40,101,116,115,95,105,111,95,
            115,101,114,118,101,114,41,46,10,10,45,101,120,112,111,114,116,40,
            91,115,116,97,114,116,95,108,105,110,107,47,48,44,32,105,110,105,
            116,47,48,44,32,108,111,111,112,47,49,44,32,117,110,116,105,108,
            95,110,101,119,108,105,110,101,47,51,44,32,117,110,116,105,108,95,
            101,110,111,117,103,104,47,51,93,41,46,10,10,45,100,101,102,105,
            110,101,40,67,72,65,82,83,95,80,69,82,95,82,69,67,44,32,49,48,41,
            46,10,10,45,114,101,99,111,114,100,40,115,116,97,116,101,44,32,
            123,10,9,32,32,116,97,98,108,101,44,10,9,32,32,112,111,115,105,
            116,105,111,110,44,32,37,32,97,98,115,111,108,117,116,101,10,9,32,
            32,109,111,100,101,32,37,32,98,105,110,97,114,121,32,124,32,108,
            105,115,116,10,9,32,125,41,46,10,10,115,116,97,114,116,95,108,105,
            110,107,40,41,32,45,62,10,32,32,32,32,115,112,97,119,110,95,108,
            105,110,107,40,63,77,79,68,85,76,69,44,105,110,105,116,44,91,93,
            41,46,10,10,105,110,105,116,40,41,32,45,62,10,32,32,32,32,84,97,
            98,108,101,32,61,32,101,116,115,58,110,101,119,40,110,111,110,97,
            109,101,44,91,111,114,100,101,114,101,100,95,115,101,116,93,41,44,
            10,32,32,32,32,63,77,79,68,85,76,69,58,108,111,111,112,40,35,115,
            116,97,116,101,123,116,97,98,108,101,32,61,32,84,97,98,108,101,44,
            32,112,111,115,105,116,105,111,110,32,61,32,48,44,32,109,111,100,
            101,61,108,105,115,116,125,41,46,10,10,108,111,111,112,40,83,116,
            97,116,101,41,32,45,62,10,32,32,32,32,114,101,99,101,105,118,101,
            10,9,123,105,111,95,114,101,113,117,101,115,116,44,32,70,114,111,
            109,44,32,82,101,112,108,121,65,115,44,32,82,101,113,117,101,115,
            116,125,32,45,62,10,9,32,32,32,32,99,97,115,101,32,114,101,113,
            117,101,115,116,40,82,101,113,117,101,115,116,44,83,116,97,116,
            101,41,32,111,102,10,9,9,123,84,97,103,44,32,82,101,112,108,121,
            44,32,78,101,119,83,116,97,116,101,125,32,119,104,101,110,32,84,
            97,103,32,61,58,61,32,111,107,59,32,84,97,103,32,61,58,61,32,101,
            114,114,111,114,32,45,62,10,9,9,32,32,32,32,114,101,112,108,121,
            40,70,114,111,109,44,32,82,101,112,108,121,65,115,44,32,82,101,
            112,108,121,41,44,10,9,9,32,32,32,32,63,77,79,68,85,76,69,58,108,
            111,111,112,40,78,101,119,83,116,97,116,101,41,59,10,9,9,123,115,
            116,111,112,44,32,82,101,112,108,121,44,32,95,78,101,119,83,116,
            97,116,101,125,32,45,62,10,9,9,32,32,32,32,114,101,112,108,121,40,
            70,114,111,109,44,32,82,101,112,108,121,65,115,44,32,82,101,112,
            108,121,41,44,10,9,9,32,32,32,32,101,120,105,116,40,82,101,112,
            108,121,41,10,9,32,32,32,32,101,110,100,59,10,9,37,37,32,80,114,
            105,118,97,116,101,32,109,101,115,115,97,103,101,10,9,123,70,114,
            111,109,44,32,114,101,119,105,110,100,125,32,45,62,10,9,32,32,32,
            32,70,114,111,109,32,33,32,123,115,101,108,102,40,41,44,32,111,
            107,125,44,10,9,32,32,32,32,63,77,79,68,85,76,69,58,108,111,111,
            112,40,83,116,97,116,101,35,115,116,97,116,101,123,112,111,115,
            105,116,105,111,110,32,61,32,48,125,41,59,10,9,95,85,110,107,110,
            111,119,110,32,45,62,10,9,32,32,32,32,63,77,79,68,85,76,69,58,108,
            111,111,112,40,83,116,97,116,101,41,10,32,32,32,32,101,110,100,
            46]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "FThe main loop receives messages from the client (which can use the the"}],
           0,false},
          {text,
           [17,91,115,116,100,108,105,98,47,105,111,93,40,46,47,105,111,41]},
          {sep,
           [{text,
             "8module to send requests). For each request, the function"}],
           0,false},
          {text,"\v*request/2*"},
          {sep,
           [{text,"7is called and a reply is eventually sent using function"}],
           0,false},
          {text,"\t*reply/3*"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [21,84,104,101,32,34,112,114,105,118,97,116,101,34,32,109,101,
              115,115,97,103,101]}],
           0,false},
          {text,
           [16,42,123,70,114,111,109,44,32,114,101,119,105,110,100,125,42]},
          {sep,
           [{text,
             "Aresults in the current position in the pseudo-file to be reset to"}],
           0,false},
          {text,[3,42,48,42]},
          {sep,
           [{text,
             [21,40,116,104,101,32,98,101,103,105,110,110,105,110,103,32,111,
              102,32,116,104,101]}],
           0,false},
          {sep,[{text,[5,34,102,105,108,101]}],0,false},
          {sep,
           [{text,
             [156,34,41,46,32,84,104,105,115,32,105,115,32,97,32,116,121,112,
              105,99,97,108,32,101,120,97,109,112,108,101,32,111,102,32,73,47,
              79,32,100,101,118,105,99,101,45,115,112,101,99,105,102,105,99,
              32,109,101,115,115,97,103,101,115,32,110,111,116,32,98,101,105,
              110,103,32,112,97,114,116,32,111,102,32,116,104,101,32,73,47,79,
              32,112,114,111,116,111,99,111,108,46,32,73,116,32,105,115,32,
              117,115,117,97,108,108,121,32,97,32,98,97,100,32,105,100,101,97,
              32,116,111,32,101,109,98,101,100,32,115,117,99,104,32,112,114,
              105,118,97,116,101,32,109,101,115,115,97,103,101,115,32,105,
              110]}],
           0,false},
          {text,"\f*io_request*"},
          {sep,[{text,"'tuples, as that can confuse the reader."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"%First, we examine the reply function:"}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "F\nreply(From, ReplyAs, Reply) ->\n    From ! {io_reply, ReplyAs, Reply}."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,"\fIt sends the"}],0,false},
          {text,"\n*io_reply*"},
          {sep,
           [{text,"+tuple back to the client, providing element"}],
           0,false},
          {text,"\t*ReplyAs*"},
          {sep,
           [{text,
             "Sreceived in the request along with the result of the request, as described earlier."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "KWe need to handle some requests. First the requests for writing characters:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [325,10,114,101,113,117,101,115,116,40,123,112,117,116,95,99,104,
            97,114,115,44,32,69,110,99,111,100,105,110,103,44,32,67,104,97,
            114,115,125,44,32,83,116,97,116,101,41,32,45,62,10,32,32,32,32,
            112,117,116,95,99,104,97,114,115,40,117,110,105,99,111,100,101,58,
            99,104,97,114,97,99,116,101,114,115,95,116,111,95,108,105,115,116,
            40,67,104,97,114,115,44,69,110,99,111,100,105,110,103,41,44,83,
            116,97,116,101,41,59,10,114,101,113,117,101,115,116,40,123,112,
            117,116,95,99,104,97,114,115,44,32,69,110,99,111,100,105,110,103,
            44,32,77,111,100,117,108,101,44,32,70,117,110,99,116,105,111,110,
            44,32,65,114,103,115,125,44,32,83,116,97,116,101,41,32,45,62,10,
            32,32,32,32,116,114,121,10,9,114,101,113,117,101,115,116,40,123,
            112,117,116,95,99,104,97,114,115,44,32,69,110,99,111,100,105,110,
            103,44,32,97,112,112,108,121,40,77,111,100,117,108,101,44,32,70,
            117,110,99,116,105,111,110,44,32,65,114,103,115,41,125,44,32,83,
            116,97,116,101,41,10,32,32,32,32,99,97,116,99,104,10,9,95,58,95,
            32,45,62,10,9,32,32,32,32,123,101,114,114,111,114,44,32,123,101,
            114,114,111,114,44,70,117,110,99,116,105,111,110,125,44,32,83,116,
            97,116,101,125,10,32,32,32,32,101,110,100,59]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,[3,84,104,101]}],0,false},
          {text,"\n*Encoding*"},
          {sep,
           [{text,
             [157,115,97,121,115,32,104,111,119,32,116,104,101,32,99,104,97,
              114,97,99,116,101,114,115,32,105,110,32,116,104,101,32,114,101,
              113,117,101,115,116,32,97,114,101,32,114,101,112,114,101,115,
              101,110,116,101,100,46,32,87,101,32,119,97,110,116,32,116,111,
              32,115,116,111,114,101,32,116,104,101,32,99,104,97,114,97,99,
              116,101,114,115,32,97,115,32,108,105,115,116,115,32,105,110,32,
              116,104,101,32,69,84,83,32,116,97,98,108,101,44,32,115,111,32,
              119,101,32,99,111,110,118,101,114,116,32,116,104,101,109,32,116,
              111,32,108,105,115,116,115,32,117,115,105,110,103,32,102,117,
              110,99,116,105,111,110]}],
           0,false},
          {text,
           "M[stdlib/unicode#characters_to_list/2](../stdlib/unicode#characters_to_list/2)"},
          {sep,
           [{text,
             "A. The conversion function conveniently accepts the encoding types"}],
           0,false},
          {text,"\t*unicode*"},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,"\b*latin1*"},
          {sep,
           [{text,[15,44,32,115,111,32,119,101,32,99,97,110,32,117,115,101]}],
           0,false},
          {text,"\n*Encoding*"},
          {sep,[{text,"\tdirectly."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,[4,87,104,101,110]}],0,false},
          {text,"\b*Module*"},
          {sep,[{text,[1,44]}],0,false},
          {text,"\n*Function*"},
          {sep,[{text,[5,44,32,97,110,100]}],0,false},
          {text,"\v*Arguments*"},
          {sep,
           [{text,
             "_are provided, we apply it and do the same with the result as if the data was provided directly."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"+We handle the requests for retrieving data:"}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [466,10,114,101,113,117,101,115,116,40,123,103,101,116,95,117,110,
            116,105,108,44,32,69,110,99,111,100,105,110,103,44,32,95,80,114,
            111,109,112,116,44,32,77,44,32,70,44,32,65,115,125,44,32,83,116,
            97,116,101,41,32,45,62,10,32,32,32,32,103,101,116,95,117,110,116,
            105,108,40,69,110,99,111,100,105,110,103,44,32,77,44,32,70,44,32,
            65,115,44,32,83,116,97,116,101,41,59,10,114,101,113,117,101,115,
            116,40,123,103,101,116,95,99,104,97,114,115,44,32,69,110,99,111,
            100,105,110,103,44,32,95,80,114,111,109,112,116,44,32,78,125,44,
            32,83,116,97,116,101,41,32,45,62,10,32,32,32,32,37,37,32,84,111,
            32,115,105,109,112,108,105,102,121,32,116,104,101,32,99,111,100,
            101,44,32,103,101,116,95,99,104,97,114,115,32,105,115,32,105,109,
            112,108,101,109,101,110,116,101,100,32,117,115,105,110,103,32,103,
            101,116,95,117,110,116,105,108,10,32,32,32,32,103,101,116,95,117,
            110,116,105,108,40,69,110,99,111,100,105,110,103,44,32,63,77,79,
            68,85,76,69,44,32,117,110,116,105,108,95,101,110,111,117,103,104,
            44,32,91,78,93,44,32,83,116,97,116,101,41,59,10,114,101,113,117,
            101,115,116,40,123,103,101,116,95,108,105,110,101,44,32,69,110,99,
            111,100,105,110,103,44,32,95,80,114,111,109,112,116,125,44,32,83,
            116,97,116,101,41,32,45,62,10,32,32,32,32,37,37,32,84,111,32,115,
            105,109,112,108,105,102,121,32,116,104,101,32,99,111,100,101,44,
            32,103,101,116,95,108,105,110,101,32,105,115,32,105,109,112,108,
            101,109,101,110,116,101,100,32,117,115,105,110,103,32,103,101,116,
            95,117,110,116,105,108,10,32,32,32,32,103,101,116,95,117,110,116,
            105,108,40,69,110,99,111,100,105,110,103,44,32,63,77,79,68,85,76,
            69,44,32,117,110,116,105,108,95,110,101,119,108,105,110,101,44,32,
            91,36,92,110,93,44,32,83,116,97,116,101,41,59]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "?Here we have cheated a little by more or less only implementing"}],
           0,false},
          {text,"\v*get_until*"},
          {sep,[{text,"'and using internal helpers to implement"}],0,false},
          {text,"\v*get_chars*"},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,"\n*get_line*"},
          {sep,
           [{text,
             [146,46,32,73,110,32,112,114,111,100,117,99,116,105,111,110,32,
              99,111,100,101,44,32,116,104,105,115,32,99,97,110,32,98,101,32,
              105,110,101,102,102,105,99,105,101,110,116,44,32,98,117,116,32,
              116,104,97,116,32,100,101,112,101,110,100,115,32,111,110,32,116,
              104,101,32,102,114,101,113,117,101,110,99,121,32,111,102,32,116,
              104,101,32,100,105,102,102,101,114,101,110,116,32,114,101,113,
              117,101,115,116,115,46,32,66,101,102,111,114,101,32,119,101,32,
              115,116,97,114,116,32,105,109,112,108,101,109,101,110,116,105,
              110,103,32,102,117,110,99,116,105,111,110,115]}],
           0,false},
          {text,"\r*put_chars/2*"},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,"\r*get_until/5*"},
          {sep,[{text,"(, we examine the few remaining requests:"}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [260,10,114,101,113,117,101,115,116,40,123,103,101,116,95,103,101,
            111,109,101,116,114,121,44,95,125,44,32,83,116,97,116,101,41,32,
            45,62,10,32,32,32,32,123,101,114,114,111,114,44,32,123,101,114,
            114,111,114,44,101,110,111,116,115,117,112,125,44,32,83,116,97,
            116,101,125,59,10,114,101,113,117,101,115,116,40,123,115,101,116,
            111,112,116,115,44,32,79,112,116,115,125,44,32,83,116,97,116,101,
            41,32,45,62,10,32,32,32,32,115,101,116,111,112,116,115,40,79,112,
            116,115,44,32,83,116,97,116,101,41,59,10,114,101,113,117,101,115,
            116,40,103,101,116,111,112,116,115,44,32,83,116,97,116,101,41,32,
            45,62,10,32,32,32,32,103,101,116,111,112,116,115,40,83,116,97,116,
            101,41,59,10,114,101,113,117,101,115,116,40,123,114,101,113,117,
            101,115,116,115,44,32,82,101,113,115,125,44,32,83,116,97,116,101,
            41,32,45,62,10,32,32,32,32,32,109,117,108,116,105,95,114,101,113,
            117,101,115,116,40,82,101,113,115,44,32,123,111,107,44,32,111,107,
            44,32,83,116,97,116,101,125,41,59]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,[7,82,101,113,117,101,115,116]}],0,false},
          {text,[14,42,103,101,116,95,103,101,111,109,101,116,114,121,42]},
          {sep,
           [{text,"3has no meaning for this I/O server, so the reply is"}],
           0,false},
          {text,
           [18,42,123,101,114,114,111,114,44,32,101,110,111,116,115,117,112,
            125,42]},
          {sep,
           [{text,
             [30,46,32,84,104,101,32,111,110,108,121,32,111,112,116,105,111,
              110,32,119,101,32,104,97,110,100,108,101,32,105,115]}],
           0,false},
          {text,"\b*binary*"},
          {sep,[{text,[1,47]}],0,false},
          {text,[6,42,108,105,115,116,42]},
          {sep,[{text,"&, which is done in separate functions."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [23,84,104,101,32,109,117,108,116,105,45,114,101,113,117,101,115,
              116,32,116,97,103,32,40]}],
           0,false},
          {text,"\n*requests*"},
          {sep,
           [{text,
             "x) is handled in a separate loop function applying the requests in the list one after another, returning the last result."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,"0We need to handle backward compatibility and the"}],
           0,false},
          {text,
           [21,91,107,101,114,110,101,108,47,102,105,108,101,93,40,46,47,102,
            105,108,101,41]},
          {sep,
           [{text,
             " module (which uses the old requests until backward compatibility with pre-R13 nodes is no longer needed). Notice that the I/O server does not work with a simple"}],
           0,false},
          {text,[14,42,102,105,108,101,58,119,114,105,116,101,47,50,42]},
          {sep,
           [{text,
             [23,105,102,32,116,104,101,115,101,32,97,114,101,32,110,111,116,
              32,97,100,100,101,100,58]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [440,10,114,101,113,117,101,115,116,40,123,112,117,116,95,99,104,
            97,114,115,44,67,104,97,114,115,125,44,32,83,116,97,116,101,41,32,
            45,62,10,32,32,32,32,114,101,113,117,101,115,116,40,123,112,117,
            116,95,99,104,97,114,115,44,108,97,116,105,110,49,44,67,104,97,
            114,115,125,44,32,83,116,97,116,101,41,59,10,114,101,113,117,101,
            115,116,40,123,112,117,116,95,99,104,97,114,115,44,77,44,70,44,65,
            115,125,44,32,83,116,97,116,101,41,32,45,62,10,32,32,32,32,114,
            101,113,117,101,115,116,40,123,112,117,116,95,99,104,97,114,115,
            44,108,97,116,105,110,49,44,77,44,70,44,65,115,125,44,32,83,116,
            97,116,101,41,59,10,114,101,113,117,101,115,116,40,123,103,101,
            116,95,99,104,97,114,115,44,80,114,111,109,112,116,44,78,125,44,
            32,83,116,97,116,101,41,32,45,62,10,32,32,32,32,114,101,113,117,
            101,115,116,40,123,103,101,116,95,99,104,97,114,115,44,108,97,116,
            105,110,49,44,80,114,111,109,112,116,44,78,125,44,32,83,116,97,
            116,101,41,59,10,114,101,113,117,101,115,116,40,123,103,101,116,
            95,108,105,110,101,44,80,114,111,109,112,116,125,44,32,83,116,97,
            116,101,41,32,45,62,10,32,32,32,32,114,101,113,117,101,115,116,40,
            123,103,101,116,95,108,105,110,101,44,108,97,116,105,110,49,44,80,
            114,111,109,112,116,125,44,32,83,116,97,116,101,41,59,10,114,101,
            113,117,101,115,116,40,123,103,101,116,95,117,110,116,105,108,44,
            32,80,114,111,109,112,116,44,77,44,70,44,65,115,125,44,32,83,116,
            97,116,101,41,32,45,62,10,32,32,32,32,114,101,113,117,101,115,116,
            40,123,103,101,116,95,117,110,116,105,108,44,108,97,116,105,110,
            49,44,80,114,111,109,112,116,44,77,44,70,44,65,115,125,44,32,83,
            116,97,116,101,41,59]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [18,42,123,101,114,114,111,114,44,32,114,101,113,117,101,115,116,
            125,42]},
          {sep,
           [{text,"2must be returned if the request is not recognized:"}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "@\nrequest(_Other, State) ->\n    {error, {error, request}, State}."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "SNext we handle the different requests, first the fairly generic multi-request type:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "©\nmulti_request([R|Rs], {ok, _Res, State}) ->\n    multi_request(Rs, request(R, State));\nmulti_request([_|_], Error) ->\n    Error;\nmulti_request([], Result) ->\n    Result."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "éWe loop through the requests one at the time, stopping when we either encounter an error or the list is exhausted. The last return value is sent back to the client (it is first returned to the main loop and then sent back by function"}],
           0,false},
          {text,"\n*io_reply*"},
          {sep,[{text,[2,41,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,"\bRequests"}],0,false},
          {text,"\t*getopts*"},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,"\t*setopts*"},
          {sep,
           [{text,
             "Care also simple to handle. We only change or read the state record:"}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [907,10,115,101,116,111,112,116,115,40,79,112,116,115,48,44,83,116,
            97,116,101,41,32,45,62,10,32,32,32,32,79,112,116,115,32,61,32,112,
            114,111,112,108,105,115,116,115,58,117,110,102,111,108,100,40,10,
            9,32,32,32,32,32,112,114,111,112,108,105,115,116,115,58,115,117,
            98,115,116,105,116,117,116,101,95,110,101,103,97,116,105,111,110,
            115,40,10,9,32,32,32,32,32,32,32,91,123,108,105,115,116,44,98,105,
            110,97,114,121,125,93,44,32,10,9,32,32,32,32,32,32,32,79,112,116,
            115,48,41,41,44,10,32,32,32,32,99,97,115,101,32,99,104,101,99,107,
            95,118,97,108,105,100,95,111,112,116,115,40,79,112,116,115,41,32,
            111,102,10,9,116,114,117,101,32,45,62,10,9,32,32,32,32,32,32,32,
            32,99,97,115,101,32,112,114,111,112,108,105,115,116,115,58,103,
            101,116,95,118,97,108,117,101,40,98,105,110,97,114,121,44,32,79,
            112,116,115,41,32,111,102,10,9,9,32,32,32,32,116,114,117,101,32,
            45,62,10,9,9,9,123,111,107,44,111,107,44,83,116,97,116,101,35,115,
            116,97,116,101,123,109,111,100,101,61,98,105,110,97,114,121,125,
            125,59,10,9,9,32,32,32,32,102,97,108,115,101,32,45,62,10,9,9,9,
            123,111,107,44,111,107,44,83,116,97,116,101,35,115,116,97,116,101,
            123,109,111,100,101,61,98,105,110,97,114,121,125,125,59,10,9,9,32,
            32,32,32,95,32,45,62,10,9,9,9,123,111,107,44,111,107,44,83,116,97,
            116,101,125,10,9,9,101,110,100,59,10,9,102,97,108,115,101,32,45,
            62,10,9,32,32,32,32,123,101,114,114,111,114,44,123,101,114,114,
            111,114,44,101,110,111,116,115,117,112,125,44,83,116,97,116,101,
            125,10,32,32,32,32,101,110,100,46,10,99,104,101,99,107,95,118,97,
            108,105,100,95,111,112,116,115,40,91,93,41,32,45,62,10,32,32,32,
            32,116,114,117,101,59,10,99,104,101,99,107,95,118,97,108,105,100,
            95,111,112,116,115,40,91,123,98,105,110,97,114,121,44,66,111,111,
            108,125,124,84,93,41,32,119,104,101,110,32,105,115,95,98,111,111,
            108,101,97,110,40,66,111,111,108,41,32,45,62,10,32,32,32,32,99,
            104,101,99,107,95,118,97,108,105,100,95,111,112,116,115,40,84,41,
            59,10,99,104,101,99,107,95,118,97,108,105,100,95,111,112,116,115,
            40,95,41,32,45,62,10,32,32,32,32,102,97,108,115,101,46,10,10,103,
            101,116,111,112,116,115,40,35,115,116,97,116,101,123,109,111,100,
            101,61,77,125,32,61,32,83,41,32,45,62,10,32,32,32,32,123,111,107,
            44,91,123,98,105,110,97,114,121,44,32,99,97,115,101,32,77,32,111,
            102,10,9,9,32,32,32,32,32,32,98,105,110,97,114,121,32,45,62,10,9,
            9,9,32,32,116,114,117,101,59,10,9,9,32,32,32,32,32,32,95,32,45,62,
            10,9,9,9,32,32,102,97,108,115,101,10,9,9,32,32,101,110,100,125,93,
            44,83,125,46]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,",As a convention, all I/O servers handle both"}],
           0,false},
          {text,
           [21,42,123,115,101,116,111,112,116,115,44,32,91,98,105,110,97,114,
            121,93,125,42]},
          {sep,[{text,[1,44]}],0,false},
          {text,
           [19,42,123,115,101,116,111,112,116,115,44,32,91,108,105,115,116,93,
            125,42]},
          {sep,[{text,[5,44,32,97,110,100]}],0,false},
          {text,"!*{setopts,[{binary, boolean()}]}*"},
          {sep,
           [{text,
             [22,44,32,104,101,110,99,101,32,116,104,101,32,116,114,105,99,
              107,32,119,105,116,104]}],
           0,false},
          {text,"\"*proplists:substitute_negations/2*"},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,
           [20,42,112,114,111,112,108,105,115,116,115,58,117,110,102,111,108,
            100,47,49,42]},
          {sep,
           [{text,",. If invalid options are sent to us, we send"}],
           0,false},
          {text,
           [18,42,123,101,114,114,111,114,44,32,101,110,111,116,115,117,112,
            125,42]},
          {sep,
           [{text,
             [19,98,97,99,107,32,116,111,32,116,104,101,32,99,108,105,101,110,
              116,46]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,[7,82,101,113,117,101,115,116]}],0,false},
          {text,"\t*getopts*"},
          {sep,
           [{text,
             [22,105,115,32,116,111,32,114,101,116,117,114,110,32,97,32,108,
              105,115,116,32,111,102]}],
           0,false},
          {text,
           [17,42,123,79,112,116,105,111,110,44,32,86,97,108,117,101,125,42]},
          {sep,
           [{text,
             "¨tuples. This has the twofold function of providing both the current values and the available options of this I/O server. We have only one option, and hence return that."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "<So far this I/O server is fairly generic (except for request"}],
           0,false},
          {text,"\b*rewind*"},
          {sep,
           [{text,
             "nhandled in the main loop and the creation of an ETS table). Most I/O servers contain code similar to this one."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "}To make the example runnable, we start implementing the reading and writing of the data to/from the ETS table. First function"}],
           0,false},
          {text,"\r*put_chars/3*"},
          {sep,[{text,[1,58]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "ï\nput_chars(Chars, #state{table = T, position = P} = State) ->\n    R = P div ?CHARS_PER_REC,\n    C = P rem ?CHARS_PER_REC,\n    [ apply_update(T,U) || U <- split_data(Chars, R, C) ],\n    {ok, ok, State#state{position = (P + length(Chars))}}."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "¹We already have the data as (Unicode) lists and therefore only split the list in runs of a predefined size and put each run in the table at the current position (and forward). Functions"}],
           0,false},
          {text,[14,42,115,112,108,105,116,95,100,97,116,97,47,51,42]},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,[16,42,97,112,112,108,121,95,117,112,100,97,116,101,47,50,42]},
          {sep,
           [{text,
             [22,97,114,101,32,105,109,112,108,101,109,101,110,116,101,100,32,
              98,101,108,111,119,46]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,"1Now we want to read data from the table. Function"}],
           0,false},
          {text,"\r*get_until/5*"},
          {sep,
           [{text,
             "ireads data and applies the function until it says that it is done. The result is sent back to the client:"}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [1174,10,103,101,116,95,117,110,116,105,108,40,69,110,99,111,100,
            105,110,103,44,32,77,111,100,44,32,70,117,110,99,44,32,65,115,44,
            32,10,9,32,32,35,115,116,97,116,101,123,112,111,115,105,116,105,
            111,110,32,61,32,80,44,32,109,111,100,101,32,61,32,77,44,32,116,
            97,98,108,101,32,61,32,84,125,32,61,32,83,116,97,116,101,41,32,45,
            62,10,32,32,32,32,99,97,115,101,32,103,101,116,95,108,111,111,112,
            40,77,111,100,44,70,117,110,99,44,65,115,44,84,44,80,44,91,93,41,
            32,111,102,10,9,123,100,111,110,101,44,68,97,116,97,44,95,44,78,
            101,119,80,125,32,119,104,101,110,32,105,115,95,98,105,110,97,114,
            121,40,68,97,116,97,41,59,32,105,115,95,108,105,115,116,40,68,97,
            116,97,41,32,45,62,10,9,32,32,32,32,105,102,10,9,9,77,32,61,58,61,
            32,98,105,110,97,114,121,32,45,62,32,10,9,9,32,32,32,32,123,111,
            107,44,32,10,9,9,32,32,32,32,32,117,110,105,99,111,100,101,58,99,
            104,97,114,97,99,116,101,114,115,95,116,111,95,98,105,110,97,114,
            121,40,68,97,116,97,44,32,117,110,105,99,111,100,101,44,32,69,110,
            99,111,100,105,110,103,41,44,10,9,9,32,32,32,32,32,83,116,97,116,
            101,35,115,116,97,116,101,123,112,111,115,105,116,105,111,110,32,
            61,32,78,101,119,80,125,125,59,10,9,9,116,114,117,101,32,45,62,10,
            9,9,32,32,32,32,99,97,115,101,32,99,104,101,99,107,40,69,110,99,
            111,100,105,110,103,44,32,10,9,9,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,117,110,105,99,111,100,101,58,99,104,97,114,97,99,116,
            101,114,115,95,116,111,95,108,105,115,116,40,68,97,116,97,44,32,
            117,110,105,99,111,100,101,41,41,10,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,111,102,10,9,9,9,123,101,114,114,
            111,114,44,32,95,125,32,61,32,69,32,45,62,10,9,9,9,32,32,32,32,
            123,101,114,114,111,114,44,32,69,44,32,83,116,97,116,101,125,59,
            10,9,9,9,76,105,115,116,32,45,62,10,9,9,9,32,32,32,32,123,111,107,
            44,32,76,105,115,116,44,10,9,9,9,32,32,32,32,32,83,116,97,116,101,
            35,115,116,97,116,101,123,112,111,115,105,116,105,111,110,32,61,
            32,78,101,119,80,125,125,10,9,9,32,32,32,32,101,110,100,10,9,32,
            32,32,32,101,110,100,59,10,9,123,100,111,110,101,44,68,97,116,97,
            44,95,44,78,101,119,80,125,32,45,62,10,9,32,32,32,32,123,111,107,
            44,32,68,97,116,97,44,32,83,116,97,116,101,35,115,116,97,116,101,
            123,112,111,115,105,116,105,111,110,32,61,32,78,101,119,80,125,
            125,59,10,9,69,114,114,111,114,32,45,62,10,9,32,32,32,32,123,101,
            114,114,111,114,44,32,69,114,114,111,114,44,32,83,116,97,116,101,
            125,10,32,32,32,32,101,110,100,46,10,10,103,101,116,95,108,111,
            111,112,40,77,44,70,44,65,44,84,44,80,44,67,41,32,45,62,10,32,32,
            32,32,123,78,101,119,80,44,76,125,32,61,32,103,101,116,40,80,44,
            84,41,44,10,32,32,32,32,99,97,115,101,32,99,97,116,99,104,32,97,
            112,112,108,121,40,77,44,70,44,91,67,44,76,124,65,93,41,32,111,
            102,10,9,123,100,111,110,101,44,32,76,105,115,116,44,32,82,101,
            115,116,125,32,45,62,10,9,32,32,32,32,123,100,111,110,101,44,32,
            76,105,115,116,44,32,91,93,44,32,78,101,119,80,32,45,32,108,101,
            110,103,116,104,40,82,101,115,116,41,125,59,10,9,123,109,111,114,
            101,44,32,78,101,119,67,125,32,45,62,10,9,32,32,32,32,103,101,116,
            95,108,111,111,112,40,77,44,70,44,65,44,84,44,78,101,119,80,44,78,
            101,119,67,41,59,10,9,95,32,45,62,10,9,32,32,32,32,123,101,114,
            114,111,114,44,70,125,10,32,32,32,32,101,110,100,46]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [30,72,101,114,101,32,119,101,32,97,108,115,111,32,104,97,110,
              100,108,101,32,116,104,101,32,109,111,100,101,32,40]}],
           0,false},
          {text,"\b*binary*"},
          {sep,[{text,[2,111,114]}],0,false},
          {text,[6,42,108,105,115,116,42]},
          {sep,
           [{text,
             [28,41,32,116,104,97,116,32,99,97,110,32,98,101,32,115,101,116,
              32,98,121,32,114,101,113,117,101,115,116]}],
           0,false},
          {text,"\t*setopts*"},
          {sep,
           [{text,
             "^. By default, all OTP I/O servers send data back to the client as lists, but switching mode to"}],
           0,false},
          {text,"\b*binary*"},
          {sep,
           [{text,
             "acan increase efficiency if the I/O server handles it in an appropriate way. The implementation of"}],
           0,false},
          {text,"\v*get_until*"},
          {sep,
           [{text,
             "bis difficult to get efficient, as the supplied function is defined to take lists as arguments, but"}],
           0,false},
          {text,"\v*get_chars*"},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,"\n*get_line*"},
          {sep,
           [{text,
             "Scan be optimized for binary mode. However, this example does not optimize anything."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "¥It is important though that the returned data is of the correct type depending on the options set. We therefore convert the lists to binaries in the correct encoding"}],
           0,false},
          {text,[15,42,42,105,102,32,112,111,115,115,105,98,108,101,42,42]},
          {sep,
           [{text,".before returning. The function supplied in the"}],
           0,false},
          {text,"\v*get_until*"},
          {sep,
           [{text,
             "¢request tuple can, as its final result return anything, so only functions returning lists can get them converted to binaries. If the request contains encoding tag"}],
           0,false},
          {text,"\t*unicode*"},
          {sep,
           [{text,
             "k, the lists can contain all Unicode code points and the binaries are to be in UTF-8. If the encoding tag is"}],
           0,false},
          {text,"\b*latin1*"},
          {sep,
           [{text,"3, the client is only to get characters in the range"}],
           0,false},
          {text,"\b*0..255*"},
          {sep,[{text,"\n. Function"}],0,false},
          {text,"\t*check/2*"},
          {sep,
           [{text,
             "ctakes care of not returning arbitrary Unicode code points in lists if the encoding was specified as"}],
           0,false},
          {text,"\b*latin1*"},
          {sep,
           [{text,
             [130,46,32,73,102,32,116,104,101,32,102,117,110,99,116,105,111,
              110,32,100,111,101,115,32,110,111,116,32,114,101,116,117,114,
              110,32,97,32,108,105,115,116,44,32,116,104,101,32,99,104,101,99,
              107,32,99,97,110,110,111,116,32,98,101,32,112,101,114,102,111,
              114,109,101,100,32,97,110,100,32,116,104,101,32,114,101,115,117,
              108,116,32,105,115,32,116,104,97,116,32,111,102,32,116,104,101,
              32,115,117,112,112,108,105,101,100,32,102,117,110,99,116,105,
              111,110,32,117,110,116,111,117,99,104,101,100,46]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "ETo manipulate the table we implement the following utility functions:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "î\ncheck(unicode, List) ->\n    List;\ncheck(latin1, List) ->\n    try \n\t[ throw(not_unicode) || X <- List,\n\t\t\t\tX > 255 ],\n\tList\n    catch\n\tthrow:_ ->\n\t    {error,{cannot_convert, unicode, latin1}}\n    end."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "rThe function check provides an error tuple if Unicode code points > 255 are to be returned if the client requested"}],
           0,false},
          {text,"\b*latin1*"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [17,84,104,101,32,116,119,111,32,102,117,110,99,116,105,111,110,
              115]}],
           0,false},
          {text,
           [17,42,117,110,116,105,108,95,110,101,119,108,105,110,101,47,51,
            42]},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,
           [16,42,117,110,116,105,108,95,101,110,111,117,103,104,47,51,42]},
          {sep,[{text,"'are helpers used together with function"}],0,false},
          {text,"\r*get_until/5*"},
          {sep,[{text,"\fto implement"}],0,false},
          {text,"\v*get_chars*"},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,"\n*get_line*"},
          {sep,
           [{text,
             [16,40,105,110,101,102,102,105,99,105,101,110,116,108,121,41,
              58]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [735,10,117,110,116,105,108,95,110,101,119,108,105,110,101,40,91,
            93,44,101,111,102,44,95,77,121,83,116,111,112,67,104,97,114,97,99,
            116,101,114,41,32,45,62,10,32,32,32,32,123,100,111,110,101,44,101,
            111,102,44,91,93,125,59,10,117,110,116,105,108,95,110,101,119,108,
            105,110,101,40,84,104,105,115,70,97,114,44,101,111,102,44,95,77,
            121,83,116,111,112,67,104,97,114,97,99,116,101,114,41,32,45,62,10,
            32,32,32,32,123,100,111,110,101,44,84,104,105,115,70,97,114,44,91,
            93,125,59,10,117,110,116,105,108,95,110,101,119,108,105,110,101,
            40,84,104,105,115,70,97,114,44,67,104,97,114,76,105,115,116,44,77,
            121,83,116,111,112,67,104,97,114,97,99,116,101,114,41,32,45,62,10,
            32,32,32,32,99,97,115,101,10,32,32,32,32,32,32,32,32,108,105,115,
            116,115,58,115,112,108,105,116,119,105,116,104,40,102,117,110,40,
            88,41,32,45,62,32,88,32,61,47,61,32,77,121,83,116,111,112,67,104,
            97,114,97,99,116,101,114,32,101,110,100,44,32,32,67,104,97,114,76,
            105,115,116,41,10,32,32,32,32,111,102,10,9,123,76,44,91,93,125,32,
            45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,123,109,111,114,101,
            44,84,104,105,115,70,97,114,43,43,76,125,59,10,9,123,76,50,44,91,
            77,121,83,116,111,112,67,104,97,114,97,99,116,101,114,124,82,101,
            115,116,93,125,32,45,62,10,9,32,32,32,32,123,100,111,110,101,44,
            84,104,105,115,70,97,114,43,43,76,50,43,43,91,77,121,83,116,111,
            112,67,104,97,114,97,99,116,101,114,93,44,82,101,115,116,125,10,
            32,32,32,32,101,110,100,46,10,10,117,110,116,105,108,95,101,110,
            111,117,103,104,40,91,93,44,101,111,102,44,95,78,41,32,45,62,10,
            32,32,32,32,123,100,111,110,101,44,101,111,102,44,91,93,125,59,10,
            117,110,116,105,108,95,101,110,111,117,103,104,40,84,104,105,115,
            70,97,114,44,101,111,102,44,95,78,41,32,45,62,10,32,32,32,32,123,
            100,111,110,101,44,84,104,105,115,70,97,114,44,91,93,125,59,10,
            117,110,116,105,108,95,101,110,111,117,103,104,40,84,104,105,115,
            70,97,114,44,67,104,97,114,76,105,115,116,44,78,41,32,10,32,32,
            119,104,101,110,32,108,101,110,103,116,104,40,84,104,105,115,70,
            97,114,41,32,43,32,108,101,110,103,116,104,40,67,104,97,114,76,
            105,115,116,41,32,62,61,32,78,32,45,62,10,32,32,32,32,123,82,101,
            115,44,82,101,115,116,125,32,61,32,109,121,95,115,112,108,105,116,
            40,78,44,84,104,105,115,70,97,114,32,43,43,32,67,104,97,114,76,
            105,115,116,44,32,91,93,41,44,10,32,32,32,32,123,100,111,110,101,
            44,82,101,115,44,82,101,115,116,125,59,10,117,110,116,105,108,95,
            101,110,111,117,103,104,40,84,104,105,115,70,97,114,44,67,104,97,
            114,76,105,115,116,44,95,78,41,32,45,62,10,32,32,32,32,123,109,
            111,114,101,44,84,104,105,115,70,97,114,43,43,67,104,97,114,76,
            105,115,116,125,46]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "]As can be seen, the functions above are just the type of functions that are to be provided in"}],
           0,false},
          {text,"\v*get_until*"},
          {sep,[{text,"\trequests."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "[To complete the I/O server, we only need to read and write the table in an appropriate way:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [1020,10,103,101,116,40,80,44,84,97,98,41,32,45,62,10,32,32,32,32,
            82,32,61,32,80,32,100,105,118,32,63,67,72,65,82,83,95,80,69,82,95,
            82,69,67,44,10,32,32,32,32,67,32,61,32,80,32,114,101,109,32,63,67,
            72,65,82,83,95,80,69,82,95,82,69,67,44,10,32,32,32,32,99,97,115,
            101,32,101,116,115,58,108,111,111,107,117,112,40,84,97,98,44,82,
            41,32,111,102,10,9,91,93,32,45,62,10,9,32,32,32,32,123,80,44,101,
            111,102,125,59,10,9,91,123,82,44,76,105,115,116,125,93,32,45,62,
            10,9,32,32,32,32,99,97,115,101,32,109,121,95,115,112,108,105,116,
            40,67,44,76,105,115,116,44,91,93,41,32,111,102,10,9,9,123,95,44,
            91,93,125,32,45,62,10,9,9,32,32,32,32,123,80,43,108,101,110,103,
            116,104,40,76,105,115,116,41,44,101,111,102,125,59,10,9,9,123,95,
            44,68,97,116,97,125,32,45,62,10,9,9,32,32,32,32,123,80,43,108,101,
            110,103,116,104,40,68,97,116,97,41,44,68,97,116,97,125,10,9,32,32,
            32,32,101,110,100,10,32,32,32,32,101,110,100,46,10,10,109,121,95,
            115,112,108,105,116,40,48,44,76,101,102,116,44,65,99,99,41,32,45,
            62,10,32,32,32,32,123,108,105,115,116,115,58,114,101,118,101,114,
            115,101,40,65,99,99,41,44,76,101,102,116,125,59,10,109,121,95,115,
            112,108,105,116,40,95,44,91,93,44,65,99,99,41,32,45,62,10,32,32,
            32,32,123,108,105,115,116,115,58,114,101,118,101,114,115,101,40,
            65,99,99,41,44,91,93,125,59,10,109,121,95,115,112,108,105,116,40,
            78,44,91,72,124,84,93,44,65,99,99,41,32,45,62,10,32,32,32,32,109,
            121,95,115,112,108,105,116,40,78,45,49,44,84,44,91,72,124,65,99,
            99,93,41,46,10,10,115,112,108,105,116,95,100,97,116,97,40,91,93,
            44,95,44,95,41,32,45,62,10,32,32,32,32,91,93,59,10,115,112,108,
            105,116,95,100,97,116,97,40,67,104,97,114,115,44,32,82,111,119,44,
            32,67,111,108,41,32,45,62,10,32,32,32,32,123,84,104,105,115,44,76,
            101,102,116,125,32,61,32,109,121,95,115,112,108,105,116,40,63,67,
            72,65,82,83,95,80,69,82,95,82,69,67,32,45,32,67,111,108,44,32,67,
            104,97,114,115,44,32,91,93,41,44,10,32,32,32,32,91,32,123,82,111,
            119,44,32,67,111,108,44,32,84,104,105,115,125,32,124,32,115,112,
            108,105,116,95,100,97,116,97,40,76,101,102,116,44,32,82,111,119,
            32,43,32,49,44,32,48,41,32,93,46,10,10,97,112,112,108,121,95,117,
            112,100,97,116,101,40,84,97,98,108,101,44,32,123,82,111,119,44,32,
            67,111,108,44,32,76,105,115,116,125,41,32,45,62,32,32,32,32,32,10,
            32,32,32,32,99,97,115,101,32,101,116,115,58,108,111,111,107,117,
            112,40,84,97,98,108,101,44,82,111,119,41,32,111,102,10,9,91,93,32,
            45,62,10,9,32,32,32,32,101,116,115,58,105,110,115,101,114,116,40,
            84,97,98,108,101,44,123,82,111,119,44,32,108,105,115,116,115,58,
            100,117,112,108,105,99,97,116,101,40,67,111,108,44,48,41,32,43,43,
            32,76,105,115,116,125,41,59,10,9,91,123,82,111,119,44,32,79,108,
            100,68,97,116,97,125,93,32,45,62,10,9,32,32,32,32,123,80,97,114,
            116,49,44,95,125,32,61,32,109,121,95,115,112,108,105,116,40,67,
            111,108,44,79,108,100,68,97,116,97,44,91,93,41,44,10,9,32,32,32,
            32,123,95,44,80,97,114,116,50,125,32,61,32,109,121,95,115,112,108,
            105,116,40,67,111,108,43,108,101,110,103,116,104,40,76,105,115,
            116,41,44,79,108,100,68,97,116,97,44,91,93,41,44,10,9,32,32,32,32,
            101,116,115,58,105,110,115,101,114,116,40,84,97,98,108,101,44,123,
            82,111,119,44,32,80,97,114,116,49,32,43,43,32,76,105,115,116,32,
            43,43,32,80,97,114,116,50,125,41,10,32,32,32,32,101,110,100,46]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,")The table is read or written in chunks of"}],0,false},
          {text,[16,42,63,67,72,65,82,83,95,80,69,82,95,82,69,67,42]},
          {sep,
           [{text,
             "^, overwriting when necessary. The implementation is clearly not efficient, it is just working."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "wThis concludes the example. It is fully runnable and you can read or write to the I/O server by using, for example, the"}],
           0,false},
          {text,
           [17,91,115,116,100,108,105,98,47,105,111,93,40,46,47,105,111,41]},
          {sep,
           [{text,
             [18,109,111,100,117,108,101,32,111,114,32,101,118,101,110,32,116,
              104,101]}],
           0,false},
          {text,
           [21,91,107,101,114,110,101,108,47,102,105,108,101,93,40,46,47,102,
            105,108,101,41]},
          {sep,
           [{text,
             "Rmodule. It is as simple as that to implement a fully fledged I/O server in Erlang."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
