{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,[14,35,32,109,115,95,116,114,97,110,115,102,111,114,109]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,[14,35,32,109,115,95,116,114,97,110,115,102,111,114,109]},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "LA parse transformation that translates fun syntax into match specifications."}],
                 0,false}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [21,60,97,32,110,97,109,101,61,34,116,111,112,34,62,116,111,
                   112,60,47,97,62]},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           "AThis module provides the parse transformation that makes calls to"}],
                         0,false},
                        {text,"\n[ets](ets)"},
                        {sep,[{text,[3,97,110,100]}],0,false},
                        {text,
                         ";[runtime_tools/dbg#fun2ms/1](../runtime_tools/dbg#fun2ms/1)"},
                        {sep,
                         [{text,
                           [132,116,114,97,110,115,108,97,116,101,32,105,110,
                            116,111,32,108,105,116,101,114,97,108,32,109,97,
                            116,99,104,32,115,112,101,99,105,102,105,99,97,
                            116,105,111,110,115,46,32,73,116,32,97,108,115,
                            111,32,112,114,111,118,105,100,101,115,32,116,104,
                            101,32,98,97,99,107,32,101,110,100,32,102,111,114,
                            32,116,104,101,32,115,97,109,101,32,102,117,110,
                            99,116,105,111,110,115,32,119,104,101,110,32,99,
                            97,108,108,101,100,32,102,114,111,109,32,116,104,
                            101,32,69,114,108,97,110,103,32,115,104,101,108,
                            108,46]}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           "`The translation from funs to match specifications is accessed through the two \"pseudo functions\""}],
                         0,false},
                        {text,
                         [30,91,101,116,115,35,102,117,110,50,109,115,47,49,
                          93,40,46,47,101,116,115,35,102,117,110,50,109,115,
                          47,49,41]},
                        {sep,[{text,[3,97,110,100]}],0,false},
                        {text,
                         ";[runtime_tools/dbg#fun2ms/1](../runtime_tools/dbg#fun2ms/1)"},
                        {sep,[{text,[1,46]}],0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           [25,65,115,32,101,118,101,114,121,111,110,101,32,
                            116,114,121,105,110,103,32,116,111,32,117,115,
                            101]}],
                         0,false},
                        {text,
                         [30,91,101,116,115,35,115,101,108,101,99,116,47,49,
                          93,40,46,47,101,116,115,35,115,101,108,101,99,116,
                          47,49,41]},
                        {sep,[{text,[2,111,114]}],0,false},
                        {text,
                         [26,91,114,117,110,116,105,109,101,95,116,111,111,
                          108,115,47,100,98,103,93,40,46,47,100,98,103,41]},
                        {sep,
                         [{text,
                           "useems to end up reading this manual page, this description is an introduction to the concept of match specifications."}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         "URead the whole manual page if it is the first time you are using the transformations."}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           [136,77,97,116,99,104,32,115,112,101,99,105,102,
                            105,99,97,116,105,111,110,115,32,97,114,101,32,
                            117,115,101,100,32,109,111,114,101,32,111,114,32,
                            108,101,115,115,32,97,115,32,102,105,108,116,101,
                            114,115,46,32,84,104,101,121,32,114,101,115,101,
                            109,98,108,101,32,117,115,117,97,108,32,69,114,
                            108,97,110,103,32,109,97,116,99,104,105,110,103,
                            32,105,110,32,97,32,108,105,115,116,32,99,111,109,
                            112,114,101,104,101,110,115,105,111,110,32,111,
                            114,32,105,110,32,97,32,102,117,110,32,117,115,
                            101,100,32,119,105,116,104]}],
                         0,false},
                        {text," [lists#foldl/3](./lists#foldl/3)"},
                        {sep,
                         [{text,
                           "Ã„, and so on. However, the syntax of pure match specifications is awkward, as they are made up purely by Erlang terms, and the language has no syntax to make the match specifications more readable."}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         [509,65,115,32,116,104,101,32,101,120,101,99,117,116,
                          105,111,110,32,97,110,100,32,115,116,114,117,99,116,
                          117,114,101,32,111,102,32,116,104,101,32,109,97,116,
                          99,104,32,115,112,101,99,105,102,105,99,97,116,105,
                          111,110,115,32,97,114,101,32,108,105,107,101,32,116,
                          104,97,116,32,111,102,32,97,32,102,117,110,44,32,
                          105,116,32,105,115,32,109,111,114,101,32,115,116,
                          114,97,105,103,104,116,102,111,114,119,97,114,100,
                          32,116,111,32,119,114,105,116,101,32,105,116,32,117,
                          115,105,110,103,32,116,104,101,32,102,97,109,105,
                          108,105,97,114,32,102,117,110,32,115,121,110,116,97,
                          120,32,97,110,100,32,116,111,32,104,97,118,101,32,
                          116,104,97,116,32,116,114,97,110,115,108,97,116,101,
                          100,32,105,110,116,111,32,97,32,109,97,116,99,104,
                          32,115,112,101,99,105,102,105,99,97,116,105,111,110,
                          32,97,117,116,111,109,97,116,105,99,97,108,108,121,
                          46,32,65,32,114,101,97,108,32,102,117,110,32,105,
                          115,32,99,108,101,97,114,108,121,32,109,111,114,101,
                          32,112,111,119,101,114,102,117,108,32,116,104,97,
                          110,32,116,104,101,32,109,97,116,99,104,32,115,112,
                          101,99,105,102,105,99,97,116,105,111,110,115,32,97,
                          108,108,111,119,44,32,98,117,116,32,98,101,97,114,
                          105,110,103,32,116,104,101,32,109,97,116,99,104,32,
                          115,112,101,99,105,102,105,99,97,116,105,111,110,
                          115,32,105,110,32,109,105,110,100,44,32,97,110,100,
                          32,119,104,97,116,32,116,104,101,121,32,99,97,110,
                          32,100,111,44,32,105,116,32,105,115,32,115,116,105,
                          108,108,32,109,111,114,101,32,99,111,110,118,101,
                          110,105,101,110,116,32,116,111,32,119,114,105,116,
                          101,32,105,116,32,97,108,108,32,97,115,32,97,32,102,
                          117,110,46,32,84,104,105,115,32,109,111,100,117,108,
                          101,32,99,111,110,116,97,105,110,115,32,116,104,101,
                          32,99,111,100,101,32,116,104,97,116,32,116,114,97,
                          110,115,108,97,116,101,115,32,116,104,101,32,102,
                          117,110,32,115,121,110,116,97,120,32,105,110,116,
                          111,32,109,97,116,99,104,32,115,112,101,99,105,102,
                          105,99,97,116,105,111,110,32,116,101,114,109,115,
                          46]}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true},
             null},
            null}}},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,{above,{text,"\f## Example 1"},null},null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,[5,85,115,105,110,103]}],0,false},
                  {text,
                   [30,91,101,116,115,35,115,101,108,101,99,116,47,50,93,40,
                    46,47,101,116,115,35,115,101,108,101,99,116,47,50,41]},
                  {sep,
                   [{text,
                     [157,97,110,100,32,97,32,109,97,116,99,104,32,115,112,
                      101,99,105,102,105,99,97,116,105,111,110,44,32,111,110,
                      101,32,99,97,110,32,102,105,108,116,101,114,32,111,117,
                      116,32,114,111,119,115,32,111,102,32,97,32,116,97,98,
                      108,101,32,97,110,100,32,99,111,110,115,116,114,117,99,
                      116,32,97,32,108,105,115,116,32,111,102,32,116,117,112,
                      108,101,115,32,99,111,110,116,97,105,110,105,110,103,32,
                      114,101,108,101,118,97,110,116,32,112,97,114,116,115,32,
                      111,102,32,116,104,101,32,100,97,116,97,32,105,110,32,
                      116,104,101,115,101,32,114,111,119,115,46,32,79,110,101,
                      32,99,97,110,32,117,115,101]}],
                   0,false},
                  {text,
                   [28,91,101,116,115,35,102,111,108,100,108,47,51,93,40,46,
                    47,101,116,115,35,102,111,108,100,108,47,51,41]},
                  {sep,
                   [{text,
                     [16,105,110,115,116,101,97,100,44,32,98,117,116,32,116,
                      104,101]}],
                   0,false},
                  {text,
                   [14,42,101,116,115,58,115,101,108,101,99,116,47,50,42]},
                  {sep,
                   [{text,
                     "?call is far more efficient. Without the translation provided by"}],
                   0,false},
                  {text,
                   [14,42,109,115,95,116,114,97,110,115,102,111,114,109,42]},
                  {sep,
                   [{text,
                     "P, one must struggle with writing match specifications terms to accommodate this."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"%Consider a simple table of employees:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   [285,10,45,114,101,99,111,114,100,40,101,109,112,44,32,123,
                    101,109,112,110,111,44,32,32,32,32,32,37,69,109,112,108,
                    111,121,101,101,32,110,117,109,98,101,114,32,97,115,32,97,
                    32,115,116,114,105,110,103,44,32,116,104,101,32,107,101,
                    121,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,117,
                    114,110,97,109,101,44,32,32,32,37,83,117,114,110,97,109,
                    101,32,111,102,32,116,104,101,32,101,109,112,108,111,121,
                    101,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,103,
                    105,118,101,110,110,97,109,101,44,32,37,71,105,118,101,
                    110,32,110,97,109,101,32,111,102,32,101,109,112,108,111,
                    121,101,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                    100,101,112,116,44,32,32,32,32,32,32,37,68,101,112,97,114,
                    116,109,101,110,116,44,32,111,110,101,32,111,102,32,123,
                    100,101,118,44,115,97,108,101,115,44,112,114,111,100,44,
                    97,100,109,125,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
                    32,101,109,112,121,101,97,114,125,41,46,32,37,89,101,97,
                    114,32,116,104,101,32,101,109,112,108,111,121,101,101,32,
                    119,97,115,32,101,109,112,108,111,121,101,100]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [26,87,101,32,99,114,101,97,116,101,32,116,104,101,32,116,
                    97,98,108,101,32,117,115,105,110,103,58]}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "A\nets:new(emp_tab, [{keypos,#emp.empno},named_table,ordered_set])."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,",We fill the table with randomly chosen data:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   [390,10,91,123,101,109,112,44,34,48,49,49,49,48,51,34,44,
                    34,66,108,97,99,107,34,44,34,65,108,102,114,101,100,34,44,
                    115,97,108,101,115,44,50,48,48,48,125,44,10,32,123,101,
                    109,112,44,34,48,52,49,50,51,49,34,44,34,68,111,101,34,44,
                    34,74,111,104,110,34,44,112,114,111,100,44,50,48,48,49,
                    125,44,10,32,123,101,109,112,44,34,48,53,50,51,52,49,34,
                    44,34,83,109,105,116,104,34,44,34,74,111,104,110,34,44,
                    100,101,118,44,49,57,57,55,125,44,10,32,123,101,109,112,
                    44,34,48,55,54,51,50,52,34,44,34,83,109,105,116,104,34,44,
                    34,69,108,108,97,34,44,115,97,108,101,115,44,49,57,57,53,
                    125,44,10,32,123,101,109,112,44,34,49,50,50,51,51,52,34,
                    44,34,87,101,115,116,111,110,34,44,34,65,110,110,97,34,44,
                    112,114,111,100,44,50,48,48,50,125,44,10,32,123,101,109,
                    112,44,34,53,51,53,50,49,54,34,44,34,67,104,97,108,107,
                    101,114,34,44,34,83,97,109,117,101,108,34,44,97,100,109,
                    44,49,57,57,56,125,44,10,32,123,101,109,112,44,34,55,56,
                    57,55,56,57,34,44,34,72,97,114,114,121,115,115,111,110,34,
                    44,34,74,111,101,34,44,97,100,109,44,49,57,57,54,125,44,
                    10,32,123,101,109,112,44,34,57,54,51,55,50,49,34,44,34,83,
                    99,111,116,116,34,44,34,74,117,108,105,97,110,97,34,44,
                    100,101,118,44,50,48,48,51,125,44,10,32,123,101,109,112,
                    44,34,57,56,57,56,57,49,34,44,34,66,114,111,119,110,34,44,
                    34,71,97,98,114,105,101,108,34,44,112,114,111,100,44,49,
                    57,57,57,125,93]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "gAssuming that we want the employee numbers of everyone in the sales department, there are several ways."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"\r*ets:match/2*"},
                  {sep,[{text,"\fcan be used:"}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,[4,10,49,62,32]},
                  {text,
                   "6ets:match(emp_tab, {'_', '$1', '_', '_', sales, '_'})."},
                  {text,
                   [24,10,91,91,34,48,49,49,49,48,51,34,93,44,91,34,48,55,54,
                    51,50,52,34,93,93]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"\r*ets:match/2*"},
                  {sep,
                   [{text,
                     [154,117,115,101,115,32,97,32,115,105,109,112,108,101,
                      114,32,116,121,112,101,32,111,102,32,109,97,116,99,104,
                      32,115,112,101,99,105,102,105,99,97,116,105,111,110,44,
                      32,98,117,116,32,105,116,32,105,115,32,115,116,105,108,
                      108,32,117,110,114,101,97,100,97,98,108,101,44,32,97,
                      110,100,32,111,110,101,32,104,97,115,32,108,105,116,116,
                      108,101,32,99,111,110,116,114,111,108,32,111,118,101,
                      114,32,116,104,101,32,114,101,116,117,114,110,101,100,
                      32,114,101,115,117,108,116,46,32,73,116,32,105,115,32,
                      97,108,119,97,121,115,32,97,32,108,105,115,116,32,111,
                      102,32,108,105,115,116,115,46]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [28,91,101,116,115,35,102,111,108,100,108,47,51,93,40,46,
                    47,101,116,115,35,102,111,108,100,108,47,51,41]},
                  {sep,[{text,[2,111,114]}],0,false},
                  {text,
                   [28,91,101,116,115,35,102,111,108,100,114,47,51,93,40,46,
                    47,101,116,115,35,102,111,108,100,114,47,51,41]},
                  {sep,
                   [{text,"&can be used to avoid the nested lists:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   [140,10,101,116,115,58,102,111,108,100,114,40,102,117,110,
                    40,35,101,109,112,123,101,109,112,110,111,32,61,32,69,44,
                    32,100,101,112,116,32,61,32,115,97,108,101,115,125,44,65,
                    99,99,41,32,45,62,32,91,69,32,124,32,65,99,99,93,59,10,32,
                    32,32,32,32,32,32,32,32,32,32,32,32,40,95,44,65,99,99,41,
                    32,45,62,32,65,99,99,10,32,32,32,32,32,32,32,32,32,32,101,
                    110,100,44,10,32,32,32,32,32,32,32,32,32,32,91,93,44,10,
                    32,32,32,32,32,32,32,32,32,32,101,109,112,95,116,97,98,41,
                    46]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\rThe result is"}],0,false},
                  {text,
                   [21,42,91,34,48,49,49,49,48,51,34,44,34,48,55,54,51,50,52,
                    34,93,42]},
                  {sep,
                   [{text,
                     "Ã‚. The fun is straightforward, so the only problem is that all the data from the table must be transferred from the table to the calling process for filtering. That is inefficient compared to the"}],
                   0,false},
                  {text,"\r*ets:match/2*"},
                  {sep,
                   [{text,
                     "mcall where the filtering can be done \"inside\" the emulator and only the result is transferred to the process."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [17,67,111,110,115,105,100,101,114,32,97,32,34,112,117,
                      114,101,34]}],
                   0,false},
                  {text,
                   [14,42,101,116,115,58,115,101,108,101,99,116,47,50,42]},
                  {sep,
                   [{text,
                     [19,99,97,108,108,32,116,104,97,116,32,100,111,101,115,
                      32,119,104,97,116]}],
                   0,false},
                  {text,"\v*ets:foldr*"},
                  {sep,[{text,[5,100,111,101,115,58]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "L\nets:select(emp_tab, [{#emp{empno = '$1', dept = sales, _='_'},[],['$1']}])."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "vAlthough the record syntax is used, it is still hard to read and even harder to write. The first element of the tuple,"}],
                   0,false},
                  {text,")*#emp{empno = '$1', dept = sales, _='_'}*"},
                  {sep,
                   [{text,
                     "M, tells what to match. Elements not matching this are not returned, as in the"}],
                   0,false},
                  {text,"\r*ets:match/2*"},
                  {sep,
                   [{text,
                     "Ã»example. The second element, the empty list, is a list of guard expressions, which we do not need. The third element is the list of expressions constructing the return value (in ETS this is almost always a list containing one single term). In our case"}],
                   0,false},
                  {text,[6,42,39,36,49,39,42]},
                  {sep,
                   [{text,
                     [130,105,115,32,98,111,117,110,100,32,116,111,32,116,104,
                      101,32,101,109,112,108,111,121,101,101,32,110,117,109,
                      98,101,114,32,105,110,32,116,104,101,32,104,101,97,100,
                      32,40,102,105,114,115,116,32,101,108,101,109,101,110,
                      116,32,111,102,32,116,104,101,32,116,117,112,108,101,41,
                      44,32,97,110,100,32,104,101,110,99,101,32,116,104,101,
                      32,101,109,112,108,111,121,101,101,32,110,117,109,98,
                      101,114,32,105,115,32,114,101,116,117,114,110,101,100,
                      46,32,84,104,101,32,114,101,115,117,108,116,32,105,
                      115]}],
                   0,false},
                  {text,
                   [21,42,91,34,48,49,49,49,48,51,34,44,34,48,55,54,51,50,52,
                    34,93,42]},
                  {sep,[{text,"\v, as in the"}],0,false},
                  {text,"\r*ets:foldr/3*"},
                  {sep,
                   [{text,
                     "nexample, but the result is retrieved much more efficiently in terms of execution speed and memory consumption."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,[5,85,115,105,110,103]}],0,false},
                  {text,
                   [14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
                  {sep,
                   [{text,"', we can combine the ease of use of the"}],
                   0,false},
                  {text,"\r*ets:foldr/3*"},
                  {sep,
                   [{text,
                     [30,97,110,100,32,116,104,101,32,101,102,102,105,99,105,
                      101,110,99,121,32,111,102,32,116,104,101,32,112,117,114,
                      101]}],
                   0,false},
                  {text,
                   [14,42,101,116,115,58,115,101,108,101,99,116,47,50,42]},
                  {sep,[{text,"\bexample:"}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "Ã‹\n-include_lib(\"stdlib/include/ms_transform.hrl\").\n\nets:select(emp_tab, ets:fun2ms(\n                      fun(#emp{empno = E, dept = sales}) ->\n                              E\n                      end))."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [343,84,104,105,115,32,101,120,97,109,112,108,101,32,114,
                      101,113,117,105,114,101,115,32,110,111,32,115,112,101,
                      99,105,97,108,32,107,110,111,119,108,101,100,103,101,32,
                      111,102,32,109,97,116,99,104,32,115,112,101,99,105,102,
                      105,99,97,116,105,111,110,115,32,116,111,32,117,110,100,
                      101,114,115,116,97,110,100,46,32,84,104,101,32,104,101,
                      97,100,32,111,102,32,116,104,101,32,102,117,110,32,109,
                      97,116,99,104,101,115,32,119,104,97,116,32,121,111,117,
                      32,119,97,110,116,32,116,111,32,102,105,108,116,101,114,
                      32,111,117,116,32,97,110,100,32,116,104,101,32,98,111,
                      100,121,32,114,101,116,117,114,110,115,32,119,104,97,
                      116,32,121,111,117,32,119,97,110,116,32,114,101,116,117,
                      114,110,101,100,46,32,65,115,32,108,111,110,103,32,97,
                      115,32,116,104,101,32,102,117,110,32,99,97,110,32,98,
                      101,32,107,101,112,116,32,119,105,116,104,105,110,32,
                      116,104,101,32,108,105,109,105,116,115,32,111,102,32,
                      116,104,101,32,109,97,116,99,104,32,115,112,101,99,105,
                      102,105,99,97,116,105,111,110,115,44,32,116,104,101,114,
                      101,32,105,115,32,110,111,32,110,101,101,100,32,116,111,
                      32,116,114,97,110,115,102,101,114,32,97,108,108,32,116,
                      97,98,108,101,32,100,97,116,97,32,116,111,32,116,104,
                      101,32,112,114,111,99,101,115,115,32,102,111,114,32,102,
                      105,108,116,101,114,105,110,103,32,97,115,32,105,110,32,
                      116,104,101]}],
                   0,false},
                  {text,"\r*ets:foldr/3*"},
                  {sep,
                   [{text,"&example. It is easier to read than the"}],
                   0,false},
                  {text,"\r*ets:foldr/3*"},
                  {sep,
                   [{text,
                     "aexample, as the select call in itself discards anything that does not match, while the fun of the"}],
                   0,false},
                  {text,"\r*ets:foldr/3*"},
                  {sep,
                   [{text,
                     "Jcall needs to handle both the elements matching and the ones not matching."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,[6,73,110,32,116,104,101]}],0,false},
                  {text,
                   [14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
                  {sep,
                   [{text,"&example above, it is needed to include"}],
                   0,false},
                  {text,
                   [18,42,109,115,95,116,114,97,110,115,102,111,114,109,46,
                    104,114,108,42]},
                  {sep,
                   [{text,
                     "Lin the source code, as this is what triggers the parse transformation of the"}],
                   0,false},
                  {text,
                   [14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
                  {sep,
                   [{text,
                     [313,99,97,108,108,32,116,111,32,97,32,118,97,108,105,
                      100,32,109,97,116,99,104,32,115,112,101,99,105,102,105,
                      99,97,116,105,111,110,46,32,84,104,105,115,32,97,108,
                      115,111,32,105,109,112,108,105,101,115,32,116,104,97,
                      116,32,116,104,101,32,116,114,97,110,115,102,111,114,
                      109,97,116,105,111,110,32,105,115,32,100,111,110,101,32,
                      97,116,32,99,111,109,112,105,108,101,32,116,105,109,101,
                      32,40,101,120,99,101,112,116,32,119,104,101,110,32,99,
                      97,108,108,101,100,32,102,114,111,109,32,116,104,101,32,
                      115,104,101,108,108,41,32,97,110,100,32,116,104,101,114,
                      101,102,111,114,101,32,116,97,107,101,115,32,110,111,32,
                      114,101,115,111,117,114,99,101,115,32,105,110,32,114,
                      117,110,116,105,109,101,46,32,84,104,97,116,32,105,115,
                      44,32,97,108,116,104,111,117,103,104,32,121,111,117,32,
                      117,115,101,32,116,104,101,32,109,111,114,101,32,105,
                      110,116,117,105,116,105,118,101,32,102,117,110,32,115,
                      121,110,116,97,120,44,32,105,116,32,103,101,116,115,32,
                      97,115,32,101,102,102,105,99,105,101,110,116,32,105,110,
                      32,114,117,110,116,105,109,101,32,97,115,32,119,114,105,
                      116,105,110,103,32,109,97,116,99,104,32,115,112,101,99,
                      105,102,105,99,97,116,105,111,110,115,32,98,121,32,104,
                      97,110,100,46]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,"\f## Example 2"},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "^Assume that we want to get all the employee numbers of employees hired before year 2000. Using"}],
                  0,false},
                 {text,"\r*ets:match/2*"},
                 {sep,
                  [{text,
                    "Zis not an alternative here, as relational operators cannot be expressed there. Once again,"}],
                  0,false},
                 {text,"\r*ets:foldr/3*"},
                 {sep,[{text," can do it (slowly, but correct):"}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "Â¢\nets:foldr(fun(#emp{empno = E, empyear = Y},Acc) when Y < 2000 -> [E | Acc];\n                  (_,Acc) -> Acc\n          end,\n          [],\n          emp_tab).    "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\rThe result is"}],0,false},
                 {text,
                  "0*[\"052341\",\"076324\",\"535216\",\"789789\",\"989891\"]*"},
                 {sep,
                  [{text,
                    "f, as expected. The equivalent expression using a handwritten match specification would look like this:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [143,10,101,116,115,58,115,101,108,101,99,116,40,101,109,
                   112,95,116,97,98,44,32,91,123,35,101,109,112,123,101,109,
                   112,110,111,32,61,32,39,36,49,39,44,32,101,109,112,121,101,
                   97,114,32,61,32,39,36,50,39,44,32,95,61,39,95,39,125,44,10,
                   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                   32,32,91,123,39,60,39,44,32,39,36,50,39,44,32,50,48,48,48,
                   125,93,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                   32,32,32,32,32,32,91,39,36,49,39,93,125,93,41,46,32,32,32,
                   32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\eThis gives the same result."}],0,false},
                 {text,
                  [21,42,91,123,39,60,39,44,32,39,36,50,39,44,32,50,48,48,48,
                   125,93,42]},
                 {sep,
                  [{text,
                    "Jis in the guard part and therefore discards anything that does not have an"}],
                  0,false},
                 {text,"\t*empyear*"},
                 {sep,[{text,"\t(bound to"}],0,false},
                 {text,[6,42,39,36,50,39,42]},
                 {sep,
                  [{text,"0in the head) less than 2000, as the guard in the"}],
                  0,false},
                 {text,"\t*foldr/3*"},
                 {sep,[{text,"\bexample."}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [17,87,101,32,119,114,105,116,101,32,105,116,32,117,115,
                     105,110,103]}],
                  0,false},
                 {text,[14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
                 {sep,[{text,[1,58]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "Ã™\n-include_lib(\"stdlib/include/ms_transform.hrl\").\n\nets:select(emp_tab, ets:fun2ms(\n                      fun(#emp{empno = E, empyear = Y}) when Y < 2000 ->\n                           E\n                      end)).    "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}}],
         0,false}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\f## Example 3"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "ÃžAssume that we want the whole object matching instead of only one element. One alternative is to assign a variable to every part of the record and build it up once again in the body of the fun, but the following is easier:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Ãˆ\nets:select(emp_tab, ets:fun2ms(\n                      fun(Obj = #emp{empno = E, empyear = Y}) \n                         when Y < 2000 ->\n                              Obj\n                      end))."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [128,65,115,32,105,110,32,111,114,100,105,110,97,114,121,
                    32,69,114,108,97,110,103,32,109,97,116,99,104,105,110,103,
                    44,32,121,111,117,32,99,97,110,32,98,105,110,100,32,97,32,
                    118,97,114,105,97,98,108,101,32,116,111,32,116,104,101,32,
                    119,104,111,108,101,32,109,97,116,99,104,101,100,32,111,
                    98,106,101,99,116,32,117,115,105,110,103,32,97,32,34,109,
                    97,116,99,104,32,105,110,115,105,100,101,32,116,104,101,
                    32,109,97,116,99,104,34,44,32,116,104,97,116,32,105,115,
                    44,32,97]}],
                 0,false},
                {text,[3,42,61,42]},
                {sep,
                 [{text,
                   "x. Unfortunately in funs translated to match specifications, it is allowed only at the \"top-level\", that is, matching the"}],
                 0,false},
                {text,"\t**whole**"},
                {sep,
                 [{text,
                   "ÃŠobject arriving to be matched into a separate variable. If you are used to writing match specifications by hand, we mention that variable A is simply translated into '$_'. Alternatively, pseudo function"}],
                 0,false},
                {text,"\n*object/0*"},
                {sep,
                 [{text,
                   "2also returns the whole matched object, see section"}],
                 0,false},
                {text,
                 "7[Warnings and Restrictions](#warnings_and_restrictions)"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,"\f## Example 4"},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "aThis example concerns the body of the fun. Assume that all employee numbers beginning with zero ("}],
                0,false},
               {text,[3,42,48,42]},
               {sep,[{text,"%) must be changed to begin with one ("}],0,false},
               {text,[3,42,49,42]},
               {sep,
                [{text,".) instead, and that we want to create the list"}],
                0,false},
               {text,
                [29,42,91,123,60,79,108,100,32,101,109,112,110,111,62,44,60,
                 78,101,119,32,101,109,112,110,111,62,125,93,42]},
               {sep,[{text,[1,58]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "Âª\nets:select(emp_tab, ets:fun2ms(\n                      fun(#emp{empno = [$0 | Rest] }) ->\n                              {[$0|Rest],[$1|Rest]}\n                      end))."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "AThis query hits the feature of partially bound keys in table type"}],
                0,false},
               {text,"\r*ordered_set*"},
               {sep,
                [{text,
                  "`, so that not the whole table needs to be searched, only the part containing keys beginning with"}],
                0,false},
               {text,[3,42,48,42]},
               {sep,
                [{text,
                  [15,105,115,32,108,111,111,107,101,100,32,105,110,116,111,
                   46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\f## Example 5"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "GThe fun can have many clauses. Assume that we want to do the following:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,
              [{text,"4If an employee started before 1997, return the tuple"}],
              0,false},
             {text," *{inventory, <employee number>}*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,
              [{text,
                "=If an employee started 1997 or later, but before 2001, return"}],
              0,false},
             {text,
              [29,42,123,114,111,111,107,105,101,44,32,60,101,109,112,108,111,
               121,101,101,32,110,117,109,98,101,114,62,125,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{text,
               [31,70,111,114,32,97,108,108,32,111,116,104,101,114,32,101,109,
                112,108,111,121,101,101,115,44,32,114,101,116,117,114,110]}],
             0,false},
            {text,
             [29,42,123,110,101,119,98,105,101,44,32,60,101,109,112,108,111,
              121,101,101,32,110,117,109,98,101,114,62,125,42]},
            {sep,
             [{text,
               [24,44,32,101,120,99,101,112,116,32,102,111,114,32,116,104,111,
                115,101,32,110,97,109,101,100]}],
             0,false},
            {text,[7,42,83,109,105,116,104,42]},
            {sep,
             [{text,
               "9as they would be affronted by anything other than the tag"}],
             0,false},
            {text,[6,42,103,117,114,117,42]},
            {sep,
             [{text,"4and that is also what is returned for their numbers:"}],
             0,false},
            {text,"\e*{guru, <employee number>}*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,[{text," This is accomplished as follows:"}],0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [524,10,101,116,115,58,115,101,108,101,99,116,40,101,109,112,
                95,116,97,98,44,32,101,116,115,58,102,117,110,50,109,115,40,
                10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,102,117,110,40,35,101,109,112,123,101,109,112,110,
                111,32,61,32,69,44,32,115,117,114,110,97,109,101,32,61,32,34,
                83,109,105,116,104,34,32,125,41,32,45,62,10,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,123,103,117,114,117,44,69,125,59,10,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,40,35,101,109,112,123,101,109,112,110,111,32,61,32,69,44,
                32,101,109,112,121,101,97,114,32,61,32,89,125,41,32,119,104,
                101,110,32,89,32,60,32,49,57,57,55,32,32,45,62,10,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,123,105,110,118,101,110,116,111,114,121,44,
                32,69,125,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,40,35,101,109,112,123,101,109,
                112,110,111,32,61,32,69,44,32,101,109,112,121,101,97,114,32,
                61,32,89,125,41,32,119,104,101,110,32,89,32,62,32,50,48,48,49,
                32,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,110,101,119,
                98,105,101,44,32,69,125,59,10,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,35,101,109,
                112,123,101,109,112,110,111,32,61,32,69,44,32,101,109,112,121,
                101,97,114,32,61,32,89,125,41,32,45,62,32,37,32,49,57,57,55,
                32,45,45,32,50,48,48,49,10,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,
                114,111,111,107,105,101,44,32,69,125,10,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,41,
                41,46,32,32,32,32]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [25,84,104,101,32,114,101,115,117,108,116,32,105,115,32,97,115,
                32,102,111,108,108,111,119,115,58]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Â³\n[{rookie,\"011103\"},\n {rookie,\"041231\"},\n {guru,\"052341\"},\n {guru,\"076324\"},\n {newbie,\"122334\"},\n {rookie,\"535216\"},\n {inventory,\"789789\"},\n {newbie,\"963721\"},\n {rookie,\"989891\"}]"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[14,35,35,32,85,115,101,102,117,108,32,66,73,70,115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "BWhat more can you do? A simple answer is: see the documentation of"}],
              0,false},
             {text,"$[match specifications](./match_spec)"},
             {sep,
              [{text,
                "Â¸in ERTS User's Guide. However, the following is a brief overview of the most useful \"built-in functions\" that you can use when the fun is to be translated into a match specification by"}],
              0,false},
             {text,
              [30,91,101,116,115,35,102,117,110,50,109,115,47,49,93,40,46,47,
               101,116,115,35,102,117,110,50,109,115,47,49,41]},
             {sep,
              [{text,
                "Â . It is not possible to call other functions than those allowed in match specifications. No \"usual\" Erlang code can be executed by the fun that is translated by"}],
              0,false},
             {text,[14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
             {sep,
              [{text,
                [146,46,32,84,104,101,32,102,117,110,32,105,115,32,108,105,
                 109,105,116,101,100,32,101,120,97,99,116,108,121,32,116,111,
                 32,116,104,101,32,112,111,119,101,114,32,111,102,32,116,104,
                 101,32,109,97,116,99,104,32,115,112,101,99,105,102,105,99,97,
                 116,105,111,110,115,44,32,119,104,105,99,104,32,105,115,32,
                 117,110,102,111,114,116,117,110,97,116,101,44,32,98,117,116,
                 32,116,104,101,32,112,114,105,99,101,32,111,110,101,32,109,
                 117,115,116,32,112,97,121,32,102,111,114,32,116,104,101,32,
                 101,120,101,99,117,116,105,111,110,32,115,112,101,101,100,32,
                 111,102]}],
              0,false},
             {text,[14,42,101,116,115,58,115,101,108,101,99,116,47,50,42]},
             {sep,[{text,"\vcompared to"}],0,false},
             {text,
              [17,42,101,116,115,58,102,111,108,100,108,47,102,111,108,100,
               114,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "7The head of the fun is a head matching (or mismatching)"}],
              0,false},
             {text,[7,42,42,111,110,101,42,42]},
             {sep,
              [{text,
                "aparameter, one object of the table we select from. The object is always a single variable (can be"}],
              0,false},
             {text,[3,42,95,42]},
             {sep,
              [{text,
                "_) or a tuple, as ETS, Dets, and Mnesia tables include that. The match specification returned by"}],
              0,false},
             {text,[14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
             {sep,
              [{text,
                [16,99,97,110,32,98,101,32,117,115,101,100,32,119,105,116,
                 104]}],
              0,false},
             {text,[15,42,100,101,116,115,58,115,101,108,101,99,116,47,50,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [17,42,109,110,101,115,105,97,58,115,101,108,101,99,116,47,50,
               42]},
             {sep,[{text,"\n, and with"}],0,false},
             {text,[14,42,101,116,115,58,115,101,108,101,99,116,47,50,42]},
             {sep,[{text,"\f. The use of"}],0,false},
             {text,[3,42,61,42]},
             {sep,
              [{text,
                "9in the head is allowed (and encouraged) at the top-level."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "nThe guard section can contain any guard expression of Erlang. The following is a list of BIFs and expressions:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{sep,[{text,"\vType tests:"}],0,false},
               {text,"\t*is_atom*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\n*is_float*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\f*is_integer*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\t*is_list*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\v*is_number*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\b*is_pid*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\t*is_port*"},
               {sep,[{text,[1,44]}],0,false},
               {text,[14,42,105,115,95,114,101,102,101,114,101,110,99,101,42]},
               {sep,[{text,[1,44]}],0,false},
               {text,"\n*is_tuple*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\v*is_binary*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\r*is_function*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\v*is_record*"}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{sep,
                [{text,
                  [18,66,111,111,108,101,97,110,32,111,112,101,114,97,116,111,
                   114,115,58]}],
                0,false},
               {text,[5,42,110,111,116,42]},
               {sep,[{text,[1,44]}],0,false},
               {text,[5,42,97,110,100,42]},
               {sep,[{text,[1,44]}],0,false},
               {text,[4,42,111,114,42]},
               {sep,[{text,[1,44]}],0,false},
               {text,"\t*andalso*"},
               {sep,[{text,[1,44]}],0,false},
               {text,"\b*orelse*"}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"4Relational operators: >, >=, <, =<, =:=, ==, =/=, /="}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,[{text,"\fArithmetics:"}],0,false},
             {text,[3,42,43,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[3,42,45,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[3,42,42,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[5,42,100,105,118,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[5,42,114,101,109,42]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{text,
               [18,66,105,116,119,105,115,101,32,111,112,101,114,97,116,111,
                114,115,58]}],
             0,false},
            {text,[6,42,98,97,110,100,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,[5,42,98,111,114,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,[6,42,98,120,111,114,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,[6,42,98,110,111,116,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,[5,42,98,115,108,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,[5,42,98,115,114,42]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,
            [{text,[15,84,104,101,32,103,117,97,114,100,32,66,73,70,115,58]}],
            0,false},
           {text,[5,42,97,98,115,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,"\t*element*"},
           {sep,[{text,[1,44]}],0,false},
           {text,[4,42,104,100,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,"\b*length*"},
           {sep,[{text,[1,44]}],0,false},
           {text,[6,42,110,111,100,101,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,[7,42,114,111,117,110,100,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,[6,42,115,105,122,101,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,[4,42,116,108,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,[7,42,116,114,117,110,99,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,[6,42,115,101,108,102,42]}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "AContrary to the fact with \"handwritten\" match specifications, the"}],
              0,false},
             {text,"\v*is_record*"},
             {sep,
              [{text,"'guard works as in ordinary Erlang code."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\fSemicolons ("}],0,false},
             {text,[3,42,59,42]},
             {sep,
              [{text,
                "Â¹) in guards are allowed, the result is (as expected) one \"match specification clause\" for each semicolon-separated part of the guard. The semantics is identical to the Erlang semantics."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [394,84,104,101,32,98,111,100,121,32,111,102,32,116,104,101,
                 32,102,117,110,32,105,115,32,117,115,101,100,32,116,111,32,
                 99,111,110,115,116,114,117,99,116,32,116,104,101,32,114,101,
                 115,117,108,116,105,110,103,32,118,97,108,117,101,46,32,87,
                 104,101,110,32,115,101,108,101,99,116,105,110,103,32,102,114,
                 111,109,32,116,97,98,108,101,115,44,32,111,110,101,32,117,
                 115,117,97,108,108,121,32,99,111,110,115,116,114,117,99,116,
                 32,97,32,115,117,105,116,105,110,103,32,116,101,114,109,32,
                 104,101,114,101,44,32,117,115,105,110,103,32,111,114,100,105,
                 110,97,114,121,32,69,114,108,97,110,103,32,116,101,114,109,
                 32,99,111,110,115,116,114,117,99,116,105,111,110,44,32,108,
                 105,107,101,32,116,117,112,108,101,32,112,97,114,101,110,116,
                 104,101,115,101,115,44,32,108,105,115,116,32,98,114,97,99,
                 107,101,116,115,44,32,97,110,100,32,118,97,114,105,97,98,108,
                 101,115,32,109,97,116,99,104,101,100,32,111,117,116,32,105,
                 110,32,116,104,101,32,104,101,97,100,44,32,112,111,115,115,
                 105,98,108,121,32,119,105,116,104,32,116,104,101,32,111,99,
                 99,97,115,105,111,110,97,108,32,99,111,110,115,116,97,110,
                 116,46,32,87,104,97,116,101,118,101,114,32,101,120,112,114,
                 101,115,115,105,111,110,115,32,97,114,101,32,97,108,108,111,
                 119,101,100,32,105,110,32,103,117,97,114,100,115,32,97,114,
                 101,32,97,108,115,111,32,97,108,108,111,119,101,100,32,104,
                 101,114,101,44,32,98,117,116,32,110,111,32,115,112,101,99,
                 105,97,108,32,102,117,110,99,116,105,111,110,115,32,101,120,
                 105,115,116,32,101,120,99,101,112,116]}],
              0,false},
             {text,"\b*object*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\n*bindings*"},
             {sep,
              [{text,
                "i(see further down), which returns the whole matched object and all known variable bindings, respectively."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,[5,42,100,98,103,42]},
             {sep,
              [{text,
                [135,118,97,114,105,97,110,116,115,32,111,102,32,109,97,116,
                 99,104,32,115,112,101,99,105,102,105,99,97,116,105,111,110,
                 115,32,104,97,118,101,32,97,110,32,105,109,112,101,114,97,
                 116,105,118,101,32,97,112,112,114,111,97,99,104,32,116,111,
                 32,116,104,101,32,109,97,116,99,104,32,115,112,101,99,105,
                 102,105,99,97,116,105,111,110,32,98,111,100,121,44,32,116,
                 104,101,32,69,84,83,32,100,105,97,108,101,99,116,32,104,97,
                 115,32,110,111,116,46,32,84,104,101,32,102,117,110,32,98,111,
                 100,121,32,102,111,114]}],
              0,false},
             {text,[14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
             {sep,
              [{text,
                "6returns the result without side effects. As matching ("}],
              0,false},
             {text,[3,42,61,42]},
             {sep,
              [{text,
                [139,41,32,105,110,32,116,104,101,32,98,111,100,121,32,111,
                 102,32,116,104,101,32,109,97,116,99,104,32,115,112,101,99,
                 105,102,105,99,97,116,105,111,110,115,32,105,115,32,110,111,
                 116,32,97,108,108,111,119,101,100,32,40,102,111,114,32,112,
                 101,114,102,111,114,109,97,110,99,101,32,114,101,97,115,111,
                 110,115,41,32,116,104,101,32,111,110,108,121,32,116,104,105,
                 110,103,32,108,101,102,116,44,32,109,111,114,101,32,111,114,
                 32,108,101,115,115,44,32,105,115,32,116,101,114,109,32,99,
                 111,110,115,116,114,117,99,116,105,111,110,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [19,35,35,32,69,120,97,109,112,108,101,32,119,105,116,104,32,100,98,
          103]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "PThis section describes the slightly different match specifications translated by"}],
             0,false},
            {text,
             ";[runtime_tools/dbg#fun2ms/1](../runtime_tools/dbg#fun2ms/1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "<The same reasons for using the parse transformation apply to"}],
             0,false},
            {text,[5,42,100,98,103,42]},
            {sep,
             [{text,
               [158,44,32,109,97,121,98,101,32,101,118,101,110,32,109,111,114,
                101,44,32,97,115,32,102,105,108,116,101,114,105,110,103,32,
                117,115,105,110,103,32,69,114,108,97,110,103,32,99,111,100,
                101,32,105,115,32,110,111,116,32,97,32,103,111,111,100,32,105,
                100,101,97,32,119,104,101,110,32,116,114,97,99,105,110,103,32,
                40,101,120,99,101,112,116,32,97,102,116,101,114,119,97,114,
                100,115,44,32,105,102,32,121,111,117,32,116,114,97,99,101,32,
                116,111,32,102,105,108,101,41,46,32,84,104,101,32,99,111,110,
                99,101,112,116,32,105,115,32,115,105,109,105,108,97,114,32,
                116,111,32,116,104,97,116,32,111,102]}],
             0,false},
            {text,[14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
            {sep,
             [{text,
               "Sexcept that you usually use it directly from the shell (which can also be done with"}],
             0,false},
            {text,[14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
            {sep,[{text,[2,41,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"/The following is an example module to trace on:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "Ã¾\n-module(toy).\n\n-export([start/1, store/2, retrieve/1]).\n\nstart(Args) ->\n    toy_table = ets:new(toy_table, Args).\n\nstore(Key, Value) ->\n    ets:insert(toy_table, {Key,Value}).\n\nretrieve(Key) ->\n    [{Key, Value}] = ets:lookup(toy_table, Key),\n    Value."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"/During model testing, the first test results in"}],
             0,false},
            {text,[15,42,123,98,97,100,109,97,116,99,104,44,49,54,125,42]},
            {sep,[{text,[2,105,110]}],0,false},
            {text,[15,42,123,116,111,121,44,115,116,97,114,116,44,49,125,42]},
            {sep,[{text,[6,44,32,119,104,121,63]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,[14,87,101,32,115,117,115,112,101,99,116,32,116,104,101]}],
             0,false},
            {text,"\v*ets:new/2*"},
            {sep,
             [{text,
               "Hcall, as we match hard on the return value, but want only the particular"}],
             0,false},
            {text,[7,42,110,101,119,47,50,42]},
            {sep,[{text,"\tcall with"}],0,false},
            {text,"\v*toy_table*"},
            {sep,
             [{text,
               "=as first parameter. So we start a default tracer on the node:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,"\rdbg:tracer()."},
            {text,[5,10,123,111,107,44]},
            {text,"\t<0.88.0>}"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÂªWe turn on call tracing for all processes, we want to make a pretty restrictive trace pattern, so there is no need to call trace only a few processes (usually it is not):"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,50,62,32]},
            {text,[16,100,98,103,58,112,40,97,108,108,44,99,97,108,108,41,46]},
            {text,"\"\n{ok,[{matched,nonode@nohost,25}]}"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               ":We specify the filter, we want to view calls that resemble"}],
             0,false},
            {text,"!*ets:new(toy_table, <something>)*"},
            {sep,[{text,[1,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,51,62,32]},
            {text,
             ";dbg:tp(ets,new,dbg:fun2ms(fun([toy_table,_]) -> true end))."},
            {text,"+\n{ok,[{matched,nonode@nohost,1},{saved,1}]}"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"!As can be seen, the fun used with"}],0,false},
            {text,[14,42,100,98,103,58,102,117,110,50,109,115,47,49,42]},
            {sep,
             [{text,
               [280,116,97,107,101,115,32,97,32,115,105,110,103,108,101,32,
                108,105,115,116,32,97,115,32,112,97,114,97,109,101,116,101,
                114,32,105,110,115,116,101,97,100,32,111,102,32,97,32,115,105,
                110,103,108,101,32,116,117,112,108,101,46,32,84,104,101,32,
                108,105,115,116,32,109,97,116,99,104,101,115,32,97,32,108,105,
                115,116,32,111,102,32,116,104,101,32,112,97,114,97,109,101,
                116,101,114,115,32,116,111,32,116,104,101,32,116,114,97,99,
                101,100,32,102,117,110,99,116,105,111,110,46,32,65,32,115,105,
                110,103,108,101,32,118,97,114,105,97,98,108,101,32,99,97,110,
                32,97,108,115,111,32,98,101,32,117,115,101,100,46,32,84,104,
                101,32,98,111,100,121,32,111,102,32,116,104,101,32,102,117,
                110,32,101,120,112,114,101,115,115,101,115,44,32,105,110,32,
                97,32,109,111,114,101,32,105,109,112,101,114,97,116,105,118,
                101,32,119,97,121,44,32,97,99,116,105,111,110,115,32,116,111,
                32,98,101,32,116,97,107,101,110,32,105,102,32,116,104,101,32,
                102,117,110,32,104,101,97,100,32,40,97,110,100,32,116,104,101,
                32,103,117,97,114,100,115,41,32,109,97,116,99,104,101,115,
                46]}],
             0,false},
            {text,[6,42,116,114,117,101,42]},
            {sep,
             [{text,
               "`is returned here, only because the body of a fun cannot be empty. The return value is discarded."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"3The following trace output is received during test:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,"6\n(<0.86.0>) call ets:new(toy_table, [ordered_set])    "}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "CAssume that we have not found the problem yet, and want to see what"}],
             0,false},
            {text,"\v*ets:new/2*"},
            {sep,
             [{text,"3returns. We use a slightly different trace pattern:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,52,62,32]},
            {text,
             "Edbg:tp(ets,new,dbg:fun2ms(fun([toy_table,_]) -> return_trace() end))."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"3The following trace output is received during test:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "^\n(<0.86.0>) call ets:new(toy_table,[ordered_set])\n(<0.86.0>) returned from ets:new/2 -> 24    "}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\vThe call to"}],0,false},
            {text,[14,42,114,101,116,117,114,110,95,116,114,97,99,101,42]},
            {sep,
             [{text,
               "Ã¶results in a trace message when the function returns. It applies only to the specific function call triggering the match specification (and matching the head/guards of the match specification). This is by far the most common call in the body of a"}],
             0,false},
            {text,[5,42,100,98,103,42]},
            {sep,
             [{text,
               [20,109,97,116,99,104,32,115,112,101,99,105,102,105,99,97,116,
                105,111,110,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [23,84,104,101,32,116,101,115,116,32,110,111,119,32,102,97,105,
                108,115,32,119,105,116,104]}],
             0,false},
            {text,[15,42,123,98,97,100,109,97,116,99,104,44,50,52,125,42]},
            {sep,
             [{text,
               [16,98,101,99,97,117,115,101,32,116,104,101,32,97,116,111,
                109]}],
             0,false},
            {text,"\v*toy_table*"},
            {sep,
             [{text,
               "Âªdoes not match the number returned for an unnamed table. So, the problem is found, the table is to be named, and the arguments supplied by the test program do not include"}],
             0,false},
            {text,"\r*named_table*"},
            {sep,[{text," . We rewrite the start function:"}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "G\nstart(Args) ->\n    toy_table = ets:new(toy_table, [named_table|Args])."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "HWith the same tracing turned on, the following trace output is received:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "q\n(<0.86.0>) call ets:new(toy_table,[named_table,ordered_set])\n(<0.86.0>) returned from ets:new/2 -> toy_table    "}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "mAssume that the module now passes all testing and goes into the system. After a while, it is found that table"}],
             0,false},
            {text,"\v*toy_table*"},
            {sep,
             [{text,
               [271,103,114,111,119,115,32,119,104,105,108,101,32,116,104,101,
                32,115,121,115,116,101,109,32,105,115,32,114,117,110,110,105,
                110,103,32,97,110,100,32,116,104,97,116,32,116,104,101,114,
                101,32,97,114,101,32,109,97,110,121,32,101,108,101,109,101,
                110,116,115,32,119,105,116,104,32,97,116,111,109,115,32,97,
                115,32,107,101,121,115,46,32,87,101,32,101,120,112,101,99,116,
                101,100,32,111,110,108,121,32,105,110,116,101,103,101,114,32,
                107,101,121,115,32,97,110,100,32,115,111,32,100,111,101,115,
                32,116,104,101,32,114,101,115,116,32,111,102,32,116,104,101,
                32,115,121,115,116,101,109,44,32,98,117,116,32,99,108,101,97,
                114,108,121,32,110,111,116,32,116,104,101,32,101,110,116,105,
                114,101,32,115,121,115,116,101,109,46,32,87,101,32,116,117,
                114,110,32,111,110,32,99,97,108,108,32,116,114,97,99,105,110,
                103,32,97,110,100,32,116,114,121,32,116,111,32,115,101,101,32,
                99,97,108,108,115,32,116,111,32,116,104,101,32,109,111,100,
                117,108,101,32,119,105,116,104,32,97,110,32,97,116,111,109,32,
                97,115,32,116,104,101,32,107,101,121,58]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,"\rdbg:tracer()."},
            {text,[5,10,123,111,107,44]},
            {text,"\r<0.88.0>}\n2> "},
            {text,[16,100,98,103,58,112,40,97,108,108,44,99,97,108,108,41,46]},
            {text,"&\n{ok,[{matched,nonode@nohost,25}]}\n3> "},
            {text,
             "Fdbg:tpl(toy,store,dbg:fun2ms(fun([A,_]) when is_atom(A) -> true end))."},
            {text,"+\n{ok,[{matched,nonode@nohost,1},{saved,1}]}"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[6,87,101,32,117,115,101]}],0,false},
            {text,"\v*dbg:tpl/3*"},
            {sep,
             [{text,
               "Ã‹to ensure to catch local calls (assume that the module has grown since the smaller version and we are unsure if this inserting of atoms is not done locally). When in doubt, always use local call tracing."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "Ã‰Assume that nothing happens when tracing in this way. The function is never called with these parameters. We conclude that someone else (some other module) is doing it and realize that we must trace on"}],
             0,false},
            {text,[14,42,101,116,115,58,105,110,115,101,114,116,47,50,42]},
            {sep,
             [{text,
               "rand want to see the calling function. The calling function can be retrieved using the match specification function"}],
             0,false},
            {text,"\b*caller*"},
            {sep,
             [{text,
               "D. To get it into the trace message, the match specification function"}],
             0,false},
            {text,"\t*message*"},
            {sep,
             [{text,
               "Cmust be used. The filter call looks like this (looking for calls to"}],
             0,false},
            {text,[14,42,101,116,115,58,105,110,115,101,114,116,47,50,42]},
            {sep,[{text,[2,41,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,52,62,32]},
            {text,
             "Hdbg:tpl(ets,insert,dbg:fun2ms(fun([toy_table,{A,_}]) when is_atom(A) -> "},
            {text,[1,10]},
            {text,"6                                    message(caller()) "},
            {text,[1,10]},
            {text,")                                  end)). "},
            {text,"+\n{ok,[{matched,nonode@nohost,1},{saved,2}]}"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [127,84,104,101,32,99,97,108,108,101,114,32,105,115,32,110,111,
              119,32,100,105,115,112,108,97,121,101,100,32,105,110,32,116,104,
              101,32,34,97,100,100,105,116,105,111,110,97,108,32,109,101,115,
              115,97,103,101,34,32,112,97,114,116,32,111,102,32,116,104,101,
              32,116,114,97,99,101,32,111,117,116,112,117,116,44,32,97,110,
              100,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,
              105,115,32,100,105,115,112,108,97,121,101,100,32,97,102,116,101,
              114,32,97,32,119,104,105,108,101,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "P\n(<0.86.0>) call ets:insert(toy_table,{garbage,can}) ({evil_mod,evil_fun,2})    "}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [31,89,111,117,32,104,97,118,101,32,114,101,97,108,105,122,101,
                100,32,116,104,97,116,32,102,117,110,99,116,105,111,110]}],
             0,false},
            {text,"\n*evil_fun*"},
            {sep,[{text,[6,111,102,32,116,104,101]}],0,false},
            {text,"\n*evil_mod*"},
            {sep,
             [{text,
               [18,109,111,100,117,108,101,44,32,119,105,116,104,32,97,114,
                105,116,121]}],
             0,false},
            {text,[3,42,50,42]},
            {sep,
             [{text,
               [30,44,32,105,115,32,99,97,117,115,105,110,103,32,97,108,108,
                32,116,104,105,115,32,116,114,111,117,98,108,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "HThis example illustrates the most used calls in match specifications for"}],
             0,false},
            {text,[5,42,100,98,103,42]},
            {sep,
             [{text,
               "=. The other, more esoteric, calls are listed and explained in"}],
             0,false},
            {text,".[Match specifications in Erlang](./match_spec)"},
            {sep,
             [{text,
               "Gin ERTS User's Guide, as they are beyond the scope of this description."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [28,35,35,32,87,97,114,110,105,110,103,115,32,97,110,100,32,82,101,
         115,116,114,105,99,116,105,111,110,115]},
       null},
      null}},
    {text,
     "A<a name=\"warnings_and_restrictions\">warnings_and_restrictions</a>"},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "FThe following warnings and restrictions apply to the funs used in with"}],
            0,false},
           {text,[14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,[14,42,100,98,103,58,102,117,110,50,109,115,47,49,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,
          [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,114,110,105,
           110,103,34]},
         {sep,
          [{text,[4,32,32,32,32]},
           {sep,
            [{sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "YTo use the pseudo functions triggering the translation, ensure to include the header file"}],
                       0,false},
                      {text,
                       [18,42,109,115,95,116,114,97,110,115,102,111,114,109,
                        46,104,114,108,42]},
                      {sep,
                       [{text,
                         "Â¯in the source code. Failure to do so possibly results in runtime errors rather than compile time, as the expression can be valid as a plain Erlang program without translation."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,true}],
          0,false}},
        {text,[0]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,
          [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,114,110,105,
           110,103,34]},
         {sep,
          [{text,[4,32,32,32,32]},
           {sep,
            [{sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [151,84,104,101,32,102,117,110,32,109,117,115,116,32,
                          98,101,32,108,105,116,101,114,97,108,108,121,32,99,
                          111,110,115,116,114,117,99,116,101,100,32,105,110,
                          115,105,100,101,32,116,104,101,32,112,97,114,97,109,
                          101,116,101,114,32,108,105,115,116,32,116,111,32,
                          116,104,101,32,112,115,101,117,100,111,32,102,117,
                          110,99,116,105,111,110,115,46,32,84,104,101,32,102,
                          117,110,32,99,97,110,110,111,116,32,98,101,32,98,
                          111,117,110,100,32,116,111,32,97,32,118,97,114,105,
                          97,98,108,101,32,102,105,114,115,116,32,97,110,100,
                          32,116,104,101,110,32,112,97,115,115,101,100,32,116,
                          111]}],
                       0,false},
                      {text,
                       [14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
                      {sep,[{text,[2,111,114]}],0,false},
                      {text,
                       [14,42,100,98,103,58,102,117,110,50,109,115,47,49,42]},
                      {sep,
                       [{text,
                         [14,46,32,70,111,114,32,101,120,97,109,112,108,101,
                          44]}],
                       0,false},
                      {text,
                       [29,42,101,116,115,58,102,117,110,50,109,115,40,102,
                        117,110,40,65,41,32,45,62,32,65,32,101,110,100,41,42]},
                      {sep,
                       [{text,
                         [14,119,111,114,107,115,44,32,98,117,116,32,110,111,
                          116]}],
                       0,false},
                      {text,"$*F = fun(A) -> A end, ets:fun2ms(F)*"},
                      {sep,
                       [{text,
                         "b. The latter results in a compile-time error if the header is included, otherwise a runtime error."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,true}],
          0,false}},
        {text,[0]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [263,77,97,110,121,32,114,101,115,116,114,105,99,116,105,111,110,
             115,32,97,112,112,108,121,32,116,111,32,116,104,101,32,102,117,
             110,32,116,104,97,116,32,105,115,32,116,114,97,110,115,108,97,
             116,101,100,32,105,110,116,111,32,97,32,109,97,116,99,104,32,115,
             112,101,99,105,102,105,99,97,116,105,111,110,46,32,84,111,32,112,
             117,116,32,105,116,32,115,105,109,112,108,101,58,32,121,111,117,
             32,99,97,110,110,111,116,32,117,115,101,32,97,110,121,116,104,
             105,110,103,32,105,110,32,116,104,101,32,102,117,110,32,116,104,
             97,116,32,121,111,117,32,99,97,110,110,111,116,32,117,115,101,32,
             105,110,32,97,32,109,97,116,99,104,32,115,112,101,99,105,102,105,
             99,97,116,105,111,110,46,32,84,104,105,115,32,109,101,97,110,115,
             32,116,104,97,116,44,32,97,109,111,110,103,32,111,116,104,101,
             114,115,44,32,116,104,101,32,102,111,108,108,111,119,105,110,103,
             32,114,101,115,116,114,105,99,116,105,111,110,115,32,97,112,112,
             108,121,32,116,111,32,116,104,101,32,102,117,110,32,105,116,115,
             101,108,102,58]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "jFunctions written in Erlang cannot be called, neither can local functions, global functions, or real funs."}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    [132,69,118,101,114,121,116,104,105,110,103,32,116,104,97,
                     116,32,105,115,32,119,114,105,116,116,101,110,32,97,115,
                     32,97,32,102,117,110,99,116,105,111,110,32,99,97,108,108,
                     32,105,115,32,116,114,97,110,115,108,97,116,101,100,32,
                     105,110,116,111,32,97,32,109,97,116,99,104,32,115,112,
                     101,99,105,102,105,99,97,116,105,111,110,32,99,97,108,
                     108,32,116,111,32,97,32,98,117,105,108,116,45,105,110,32,
                     102,117,110,99,116,105,111,110,44,32,115,111,32,116,104,
                     97,116,32,116,104,101,32,99,97,108,108]}],
                  0,false},
                 {text,"\f*is_list(X)*"},
                 {sep,
                  [{text,
                    [16,105,115,32,116,114,97,110,115,108,97,116,101,100,32,
                     116,111]}],
                  0,false},
                 {text,
                  [19,42,123,39,105,115,95,108,105,115,116,39,44,32,39,36,49,
                   39,125,42]},
                 {sep,[{text,[1,40]}],0,false},
                 {text,[6,42,39,36,49,39,42]},
                 {sep,
                  [{text,
                    [140,105,115,32,111,110,108,121,32,97,110,32,101,120,97,
                     109,112,108,101,44,32,116,104,101,32,110,117,109,98,101,
                     114,105,110,103,32,99,97,110,32,118,97,114,121,41,46,32,
                     73,102,32,111,110,101,32,116,114,105,101,115,32,116,111,
                     32,99,97,108,108,32,97,32,102,117,110,99,116,105,111,110,
                     32,116,104,97,116,32,105,115,32,110,111,116,32,97,32,109,
                     97,116,99,104,32,115,112,101,99,105,102,105,99,97,116,
                     105,111,110,32,98,117,105,108,116,45,105,110,44,32,105,
                     116,32,99,97,117,115,101,115,32,97,110,32,101,114,114,
                     111,114,46]}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [133,86,97,114,105,97,98,108,101,115,32,111,99,99,117,114,
                    114,105,110,103,32,105,110,32,116,104,101,32,104,101,97,
                    100,32,111,102,32,116,104,101,32,102,117,110,32,97,114,
                    101,32,114,101,112,108,97,99,101,100,32,98,121,32,109,97,
                    116,99,104,32,115,112,101,99,105,102,105,99,97,116,105,
                    111,110,32,118,97,114,105,97,98,108,101,115,32,105,110,32,
                    116,104,101,32,111,114,100,101,114,32,111,102,32,111,99,
                    99,117,114,114,101,110,99,101,44,32,115,111,32,116,104,97,
                    116,32,102,114,97,103,109,101,110,116]}],
                 0,false},
                {text,[14,42,102,117,110,40,123,65,44,66,44,67,125,41,42]},
                {sep,
                 [{text,
                   [14,105,115,32,114,101,112,108,97,99,101,100,32,98,121]}],
                 0,false},
                {text,
                 [20,42,123,39,36,49,39,44,32,39,36,50,39,44,32,39,36,51,39,
                  125,42]},
                {sep,
                 [{text,
                   [154,44,32,97,110,100,32,115,111,32,111,110,46,32,69,118,
                    101,114,121,32,111,99,99,117,114,114,101,110,99,101,32,
                    111,102,32,115,117,99,104,32,97,32,118,97,114,105,97,98,
                    108,101,32,105,110,32,116,104,101,32,109,97,116,99,104,32,
                    115,112,101,99,105,102,105,99,97,116,105,111,110,32,105,
                    115,32,114,101,112,108,97,99,101,100,32,98,121,32,97,32,
                    109,97,116,99,104,32,115,112,101,99,105,102,105,99,97,116,
                    105,111,110,32,118,97,114,105,97,98,108,101,32,105,110,32,
                    116,104,101,32,115,97,109,101,32,119,97,121,44,32,115,111,
                    32,116,104,97,116,32,116,104,101,32,102,117,110]}],
                 0,false},
                {text,"%*fun({A,B}) when is_atom(A) -> B end*"},
                {sep,
                 [{text,
                   [18,105,115,32,116,114,97,110,115,108,97,116,101,100,32,
                    105,110,116,111]}],
                 0,false},
                {text,")*[{{'$1','$2'},[{is_atom,'$1'}],['$2']}]*"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "oVariables that are not included in the head are imported from the environment and made into match specification"}],
                       0,false},
                      {text,[7,42,99,111,110,115,116,42]},
                      {sep,
                       [{text,"$expressions. Example from the shell:"}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,[4,10,49,62,32]},
                      {text,[7,88,32,61,32,50,53,46]},
                      {text,[7,10,50,53,10,50,62,32]},
                      {text,"+ets:fun2ms(fun({A,B}) when A > X -> B end)."},
                      {text,
                       "/\n[{{'$1','$2'},[{'>','$1',{const,25}}],['$2']}]"}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,[{text,"\rMatching with"}],0,false},
                     {text,[3,42,61,42]},
                     {sep,
                      [{text,
                        "vcannot be used in the body. It can only be used on the top-level in the head of the fun. Example from the shell again:"}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,[4,10,49,62,32]},
                     {text,
                      "3ets:fun2ms(fun({A,[B|C]} = D) when A > B -> D end)."},
                     {text,
                      "4\n[{{'$1',['$2'|'$3']},[{'>','$1','$2'}],['$_']}]\n2> "},
                     {text,
                      "1ets:fun2ms(fun({A,[B|C]=D}) when A > B -> D end)."},
                     {text,
                      "o\nError: fun with head matching ('=' in head) cannot be translated into \nmatch_spec \n{error,transform_error}\n3> "},
                     {text,
                      ":ets:fun2ms(fun({A,[B|C]}) when A > B -> D = [B|C], D end)."},
                     {text,
                      "]\nError: fun with body matching ('=' in body) is illegal as match_spec\n{error,transform_error}"}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        "Ã‚All variables are bound in the head of a match specification, so the translator cannot allow multiple bindings. The special case when matching is done on the top-level makes the variable bind to"}],
                      0,false},
                     {text,[6,42,39,36,95,39,42]},
                     {sep,
                      [{text,
                        "win the resulting match specification. It is to allow a more natural access to the whole matched object. Pseudo function"}],
                      0,false},
                     {text,"\n*object()*"},
                     {sep,
                      [{text,
                        [31,99,97,110,32,98,101,32,117,115,101,100,32,105,110,
                         115,116,101,97,100,44,32,115,101,101,32,98,101,108,
                         111,119,46]}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "1The following expressions are translated equally:"}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      "M\nets:fun2ms(fun({a,_} = A) -> A end).\nets:fun2ms(fun({a,_}) -> object() end)."}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,")The special match specification variables"}],
                     0,false},
                    {text,[6,42,39,36,95,39,42]},
                    {sep,[{text,[3,97,110,100]}],0,false},
                    {text,[6,42,39,36,42,39,42]},
                    {sep,
                     [{text,",can be accessed through the pseudo functions"}],
                     0,false},
                    {text,"\n*object()*"},
                    {sep,[{text,[4,40,102,111,114]}],0,false},
                    {text,[6,42,39,36,95,39,42]},
                    {sep,[{text,[5,41,32,97,110,100]}],0,false},
                    {text,"\f*bindings()*"},
                    {sep,[{text,[4,40,102,111,114]}],0,false},
                    {text,[6,42,39,36,42,39,42]},
                    {sep,
                     [{text,
                       "1). As an example, one can translate the following"}],
                     0,false},
                    {text,
                     [20,42,101,116,115,58,109,97,116,99,104,95,111,98,106,
                      101,99,116,47,50,42]},
                    {sep,[{text,"\tcall to a"}],0,false},
                    {text,
                     [14,42,101,116,115,58,115,101,108,101,99,116,47,50,42]},
                    {sep,[{text,[5,99,97,108,108,58]}],0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,",\nets:match_object(Table, {'$1',test,'$2'}). "}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     [20,84,104,105,115,32,105,115,32,116,104,101,32,115,97,
                      109,101,32,97,115,58]}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     "@\nets:select(Table, ets:fun2ms(fun({A,test,B}) -> object() end))."}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "ZIn this simple case, the former expression is probably preferable in terms of readability."}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,[{text,[3,84,104,101]}],0,false},
                    {text,
                     [14,42,101,116,115,58,115,101,108,101,99,116,47,50,42]},
                    {sep,
                     [{text,
                       "8call conceptually looks like this in the resulting code:"}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     "3\nets:select(Table, [{{'$1',test,'$2'},[],['$_']}])."}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       "MMatching on the top-level of the fun head can be a more natural way to access"}],
                     0,false},
                    {text,[6,42,39,36,95,39,42]},
                    {sep,[{text,"\f, see above."}],0,false}],
                   0,false}],
                 0,true},
                null},
               null}}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{text,
               [405,84,101,114,109,32,99,111,110,115,116,114,117,99,116,105,
                111,110,115,47,108,105,116,101,114,97,108,115,32,97,114,101,
                32,116,114,97,110,115,108,97,116,101,100,32,97,115,32,109,117,
                99,104,32,97,115,32,105,115,32,110,101,101,100,101,100,32,116,
                111,32,103,101,116,32,116,104,101,109,32,105,110,116,111,32,
                118,97,108,105,100,32,109,97,116,99,104,32,115,112,101,99,105,
                102,105,99,97,116,105,111,110,46,32,84,104,105,115,32,119,97,
                121,32,116,117,112,108,101,115,32,97,114,101,32,109,97,100,
                101,32,105,110,116,111,32,109,97,116,99,104,32,115,112,101,99,
                105,102,105,99,97,116,105,111,110,32,116,117,112,108,101,32,
                99,111,110,115,116,114,117,99,116,105,111,110,115,32,40,97,32,
                111,110,101,32,101,108,101,109,101,110,116,32,116,117,112,108,
                101,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,
                32,116,117,112,108,101,41,32,97,110,100,32,99,111,110,115,116,
                97,110,116,32,101,120,112,114,101,115,115,105,111,110,115,32,
                97,114,101,32,117,115,101,100,32,119,104,101,110,32,105,109,
                112,111,114,116,105,110,103,32,118,97,114,105,97,98,108,101,
                115,32,102,114,111,109,32,116,104,101,32,101,110,118,105,114,
                111,110,109,101,110,116,46,32,82,101,99,111,114,100,115,32,97,
                114,101,32,97,108,115,111,32,116,114,97,110,115,108,97,116,
                101,100,32,105,110,116,111,32,112,108,97,105,110,32,116,117,
                112,108,101,32,99,111,110,115,116,114,117,99,116,105,111,110,
                115,44,32,99,97,108,108,115,32,116,111,32,101,108,101,109,101,
                110,116,44,32,97,110,100,32,115,111,32,111,110,46,32,84,104,
                101,32,103,117,97,114,100,32,116,101,115,116]}],
             0,false},
            {text,"\r*is_record/2*"},
            {sep,
             [{text,
               "}is translated into match specification code using the three parameter version that is built into match specification, so that"}],
             0,false},
            {text,
             [16,42,105,115,95,114,101,99,111,114,100,40,65,44,116,41,42]},
            {sep,
             [{text,
               [18,105,115,32,116,114,97,110,115,108,97,116,101,100,32,105,
                110,116,111]}],
             0,false},
            {text,
             [22,42,123,105,115,95,114,101,99,111,114,100,44,39,36,49,39,44,
              116,44,53,125,42]},
            {sep,[{text,"!if the record size of record type"}],0,false},
            {text,[3,42,116,42]},
            {sep,[{text,[5,105,115,32,53,46]}],0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,
            [{text,
              [30,76,97,110,103,117,97,103,101,32,99,111,110,115,116,114,117,
               99,116,105,111,110,115,32,115,117,99,104,32,97,115]}],
            0,false},
           {text,[6,42,99,97,115,101,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,[4,42,105,102,42]},
           {sep,[{text,[5,44,32,97,110,100]}],0,false},
           {text,[7,42,99,97,116,99,104,42]},
           {sep,
            [{text,
              "=that are not present in match specifications are not allowed."}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [14,73,102,32,104,101,97,100,101,114,32,102,105,108,101]}],
                  0,false},
                 {text,
                  [18,42,109,115,95,116,114,97,110,115,102,111,114,109,46,104,
                   114,108,42]},
                 {sep,
                  [{text,
                    "Ais not included, the fun is not translated, which can result in a"}],
                  0,false},
                 {text,
                  [17,42,42,114,117,110,116,105,109,101,32,101,114,114,111,
                   114,42,42]},
                 {sep,
                  [{text,
                    "A(depending on whether the fun is valid in a pure Erlang context)."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,"-Ensure that the header is included when using"}],
                  0,false},
                 {text,[5,42,101,116,115,42]},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,[14,42,100,98,103,58,102,117,110,50,109,115,47,49,42]},
                 {sep,
                  [{text,
                    [17,105,110,32,99,111,109,112,105,108,101,100,32,99,111,
                     100,101,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{sep,
          [{text,"0If pseudo function triggering the translation is"}],
          0,false},
         {text,[14,42,101,116,115,58,102,117,110,50,109,115,47,49,42]},
         {sep,
          [{text,
            "a, the head of the fun must contain a single variable or a single tuple. If the pseudo function is"}],
          0,false},
         {text,[14,42,100,98,103,58,102,117,110,50,109,115,47,49,42]},
         {sep,
          [{text,
            "F, the head of the fun must contain a single variable or a single list."}],
          0,false}],
        0,false}],
      0,false}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [146,84,104,101,32,116,114,97,110,115,108,97,116,105,111,110,32,
             102,114,111,109,32,102,117,110,115,32,116,111,32,109,97,116,99,
             104,32,115,112,101,99,105,102,105,99,97,116,105,111,110,115,32,
             105,115,32,100,111,110,101,32,97,116,32,99,111,109,112,105,108,
             101,32,116,105,109,101,44,32,115,111,32,114,117,110,116,105,109,
             101,32,112,101,114,102,111,114,109,97,110,99,101,32,105,115,32,
             110,111,116,32,97,102,102,101,99,116,101,100,32,98,121,32,117,
             115,105,110,103,32,116,104,101,115,101,32,112,115,101,117,100,
             111,32,102,117,110,99,116,105,111,110,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "8For more information about match specifications, see the"}],
            0,false},
           {text,".[Match specifications in Erlang](./match_spec)"},
           {sep,
            [{text,
              [21,105,110,32,69,82,84,83,32,85,115,101,114,39,115,32,71,117,
               105,100,101,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[17,35,35,32,102,111,114,109,97,116,95,101,114,114,111,114,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "LError formatting function as required by the parse transformation interface."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "xTakes an error code returned by one of the other functions in the module and creates a textual description of the error."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,112,97,114,115,101,95,116,114,97,110,115,102,111,114,109,
        47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "iTransforms Erlang abstract format containing calls to ets/dbg:fun2ms/1 into literal match specifications."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {text,[4,60,100,108,62]},
     {nest,4,
      {above,
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,116,62]},
            {sep,[{text,[7,79,112,116,105,111,110,115]}],0,false},
            {text,[5,60,47,100,116,62]}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,100,62]},
            {text,"#Option list, required but not used."},
            {text,[5,60,47,100,100,62]}],
           0,true},
          null},
         null}}}}},
    {text,[5,60,47,100,108,62]}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [147,73,109,112,108,101,109,101,110,116,115,32,116,104,101,32,
                116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,97,
                116,32,99,111,109,112,105,108,101,32,116,105,109,101,46,32,84,
                104,105,115,32,102,117,110,99,116,105,111,110,32,105,115,32,
                99,97,108,108,101,100,32,98,121,32,116,104,101,32,99,111,109,
                112,105,108,101,114,32,116,111,32,100,111,32,116,104,101,32,
                115,111,117,114,99,101,32,99,111,100,101,32,116,114,97,110,
                115,102,111,114,109,97,116,105,111,110,32,105,102,32,97,110,
                100,32,119,104,101,110,32,104,101,97,100,101,114,32,102,105,
                108,101]}],
             0,false},
            {text,
             [18,42,109,115,95,116,114,97,110,115,102,111,114,109,46,104,114,
              108,42]},
            {sep,
             [{text,
               [31,105,115,32,105,110,99,108,117,100,101,100,32,105,110,32,
                116,104,101,32,115,111,117,114,99,101,32,99,111,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "?For information about how to use this parse transformation, see"}],
             0,false},
            {text,"\n[ets](ets)"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,
             ";[runtime_tools/dbg#fun2ms/1](../runtime_tools/dbg#fun2ms/1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "6For a description of match specifications, see section"}],
             0,false},
            {text,"-[Match Specification in Erlang](./match_spec)"},
            {sep,
             [{text,
               [21,105,110,32,69,82,84,83,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [25,35,35,32,116,114,97,110,115,102,111,114,109,95,102,114,111,109,95,
        115,104,101,108,108,47,51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "KUsed when transforming funs created in the shell into match_specifications."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {text,[4,60,100,108,62]},
     {nest,4,
      {above,
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,116,62]},
            {sep,
             [{text,
               [16,66,111,117,110,100,69,110,118,105,114,111,110,109,101,110,
                116]}],
             0,false},
            {text,[5,60,47,100,116,62]}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{text,[4,60,100,100,62]},
            {text,"3List of variable bindings in the shell environment."},
            {text,[5,60,47,100,100,62]}],
           0,true},
          null},
         null}}}}},
    {text,[5,60,47,100,108,62]}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"&Implements the transformation when the"}],0,false},
            {text,"\n*fun2ms/1*"},
            {sep,
             [{text,
               "Â¹functions are called from the shell. In this case, the abstract form is for one single fun (parsed by the Erlang shell). All imported variables are to be in the key-value list passed as"}],
             0,false},
            {text,
             [18,42,66,111,117,110,100,69,110,118,105,114,111,110,109,101,110,
              116,42]},
            {sep,
             [{text,
               "D. The result is a term, normalized, that is, not in abstract format."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
