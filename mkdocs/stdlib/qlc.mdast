{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,{above,{text,[0]},null},null},
               {above,{above,{text,[5,35,32,113,108,99]},null},null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,{above,{text,[5,35,32,113,108,99]},null},null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "0Query interface to Mnesia, ETS, Dets, and so on."}],
                   0,false}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,
                           [{text,
                             ")This module provides a query interface to"}],
                           0,false},
                          {text,
                           [18,91,77,110,101,115,105,97,93,40,46,47,109,110,
                            101,115,105,97,41]},
                          {sep,[{text,[1,44]}],0,false},
                          {text,"\n[ETS](ets)"},
                          {sep,[{text,[1,44]}],0,false},
                          {text,"\f[Dets](dets)"},
                          {sep,
                           [{text,
                             "P, and other data structures that provide an iterator style traversal of objects."}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}}],
                  0,false}],
                0,true},
               null},
              null}}},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,{above,{text,"\v## Overview"},null},null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,")This module provides a query interface to"}],
                     0,false},
                    {text,[14,42,42,81,76,67,32,116,97,98,108,101,115,42,42]},
                    {sep,
                     [{text,
                       "t. Typical QLC tables are Mnesia, ETS, and Dets tables. Support is also provided for user-defined tables, see section"}],
                     0,false},
                    {text,
                     "5[Implementing a QLC Table](#implementing_a_qlc_table)"},
                    {sep,[{text,[1,46]}],0,false},
                    {text,
                     "?<a name=\"query_list_comprehension\">query_list_comprehension</a>"},
                    {sep,[{text,[1,65]}],0,false},
                    {text,"\t**query**"},
                    {sep,
                     [{text,
                       [18,105,115,32,101,120,112,114,101,115,115,101,100,32,
                        117,115,105,110,103]}],
                     0,false},
                    {text,
                     [29,42,42,81,117,101,114,121,32,76,105,115,116,32,67,111,
                      109,112,114,101,104,101,110,115,105,111,110,115,42,42]},
                    {sep,
                     [{text,
                       "Å(QLCs). The answers to a query are determined by data in QLC tables that fulfill the constraints expressed by the QLCs of the query. QLCs are similar to ordinary list comprehensions as described in"}],
                     0,false},
                    {text,
                     "B[Erlang Reference Manual](../doc/reference_manual/expressions#lcs)"},
                    {sep,[{text,[3,97,110,100]}],0,false},
                    {text,"-[Programming Examples](./list_comprehensions)"},
                    {sep,
                     [{text,
                       [134,44,32,101,120,99,101,112,116,32,116,104,97,116,32,
                        118,97,114,105,97,98,108,101,115,32,105,110,116,114,
                        111,100,117,99,101,100,32,105,110,32,112,97,116,116,
                        101,114,110,115,32,99,97,110,110,111,116,32,98,101,32,
                        117,115,101,100,32,105,110,32,108,105,115,116,32,101,
                        120,112,114,101,115,115,105,111,110,115,46,32,73,110,
                        32,116,104,101,32,97,98,115,101,110,99,101,32,111,102,
                        32,111,112,116,105,109,105,122,97,116,105,111,110,115,
                        32,97,110,100,32,111,112,116,105,111,110,115,32,115,
                        117,99,104,32,97,115]}],
                     0,false},
                    {text,[7,42,99,97,99,104,101,42]},
                    {sep,[{text,[3,97,110,100]}],0,false},
                    {text,"\b*unique*"},
                    {sep,[{text,"\f(see section"}],0,false},
                    {text,"![Common Options](#common_options)"},
                    {sep,
                     [{text,
                       "r, every QLC free of QLC tables evaluates to the same list of answers as the identical ordinary list comprehension."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       "=While ordinary list comprehensions evaluate to lists, calling"}],
                     0,false},
                    {text,"\v[q/1](#q/1)"},
                    {sep,[{text,"\treturns a"}],0,false},
                    {text,"'<a name=\"query_handle\">query_handle</a>"},
                    {text,
                     [16,42,42,113,117,101,114,121,32,104,97,110,100,108,101,
                      42,42]},
                    {sep,
                     [{text,"'. To obtain all the answers to a query,"}],
                     0,false},
                    {text,
                     [17,91,101,118,97,108,47,49,93,40,35,101,118,97,108,47,
                      49,41]},
                    {sep,
                     [{text,
                       [142,105,115,32,116,111,32,98,101,32,99,97,108,108,101,
                        100,32,119,105,116,104,32,116,104,101,32,113,117,101,
                        114,121,32,104,97,110,100,108,101,32,97,115,32,102,
                        105,114,115,116,32,97,114,103,117,109,101,110,116,46,
                        32,81,117,101,114,121,32,104,97,110,100,108,101,115,
                        32,97,114,101,32,101,115,115,101,110,116,105,97,108,
                        108,121,32,102,117,110,99,116,105,111,110,97,108,32,
                        111,98,106,101,99,116,115,32,40,102,117,110,115,41,32,
                        99,114,101,97,116,101,100,32,105,110,32,116,104,101,
                        32,109,111,100,117,108,101,32,99,97,108,108,105,110,
                        103]}],
                     0,false},
                    {text,[7,42,113,47,49,44,50,42]},
                    {sep,
                     [{text,
                       "¤. As the funs refer to the module code, be careful not to keep query handles too long if the module code is to be replaced. Code replacement is described in section"}],
                     0,false},
                    {text,".[Compilation and Code Loading](./code_loading)"},
                    {sep,
                     [{text,
                       "_in the Erlang Reference Manual. The list of answers can also be traversed in chunks by use of a"}],
                     0,false},
                    {text,"'<a name=\"query_cursor\">query_cursor</a>"},
                    {text,
                     [16,42,42,113,117,101,114,121,32,99,117,114,115,111,114,
                      42,42]},
                    {sep,
                     [{text,"&. Query cursors are created by calling"}],
                     0,false},
                    {text,
                     [21,91,99,117,114,115,111,114,47,49,93,40,35,99,117,114,
                      115,111,114,47,49,41]},
                    {sep,
                     [{text,
                       "¹with a query handle as first argument. Query cursors are essentially Erlang processes. One answer at a time is sent from the query cursor process to the process that created the cursor."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}}],
            0,false}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,{above,{text,"\t## Syntax"},null},null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "GSyntactically QLCs have the same parts as ordinary list comprehensions:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,",\n[Expression || Qualifier1, Qualifier2, ...]"}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,"\f*Expression*"},
                   {sep,[{text,[4,40,116,104,101]}],0,false},
                   {text,"\f**template**"},
                   {sep,
                    [{text,
                      "1) is any Erlang expression. Qualifiers are either"}],
                    0,false},
                   {text,"\v**filters**"},
                   {sep,[{text,[2,111,114]}],0,false},
                   {text,
                    [14,42,42,103,101,110,101,114,97,116,111,114,115,42,42]},
                   {sep,
                    [{text,"*. Filters are Erlang expressions returning"}],
                    0,false},
                   {text,"\v*boolean()*"},
                   {sep,
                    [{text,
                      [26,46,32,71,101,110,101,114,97,116,111,114,115,32,104,
                       97,118,101,32,116,104,101,32,102,111,114,109]}],
                    0,false},
                   {text,"\e*Pattern <- ListExpression*"},
                   {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
                   {text,
                    [16,42,76,105,115,116,69,120,112,114,101,115,115,105,111,
                     110,42]},
                   {sep,
                    [{text,
                      "Xis an expression evaluating to a query handle or a list. Query handles are returned from"}],
                    0,false},
                   {text,
                    [21,91,97,112,112,101,110,100,47,49,93,40,35,97,112,112,
                     101,110,100,47,49,41]},
                   {sep,[{text,[1,44]}],0,false},
                   {text,
                    [23,91,107,101,121,115,111,114,116,47,50,93,40,35,107,101,
                     121,115,111,114,116,47,50,41]},
                   {sep,[{text,[1,44]}],0,false},
                   {text,"\v[q/1](#q/1)"},
                   {sep,[{text,[1,44]}],0,false},
                   {text,
                    [17,91,115,111,114,116,47,49,93,40,35,115,111,114,116,47,
                     49,41]},
                   {sep,[{text,[1,44]}],0,false},
                   {text,")[string_to_handle/1](#string_to_handle/1)"},
                   {sep,[{text,[5,44,32,97,110,100]}],0,false},
                   {text,
                    [19,91,116,97,98,108,101,47,50,93,40,35,116,97,98,108,101,
                     47,50,41]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,{above,{text,"\r## Evaluation"},null},null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "3A query handle is evaluated in the following order:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [137,73,110,115,112,101,99,116,105,111,110,32,111,102,32,
                   111,112,116,105,111,110,115,32,97,110,100,32,116,104,101,
                   32,99,111,108,108,101,99,116,105,111,110,32,111,102,32,105,
                   110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,
                   116,32,116,97,98,108,101,115,46,32,65,115,32,97,32,114,101,
                   115,117,108,116,44,32,113,117,97,108,105,102,105,101,114,
                   115,32,97,114,101,32,109,111,100,105,102,105,101,100,32,
                   100,117,114,105,110,103,32,116,104,101,32,111,112,116,105,
                   109,105,122,97,116,105,111,110,32,112,104,97,115,101,46]}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [327,65,108,108,32,108,105,115,116,32,101,120,112,114,101,
                   115,115,105,111,110,115,32,97,114,101,32,101,118,97,108,
                   117,97,116,101,100,46,32,73,102,32,97,32,99,117,114,115,
                   111,114,32,104,97,115,32,98,101,101,110,32,99,114,101,97,
                   116,101,100,44,32,101,118,97,108,117,97,116,105,111,110,32,
                   116,97,107,101,115,32,112,108,97,99,101,32,105,110,32,116,
                   104,101,32,99,117,114,115,111,114,32,112,114,111,99,101,
                   115,115,46,32,70,111,114,32,108,105,115,116,32,101,120,112,
                   114,101,115,115,105,111,110,115,32,116,104,97,116,32,97,
                   114,101,32,81,76,67,115,44,32,116,104,101,32,108,105,115,
                   116,32,101,120,112,114,101,115,115,105,111,110,115,32,111,
                   102,32,116,104,101,32,103,101,110,101,114,97,116,111,114,
                   115,32,111,102,32,116,104,101,32,81,76,67,115,32,97,114,
                   101,32,101,118,97,108,117,97,116,101,100,32,97,115,32,119,
                   101,108,108,46,32,66,101,32,99,97,114,101,102,117,108,32,
                   105,102,32,108,105,115,116,32,101,120,112,114,101,115,115,
                   105,111,110,115,32,104,97,118,101,32,115,105,100,101,32,
                   101,102,102,101,99,116,115,44,32,97,115,32,108,105,115,116,
                   32,101,120,112,114,101,115,115,105,111,110,115,32,97,114,
                   101,32,101,118,97,108,117,97,116,101,100,32,105,110,32,117,
                   110,115,112,101,99,105,102,105,101,100,32,111,114,100,101,
                   114,46]}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   "lThe answers are found by evaluating the qualifiers from left to right, backtracking when some filter returns"}],
                 0,false},
                {text,[7,42,102,97,108,115,101,42]},
                {sep,
                 [{text,
                   "4, or collecting the template when all filters return"}],
                 0,false},
                {text,[6,42,116,114,117,101,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [26,70,105,108,116,101,114,115,32,116,104,97,116,32,100,
                      111,32,110,111,116,32,114,101,116,117,114,110]}],
                   0,false},
                  {text,"\v*boolean()*"},
                  {sep,
                   [{text,
                     "`but fail are handled differently depending on their syntax: if the filter is a guard, it returns"}],
                   0,false},
                  {text,[7,42,102,97,108,115,101,42]},
                  {sep,
                   [{text,
                     "O, otherwise the query evaluation fails. This behavior makes it possible for the"}],
                   0,false},
                  {text,[5,42,113,108,99,42]},
                  {sep,
                   [{text,
                     [297,109,111,100,117,108,101,32,116,111,32,100,111,32,
                      115,111,109,101,32,111,112,116,105,109,105,122,97,116,
                      105,111,110,115,32,119,105,116,104,111,117,116,32,97,
                      102,102,101,99,116,105,110,103,32,116,104,101,32,109,
                      101,97,110,105,110,103,32,111,102,32,97,32,113,117,101,
                      114,121,46,32,70,111,114,32,101,120,97,109,112,108,101,
                      44,32,119,104,101,110,32,116,101,115,116,105,110,103,32,
                      115,111,109,101,32,112,111,115,105,116,105,111,110,32,
                      111,102,32,97,32,116,97,98,108,101,32,97,110,100,32,111,
                      110,101,32,111,114,32,109,111,114,101,32,99,111,110,115,
                      116,97,110,116,115,32,102,111,114,32,101,113,117,97,108,
                      105,116,121,44,32,111,110,108,121,32,116,104,101,32,111,
                      98,106,101,99,116,115,32,119,105,116,104,32,101,113,117,
                      97,108,32,118,97,108,117,101,115,32,97,114,101,32,99,97,
                      110,100,105,100,97,116,101,115,32,102,111,114,32,102,
                      117,114,116,104,101,114,32,101,118,97,108,117,97,116,
                      105,111,110,46,32,84,104,101,32,111,116,104,101,114,32,
                      111,98,106,101,99,116,115,32,97,114,101,32,103,117,97,
                      114,97,110,116,101,101,100,32,116,111,32,109,97,107,101,
                      32,116,104,101,32,102,105,108,116,101,114,32,114,101,
                      116,117,114,110]}],
                   0,false},
                  {text,[7,42,102,97,108,115,101,42]},
                  {sep,
                   [{text,
                     [465,44,32,98,117,116,32,110,101,118,101,114,32,102,97,
                      105,108,46,32,84,104,101,32,40,115,109,97,108,108,41,32,
                      115,101,116,32,111,102,32,99,97,110,100,105,100,97,116,
                      101,32,111,98,106,101,99,116,115,32,99,97,110,32,111,
                      102,116,101,110,32,98,101,32,102,111,117,110,100,32,98,
                      121,32,108,111,111,107,105,110,103,32,117,112,32,115,
                      111,109,101,32,107,101,121,32,118,97,108,117,101,115,32,
                      111,102,32,116,104,101,32,116,97,98,108,101,32,111,114,
                      32,98,121,32,116,114,97,118,101,114,115,105,110,103,32,
                      116,104,101,32,116,97,98,108,101,32,117,115,105,110,103,
                      32,97,32,109,97,116,99,104,32,115,112,101,99,105,102,
                      105,99,97,116,105,111,110,46,32,73,116,32,105,115,32,
                      110,101,99,101,115,115,97,114,121,32,116,111,32,112,108,
                      97,99,101,32,116,104,101,32,103,117,97,114,100,32,102,
                      105,108,116,101,114,115,32,105,109,109,101,100,105,97,
                      116,101,108,121,32,97,102,116,101,114,32,116,104,101,32,
                      116,97,98,108,101,32,103,101,110,101,114,97,116,111,114,
                      44,32,111,116,104,101,114,119,105,115,101,32,116,104,
                      101,32,99,97,110,100,105,100,97,116,101,32,111,98,106,
                      101,99,116,115,32,97,114,101,32,110,111,116,32,114,101,
                      115,116,114,105,99,116,101,100,32,116,111,32,97,32,115,
                      109,97,108,108,32,115,101,116,46,32,84,104,101,32,114,
                      101,97,115,111,110,32,105,115,32,116,104,97,116,32,111,
                      98,106,101,99,116,115,32,116,104,97,116,32,99,111,117,
                      108,100,32,109,97,107,101,32,116,104,101,32,113,117,101,
                      114,121,32,101,118,97,108,117,97,116,105,111,110,32,102,
                      97,105,108,32,109,117,115,116,32,110,111,116,32,98,101,
                      32,101,120,99,108,117,100,101,100,32,98,121,32,108,111,
                      111,107,105,110,103,32,117,112,32,97,32,107,101,121,32,
                      111,114,32,114,117,110,110,105,110,103,32,97,32,109,97,
                      116,99,104,32,115,112,101,99,105,102,105,99,97,116,105,
                      111,110,46]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,[7,35,35,32,74,111,105,110]},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,[5,42,113,108,99,42]},
                 {sep,
                  [{text,
                    "Vmodule supports fast join of two query handles. Fast join is possible if some position"}],
                  0,false},
                 {text,[4,42,80,49,42]},
                 {sep,
                  [{text,"&of one query handler and some position"}],
                  0,false},
                 {text,[4,42,80,50,42]},
                 {sep,
                  [{text,
                    "Uof another query handler are tested for equality. Two fast join methods are provided:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [15,42,42,76,111,111,107,117,112,32,106,111,105,110,42,42]},
               {sep,
                [{text,
                  "utraverses all objects of one query handle and finds objects of the other handle (a QLC table) such that the values at"}],
                0,false},
               {text,[4,42,80,49,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[4,42,80,50,42]},
               {sep,[{text,"\ematch or compare equal. The"}],0,false},
               {text,[5,42,113,108,99,42]},
               {sep,
                [{text,
                  "ymodule does not create any indexes but looks up values using the key position and the indexed positions of the QLC table."}],
                0,false}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,[14,42,42,77,101,114,103,101,32,106,111,105,110,42,42]},
               {sep,
                [{text,
                  "_sorts the objects of each query handle if necessary and filters out objects where the values at"}],
                0,false},
               {text,[4,42,80,49,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[4,42,80,50,42]},
               {sep,
                [{text,
                  "<do not compare equal. If many objects with the same value of"}],
                0,false},
               {text,[4,42,80,50,42]},
               {sep,
                [{text,
                  "<exist, a temporary file is used for the equivalence classes."}],
                0,false}],
              0,false}],
            0,false}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,[5,42,113,108,99,42]},
                 {sep,
                  [{text,
                    [282,109,111,100,117,108,101,32,119,97,114,110,115,32,97,
                     116,32,99,111,109,112,105,108,101,32,116,105,109,101,32,
                     105,102,32,97,32,81,76,67,32,99,111,109,98,105,110,101,
                     115,32,113,117,101,114,121,32,104,97,110,100,108,101,115,
                     32,105,110,32,115,117,99,104,32,97,32,119,97,121,32,116,
                     104,97,116,32,109,111,114,101,32,116,104,97,110,32,111,
                     110,101,32,106,111,105,110,32,105,115,32,112,111,115,115,
                     105,98,108,101,46,32,84,104,97,116,32,105,115,44,32,110,
                     111,32,113,117,101,114,121,32,112,108,97,110,110,101,114,
                     32,105,115,32,112,114,111,118,105,100,101,100,32,116,104,
                     97,116,32,99,97,110,32,115,101,108,101,99,116,32,97,32,
                     103,111,111,100,32,111,114,100,101,114,32,98,101,116,119,
                     101,101,110,32,112,111,115,115,105,98,108,101,32,106,111,
                     105,110,32,111,112,101,114,97,116,105,111,110,115,46,32,
                     73,116,32,105,115,32,117,112,32,116,111,32,116,104,101,
                     32,117,115,101,114,32,116,111,32,111,114,100,101,114,32,
                     116,104,101,32,106,111,105,110,115,32,98,121,32,105,110,
                     116,114,111,100,117,99,105,110,103,32,113,117,101,114,
                     121,32,104,97,110,100,108,101,115,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "áThe join is to be expressed as a guard filter. The filter must be placed immediately after the two joined generators, possibly after guard filters that use variables from no other generators but the two joined generators. The"}],
                  0,false},
                 {text,[5,42,113,108,99,42]},
                 {sep,
                  [{text,
                    [31,109,111,100,117,108,101,32,105,110,115,112,101,99,116,
                     115,32,116,104,101,32,111,112,101,114,97,110,100,115,32,
                     111,102]}],
                  0,false},
                 {text,[7,42,61,58,61,47,50,42]},
                 {sep,[{text,[1,44]}],0,false},
                 {text,[6,42,61,61,47,50,42]},
                 {sep,[{text,[1,44]}],0,false},
                 {text,"\r*is_record/2*"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,"\v*element/2*"},
                 {sep,
                  [{text,
                    [25,44,32,97,110,100,32,108,111,103,105,99,97,108,32,111,
                     112,101,114,97,116,111,114,115,32,40]}],
                  0,false},
                 {text,[7,42,97,110,100,47,50,42]},
                 {sep,[{text,[1,44]}],0,false},
                 {text,[6,42,111,114,47,50,42]},
                 {sep,[{text,[1,44]}],0,false},
                 {text,"\v*andalso/2*"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,"\n*orelse/2*"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,[7,42,120,111,114,47,50,42]},
                 {sep,
                  [{text,"+) when determining which joins to consider."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}},
       {sep,
        [{text,"+<a name=\"common_options\">common_options</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [17,35,35,32,67,111,109,109,111,110,32,79,112,116,105,111,110,
              115]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"%The following options are accepted by"}],
                 0,false},
                {text,
                 [21,91,99,117,114,115,111,114,47,50,93,40,35,99,117,114,115,
                  111,114,47,50,41]},
                {sep,[{text,[1,44]}],0,false},
                {text,
                 [17,91,101,118,97,108,47,50,93,40,35,101,118,97,108,47,50,
                  41]},
                {sep,[{text,[1,44]}],0,false},
                {text,
                 [17,91,102,111,108,100,47,52,93,40,35,102,111,108,100,47,52,
                  41]},
                {sep,[{text,[5,44,32,97,110,100]}],0,false},
                {text,
                 [17,91,105,110,102,111,47,50,93,40,35,105,110,102,111,47,50,
                  41]},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [20,42,123,99,97,99,104,101,95,97,108,108,44,32,67,97,99,
                   104,101,125,42]},
                 {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
                 {text,[7,42,67,97,99,104,101,42]},
                 {sep,[{text,"\vis equal to"}],0,false},
                 {text,[5,42,101,116,115,42]},
                 {sep,[{text,[2,111,114]}],0,false},
                 {text,[6,42,108,105,115,116,42]},
                 {sep,[{text,[6,97,100,100,115,32,97]}],0,false},
                 {text,
                  [17,42,123,99,97,99,104,101,44,194,160,67,97,99,104,101,125,
                   42]},
                 {sep,
                  [{text,
                    "Qoption to every list expression of the query except tables and lists. Defaults to"}],
                  0,false},
                 {text,
                  [18,42,123,99,97,99,104,101,95,97,108,108,44,194,160,110,
                   111,125,42]},
                 {sep,[{text,"\b. Option"}],0,false},
                 {text,"\v*cache_all*"},
                 {sep,
                  [{text,
                    [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,
                     116,111]}],
                  0,false},
                 {text,
                  [19,42,123,99,97,99,104,101,95,97,108,108,44,194,160,101,
                   116,115,125,42]},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,")<a name=\"max_list_size\">max_list_size</a>"},
                 {text,
                  [30,42,123,109,97,120,95,108,105,115,116,95,115,105,122,101,
                   44,32,77,97,120,76,105,115,116,83,105,122,101,125,42]},
                 {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
                 {text,"\r*MaxListSize*"},
                 {sep,
                  [{text,
                    "jis the size in bytes of terms on the external format. If the accumulated size of collected objects exceeds"}],
                  0,false},
                 {text,"\r*MaxListSize*"},
                 {sep,
                  [{text,
                    "N, the objects are written onto a temporary file. This option is used by option"}],
                  0,false},
                 {text,
                  [16,42,123,99,97,99,104,101,44,194,160,108,105,115,116,125,
                   42]},
                 {sep,
                  [{text,
                    ":and by the merge join method. Defaults to 512\\*1024 bytes."}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [30,42,123,116,109,112,100,105,114,95,117,115,97,103,101,44,
                  32,84,109,112,70,105,108,101,85,115,97,103,101,125,42]},
                {sep,[{text," determines the action taken when"}],0,false},
                {text,[5,42,113,108,99,42]},
                {sep,
                 [{text,
                   "Ais about to create temporary files on the directory set by option"}],
                 0,false},
                {text,"\b*tmpdir*"},
                {sep,
                 [{text,
                   [17,46,32,73,102,32,116,104,101,32,118,97,108,117,101,32,
                    105,115]}],
                 0,false},
                {text,"\r*not_allowed*"},
                {sep,
                 [{text,
                   "Y, an error tuple is returned, otherwise temporary files are created as needed. Default is"}],
                 0,false},
                {text,"\t*allowed*"},
                {sep,
                 [{text,
                   "9, which means that no further action is taken. The values"}],
                 0,false},
                {text,"\n*info_msg*"},
                {sep,[{text,[1,44]}],0,false},
                {text,"\r*warning_msg*"},
                {sep,[{text,[5,44,32,97,110,100]}],0,false},
                {text,"\v*error_msg*"},
                {sep,
                 [{text,
                   "<mean that the function with the corresponding name in module"}],
                 0,false},
                {text,"%[kernel/error_logger](./error_logger)"},
                {sep,
                 [{text,
                   "Cis called for printing some information (currently the stacktrace)."}],
                 0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [25,42,123,116,109,112,100,105,114,44,32,84,101,109,112,68,
                 105,114,101,99,116,111,114,121,125,42]},
               {sep,
                [{text,
                  "Gsets the directory used by merge join for temporary files and by option"}],
                0,false},
               {text,
                [16,42,123,99,97,99,104,101,44,194,160,108,105,115,116,125,
                 42]},
               {sep,[{text,"\". The option also overrides option"}],0,false},
               {text,"\b*tmpdir*"},
               {sep,[{text,[2,111,102]}],0,false},
               {text,
                [23,91,107,101,121,115,111,114,116,47,51,93,40,35,107,101,121,
                 115,111,114,116,47,51,41]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,
                [17,91,115,111,114,116,47,50,93,40,35,115,111,114,116,47,50,
                 41]},
               {sep,[{text,"\r. Defaults to"}],0,false},
               {text,[4,42,34,34,42]},
               {sep,
                [{text,",, which means that the directory returned by"}],
                0,false},
               {text,
                [16,42,102,105,108,101,58,103,101,116,95,99,119,100,40,41,42]},
               {sep,[{text,"\bis used."}],0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [20,42,123,117,110,105,113,117,101,95,97,108,108,44,32,116,114,
                117,101,125,42]},
              {sep,[{text,[6,97,100,100,115,32,97]}],0,false},
              {text,
               [17,42,123,117,110,105,113,117,101,44,194,160,116,114,117,101,
                125,42]},
              {sep,
               [{text,
                 "9option to every list expression of the query. Defaults to"}],
               0,false},
              {text,
               [22,42,123,117,110,105,113,117,101,95,97,108,108,44,194,160,
                102,97,108,115,101,125,42]},
              {sep,[{text,"\b. Option"}],0,false},
              {text,"\f*unique_all*"},
              {sep,
               [{text,
                 [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                  111]}],
               0,false},
              {text,
               [21,42,123,117,110,105,113,117,101,95,97,108,108,44,194,160,
                116,114,117,101,125,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,false}}],
        0,false}},
      {sep,
       [{text,"-<a name=\"getting_started\">getting_started</a>"},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [18,35,35,32,71,101,116,116,105,110,103,32,83,116,97,114,116,101,
             100]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "dAs mentioned earlier, queries are expressed in the list comprehension syntax as described in section"}],
                0,false},
               {text,
                [28,91,69,120,112,114,101,115,115,105,111,110,115,93,40,46,47,
                 101,120,112,114,101,115,115,105,111,110,115,41]},
               {sep,
                [{text,
                  "{in Erlang Reference Manual. In the following, some familiarity with list comprehensions is assumed. The examples in section"}],
                0,false},
               {text,",[List Comprehensions](./list_comprehensions)"},
               {sep,
                [{text,
                  [321,105,110,32,80,114,111,103,114,97,109,109,105,110,103,
                   32,69,120,97,109,112,108,101,115,32,99,97,110,32,103,101,
                   116,32,121,111,117,32,115,116,97,114,116,101,100,46,32,78,
                   111,116,105,99,101,32,116,104,97,116,32,108,105,115,116,32,
                   99,111,109,112,114,101,104,101,110,115,105,111,110,115,32,
                   100,111,32,110,111,116,32,97,100,100,32,97,110,121,32,99,
                   111,109,112,117,116,97,116,105,111,110,97,108,32,112,111,
                   119,101,114,32,116,111,32,116,104,101,32,108,97,110,103,
                   117,97,103,101,59,32,97,110,121,116,104,105,110,103,32,116,
                   104,97,116,32,99,97,110,32,98,101,32,100,111,110,101,32,
                   119,105,116,104,32,108,105,115,116,32,99,111,109,112,114,
                   101,104,101,110,115,105,111,110,115,32,99,97,110,32,97,108,
                   115,111,32,98,101,32,100,111,110,101,32,119,105,116,104,
                   111,117,116,32,116,104,101,109,46,32,66,117,116,32,116,104,
                   101,121,32,97,100,100,32,115,121,110,116,97,120,32,102,111,
                   114,32,101,120,112,114,101,115,115,105,110,103,32,115,105,
                   109,112,108,101,32,115,101,97,114,99,104,32,112,114,111,98,
                   108,101,109,115,44,32,119,104,105,99,104,32,105,115,32,99,
                   111,109,112,97,99,116,32,97,110,100,32,99,108,101,97,114,
                   32,111,110,99,101,32,121,111,117,32,103,101,116,32,117,115,
                   101,100,32,116,111,32,105,116,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  ";Many list comprehension expressions can be evaluated by the"}],
                0,false},
               {text,[5,42,113,108,99,42]},
               {sep,
                [{text,
                  "Ämodule. Exceptions are expressions, such that variables introduced in patterns (or filters) are used in some generator later in the list comprehension. As an example, consider an implementation of"}],
                0,false},
               {text,
                [17,42,108,105,115,116,115,58,97,112,112,101,110,100,40,76,41,
                 42]},
               {sep,[{text,[1,58]}],0,false},
               {text,
                [22,42,91,88,32,124,124,89,32,60,45,32,76,44,32,88,32,60,45,
                 32,89,93,42]},
               {sep,[{text,[1,46]}],0,false},
               {text,[3,42,89,42]},
               {sep,
                [{text,
                  "ºis introduced in the first generator and used in the second. The ordinary list comprehension is normally to be preferred when there is a choice as to which to use. One difference is that"}],
                0,false},
               {text,
                [17,91,101,118,97,108,47,49,93,40,35,101,118,97,108,47,49,41]},
               {sep,
                [{text,
                  [132,99,111,108,108,101,99,116,115,32,97,110,115,119,101,
                   114,115,32,105,110,32,97,32,108,105,115,116,32,116,104,97,
                   116,32,105,115,32,102,105,110,97,108,108,121,32,114,101,
                   118,101,114,115,101,100,44,32,119,104,105,108,101,32,108,
                   105,115,116,32,99,111,109,112,114,101,104,101,110,115,105,
                   111,110,115,32,99,111,108,108,101,99,116,32,97,110,115,119,
                   101,114,115,32,111,110,32,116,104,101,32,115,116,97,99,107,
                   32,116,104,97,116,32,105,115,32,102,105,110,97,108,108,121,
                   32,117,110,119,111,117,110,100,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,"\bWhat the"}],0,false},
               {text,[5,42,113,108,99,42]},
               {sep,
                [{text,
                  [136,109,111,100,117,108,101,32,112,114,105,109,97,114,105,
                   108,121,32,97,100,100,115,32,116,111,32,108,105,115,116,32,
                   99,111,109,112,114,101,104,101,110,115,105,111,110,115,32,
                   105,115,32,116,104,97,116,32,100,97,116,97,32,99,97,110,32,
                   98,101,32,114,101,97,100,32,102,114,111,109,32,81,76,67,32,
                   116,97,98,108,101,115,32,105,110,32,115,109,97,108,108,32,
                   99,104,117,110,107,115,46,32,65,32,81,76,67,32,116,97,98,
                   108,101,32,105,115,32,99,114,101,97,116,101,100,32,98,121,
                   32,99,97,108,108,105,110,103]}],
                0,false},
               {text,
                [19,91,116,97,98,108,101,47,50,93,40,35,116,97,98,108,101,47,
                 50,41]},
               {sep,[{text,"\t. Usually"}],0,false},
               {text,"\r*qlc:table/2*"},
               {sep,
                [{text,
                  [149,105,115,32,110,111,116,32,99,97,108,108,101,100,32,100,
                   105,114,101,99,116,108,121,32,102,114,111,109,32,116,104,
                   101,32,113,117,101,114,121,32,98,117,116,32,116,104,114,
                   111,117,103,104,32,97,110,32,105,110,116,101,114,102,97,99,
                   101,32,102,117,110,99,116,105,111,110,32,111,102,32,115,
                   111,109,101,32,100,97,116,97,32,115,116,114,117,99,116,117,
                   114,101,46,32,69,114,108,97,110,103,47,79,84,80,32,105,110,
                   99,108,117,100,101,115,32,97,32,102,101,119,32,101,120,97,
                   109,112,108,101,115,32,111,102,32,115,117,99,104,32,102,
                   117,110,99,116,105,111,110,115,58]}],
                0,false},
               {text,"1[mnesia/mnesia#table/1](../mnesia/mnesia#table/1)"},
               {sep,[{text,[1,44]}],0,false},
               {text,
                [28,91,101,116,115,35,116,97,98,108,101,47,49,93,40,46,47,101,
                 116,115,35,116,97,98,108,101,47,49,41]},
               {sep,[{text,[5,44,32,97,110,100]}],0,false},
               {text,
                [30,91,100,101,116,115,35,116,97,98,108,101,47,49,93,40,46,47,
                 100,101,116,115,35,116,97,98,108,101,47,49,41]},
               {sep,
                [{text,
                  [144,46,32,70,111,114,32,97,32,103,105,118,101,110,32,100,
                   97,116,97,32,115,116,114,117,99,116,117,114,101,44,32,109,
                   97,110,121,32,102,117,110,99,116,105,111,110,115,32,99,97,
                   110,32,99,114,101,97,116,101,32,81,76,67,32,116,97,98,108,
                   101,115,44,32,98,117,116,32,99,111,109,109,111,110,32,102,
                   111,114,32,116,104,101,115,101,32,102,117,110,99,116,105,
                   111,110,115,32,105,115,32,116,104,97,116,32,116,104,101,
                   121,32,114,101,116,117,114,110,32,97,32,113,117,101,114,
                   121,32,104,97,110,100,108,101,32,99,114,101,97,116,101,100,
                   32,98,121]}],
                0,false},
               {text,
                [19,91,116,97,98,108,101,47,50,93,40,35,116,97,98,108,101,47,
                 50,41]},
               {sep,
                [{text,
                  "t. Using the QLC tables provided by Erlang/OTP is usually probably sufficient, but for the more advanced user section"}],
                0,false},
               {text,"5[Implementing a QLC Table](#implementing_a_qlc_table)"},
               {sep,
                [{text,"2describes the implementation of a function calling"}],
                0,false},
               {text,"\r*qlc:table/2*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[7,66,101,115,105,100,101,115]}],0,false},
               {text,"\r*qlc:table/2*"},
               {sep,
                [{text,
                  "h, other functions return query handles. They are used more seldom than tables, but are sometimes useful."}],
                0,false},
               {text,
                [21,91,97,112,112,101,110,100,47,49,93,40,35,97,112,112,101,
                 110,100,47,49,41]},
               {sep,
                [{text,
                  "ztraverses objects from many tables or lists after each other. If, for example, you want to traverse all answers to a query"}],
                0,false},
               {text,[4,42,81,72,42]},
               {sep,
                [{text,
                  [29,97,110,100,32,116,104,101,110,32,102,105,110,105,115,
                   104,32,111,102,102,32,98,121,32,97,32,116,101,114,109]}],
                0,false},
               {text,"\f*{finished}*"},
               {sep,
                [{text,
                  [28,44,32,121,111,117,32,99,97,110,32,100,111,32,116,104,97,
                   116,32,98,121,32,99,97,108,108,105,110,103]}],
                0,false},
               {text,
                [30,42,113,108,99,58,97,112,112,101,110,100,40,81,72,44,32,91,
                 123,102,105,110,105,115,104,101,100,125,93,41,42]},
               {sep,[{text,[1,46]}],0,false},
               {text,"\n*append/2*"},
               {sep,
                [{text,
                  [28,102,105,114,115,116,32,114,101,116,117,114,110,115,32,
                   97,108,108,32,111,98,106,101,99,116,115,32,111,102]}],
                0,false},
               {text,[4,42,81,72,42]},
               {sep,[{text,[6,44,32,116,104,101,110]}],0,false},
               {text,"\f*{finished}*"},
               {sep,[{text,"\f. If a tuple"}],0,false},
               {text,"\f*{finished}*"},
               {sep,[{text,"\eexists among the answers to"}],0,false},
               {text,[4,42,81,72,42]},
               {sep,[{text,"\e, it is returned twice from"}],0,false},
               {text,"\n*append/2*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "EAs another example, consider concatenating the answers to two queries"}],
                0,false},
               {text,[5,42,81,72,49,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  "Cwhile removing all duplicates. This is accomplished by using option"}],
                0,false},
               {text,"\b*unique*"},
               {sep,[{text,[1,58]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "8\nqlc:q([X || X <- qlc:append(QH1, QH2)], {unique, true})"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "¼The cost is substantial: every returned answer is stored in an ETS table. Before returning an answer, it is looked up in the ETS table to check if it has already been returned. Without the"}],
                0,false},
               {text,"\b*unique*"},
               {sep,
                [{text,
                  [22,111,112,116,105,111,110,44,32,97,108,108,32,97,110,115,
                   119,101,114,115,32,116,111]}],
                0,false},
               {text,[5,42,81,72,49,42]},
               {sep,
                [{text,",would be returned followed by all answers to"}],
                0,false},
               {text,[5,42,81,72,50,42]},
               {sep,[{text,[5,46,32,84,104,101]}],0,false},
               {text,"\b*unique*"},
               {sep,
                [{text,
                  "5option keeps the order between the remaining answers."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "LIf the order of the answers is not important, there is an alternative to the"}],
                0,false},
               {text,"\b*unique*"},
               {sep,
                [{text,",option, namely to sort the answers uniquely:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "C\nqlc:sort(qlc:q([X || X <- qlc:append(QH1, QH2)], {unique, true}))."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [265,84,104,105,115,32,113,117,101,114,121,32,97,108,115,
                   111,32,114,101,109,111,118,101,115,32,100,117,112,108,105,
                   99,97,116,101,115,32,98,117,116,32,116,104,101,32,97,110,
                   115,119,101,114,115,32,97,114,101,32,115,111,114,116,101,
                   100,46,32,73,102,32,116,104,101,114,101,32,97,114,101,32,
                   109,97,110,121,32,97,110,115,119,101,114,115,44,32,116,101,
                   109,112,111,114,97,114,121,32,102,105,108,101,115,32,97,
                   114,101,32,117,115,101,100,46,32,78,111,116,105,99,101,32,
                   116,104,97,116,32,116,111,32,103,101,116,32,116,104,101,32,
                   102,105,114,115,116,32,117,110,105,113,117,101,32,97,110,
                   115,119,101,114,44,32,97,108,108,32,97,110,115,119,101,114,
                   115,32,109,117,115,116,32,98,101,32,102,111,117,110,100,32,
                   97,110,100,32,115,111,114,116,101,100,46,32,66,111,116,104,
                   32,97,108,116,101,114,110,97,116,105,118,101,115,32,102,
                   105,110,100,32,100,117,112,108,105,99,97,116,101,115,32,98,
                   121,32,99,111,109,112,97,114,105,110,103,32,97,110,115,119,
                   101,114,115,44,32,116,104,97,116,32,105,115,44,32,105,
                   102]}],
                0,false},
               {text,[4,42,65,49,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[4,42,65,50,42]},
               {sep,[{text,"%are answers found in that order, then"}],0,false},
               {text,[4,42,65,50,42]},
               {sep,
                [{text,
                  [15,105,115,32,97,32,114,101,109,111,118,101,100,32,105,
                   102]}],
                0,false},
               {text,"\n*A1 == A2*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                [154,84,111,32,114,101,116,117,114,110,32,111,110,108,121,32,
                 97,32,102,101,119,32,97,110,115,119,101,114,115,44,32,99,117,
                 114,115,111,114,115,32,99,97,110,32,98,101,32,117,115,101,
                 100,46,32,84,104,101,32,102,111,108,108,111,119,105,110,103,
                 32,99,111,100,101,32,114,101,116,117,114,110,115,32,110,111,
                 32,109,111,114,101,32,116,104,97,110,32,102,105,118,101,32,
                 97,110,115,119,101,114,115,32,117,115,105,110,103,32,97,110,
                 32,69,84,83,32,116,97,98,108,101,32,102,111,114,32,115,116,
                 111,114,105,110,103,32,116,104,101,32,117,110,105,113,117,
                 101,32,97,110,115,119,101,114,115,58]}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [129,10,67,32,61,32,113,108,99,58,99,117,114,115,111,114,40,
                 113,108,99,58,113,40,91,88,32,124,124,32,88,32,60,45,32,113,
                 108,99,58,97,112,112,101,110,100,40,81,72,49,44,32,81,72,50,
                 41,93,44,123,117,110,105,113,117,101,44,116,114,117,101,125,
                 41,41,44,10,82,32,61,32,113,108,99,58,110,101,120,116,95,97,
                 110,115,119,101,114,115,40,67,44,32,53,41,44,10,111,107,32,
                 61,32,113,108,99,58,100,101,108,101,116,101,95,99,117,114,
                 115,111,114,40,67,41,44,10,82,46]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                [154,81,76,67,115,32,97,114,101,32,99,111,110,118,101,110,105,
                 101,110,116,32,102,111,114,32,115,116,97,116,105,110,103,32,
                 99,111,110,115,116,114,97,105,110,116,115,32,111,110,32,100,
                 97,116,97,32,102,114,111,109,32,116,119,111,32,111,114,32,
                 109,111,114,101,32,116,97,98,108,101,115,46,32,84,104,101,32,
                 102,111,108,108,111,119,105,110,103,32,101,120,97,109,112,
                 108,101,32,100,111,101,115,32,97,32,110,97,116,117,114,97,
                 108,32,106,111,105,110,32,111,110,32,116,119,111,32,113,117,
                 101,114,121,32,104,97,110,100,108,101,115,32,111,110,32,112,
                 111,115,105,116,105,111,110,32,50,58]}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "h\nqlc:q([{X1,X2,X3,Y1} || \n          {X1,X2,X3} <- QH1, \n          {Y1,Y2} <- QH2, \n          X2 =:= Y2])"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[3,84,104,101]}],0,false},
               {text,[5,42,113,108,99,42]},
               {sep,
                [{text,
                  "@module evaluates this differently depending on the query handles"}],
                0,false},
               {text,[5,42,81,72,49,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  [18,46,32,73,102,44,32,102,111,114,32,101,120,97,109,112,
                   108,101,44]}],
                0,false},
               {text,[4,42,88,50,42]},
               {sep,
                [{text,
                  "Zis matched against the key of a QLC table, the lookup join method traverses the objects of"}],
                0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  "9while looking up key values in the table. However, if not"}],
                0,false},
               {text,[4,42,88,50,42]},
               {sep,[{text,[2,111,114]}],0,false},
               {text,[4,42,89,50,42]},
               {sep,
                [{text,
                  "dis matched against the key or an indexed position of a QLC table, the merge join method ensures that"}],
                0,false},
               {text,[5,42,81,72,49,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  "Xare both sorted on position 2 and next do the join by traversing the objects one by one."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
               {text,[6,42,106,111,105,110,42]},
               {sep,
                [{text,
                  [24,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,
                   102,111,114,99,101,32,116,104,101]}],
                0,false},
               {text,[5,42,113,108,99,42]},
               {sep,
                [{text,
                  [155,109,111,100,117,108,101,32,116,111,32,117,115,101,32,
                   97,32,99,101,114,116,97,105,110,32,106,111,105,110,32,109,
                   101,116,104,111,100,46,32,70,111,114,32,116,104,101,32,114,
                   101,115,116,32,111,102,32,116,104,105,115,32,115,101,99,
                   116,105,111,110,32,105,116,32,105,115,32,97,115,115,117,
                   109,101,100,32,116,104,97,116,32,116,104,101,32,101,120,99,
                   101,115,115,105,118,101,108,121,32,115,108,111,119,32,106,
                   111,105,110,32,109,101,116,104,111,100,32,99,97,108,108,
                   101,100,32,34,110,101,115,116,101,100,32,108,111,111,112,
                   34,32,104,97,115,32,98,101,101,110,32,99,104,111,115,101,
                   110,58]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [131,10,113,108,99,58,113,40,91,123,88,49,44,88,50,44,88,51,
                 44,89,49,125,32,124,124,32,10,32,32,32,32,32,32,32,32,32,32,
                 123,88,49,44,88,50,44,88,51,125,32,60,45,32,81,72,49,44,32,
                 10,32,32,32,32,32,32,32,32,32,32,123,89,49,44,89,50,125,32,
                 60,45,32,81,72,50,44,32,10,32,32,32,32,32,32,32,32,32,32,88,
                 50,32,61,58,61,32,89,50,93,44,10,32,32,32,32,32,32,123,106,
                 111,105,110,44,32,110,101,115,116,101,100,95,108,111,111,112,
                 125,41]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "GIn this case the filter is applied to every possible pair of answers to"}],
                0,false},
               {text,[5,42,81,72,49,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,"*, one at a time. If there are M answers to"}],
                0,false},
               {text,[5,42,81,72,49,42]},
               {sep,
                [{text,
                  [16,97,110,100,32,78,32,97,110,115,119,101,114,115,32,116,
                   111]}],
                0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  [31,44,32,116,104,101,32,102,105,108,116,101,114,32,105,115,
                   32,114,117,110,32,77,92,42,78,32,116,105,109,101,115,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[2,73,102]}],0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  [29,105,115,32,97,32,99,97,108,108,32,116,111,32,116,104,
                   101,32,102,117,110,99,116,105,111,110,32,102,111,114]}],
                0,false},
               {text,
                [20,91,103,98,95,116,114,101,101,115,93,40,103,98,95,116,114,
                 101,101,115,41]},
               {sep,
                [{text,
                  [23,44,32,97,115,32,100,101,102,105,110,101,100,32,105,110,
                   32,115,101,99,116,105,111,110]}],
                0,false},
               {text,"5[Implementing a QLC Table](#implementing_a_qlc_table)"},
               {sep,[{text,[6,44,32,116,104,101,110]}],0,false},
               {text,
                [18,42,103,98,95,116,97,98,108,101,58,116,97,98,108,101,47,49,
                 42]},
               {sep,
                [{text,
                  ">, the iterator for the gb-tree is initiated for each answer to"}],
                0,false},
               {text,[5,42,81,72,49,42]},
               {sep,
                [{text,
                  "Ô. The objects of the gb-tree are then returned one by one. This is probably the most efficient way of traversing the table in that case, as it takes minimal computational power to get the following object. But if"}],
                0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  "×is not a table but a more complicated QLC, it can be more efficient to use some RAM memory for collecting the answers in a cache, particularly if there are only a few answers. It must then be assumed that evaluating"}],
                0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  "Ghas no side effects so that the meaning of the query does not change if"}],
                0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  "Eis evaluated only once. One way of caching the answers is to evaluate"}],
                0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,
                  "3first of all and substitute the list of answers for"}],
                0,false},
               {text,[5,42,81,72,50,42]},
               {sep,
                [{text,"*in the query. Another way is to use option"}],
                0,false},
               {text,[7,42,99,97,99,104,101,42]},
               {sep,
                [{text,
                  [28,46,32,73,116,32,105,115,32,101,120,112,114,101,115,115,
                   101,100,32,108,105,107,101,32,116,104,105,115,58]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,",\nQH2' = qlc:q([X || X <- QH2], {cache, ets})"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,[{text,[7,111,114,32,111,110,108,121]}],0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,[{text,"%\nQH2' = qlc:q([X || X <- QH2], cache)"}],0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [20,84,104,101,32,101,102,102,101,99,116,32,111,102,32,111,
                   112,116,105,111,110]}],
                0,false},
               {text,[7,42,99,97,99,104,101,42]},
               {sep,
                [{text,
                  [22,105,115,32,116,104,97,116,32,119,104,101,110,32,103,101,
                   110,101,114,97,116,111,114]}],
                0,false},
               {text,[6,42,81,72,50,39,42]},
               {sep,
                [{text,
                  "Vis run the first time, every answer is stored in an ETS table. When the next answer of"}],
                0,false},
               {text,[5,42,81,72,49,42]},
               {sep,
                [{text,
                  [20,105,115,32,116,114,105,101,100,44,32,97,110,115,119,101,
                   114,115,32,116,111]}],
                0,false},
               {text,[6,42,81,72,50,39,42]},
               {sep,
                [{text,
                  "@are copied from the ETS table, which is very fast. As for option"}],
                0,false},
               {text,"\b*unique*"},
               {sep,
                [{text,
                  "8the cost is a possibly substantial amount of RAM memory."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
               {text,
                [16,42,123,99,97,99,104,101,44,194,160,108,105,115,116,125,
                 42]},
               {sep,
                [{text,
                  [591,111,102,102,101,114,115,32,116,104,101,32,112,111,115,
                   115,105,98,105,108,105,116,121,32,116,111,32,115,116,111,
                   114,101,32,116,104,101,32,97,110,115,119,101,114,115,32,
                   105,110,32,97,32,108,105,115,116,32,111,110,32,116,104,101,
                   32,112,114,111,99,101,115,115,32,104,101,97,112,46,32,84,
                   104,105,115,32,104,97,115,32,116,104,101,32,112,111,116,
                   101,110,116,105,97,108,32,111,102,32,98,101,105,110,103,32,
                   102,97,115,116,101,114,32,116,104,97,110,32,69,84,83,32,
                   116,97,98,108,101,115,44,32,97,115,32,116,104,101,114,101,
                   32,105,115,32,110,111,32,110,101,101,100,32,116,111,32,99,
                   111,112,121,32,97,110,115,119,101,114,115,32,102,114,111,
                   109,32,116,104,101,32,116,97,98,108,101,46,32,72,111,119,
                   101,118,101,114,44,32,105,116,32,99,97,110,32,111,102,116,
                   101,110,32,114,101,115,117,108,116,32,105,110,32,115,108,
                   111,119,101,114,32,101,118,97,108,117,97,116,105,111,110,
                   32,98,101,99,97,117,115,101,32,111,102,32,109,111,114,101,
                   32,103,97,114,98,97,103,101,32,99,111,108,108,101,99,116,
                   105,111,110,115,32,111,102,32,116,104,101,32,112,114,111,
                   99,101,115,115,32,104,101,97,112,32,97,110,100,32,105,110,
                   99,114,101,97,115,101,100,32,82,65,77,32,109,101,109,111,
                   114,121,32,99,111,110,115,117,109,112,116,105,111,110,32,
                   98,101,99,97,117,115,101,32,111,102,32,108,97,114,103,101,
                   114,32,104,101,97,112,115,46,32,65,110,111,116,104,101,114,
                   32,100,114,97,119,98,97,99,107,32,119,105,116,104,32,99,97,
                   99,104,101,32,108,105,115,116,115,32,105,115,32,116,104,97,
                   116,32,105,102,32,116,104,101,32,108,105,115,116,32,115,
                   105,122,101,32,101,120,99,101,101,100,115,32,97,32,108,105,
                   109,105,116,44,32,97,32,116,101,109,112,111,114,97,114,121,
                   32,102,105,108,101,32,105,115,32,117,115,101,100,46,32,82,
                   101,97,100,105,110,103,32,116,104,101,32,97,110,115,119,
                   101,114,115,32,102,114,111,109,32,97,32,102,105,108,101,32,
                   105,115,32,109,117,99,104,32,115,108,111,119,101,114,32,
                   116,104,97,110,32,99,111,112,121,105,110,103,32,116,104,
                   101,109,32,102,114,111,109,32,97,110,32,69,84,83,32,116,97,
                   98,108,101,46,32,66,117,116,32,105,102,32,116,104,101,32,
                   97,118,97,105,108,97,98,108,101,32,82,65,77,32,109,101,109,
                   111,114,121,32,105,115,32,115,99,97,114,99,101,44,32,115,
                   101,116,116,105,110,103,32,116,104,101]}],
                0,false},
               {text,
                [23,91,108,105,109,105,116,93,40,35,109,97,120,95,108,105,115,
                 116,95,115,105,122,101,41]},
               {sep,[{text,"$to some low value is an alternative."}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
               {text,"\v*cache_all*"},
               {sep,[{text,"\rcan be set to"}],0,false},
               {text,[5,42,101,116,115,42]},
               {sep,[{text,[2,111,114]}],0,false},
               {text,[6,42,108,105,115,116,42]},
               {sep,[{text,"\"when evaluating a query. It adds a"}],0,false},
               {text,[7,42,99,97,99,104,101,42]},
               {sep,[{text,[2,111,114]}],0,false},
               {text,
                [16,42,123,99,97,99,104,101,44,194,160,108,105,115,116,125,
                 42]},
               {sep,
                [{text,
                  [258,111,112,116,105,111,110,32,116,111,32,101,118,101,114,
                   121,32,108,105,115,116,32,101,120,112,114,101,115,115,105,
                   111,110,32,101,120,99,101,112,116,32,81,76,67,32,116,97,98,
                   108,101,115,32,97,110,100,32,108,105,115,116,115,32,111,
                   110,32,97,108,108,32,108,101,118,101,108,115,32,111,102,32,
                   116,104,101,32,113,117,101,114,121,46,32,84,104,105,115,32,
                   99,97,110,32,98,101,32,117,115,101,100,32,102,111,114,32,
                   116,101,115,116,105,110,103,32,105,102,32,99,97,99,104,105,
                   110,103,32,119,111,117,108,100,32,105,109,112,114,111,118,
                   101,32,101,102,102,105,99,105,101,110,99,121,32,97,116,32,
                   97,108,108,46,32,73,102,32,116,104,101,32,97,110,115,119,
                   101,114,32,105,115,32,121,101,115,44,32,102,117,114,116,
                   104,101,114,32,116,101,115,116,105,110,103,32,105,115,32,
                   110,101,101,100,101,100,32,116,111,32,112,105,110,112,111,
                   105,110,116,32,116,104,101,32,103,101,110,101,114,97,116,
                   111,114,115,32,116,104,97,116,32,97,114,101,32,116,111,32,
                   98,101,32,99,97,99,104,101,100,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}},
     {sep,
      [{text,
        "?<a name=\"implementing_a_qlc_table\">implementing_a_qlc_table</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\e## Implementing a QLC Table"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"$As an example of how to use function"}],0,false},
              {text,
               [19,91,116,97,98,108,101,47,50,93,40,35,116,97,98,108,101,47,
                50,41]},
              {sep,
               [{text,"+, the implementation of a QLC table for the"}],
               0,false},
              {text,
               [20,91,103,98,95,116,114,101,101,115,93,40,103,98,95,116,114,
                101,101,115,41]},
              {sep,
               [{text,
                 [16,109,111,100,117,108,101,32,105,115,32,103,105,118,101,
                  110,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [2109,10,45,109,111,100,117,108,101,40,103,98,95,116,97,98,108,
                101,41,46,10,10,45,101,120,112,111,114,116,40,91,116,97,98,
                108,101,47,49,93,41,46,10,10,116,97,98,108,101,40,84,41,32,45,
                62,10,32,32,32,32,84,70,32,61,32,102,117,110,40,41,32,45,62,
                32,113,108,99,95,110,101,120,116,40,103,98,95,116,114,101,101,
                115,58,110,101,120,116,40,103,98,95,116,114,101,101,115,58,
                105,116,101,114,97,116,111,114,40,84,41,41,41,32,101,110,100,
                44,10,32,32,32,32,73,110,102,111,70,117,110,32,61,32,102,117,
                110,40,110,117,109,95,111,102,95,111,98,106,101,99,116,115,41,
                32,45,62,32,103,98,95,116,114,101,101,115,58,115,105,122,101,
                40,84,41,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,40,107,101,121,112,111,115,41,32,45,62,32,49,59,10,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,105,115,95,
                115,111,114,116,101,100,95,107,101,121,41,32,45,62,32,116,114,
                117,101,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,40,105,115,95,117,110,105,113,117,101,95,111,98,106,101,99,
                116,115,41,32,45,62,32,116,114,117,101,59,10,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,40,95,41,32,45,62,32,117,
                110,100,101,102,105,110,101,100,10,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,101,110,100,44,10,32,32,32,32,76,111,111,107,
                117,112,70,117,110,32,61,10,32,32,32,32,32,32,32,32,102,117,
                110,40,49,44,32,75,115,41,32,45,62,10,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,108,105,115,116,115,58,102,108,97,116,
                109,97,112,40,102,117,110,40,75,41,32,45,62,10,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,115,101,32,103,
                98,95,116,114,101,101,115,58,108,111,111,107,117,112,40,75,44,
                32,84,41,32,111,102,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,123,118,97,108,117,101,44,32,86,
                125,32,45,62,32,91,123,75,44,86,125,93,59,10,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,111,
                110,101,32,45,62,32,91,93,10,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,101,110,100,44,32,75,115,41,10,32,32,32,32,32,32,32,32,
                101,110,100,44,10,32,32,32,32,70,111,114,109,97,116,70,117,
                110,32,61,10,32,32,32,32,32,32,32,32,102,117,110,40,123,97,
                108,108,44,32,78,69,108,101,109,101,110,116,115,44,32,69,108,
                101,109,101,110,116,70,117,110,125,41,32,45,62,10,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,86,97,108,115,83,32,61,32,
                105,111,95,108,105,98,58,102,111,114,109,97,116,40,34,103,98,
                95,116,114,101,101,115,58,102,114,111,109,95,111,114,100,100,
                105,99,116,40,126,119,41,34,44,10,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,91,103,98,95,110,111,100,101,115,
                40,84,44,32,78,69,108,101,109,101,110,116,115,44,32,69,108,
                101,109,101,110,116,70,117,110,41,93,41,44,10,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,105,111,95,108,105,98,58,102,
                111,114,109,97,116,40,34,103,98,95,116,97,98,108,101,58,116,
                97,98,108,101,40,126,115,41,34,44,32,91,86,97,108,115,83,93,
                41,59,10,32,32,32,32,32,32,32,32,32,32,32,40,123,108,111,111,
                107,117,112,44,32,49,44,32,75,101,121,86,97,108,117,101,115,
                44,32,95,78,69,108,101,109,101,110,116,115,44,32,69,108,101,
                109,101,110,116,70,117,110,125,41,32,45,62,10,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,86,97,108,115,83,32,61,32,
                105,111,95,108,105,98,58,102,111,114,109,97,116,40,34,103,98,
                95,116,114,101,101,115,58,102,114,111,109,95,111,114,100,100,
                105,99,116,40,126,119,41,34,44,10,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,91,103,98,95,110,111,100,101,115,
                40,84,44,32,105,110,102,105,110,105,116,121,44,32,69,108,101,
                109,101,110,116,70,117,110,41,93,41,44,10,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,105,111,95,108,105,98,58,102,
                111,114,109,97,116,40,34,108,105,115,116,115,58,102,108,97,
                116,109,97,112,40,102,117,110,40,75,41,32,45,62,32,34,10,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,34,99,97,115,101,32,103,98,95,116,
                114,101,101,115,58,108,111,111,107,117,112,40,75,44,32,126,
                115,41,32,111,102,32,34,10,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,
                123,118,97,108,117,101,44,32,86,125,32,45,62,32,91,123,75,44,
                86,125,93,59,110,111,110,101,32,45,62,32,91,93,32,101,110,100,
                32,34,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,34,101,110,100,44,32,
                126,119,41,34,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,91,86,97,108,
                115,83,44,32,91,69,108,101,109,101,110,116,70,117,110,40,75,
                86,41,32,124,124,32,75,86,32,60,45,32,75,101,121,86,97,108,
                117,101,115,93,93,41,10,32,32,32,32,32,32,32,32,101,110,100,
                44,10,32,32,32,32,113,108,99,58,116,97,98,108,101,40,84,70,44,
                32,91,123,105,110,102,111,95,102,117,110,44,32,73,110,102,111,
                70,117,110,125,44,32,123,102,111,114,109,97,116,95,102,117,
                110,44,32,70,111,114,109,97,116,70,117,110,125,44,10,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,108,111,
                111,107,117,112,95,102,117,110,44,32,76,111,111,107,117,112,
                70,117,110,125,44,123,107,101,121,95,101,113,117,97,108,105,
                116,121,44,39,61,61,39,125,93,41,46,10,10,113,108,99,95,110,
                101,120,116,40,123,88,44,32,86,44,32,83,125,41,32,45,62,10,32,
                32,32,32,91,123,88,44,86,125,32,124,32,102,117,110,40,41,32,
                45,62,32,113,108,99,95,110,101,120,116,40,103,98,95,116,114,
                101,101,115,58,110,101,120,116,40,83,41,41,32,101,110,100,93,
                59,10,113,108,99,95,110,101,120,116,40,110,111,110,101,41,32,
                45,62,10,32,32,32,32,91,93,46,10,10,103,98,95,110,111,100,101,
                115,40,84,44,32,105,110,102,105,110,105,116,121,44,32,69,108,
                101,109,101,110,116,70,117,110,41,32,45,62,10,32,32,32,32,103,
                98,95,110,111,100,101,115,40,84,44,32,45,49,44,32,69,108,101,
                109,101,110,116,70,117,110,41,59,10,103,98,95,110,111,100,101,
                115,40,84,44,32,78,69,108,101,109,101,110,116,115,44,32,69,
                108,101,109,101,110,116,70,117,110,41,32,45,62,10,32,32,32,32,
                103,98,95,105,116,101,114,40,103,98,95,116,114,101,101,115,58,
                105,116,101,114,97,116,111,114,40,84,41,44,32,78,69,108,101,
                109,101,110,116,115,44,32,69,108,101,109,101,110,116,70,117,
                110,41,46,10,10,103,98,95,105,116,101,114,40,95,73,44,32,48,
                44,32,95,69,70,117,110,41,32,45,62,10,32,32,32,32,39,46,46,46,
                39,59,10,103,98,95,105,116,101,114,40,73,48,44,32,78,44,32,69,
                70,117,110,41,32,45,62,10,32,32,32,32,99,97,115,101,32,103,98,
                95,116,114,101,101,115,58,110,101,120,116,40,73,48,41,32,111,
                102,10,32,32,32,32,32,32,32,32,123,88,44,32,86,44,32,73,125,
                32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,91,69,70,117,
                110,40,123,88,44,86,125,41,32,124,32,103,98,95,105,116,101,
                114,40,73,44,32,78,45,49,44,32,69,70,117,110,41,93,59,10,32,
                32,32,32,32,32,32,32,110,111,110,101,32,45,62,10,32,32,32,32,
                32,32,32,32,32,32,32,32,91,93,10,32,32,32,32,101,110,100,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,[4,42,84,70,42]},
              {sep,
               [{text,
                 [30,105,115,32,116,104,101,32,116,114,97,118,101,114,115,97,
                  108,32,102,117,110,99,116,105,111,110,46,32,84,104,101]}],
               0,false},
              {text,[5,42,113,108,99,42]},
              {sep,
               [{text,
                 "Tmodule requires that there is a way of traversing all objects of the data structure."}],
               0,false},
              {text,"\n*gb_trees*"},
              {sep,
               [{text,
                 [152,104,97,115,32,97,110,32,105,116,101,114,97,116,111,114,
                  32,102,117,110,99,116,105,111,110,32,115,117,105,116,97,98,
                  108,101,32,102,111,114,32,116,104,97,116,32,112,117,114,112,
                  111,115,101,46,32,78,111,116,105,99,101,32,116,104,97,116,
                  32,102,111,114,32,101,97,99,104,32,111,98,106,101,99,116,32,
                  114,101,116,117,114,110,101,100,44,32,97,32,110,101,119,32,
                  102,117,110,32,105,115,32,99,114,101,97,116,101,100,46,32,
                  65,115,32,108,111,110,103,32,97,115,32,116,104,101,32,108,
                  105,115,116,32,105,115,32,110,111,116,32,116,101,114,109,
                  105,110,97,116,101,100,32,98,121]}],
               0,false},
              {text,[4,42,91,93,42]},
              {sep,
               [{text,
                 [134,44,32,105,116,32,105,115,32,97,115,115,117,109,101,100,
                  32,116,104,97,116,32,116,104,101,32,116,97,105,108,32,111,
                  102,32,116,104,101,32,108,105,115,116,32,105,115,32,97,32,
                  110,117,108,108,97,114,121,32,102,117,110,99,116,105,111,
                  110,32,97,110,100,32,116,104,97,116,32,99,97,108,108,105,
                  110,103,32,116,104,101,32,102,117,110,99,116,105,111,110,32,
                  114,101,116,117,114,110,115,32,102,117,114,116,104,101,114,
                  32,111,98,106,101,99,116,115,32,40,97,110,100,32,102,117,
                  110,99,116,105,111,110,115,41,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "ÃThe lookup function is optional. It is assumed that the lookup function always finds values much faster than it would take to traverse the table. The first argument is the position of the key. As"}],
               0,false},
              {text,"\f*qlc_next/1*"},
              {sep,
               [{text,
                 [22,114,101,116,117,114,110,115,32,116,104,101,32,111,98,106,
                  101,99,116,115,32,97,115]}],
               0,false},
              {text,
               [15,42,123,75,101,121,44,194,160,86,97,108,117,101,125,42]},
              {sep,
               [{text,
                 "Fpairs, the position is 1. Notice that the lookup function is to return"}],
               0,false},
              {text,
               [15,42,123,75,101,121,44,194,160,86,97,108,117,101,125,42]},
              {sep,
               [{text,"&pairs, as the traversal function does."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "5The format function is also optional. It is called by"}],
               0,false},
              {text,
               [17,91,105,110,102,111,47,49,93,40,35,105,110,102,111,47,49,
                41]},
              {sep,
               [{text,
                 "ðto give feedback at runtime of how the query is to be evaluated. Try to give as good feedback as possible without showing too much details. In the example, at most seven objects of the table are shown. The format function handles two cases:"}],
               0,false},
              {text,[5,42,97,108,108,42]},
              {sep,
               [{text,"2means that all objects of the table are traversed;"}],
               0,false},
              {text,
               [26,42,123,108,111,111,107,117,112,44,194,160,49,44,194,160,75,
                101,121,86,97,108,117,101,115,125,42]},
              {sep,
               [{text,
                 "Ameans that the lookup function is used for looking up key values."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [129,87,104,101,116,104,101,114,32,116,104,101,32,119,104,111,
                108,101,32,116,97,98,108,101,32,105,115,32,116,114,97,118,101,
                114,115,101,100,32,111,114,32,111,110,108,121,32,115,111,109,
                101,32,107,101,121,115,32,108,111,111,107,101,100,32,117,112,
                32,100,101,112,101,110,100,115,32,111,110,32,104,111,119,32,
                116,104,101,32,113,117,101,114,121,32,105,115,32,101,120,112,
                114,101,115,115,101,100,46,32,73,102,32,116,104,101,32,113,
                117,101,114,121,32,104,97,115,32,116,104,101,32,102,111,114,
                109]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [25,10,113,108,99,58,113,40,91,84,32,124,124,32,80,32,60,45,32,
                76,69,44,32,70,93,41]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,97,110,100]}],0,false},
              {text,[3,42,80,42]},
              {sep,
               [{text,
                 [15,105,115,32,97,32,116,117,112,108,101,44,32,116,104,101]}],
               0,false},
              {text,[5,42,113,108,99,42]},
              {sep,
               [{text,
                 [15,109,111,100,117,108,101,32,97,110,97,108,121,122,101,
                  115]}],
               0,false},
              {text,[3,42,80,42]},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,[3,42,70,42]},
              {sep,
               [{text,"*in compile time to find positions of tuple"}],
               0,false},
              {text,[3,42,80,42]},
              {sep,
               [{text,
                 "Óthat are tested for equality to constants. If such a position at runtime turns out to be the key position, the lookup function can be used, otherwise all objects of the table must be traversed. The info function"}],
               0,false},
              {text,"\t*InfoFun*"},
              {sep,
               [{text,
                 "ýreturns the key position. There can be indexed positions as well, also returned by the info function. An index is an extra table that makes lookup on some position fast. Mnesia maintains indexes upon request, and introduces so called secondary keys. The"}],
               0,false},
              {text,[5,42,113,108,99,42]},
              {sep,
               [{text,
                 "wmodule prefers to look up objects using the key before secondary keys regardless of the number of constants to look up."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[15,35,35,32,75,101,121,32,69,113,117,97,108,105,116,121]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "7Erlang/OTP has two operators for testing term equality:"}],
              0,false},
             {text,[6,42,61,61,47,50,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[7,42,61,58,61,47,50,42]},
             {sep,
              [{text,
                "Z. The difference is all about the integers that can be represented by floats. For example,"}],
              0,false},
             {text,"\n*2 == 2.0*"},
             {sep,[{text,"\fevaluates to"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[5,119,104,105,108,101]}],0,false},
             {text,"\v*2 =:= 2.0*"},
             {sep,[{text,"\fevaluates to"}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,"). Normally this is a minor issue, but the"}],
              0,false},
             {text,[5,42,113,108,99,42]},
             {sep,
              [{text,
                "Zmodule cannot ignore the difference, which affects the user's choice of operators in QLCs."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[6,73,102,32,116,104,101]}],0,false},
             {text,[5,42,113,108,99,42]},
             {sep,
              [{text,
                "lmodule at compile time can determine that some constant is free of integers, it does not matter which one of"}],
              0,false},
             {text,[6,42,61,61,47,50,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,[7,42,61,58,61,47,50,42]},
             {sep,[{text,"\bis used:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,"5E1 = ets:new(t, [set]), % uses =:=/2 for key equality"},
             {text,[1,10]},
             {text,[16,81,49,32,61,32,113,108,99,58,113,40,91,75,32,124,124]},
             {text,[1,10]},
             {text,
              [21,123,75,125,32,60,45,32,101,116,115,58,116,97,98,108,101,40,
               69,49,41,44]},
             {text,[1,10]},
             {text,
              [26,75,32,61,61,32,50,46,55,49,32,111,114,101,108,115,101,32,75,
               32,61,61,32,97,93,41,44]},
             {text,[1,10]},
             {text,"\"io:format(\"~s~n\", [qlc:info(Q1)])."},
             {text,
              "[\nets:match_spec_run(\n       lists:flatmap(fun(V) ->\n\t\t\t    ets:lookup(#Ref"},
             {text,
              "·<0.3098908599.2283929601.256025>,\n\t\t\t\t       V)\n\t\t     end,\n\t\t     [a, 2.71]),\n       ets:match_spec_compile([{{'$1'}, [], ['$1']}]))"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [24,73,110,32,116,104,101,32,101,120,97,109,112,108,101,44,32,
                 111,112,101,114,97,116,111,114]}],
              0,false},
             {text,[6,42,61,61,47,50,42]},
             {sep,[{text,"\ehas been handled exactly as"}],0,false},
             {text,[7,42,61,58,61,47,50,42]},
             {sep,
              [{text,
                [135,119,111,117,108,100,32,104,97,118,101,32,98,101,101,110,
                 32,104,97,110,100,108,101,100,46,32,72,111,119,101,118,101,
                 114,44,32,105,102,32,105,116,32,99,97,110,110,111,116,32,98,
                 101,32,100,101,116,101,114,109,105,110,101,100,32,97,116,32,
                 99,111,109,112,105,108,101,32,116,105,109,101,32,116,104,97,
                 116,32,115,111,109,101,32,99,111,110,115,116,97,110,116,32,
                 105,115,32,102,114,101,101,32,111,102,32,105,110,116,101,103,
                 101,114,115,44,32,97,110,100,32,116,104,101,32,116,97,98,108,
                 101,32,117,115,101,115]}],
              0,false},
             {text,[7,42,61,58,61,47,50,42]},
             {sep,
              [{text,",when comparing keys for equality (see option"}],
              0,false},
             {text,
              [29,91,107,101,121,95,101,113,117,97,108,105,116,121,93,40,35,
               107,101,121,95,101,113,117,97,108,105,116,121,41]},
             {sep,[{text,"\v), then the"}],0,false},
             {text,[5,42,113,108,99,42]},
             {sep,
              [{text,
                "îmodule does not try to look up the constant. The reason is that there is in the general case no upper limit on the number of key values that can compare equal to such a constant; every combination of integers and floats must be looked up:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,50,62,32]},
             {text,
              [23,69,50,32,61,32,101,116,115,58,110,101,119,40,116,44,32,91,
               115,101,116,93,41,44]},
             {text,[1,10]},
             {text,
              ";true = ets:insert(E2, [{{2,2},a},{{2,2.0},b},{{2.0,2},c}]),"},
             {text,[1,10]},
             {text,[14,70,50,32,61,32,102,117,110,40,73,41,32,45,62]},
             {text,[1,10]},
             {text,",qlc:q([V || {K,V} <- ets:table(E2), K == I])"},
             {text,[1,10]},
             {text,[4,101,110,100,44]},
             {text,[1,10]},
             {text,[15,81,50,32,61,32,70,50,40,123,50,44,50,125,41,44]},
             {text,[1,10]},
             {text,"\"io:format(\"~s~n\", [qlc:info(Q2)])."},
             {text,[15,10,101,116,115,58,116,97,98,108,101,40,35,82,101,102]},
             {text,
              [155,60,48,46,51,48,57,56,57,48,56,53,57,57,46,50,50,56,51,57,
               50,57,54,48,49,46,50,53,54,49,50,53,62,44,10,32,32,32,32,32,32,
               32,32,32,32,91,123,116,114,97,118,101,114,115,101,44,10,32,32,
               32,32,32,32,32,32,32,32,32,32,123,115,101,108,101,99,116,44,10,
               32,32,32,32,32,32,32,32,32,32,32,32,32,91,123,123,39,36,49,39,
               44,32,39,36,50,39,125,44,32,91,123,39,61,61,39,44,32,39,36,49,
               39,44,32,123,99,111,110,115,116,44,32,123,50,44,32,50,125,125,
               125,93,44,32,91,39,36,50,39,93,125,93,125,125,93,41,10,51,62,
               32]},
             {text,
              [22,108,105,115,116,115,58,115,111,114,116,40,113,108,99,58,101,
               40,81,50,41,41,46]},
             {text,"\b\n[a,b,c]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [15,76,111,111,107,105,110,103,32,117,112,32,111,110,108,
                 121]}],
              0,false},
             {text,[7,42,123,50,44,50,125,42]},
             {sep,
              [{text,
                [16,119,111,117,108,100,32,110,111,116,32,114,101,116,117,114,
                 110]}],
              0,false},
             {text,[3,42,98,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[3,42,99,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [17,73,102,32,116,104,101,32,116,97,98,108,101,32,117,115,101,
                 115]}],
              0,false},
             {text,[6,42,61,61,47,50,42]},
             {sep,[{text,"%when comparing keys for equality, the"}],0,false},
             {text,[5,42,113,108,99,42]},
             {sep,
              [{text,
                "Vmodule looks up the constant regardless of which operator is used in the QLC. However,"}],
              0,false},
             {text,[6,42,61,61,47,50,42]},
             {sep,
              [{text,
                [19,105,115,32,116,111,32,98,101,32,112,114,101,102,101,114,
                 114,101,100,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,52,62,32]},
             {text,
              "<E3 = ets:new(t, [ordered_set]), % uses ==/2 for key equality"},
             {text,[1,10]},
             {text,"%true = ets:insert(E3, [{{2,2.0},b}]),"},
             {text,[1,10]},
             {text,[14,70,51,32,61,32,102,117,110,40,73,41,32,45,62]},
             {text,[1,10]},
             {text,",qlc:q([V || {K,V} <- ets:table(E3), K == I])"},
             {text,[1,10]},
             {text,[4,101,110,100,44]},
             {text,[1,10]},
             {text,[15,81,51,32,61,32,70,51,40,123,50,44,50,125,41,44]},
             {text,[1,10]},
             {text,"\"io:format(\"~s~n\", [qlc:info(Q3)])."},
             {text,"#\nets:match_spec_run(ets:lookup(#Ref"},
             {text,
              [149,60,48,46,51,48,57,56,57,48,56,53,57,57,46,50,50,56,51,57,
               50,57,54,48,49,46,50,53,54,50,49,49,62,44,10,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,123,50,44,32,50,125,41,44,10,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,101,116,115,58,109,97,116,99,
               104,95,115,112,101,99,95,99,111,109,112,105,108,101,40,91,123,
               123,39,36,49,39,44,32,39,36,50,39,125,44,32,91,93,44,32,91,39,
               36,50,39,93,125,93,41,41,10,53,62,32]},
             {text,"\nqlc:e(Q3)."},
             {text,[4,10,91,98,93]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "]Lookup join is handled analogously to lookup of constants in a table: if the join operator is"}],
              0,false},
             {text,[6,42,61,61,47,50,42]},
             {sep,
              [{text,
                "8, and the table where constants are to be looked up uses"}],
              0,false},
             {text,[7,42,61,58,61,47,50,42]},
             {sep,
              [{text,"(when testing keys for equality, then the"}],
              0,false},
             {text,[5,42,113,108,99,42]},
             {sep,
              [{text,"4module does not consider lookup join for that table."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f# Data Types"},null},null}},
     {sep,
      [{sep,[{text,"\rabstract_expr"}],0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,".Parse trees for Erlang expression, see section"}],
                 0,false},
                {text," [The Abstract Format](./absform)"},
                {sep,
                 [{text,
                   [25,105,110,32,116,104,101,32,69,82,84,83,32,85,115,101,
                    114,39,115,32,71,117,105,100,101,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,[{sep,[{text,[6,97,110,115,119,101,114]}],0,false}],0,false},
     {sep,[{sep,[{text,[7,97,110,115,119,101,114,115]}],0,false}],0,false},
     {sep,[{sep,[{text,[5,99,97,99,104,101]}],0,false}],0,false},
     {sep,
      [{sep,
        [{text,
          [16,109,97,116,99,104,95,101,120,112,114,101,115,115,105,111,110]}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"!MatchÂ specification, see section"}],0,false},
                {text,".[Match Specifications in Erlang](./match_spec)"},
                {sep,
                 [{text,
                   [28,105,110,32,116,104,101,32,69,82,84,83,32,85,115,101,
                    114,39,115,32,71,117,105,100,101,32,97,110,100]}],
                 0,false},
                {text,
                 [28,91,109,115,95,116,114,97,110,115,102,111,114,109,93,40,
                  109,115,95,116,114,97,110,115,102,111,114,109,41]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,
      [{sep,[{text,"\bno_files"}],0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [15,65,110,32,105,110,116,101,103,101,114,32,62,32,49,46]}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,[{sep,[{text,[7,107,101,121,95,112,111,115]}],0,false}],0,false},
     {sep,[{sep,[{text,"\rmax_list_size"}],0,false}],0,false},
     {sep,[{sep,[{text,[5,111,114,100,101,114]}],0,false}],0,false},
     {sep,[{sep,[{text,"\torder_fun"}],0,false}],0,false},
     {sep,
      [{sep,[{text,"\fquery_cursor"}],0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[1,65]}],0,false},
                {text,
                 [29,91,113,117,101,114,121,32,99,117,114,115,111,114,93,40,
                  35,113,117,101,114,121,95,99,117,114,115,111,114,41]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,
      [{sep,[{text,"\fquery_handle"}],0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[1,65]}],0,false},
                {text,
                 [29,91,113,117,101,114,121,32,104,97,110,100,108,101,93,40,
                  35,113,117,101,114,121,95,104,97,110,100,108,101,41]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,
      [{sep,
        [{text,
          [20,113,117,101,114,121,95,104,97,110,100,108,101,95,111,114,95,108,
           105,115,116]}],
        0,false}],
      0,false},
     {sep,
      [{sep,
        [{text,
          [24,113,117,101,114,121,95,108,105,115,116,95,99,111,109,112,114,
           101,104,101,110,115,105,111,110]}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\tA literal"}],0,false},
                {text,
                 "5[query list comprehension](#query_list_comprehension)"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,[{sep,[{text,"\rspawn_options"}],0,false}],0,false},
     {sep,[{sep,[{text,"\fsort_options"}],0,false}],0,false},
     {sep,
      [{sep,[{text,"\vsort_option"}],0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[3,83,101,101]}],0,false},
                {text,
                 [26,91,102,105,108,101,95,115,111,114,116,101,114,93,40,102,
                  105,108,101,95,115,111,114,116,101,114,41]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,[{sep,[{text,"\rtmp_directory"}],0,false}],0,false},
     {sep,
      [{sep,
        [{text,[14,116,109,112,95,102,105,108,101,95,117,115,97,103,101]}],
        0,false}],
      0,false}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v## append/1"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,82,101,116,117,114,110,32,97,32,113,117,101,114,121,32,104,97,
             110,100,108,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"4Returns a query handle. When evaluating query handle"}],
              0,false},
             {text,[4,42,81,72,42]},
             {sep,
              [{text,"*, all answers to the first query handle in"}],
              0,false},
             {text,[5,42,81,72,76,42]},
             {sep,
              [{text,
                "Gare returned, followed by all answers to the remaining query handles in"}],
              0,false},
             {text,[5,42,81,72,76,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v## append/2"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,82,101,116,117,114,110,32,97,32,113,117,101,114,121,32,104,97,
             110,100,108,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"4Returns a query handle. When evaluating query handle"}],
              0,false},
             {text,[5,42,81,72,51,42]},
             {sep,
              [{text,
                [16,44,32,97,108,108,32,97,110,115,119,101,114,115,32,116,
                 111]}],
              0,false},
             {text,[5,42,81,72,49,42]},
             {sep,
              [{text,"(are returned, followed by all answers to"}],
              0,false},
             {text,[5,42,81,72,50,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [19,42,97,112,112,101,110,100,40,81,72,49,44,194,160,81,72,50,
               41,42]},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {text,
              [21,42,97,112,112,101,110,100,40,91,81,72,49,44,194,160,81,72,
               50,93,41,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v## cursor/1"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v## cursor/2"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,67,114,101,97,116,101,32,97,32,113,117,101,114,121,32,99,117,
             114,115,111,114,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "uCreates a query cursor and makes the calling process the owner of the cursor. The cursor is to be used as argument to"}],
              0,false},
             {text,"![next_answers/1](#next_answers/1)"},
             {sep,
              [{text,
                [16,97,110,100,32,40,101,118,101,110,116,117,97,108,108,121,
                 41]}],
              0,false},
             {text,"#[delete_cursor/1](#delete_cursor/1)"},
             {sep,[{text,[7,46,32,67,97,108,108,115]}],0,false},
             {text,"5[erts/erlang#spawn_opt/2](../erts/erlang#spawn_opt/2)"},
             {sep,
              [{text,
                "Sto spawn and link to a process that evaluates the query handle. The value of option"}],
              0,false},
             {text,
              [15,42,115,112,97,119,110,95,111,112,116,105,111,110,115,42]},
             {sep,[{text,"%is used as last argument when calling"}],0,false},
             {text,"\r*spawn_opt/2*"},
             {sep,[{text,"\r. Defaults to"}],0,false},
             {text,"\b*[link]*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,".QH = qlc:q([{X,Y} || X <- [a,b], Y <- [1,2]]),"},
             {text,[1,10]},
             {text,
              [20,81,67,32,61,32,113,108,99,58,99,117,114,115,111,114,40,81,
               72,41,44]},
             {text,[1,10]},
             {text,
              [24,113,108,99,58,110,101,120,116,95,97,110,115,119,101,114,115,
               40,81,67,44,32,49,41,46]},
             {text,"\f\n[{a,1}]\n2> "},
             {text,
              [24,113,108,99,58,110,101,120,116,95,97,110,115,119,101,114,115,
               40,81,67,44,32,49,41,46]},
             {text,"\f\n[{a,2}]\n3> "},
             {text,"$qlc:next_answers(QC, all_remaining)."},
             {text,
              [18,10,91,123,98,44,49,125,44,123,98,44,50,125,93,10,52,62,32]},
             {text,
              [22,113,108,99,58,100,101,108,101,116,101,95,99,117,114,115,111,
               114,40,81,67,41,46]},
             {text,[3,10,111,107]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[7,99,117,114,115,111,114,40]}],0,false},
                 {sep,[{text,[2,81,72]}],0,false},
                 {sep,[{text,[1,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[7,99,117,114,115,111,114,40]}],0,false},
                 {sep,[{text,[2,81,72]}],0,false},
                 {sep,[{text,[5,44,32,91,93,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [18,35,35,32,100,101,108,101,116,101,95,99,117,114,115,111,114,47,49]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,68,101,108,101,116,101,32,97,32,113,117,101,114,121,32,99,117,
             114,115,111,114,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "KDeletes a query cursor. Only the owner of the cursor can delete the cursor."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,[6,35,35,32,101,47,49]},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,[6,35,35,32,101,47,50]},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\t## eval/1"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\t## eval/2"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [30,82,101,116,117,114,110,32,97,108,108,32,97,110,115,119,101,
             114,115,32,116,111,32,97,32,113,117,101,114,121,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "SEvaluates a query handle in the calling process and collects all answers in a list."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,".QH = qlc:q([{X,Y} || X <- [a,b], Y <- [1,2]]),"},
             {text,[1,10]},
             {text,"\rqlc:eval(QH)."},
             {text,
              [26,10,91,123,97,44,49,125,44,123,97,44,50,125,44,123,98,44,49,
               125,44,123,98,44,50,125,93]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[5,101,118,97,108,40]}],0,false},
                 {sep,[{text,[2,81,72]}],0,false},
                 {sep,[{text,[1,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[5,101,118,97,108,40]}],0,false},
                 {sep,[{text,[2,81,72]}],0,false},
                 {sep,[{text,[5,44,32,91,93,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\t## fold/3"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\t## fold/4"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Fold a function over the answers to a query."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[5,67,97,108,108,115]}],0,false},
             {text,"\n*Function*"},
             {sep,
              [{text,
                "Ion successive answers to the query handle together with an extra argument"}],
              0,false},
             {text,[7,42,65,99,99,73,110,42]},
             {sep,
              [{text,
                "I. The query handle and the function are evaluated in the calling process."}],
              0,false},
             {text,"\n*Function*"},
             {sep,
              [{text,
                "@must return a new accumulator, which is passed to the next call."}],
              0,false},
             {text,[6,42,65,99,99,48,42]},
             {sep,
              [{text,
                "8is returned if there are no answers to the query handle."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,
              [19,81,72,32,61,32,91,49,44,50,44,51,44,52,44,53,44,54,93,44]},
             {text,[1,10]},
             {text,",qlc:fold(fun(X, Sum) -> X + Sum end, 0, QH)."},
             {text,[3,10,50,49]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[5,102,111,108,100,40]}],0,false},
                 {sep,[{text,"\bFunction"}],0,false},
                 {sep,[{text,[1,44]}],0,false},
                 {sep,[{text,[4,65,99,99,48]}],0,false},
                 {sep,[{text,[1,44]}],0,false},
                 {sep,[{text,[2,81,72]}],0,false},
                 {sep,[{text,[1,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[5,102,111,108,100,40]}],0,false},
                 {sep,[{text,"\bFunction"}],0,false},
                 {sep,[{text,[1,44]}],0,false},
                 {sep,[{text,[4,65,99,99,48]}],0,false},
                 {sep,[{text,[1,44]}],0,false},
                 {sep,[{text,[2,81,72]}],0,false},
                 {sep,[{text,[5,44,32,91,93,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [17,35,35,32,102,111,114,109,97,116,95,101,114,114,111,114,47,49]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"2Return an English description of a an error tuple."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "bReturns a descriptive string in English of an error tuple returned by some of the functions of the"}],
              0,false},
             {text,[5,42,113,108,99,42]},
             {sep,
              [{text,
                "imodule or the parse transform. This function is mainly used by the compiler invoking the parse transform."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\t## info/1"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\t## info/2"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"&Return code describing a query handle."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ßReturns information about a query handle. The information describes the simplifications and optimizations that are the results of preparing the query for evaluation. This function is probably mainly useful during debugging."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÌThe information has the form of an Erlang expression where QLCs most likely occur. Depending on the format functions of mentioned QLC tables, it is not certain that the information is absolutely accurate."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\bOptions:"}],0,false}],0,true},null},
        null}},
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,
              [{text,
                "EThe default is to return a sequence of QLCs in a block, but if option"}],
              0,false},
             {text,
              [16,42,123,102,108,97,116,44,194,160,102,97,108,115,101,125,42]},
             {sep,
              [{text,")is specified, one single QLC is returned."}],
              0,false}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,
              [{text,"0The default is to return a string, but if option"}],
              0,false},
             {text,
              [26,42,123,102,111,114,109,97,116,44,194,160,97,98,115,116,114,
               97,99,116,95,99,111,100,101,125,42]},
             {sep,
              [{text,
                [137,105,115,32,115,112,101,99,105,102,105,101,100,44,32,97,
                 98,115,116,114,97,99,116,32,99,111,100,101,32,105,115,32,114,
                 101,116,117,114,110,101,100,32,105,110,115,116,101,97,100,46,
                 32,73,110,32,116,104,101,32,97,98,115,116,114,97,99,116,32,
                 99,111,100,101,44,32,112,111,114,116,32,105,100,101,110,116,
                 105,102,105,101,114,115,44,32,114,101,102,101,114,101,110,99,
                 101,115,44,32,97,110,100,32,112,105,100,115,32,97,114,101,32,
                 114,101,112,114,101,115,101,110,116,101,100,32,98,121,32,115,
                 116,114,105,110,103,115,46]}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{text,
               "=The default is to return all elements in lists, but if option"}],
             0,false},
            {text,
             [26,42,123,110,95,101,108,101,109,101,110,116,115,44,194,160,78,
              69,108,101,109,101,110,116,115,125,42]},
            {sep,
             [{text,
               "=is specified, only a limited number of elements are returned."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,
            [{text,
              "SThe default is to show all parts of objects and match specifications, but if option"}],
            0,false},
           {text,
            [17,42,123,100,101,112,116,104,44,194,160,68,101,112,116,104,125,
             42]},
           {sep,
            [{text,
              "Bis specified, parts of terms below a certain depth are replaced by"}],
            0,false},
           {text,[7,42,39,46,46,46,39,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[5,105,110,102,111,40]}],0,false},
                 {sep,[{text,[2,81,72]}],0,false},
                 {sep,[{text,[1,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[5,105,110,102,111,40]}],0,false},
                 {sep,[{text,[2,81,72]}],0,false},
                 {sep,[{text,[5,44,32,91,93,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\r**Examples:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "IIn the following example two simple QLCs are inserted only to hold option"}],
              0,false},
             {text,
              [17,42,123,117,110,105,113,117,101,44,194,160,116,114,117,101,
               125,42]},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,".QH = qlc:q([{X,Y} || X <- [x,y], Y <- [a,b]]),"},
             {text,[1,10]},
             {text,".io:format(\"~s~n\", [qlc:info(QH, unique_all)])."},
             {text,
              "M\nbegin\n    V1 =\n        qlc:q([\n               SQV ||\n                   SQV "},
             {text,
              [130,60,45,32,91,120,44,32,121,93,10,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,93,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,91,123,117,110,105,113,117,101,44,32,116,114,117,101,125,93,
               41,44,10,32,32,32,32,86,50,32,61,10,32,32,32,32,32,32,32,32,
               113,108,99,58,113,40,91,10,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,83,81,86,32,124,124,10,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,83,81,86,32]},
             {text,
              "m<- [a, b]\n              ],\n              [{unique, true}]),\n    qlc:q([\n           {X,Y} ||\n               X "},
             {text,
              [24,60,45,32,86,49,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,89,32]},
             {text,"2<- V2\n          ],\n          [{unique, true}])\nend"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [28,73,110,32,116,104,101,32,102,111,108,108,111,119,105,110,
                 103,32,101,120,97,109,112,108,101,32,81,76,67]}],
              0,false},
             {text,[4,42,86,50,42]},
             {sep,
              [{text,
                [135,104,97,115,32,98,101,101,110,32,105,110,115,101,114,116,
                 101,100,32,116,111,32,115,104,111,119,32,116,104,101,32,106,
                 111,105,110,101,100,32,103,101,110,101,114,97,116,111,114,
                 115,32,97,110,100,32,116,104,101,32,106,111,105,110,32,109,
                 101,116,104,111,100,32,99,104,111,115,101,110,46,32,65,32,99,
                 111,110,118,101,110,116,105,111,110,32,105,115,32,117,115,
                 101,100,32,102,111,114,32,108,111,111,107,117,112,32,106,111,
                 105,110,58,32,116,104,101,32,102,105,114,115,116,32,103,101,
                 110,101,114,97,116,111,114,32,40]}],
              0,false},
             {text,[4,42,71,50,42]},
             {sep,[{text,"$) is the one traversed, the second ("}],0,false},
             {text,[4,42,71,49,42]},
             {sep,
              [{text,"-) is the table where constants are looked up."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,
              [21,69,49,32,61,32,101,116,115,58,110,101,119,40,101,49,44,32,
               91,93,41,44]},
             {text,[1,10]},
             {text,
              [21,69,50,32,61,32,101,116,115,58,110,101,119,40,101,50,44,32,
               91,93,41,44]},
             {text,[1,10]},
             {text,"%true = ets:insert(E1, [{1,a},{2,b}]),"},
             {text,[1,10]},
             {text,"%true = ets:insert(E2, [{a,1},{b,2}]),"},
             {text,[1,10]},
             {text,
              [21,81,32,61,32,113,108,99,58,113,40,91,123,88,44,90,44,87,125,
               32,124,124]},
             {text,[1,10]},
             {text,
              [24,123,88,44,32,90,125,32,60,45,32,101,116,115,58,116,97,98,
               108,101,40,69,49,41,44]},
             {text,[1,10]},
             {text,
              [24,123,87,44,32,89,125,32,60,45,32,101,116,115,58,116,97,98,
               108,101,40,69,50,41,44]},
             {text,[1,10]},
             {text,"\nX =:= Y]),"},
             {text,[1,10]},
             {text,"!io:format(\"~s~n\", [qlc:info(Q)])."},
             {text,
              "T\nbegin\n    V1 =\n        qlc:q([\n               P0 ||\n                   P0 = {W, Y} "},
             {text,"(<-\n                       ets:table(#Ref"},
             {text,
              [127,60,48,46,51,48,57,56,57,48,56,53,57,57,46,50,50,56,51,57,
               50,57,54,48,49,46,50,53,54,53,52,57,62,41,10,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,93,41,44,10,32,32,32,32,86,50,32,61,10,
               32,32,32,32,32,32,32,32,113,108,99,58,113,40,91,10,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,91,71,49,32,124,32,71,50,93,
               32,124,124,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,71,50,32]},
             {text,
              [29,60,45,32,86,49,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,71,49,32]},
             {text,"(<-\n                       ets:table(#Ref"},
             {text,
              "Ï<0.3098908599.2283929601.256548>),\n                   element(2, G1) =:= element(1, G2)\n              ],\n              [{join, lookup}]),\n    qlc:q([\n           {X, Z, W} ||\n               [{X, Z} | {W, Y}] "},
             {text,
              [22,60,45,32,86,50,10,32,32,32,32,32,32,32,32,32,32,93,41,10,
               101,110,100]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f## keysort/2"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f## keysort/3"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,82,101,116,117,114,110,32,97,32,113,117,101,114,121,32,104,97,
             110,100,108,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"4Returns a query handle. When evaluating query handle"}],
              0,false},
             {text,[5,42,81,72,50,42]},
             {sep,
              [{text,
                [29,44,32,116,104,101,32,97,110,115,119,101,114,115,32,116,
                 111,32,113,117,101,114,121,32,104,97,110,100,108,101]}],
              0,false},
             {text,[5,42,81,72,49,42]},
             {sep,[{text,"\rare sorted by"}],0,false},
             {text,"0[file_sorter#keysort/4](./file_sorter#keysort/4)"},
             {sep,
              [{text,
                [25,97,99,99,111,114,100,105,110,103,32,116,111,32,116,104,
                 101,32,111,112,116,105,111,110,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"'The sorter uses temporary files only if"}],0,false},
             {text,[5,42,81,72,49,42]},
             {sep,
              [{text,
                "\\does not evaluate to a list and the size of the binary representation of the answers exceeds"}],
              0,false},
             {text,[6,42,83,105,122,101,42]},
             {sep,[{text,"\fbytes, where"}],0,false},
             {text,[6,42,83,105,122,101,42]},
             {sep,
              [{text,
                [22,105,115,32,116,104,101,32,118,97,108,117,101,32,111,102,
                 32,111,112,116,105,111,110]}],
              0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,"\bkeysort("}],0,false},
                 {sep,[{text,[6,75,101,121,80,111,115]}],0,false},
                 {sep,[{text,[1,44]}],0,false},
                 {sep,[{text,[3,81,72,49]}],0,false},
                 {sep,[{text,[1,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,"\bkeysort("}],0,false},
                 {sep,[{text,[6,75,101,121,80,111,115]}],0,false},
                 {sep,[{text,[1,44]}],0,false},
                 {sep,[{text,[3,81,72,49]}],0,false},
                 {sep,[{text,[5,44,32,91,93,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [17,35,35,32,110,101,120,116,95,97,110,115,119,101,114,115,47,49]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [17,35,35,32,110,101,120,116,95,97,110,115,119,101,114,115,47,50]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"&Return some or all answers to a query."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "QReturns some or all of the remaining answers to a query cursor. Only the owner of"}],
              0,false},
             {text,"\r*QueryCursor*"},
             {sep,
              [{text,
                [21,99,97,110,32,114,101,116,114,105,101,118,101,32,97,110,
                 115,119,101,114,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [17,79,112,116,105,111,110,97,108,32,97,114,103,117,109,101,
                 110,116]}],
              0,false},
             {text,
              [17,42,78,117,109,98,101,114,79,102,65,110,115,119,101,114,115,
               42]},
             {sep,
              [{text,
                ">determines the maximum number of answers returned. Defaults to"}],
              0,false},
             {text,[4,42,49,48,42]},
             {sep,
              [{text,
                "O. If less than the requested number of answers is returned, subsequent calls to"}],
              0,false},
             {text,[14,42,110,101,120,116,95,97,110,115,119,101,114,115,42]},
             {sep,[{text,[6,114,101,116,117,114,110]}],0,false},
             {text,[4,42,91,93,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,[6,35,35,32,113,47,49]},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,[6,35,35,32,113,47,50]},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"/Return a handle for a query list comprehension."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÖReturns a query handle for a QLC. The QLC must be the first argument to this function, otherwise it is evaluated as an ordinary list comprehension. It is also necessary to add the following line to the source code:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,"(\n-include_lib(\"stdlib/include/qlc.hrl\")."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [127,84,104,105,115,32,99,97,117,115,101,115,32,97,32,112,97,
               114,115,101,32,116,114,97,110,115,102,111,114,109,32,116,111,
               32,115,117,98,115,116,105,116,117,116,101,32,97,32,102,117,110,
               32,102,111,114,32,116,104,101,32,81,76,67,46,32,84,104,101,32,
               40,99,111,109,112,105,108,101,100,41,32,102,117,110,32,105,115,
               32,99,97,108,108,101,100,32,119,104,101,110,32,116,104,101,32,
               113,117,101,114,121,32,104,97,110,100,108,101,32,105,115,32,
               101,118,97,108,117,97,116,101,100,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\fWhen calling"}],0,false},
             {text,"\v*qlc:q/1,2*"},
             {sep,
              [{text,
                [153,102,114,111,109,32,116,104,101,32,69,114,108,97,110,103,
                 32,115,104,101,108,108,44,32,116,104,101,32,112,97,114,115,
                 101,32,116,114,97,110,115,102,111,114,109,32,105,115,32,97,
                 117,116,111,109,97,116,105,99,97,108,108,121,32,99,97,108,
                 108,101,100,46,32,87,104,101,110,32,116,104,105,115,32,111,
                 99,99,117,114,115,44,32,116,104,101,32,102,117,110,32,115,
                 117,98,115,116,105,116,117,116,101,100,32,102,111,114,32,116,
                 104,101,32,81,76,67,32,105,115,32,110,111,116,32,99,111,109,
                 112,105,108,101,100,32,98,117,116,32,105,115,32,101,118,97,
                 108,117,97,116,101,100,32,98,121]}],
              0,false},
             {text,
              [20,91,101,114,108,95,101,118,97,108,93,40,101,114,108,95,101,
               118,97,108,41]},
             {sep,
              [{text,
                "5. This is also true when expressions are evaluated by"}],
              0,false},
             {text,[15,42,102,105,108,101,58,101,118,97,108,47,49,44,50,42]},
             {sep,
              [{text,
                [19,111,114,32,105,110,32,116,104,101,32,100,101,98,117,103,
                 103,101,114,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,[{text,"#To be explicit, this does not work:"}],0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "4\n...\nA = [X || {X} <- [{1},{2}]],\nQH = qlc:q(A),\n..."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bVariable"}],0,false},
             {text,[3,42,65,42]},
             {sep,
              [{text,
                ";is bound to the evaluated value of the list comprehension ("}],
              0,false},
             {text,[7,42,91,49,44,50,93,42]},
             {sep,
              [{text,
                "~). The compiler complains with an error message (\"argument is not a query list comprehension\"); the shell process stops with a"}],
              0,false},
             {text,"\b*badarg*"},
             {sep,[{text,[7,114,101,97,115,111,110,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[2,113,40]}],0,false},
                 {sep,[{text,[3,81,76,67]}],0,false},
                 {sep,[{text,[1,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[2,113,40]}],0,false},
                 {sep,[{text,[3,81,76,67]}],0,false},
                 {sep,[{text,[5,44,32,91,93,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\bOptions:"}],0,false}],0,true},null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
            {text,[15,42,123,99,97,99,104,101,44,194,160,101,116,115,125,42]},
            {sep,
             [{text,
               [363,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,99,
                97,99,104,101,32,116,104,101,32,97,110,115,119,101,114,115,32,
                116,111,32,97,32,81,76,67,46,32,84,104,101,32,97,110,115,119,
                101,114,115,32,97,114,101,32,115,116,111,114,101,100,32,105,
                110,32,111,110,101,32,69,84,83,32,116,97,98,108,101,32,102,
                111,114,32,101,97,99,104,32,99,97,99,104,101,100,32,81,76,67,
                46,32,87,104,101,110,32,97,32,99,97,99,104,101,100,32,81,76,
                67,32,105,115,32,101,118,97,108,117,97,116,101,100,32,97,103,
                97,105,110,44,32,97,110,115,119,101,114,115,32,97,114,101,32,
                102,101,116,99,104,101,100,32,102,114,111,109,32,116,104,101,
                32,116,97,98,108,101,32,119,105,116,104,111,117,116,32,97,110,
                121,32,102,117,114,116,104,101,114,32,99,111,109,112,117,116,
                97,116,105,111,110,115,46,32,84,104,101,114,101,102,111,114,
                101,44,32,119,104,101,110,32,97,108,108,32,97,110,115,119,101,
                114,115,32,116,111,32,97,32,99,97,99,104,101,100,32,81,76,67,
                32,104,97,118,101,32,98,101,101,110,32,102,111,117,110,100,44,
                32,116,104,101,32,69,84,83,32,116,97,98,108,101,115,32,117,
                115,101,100,32,102,111,114,32,99,97,99,104,105,110,103,32,97,
                110,115,119,101,114,115,32,116,111,32,116,104,101,32,113,117,
                97,108,105,102,105,101,114,115,32,111,102,32,116,104,101,32,
                81,76,67,32,99,97,110,32,98,101,32,101,109,112,116,105,101,
                100,46,32,79,112,116,105,111,110]}],
             0,false},
            {text,[7,42,99,97,99,104,101,42]},
            {sep,
             [{text,
               [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                111]}],
             0,false},
            {text,[15,42,123,99,97,99,104,101,44,194,160,101,116,115,125,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
                   {text,
                    [16,42,123,99,97,99,104,101,44,194,160,108,105,115,116,
                     125,42]},
                   {sep,
                    [{text,".can be used to cache the answers to a QLC like"}],
                    0,false},
                   {text,
                    [15,42,123,99,97,99,104,101,44,194,160,101,116,115,125,
                     42]},
                   {sep,
                    [{text,
                      "Í. The difference is that the answers are kept in a list (on the process heap). If the answers would occupy more than a certain amount of RAM memory, a temporary file is used for storing the answers. Option"}],
                    0,false},
                   {text,
                    [15,42,109,97,120,95,108,105,115,116,95,115,105,122,101,
                     42]},
                   {sep,
                    [{text,
                      "Tsets the limit in bytes and the temporary file is put on the directory set by option"}],
                    0,false},
                   {text,"\b*tmpdir*"},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
                   {text,[7,42,99,97,99,104,101,42]},
                   {sep,
                    [{text,
                      [320,104,97,115,32,110,111,32,101,102,102,101,99,116,32,
                       105,102,32,105,116,32,105,115,32,107,110,111,119,110,
                       32,116,104,97,116,32,116,104,101,32,81,76,67,32,105,
                       115,32,116,111,32,98,101,32,101,118,97,108,117,97,116,
                       101,100,32,97,116,32,109,111,115,116,32,111,110,99,101,
                       46,32,84,104,105,115,32,105,115,32,97,108,119,97,121,
                       115,32,116,114,117,101,32,102,111,114,32,116,104,101,
                       32,116,111,112,45,109,111,115,116,32,81,76,67,32,97,
                       110,100,32,97,108,115,111,32,102,111,114,32,116,104,
                       101,32,108,105,115,116,32,101,120,112,114,101,115,115,
                       105,111,110,32,111,102,32,116,104,101,32,102,105,114,
                       115,116,32,103,101,110,101,114,97,116,111,114,32,105,
                       110,32,97,32,108,105,115,116,32,111,102,32,113,117,97,
                       108,105,102,105,101,114,115,46,32,78,111,116,105,99,
                       101,32,116,104,97,116,32,105,110,32,116,104,101,32,112,
                       114,101,115,101,110,99,101,32,111,102,32,115,105,100,
                       101,32,101,102,102,101,99,116,115,32,105,110,32,102,
                       105,108,116,101,114,115,32,111,114,32,99,97,108,108,98,
                       97,99,107,32,102,117,110,99,116,105,111,110,115,44,32,
                       116,104,101,32,97,110,115,119,101,114,115,32,116,111,
                       32,81,76,67,115,32,99,97,110,32,98,101,32,97,102,102,
                       101,99,116,101,100,32,98,121,32,111,112,116,105,111,
                       110]}],
                    0,false},
                   {text,[7,42,99,97,99,104,101,42]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
           {text,
            [17,42,123,117,110,105,113,117,101,44,194,160,116,114,117,101,125,
             42]},
           {sep,
            [{text,
              "Ìcan be used to remove duplicate answers to a QLC. The unique answers are stored in one ETS table for each QLC. The table is emptied every time it is known that there are no more answers to the QLC. Option"}],
            0,false},
           {text,"\b*unique*"},
           {sep,
            [{text,
              [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
               111]}],
            0,false},
           {text,
            [17,42,123,117,110,105,113,117,101,44,194,160,116,114,117,101,125,
             42]},
           {sep,[{text,"\v. If option"}],0,false},
           {text,"\b*unique*"},
           {sep,
            [{text,
              [23,105,115,32,99,111,109,98,105,110,101,100,32,119,105,116,104,
               32,111,112,116,105,111,110]}],
            0,false},
           {text,[15,42,123,99,97,99,104,101,44,194,160,101,116,115,125,42]},
           {sep,
            [{text,
              "W, two ETS tables are used, but the full answers are stored in one table only. If option"}],
            0,false},
           {text,"\b*unique*"},
           {sep,
            [{text,
              [23,105,115,32,99,111,109,98,105,110,101,100,32,119,105,116,104,
               32,111,112,116,105,111,110]}],
            0,false},
           {text,
            [16,42,123,99,97,99,104,101,44,194,160,108,105,115,116,125,42]},
           {sep,[{text,"$, the answers are sorted twice using"}],0,false},
           {text,
            [23,91,107,101,121,115,111,114,116,47,51,93,40,35,107,101,121,115,
             111,114,116,47,51,41]},
           {sep,
            [{text,
              ":; once to remove duplicates and once to restore the order."}],
            0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,79,112,116,105,111,110,115]}],0,false},
             {text,[7,42,99,97,99,104,101,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\b*unique*"},
             {sep,
              [{text,
                [132,97,112,112,108,121,32,110,111,116,32,111,110,108,121,32,
                 116,111,32,116,104,101,32,81,76,67,32,105,116,115,101,108,
                 102,32,98,117,116,32,97,108,115,111,32,116,111,32,116,104,
                 101,32,114,101,115,117,108,116,115,32,111,102,32,108,111,111,
                 107,105,110,103,32,117,112,32,99,111,110,115,116,97,110,116,
                 115,44,32,114,117,110,110,105,110,103,32,109,97,116,99,104,
                 32,115,112,101,99,105,102,105,99,97,116,105,111,110,115,44,
                 32,97,110,100,32,106,111,105,110,105,110,103,32,104,97,110,
                 100,108,101,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "]In the following example the cached results of the merge join are traversed for each value of"}],
              0,false},
             {text,[3,42,65,42]},
             {sep,
              [{text,
                [28,46,32,78,111,116,105,99,101,32,116,104,97,116,32,119,105,
                 116,104,111,117,116,32,111,112,116,105,111,110]}],
              0,false},
             {text,[7,42,99,97,99,104,101,42]},
             {sep,
              [{text,
                "Hthe join would have been carried out three times, once for each value of"}],
              0,false},
             {text,[3,42,65,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,
              [23,81,32,61,32,113,108,99,58,113,40,91,123,65,44,88,44,90,44,
               87,125,32,124,124]},
             {text,[1,10]},
             {text,"\rA <- [a,b,c],"},
             {text,[1,10]},
             {text,
              [29,123,88,44,90,125,32,60,45,32,91,123,97,44,49,125,44,123,98,
               44,52,125,44,123,99,44,54,125,93,44]},
             {text,[1,10]},
             {text,
              [29,123,87,44,89,125,32,60,45,32,91,123,50,44,97,125,44,123,51,
               44,98,125,44,123,52,44,99,125,93,44]},
             {text,[1,10]},
             {text,"\tX =:= Y],"},
             {text,[1,10]},
             {text,[15,123,99,97,99,104,101,44,32,108,105,115,116,125,41,44]},
             {text,[1,10]},
             {text,"!io:format(\"~s~n\", [qlc:info(Q)])."},
             {text,
              "T\nbegin\n    V1 =\n        qlc:q([\n               P0 ||\n                   P0 = {X, Z} "},
             {text,
              "¦<-\n                       qlc:keysort(1, [{a, 1}, {b, 4}, {c, 6}], [])\n              ]),\n    V2 =\n        qlc:q([\n               P0 ||\n                   P0 = {W, Y} "},
             {text,
              "¤<-\n                       qlc:keysort(2, [{2, a}, {3, b}, {4, c}], [])\n              ]),\n    V3 =\n        qlc:q([\n               [G1 | G2] ||\n                   G1 "},
             {text,
              [29,60,45,32,86,49,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,71,50,32]},
             {text,
              "³<- V2,\n                   element(1, G1) == element(2, G2)\n              ],\n              [{join, merge}, {cache, list}]),\n    qlc:q([\n           {A, X, Z, W} ||\n               A "},
             {text,"/<- [a, b, c],\n               [{X, Z} | {W, Y}] "},
             {text,".<- V3,\n               X =:= Y\n          ])\nend"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [17,91,115,111,114,116,47,49,93,40,35,115,111,114,116,47,49,41]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [23,91,107,101,121,115,111,114,116,47,50,93,40,35,107,101,121,
               115,111,114,116,47,50,41]},
             {sep,
              [{text,
                "­can also be used for caching answers and for removing duplicates. When sorting answers are cached in a list, possibly stored on a temporary file, and no ETS tables are used."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [14,83,111,109,101,116,105,109,101,115,32,40,115,101,101]}],
              0,false},
             {text,
              [19,91,116,97,98,108,101,47,50,93,40,35,116,97,98,108,101,47,50,
               41]},
             {sep,
              [{text,
                "¨) traversal of tables can be done by looking up key values, which is assumed to be fast. Under certain (rare) circumstances there can be too many key values to look up."}],
              0,false},
             {text,"#<a name=\"max_lookup\">max_lookup</a>"},
             {sep,[{text,[6,79,112,116,105,111,110]}],0,false},
             {text,
              [26,42,123,109,97,120,95,108,111,111,107,117,112,44,194,160,77,
               97,120,76,111,111,107,117,112,125,42]},
             {sep,
              [{text,
                "=can then be used to limit the number of lookups: if more than"}],
              0,false},
             {text,"\v*MaxLookup*"},
             {sep,
              [{text,
                "^lookups would be required, no lookups are done but the table is traversed instead. Defaults to"}],
              0,false},
             {text,"\n*infinity*"},
             {sep,
              [{text,
                "F, which means that there is no limit on the number of keys to look up."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"#In the following example, using the"}],0,false},
             {text,"\n*gb_table*"},
             {sep,
              [{text,
                [19,109,111,100,117,108,101,32,102,114,111,109,32,115,101,99,
                 116,105,111,110]}],
              0,false},
             {text,"5[Implementing a QLC Table](#implementing_a_qlc_table)"},
             {sep,[{text," , there are six keys to look up:"}],0,false},
             {text,[7,42,123,49,44,97,125,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[7,42,123,49,44,98,125,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[7,42,123,49,44,99,125,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[7,42,123,50,44,97,125,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[7,42,123,50,44,98,125,42]},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,[7,42,123,50,44,99,125,42]},
             {sep,
              [{text,",. The reason is that the two elements of key"}],
              0,false},
             {text,"\t*{X,Â Y}*"},
             {sep,
              [{text,
                [24,97,114,101,32,99,111,109,112,97,114,101,100,32,115,101,
                 112,97,114,97,116,101,108,121,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,
              [21,84,32,61,32,103,98,95,116,114,101,101,115,58,101,109,112,
               116,121,40,41,44]},
             {text,[1,10]},
             {text,"0QH = qlc:q([X || {{X,Y},_} <- gb_table:table(T),"},
             {text,[1,10]},
             {text,
              [30,40,40,88,32,61,61,32,49,41,32,111,114,32,40,88,32,61,61,32,
               50,41,41,32,97,110,100,97,108,115,111]},
             {text,[1,10]},
             {text,"%((Y == a) or (Y == b) or (Y == c))]),"},
             {text,[1,10]},
             {text,"\"io:format(\"~s~n\", [qlc:info(QH)])."},
             {text,
              [784,10,101,116,115,58,109,97,116,99,104,95,115,112,101,99,95,
               114,117,110,40,10,32,32,32,32,32,32,32,108,105,115,116,115,58,
               102,108,97,116,109,97,112,40,102,117,110,40,75,41,32,45,62,10,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,99,97,115,101,10,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,103,98,95,116,114,101,101,115,58,108,111,111,107,117,
               112,40,75,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,103,98,95,116,114,101,101,
               115,58,102,114,111,109,95,111,114,100,100,105,99,116,40,91,93,
               41,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,111,102,10,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,123,118,97,108,117,101,44,32,86,125,32,45,62,10,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,91,123,75,44,32,86,
               125,93,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,111,110,
               101,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               91,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,44,10,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               91,123,49,44,32,97,125,44,10,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,123,49,44,32,98,125,44,10,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               123,49,44,32,99,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,123,50,44,32,97,125,44,10,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               123,50,44,32,98,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,123,50,44,32,99,125,93,41,44,10,
               32,32,32,32,32,32,32,101,116,115,58,109,97,116,99,104,95,115,
               112,101,99,95,99,111,109,112,105,108,101,40,91,123,123,123,39,
               36,49,39,44,32,39,36,50,39,125,44,32,39,95,39,125,44,10,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,91,93,44,10,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,91,39,36,49,39,93,125,93,41,41]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\bOptions:"}],0,false}],0,true},null},
        null}},
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
           {text,
            [17,42,123,108,111,111,107,117,112,44,194,160,116,114,117,101,125,
             42]},
           {sep,
            [{text,
              [30,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,101,
               110,115,117,114,101,32,116,104,97,116,32,116,104,101]}],
            0,false},
           {text,[5,42,113,108,99,42]},
           {sep,
            [{text,
              [364,109,111,100,117,108,101,32,108,111,111,107,115,32,117,112,
               32,99,111,110,115,116,97,110,116,115,32,105,110,32,115,111,109,
               101,32,81,76,67,32,116,97,98,108,101,46,32,73,102,32,116,104,
               101,114,101,32,97,114,101,32,109,111,114,101,32,116,104,97,110,
               32,111,110,101,32,81,76,67,32,116,97,98,108,101,32,97,109,111,
               110,103,32,116,104,101,32,108,105,115,116,32,101,120,112,114,
               101,115,115,105,111,110,115,32,111,102,32,116,104,101,32,103,
               101,110,101,114,97,116,111,114,115,44,32,99,111,110,115,116,97,
               110,116,115,32,109,117,115,116,32,98,101,32,108,111,111,107,
               101,100,32,117,112,32,105,110,32,97,116,32,108,101,97,115,116,
               32,111,110,101,32,111,102,32,116,104,101,32,116,97,98,108,101,
               115,46,32,84,104,101,32,101,118,97,108,117,97,116,105,111,110,
               32,111,102,32,116,104,101,32,113,117,101,114,121,32,102,97,105,
               108,115,32,105,102,32,116,104,101,114,101,32,97,114,101,32,110,
               111,32,99,111,110,115,116,97,110,116,115,32,116,111,32,108,111,
               111,107,32,117,112,46,32,84,104,105,115,32,111,112,116,105,111,
               110,32,105,115,32,117,115,101,102,117,108,32,119,104,101,110,
               32,105,116,32,119,111,117,108,100,32,98,101,32,117,110,97,99,
               99,101,112,116,97,98,108,101,32,116,111,32,116,114,97,118,101,
               114,115,101,32,97,108,108,32,111,98,106,101,99,116,115,32,105,
               110,32,115,111,109,101,32,116,97,98,108,101,46,32,83,101,116,
               116,105,110,103,32,111,112,116,105,111,110]}],
            0,false},
           {text,"\b*lookup*"},
           {sep,[{text,[2,116,111]}],0,false},
           {text,[7,42,102,97,108,115,101,42]},
           {sep,[{text,")ensures that no constants are looked up ("}],0,false},
           {text,
            [18,42,123,109,97,120,95,108,111,111,107,117,112,44,194,160,48,
             125,42]},
           {sep,[{text,"!has the same effect). Defaults to"}],0,false},
           {text,[5,42,97,110,121,42]},
           {sep,
            [{text,
              "=, which means that constants are looked up whenever possible."}],
            0,false}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
                  {text,
                   [15,42,123,106,111,105,110,44,194,160,74,111,105,110,125,
                    42]},
                  {sep,
                   [{text,
                     "9can be used to ensure that a certain join method is used:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [17,42,123,106,111,105,110,44,194,160,108,111,111,107,117,
                   112,125,42]},
                 {sep,
                  [{text,
                    [31,105,110,118,111,107,101,115,32,116,104,101,32,108,111,
                     111,107,117,112,32,106,111,105,110,32,109,101,116,104,
                     111,100,46]}],
                  0,false}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [16,42,123,106,111,105,110,44,194,160,109,101,114,103,101,
                   125,42]},
                 {sep,
                  [{text,
                    [30,105,110,118,111,107,101,115,32,116,104,101,32,109,101,
                     114,103,101,32,106,111,105,110,32,109,101,116,104,111,
                     100,46]}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [22,42,123,106,111,105,110,44,194,160,110,101,115,116,101,
                  100,95,108,111,111,112,125,42]},
                {sep,
                 [{text,
                   "ginvokes the method of matching every pair of objects from two handles. This method is mostly very slow."}],
                 0,false}],
               0,false}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,"(The evaluation of the query fails if the"}],
                   0,false},
                  {text,[5,42,113,108,99,42]},
                  {sep,
                   [{text,
                     ";module cannot carry out the chosen join method. Defaults to"}],
                   0,false},
                  {text,[5,42,97,110,121,42]},
                  {sep,
                   [{text,
                     "=, which means that some fast join method is used if possible."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}],
        0,false}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\t## sort/1"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\t## sort/2"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,82,101,116,117,114,110,32,97,32,113,117,101,114,121,32,104,97,
             110,100,108,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"4Returns a query handle. When evaluating query handle"}],
              0,false},
             {text,[5,42,81,72,50,42]},
             {sep,
              [{text,
                [29,44,32,116,104,101,32,97,110,115,119,101,114,115,32,116,
                 111,32,113,117,101,114,121,32,104,97,110,100,108,101]}],
              0,false},
             {text,[5,42,81,72,49,42]},
             {sep,[{text,"\rare sorted by"}],0,false},
             {text,"*[file_sorter#sort/3](./file_sorter#sort/3)"},
             {sep,
              [{text,
                [25,97,99,99,111,114,100,105,110,103,32,116,111,32,116,104,
                 101,32,111,112,116,105,111,110,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"'The sorter uses temporary files only if"}],0,false},
             {text,[5,42,81,72,49,42]},
             {sep,
              [{text,
                "\\does not evaluate to a list and the size of the binary representation of the answers exceeds"}],
              0,false},
             {text,[6,42,83,105,122,101,42]},
             {sep,[{text,"\fbytes, where"}],0,false},
             {text,[6,42,83,105,122,101,42]},
             {sep,
              [{text,
                [22,105,115,32,116,104,101,32,118,97,108,117,101,32,111,102,
                 32,111,112,116,105,111,110]}],
              0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[5,115,111,114,116,40]}],0,false},
                 {sep,[{text,[3,81,72,49]}],0,false},
                 {sep,[{text,[1,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[5,115,111,114,116,40]}],0,false},
                 {sep,[{text,[3,81,72,49]}],0,false},
                 {sep,[{text,[5,44,32,91,93,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [21,35,35,32,115,116,114,105,110,103,95,116,111,95,104,97,110,100,108,
         101,47,49]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [21,35,35,32,115,116,114,105,110,103,95,116,111,95,104,97,110,100,108,
         101,47,50]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [21,35,35,32,115,116,114,105,110,103,95,116,111,95,104,97,110,100,108,
         101,47,51]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"/Return a handle for a query list comprehension."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,65,32,115,116,114,105,110,103,32,118,101,114,115,105,111,
                 110,32,111,102]}],
              0,false},
             {text,"\v[q/1](#q/1)"},
             {sep,
              [{text,
                "^. When the query handle is evaluated, the fun created by the parse transform is interpreted by"}],
              0,false},
             {text,
              [20,91,101,114,108,95,101,118,97,108,93,40,101,114,108,95,101,
               118,97,108,41]},
             {sep,
              [{text,
                "B. The query string is to be one single QLC terminated by a period."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,"\fL = [1,2,3],"},
             {text,[1,10]},
             {text,
              ";Bs = erl_eval:add_binding('L', L, erl_eval:new_bindings()),"},
             {text,[1,10]},
             {text,
              "6QH = qlc:string_to_handle(\"[X+1 || X <- L].\", [], Bs),"},
             {text,[1,10]},
             {text,"\rqlc:eval(QH)."},
             {text,"\b\n[2,3,4]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    [17,115,116,114,105,110,103,95,116,111,95,104,97,110,100,
                     108,101,40]}],
                  0,false},
                 {sep,[{text,"\vQueryString"}],0,false},
                 {sep,[{text,[1,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    [17,115,116,114,105,110,103,95,116,111,95,104,97,110,100,
                     108,101,40]}],
                  0,false},
                 {sep,[{text,"\vQueryString"}],0,false},
                 {sep,[{text,[5,44,32,91,93,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    [17,115,116,114,105,110,103,95,116,111,95,104,97,110,100,
                     108,101,40]}],
                  0,false},
                 {sep,[{text,"\vQueryString"}],0,false},
                 {sep,[{text,[1,44]}],0,false},
                 {sep,[{text,[7,79,112,116,105,111,110,115]}],0,false},
                 {sep,[{text,[1,41]}],0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    [17,115,116,114,105,110,103,95,116,111,95,104,97,110,100,
                     108,101,40]}],
                  0,false},
                 {sep,[{text,"\vQueryString"}],0,false},
                 {sep,[{text,[1,44]}],0,false},
                 {sep,[{text,[7,79,112,116,105,111,110,115]}],0,false},
                 {sep,
                  [{text,
                    [26,44,32,101,114,108,95,101,118,97,108,58,110,101,119,95,
                     98,105,110,100,105,110,103,115,40,41,41]}],
                  0,false}],
                0,false},
               {text,[1,42]}],
              0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "sThis function is probably mainly useful when called from outside of Erlang, for example from a driver written in C."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\n## table/2"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"\"Return a query handle for a table."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [289,82,101,116,117,114,110,115,32,97,32,113,117,101,114,121,
                 32,104,97,110,100,108,101,32,102,111,114,32,97,32,81,76,67,
                 32,116,97,98,108,101,46,32,73,110,32,69,114,108,97,110,103,
                 47,79,84,80,32,116,104,101,114,101,32,105,115,32,115,117,112,
                 112,111,114,116,32,102,111,114,32,69,84,83,44,32,68,101,116,
                 115,44,32,97,110,100,32,77,110,101,115,105,97,32,116,97,98,
                 108,101,115,44,32,98,117,116,32,109,97,110,121,32,111,116,
                 104,101,114,32,100,97,116,97,32,115,116,114,117,99,116,117,
                 114,101,115,32,99,97,110,32,98,101,32,116,117,114,110,101,
                 100,32,105,110,116,111,32,81,76,67,32,116,97,98,108,101,115,
                 46,32,84,104,105,115,32,105,115,32,97,99,99,111,109,112,108,
                 105,115,104,101,100,32,98,121,32,108,101,116,116,105,110,103,
                 32,102,117,110,99,116,105,111,110,40,115,41,32,105,110,32,
                 116,104,101,32,109,111,100,117,108,101,32,105,109,112,108,
                 101,109,101,110,116,105,110,103,32,116,104,101,32,100,97,116,
                 97,32,115,116,114,117,99,116,117,114,101,32,99,114,101,97,
                 116,101,32,97,32,113,117,101,114,121,32,104,97,110,100,108,
                 101,32,98,121,32,99,97,108,108,105,110,103]}],
              0,false},
             {text,"\r*qlc:table/2*"},
             {sep,
              [{text,
                [127,46,32,84,104,101,32,100,105,102,102,101,114,101,110,116,
                 32,119,97,121,115,32,116,111,32,116,114,97,118,101,114,115,
                 101,32,116,104,101,32,116,97,98,108,101,32,97,110,100,32,112,
                 114,111,112,101,114,116,105,101,115,32,111,102,32,116,104,
                 101,32,116,97,98,108,101,32,97,114,101,32,104,97,110,100,108,
                 101,100,32,98,121,32,99,97,108,108,98,97,99,107,32,102,117,
                 110,99,116,105,111,110,115,32,112,114,111,118,105,100,101,
                 100,32,97,115,32,111,112,116,105,111,110,115,32,116,111]}],
              0,false},
             {text,"\r*qlc:table/2*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          [17,67,97,108,108,98,97,99,107,32,102,117,110,99,
                           116,105,111,110]}],
                        0,false},
                       {text,"\r*TraverseFun*"},
                       {sep,
                        [{text,
                          "Xis used for traversing the table. It is to return a list of objects terminated by either"}],
                        0,false},
                       {text,[4,42,91,93,42]},
                       {sep,
                        [{text,
                          "­or a nullary fun to be used for traversing the not yet traversed objects of the table. Any other return value is immediately returned as value of the query evaluation. Unary"}],
                        0,false},
                       {text,"\r*TraverseFun*"},
                       {sep,
                        [{text,
                          [158,115,32,97,114,101,32,116,111,32,97,99,99,101,
                           112,116,32,97,32,109,97,116,99,104,32,115,112,101,
                           99,105,102,105,99,97,116,105,111,110,32,97,115,32,
                           97,114,103,117,109,101,110,116,46,32,84,104,101,32,
                           109,97,116,99,104,32,115,112,101,99,105,102,105,99,
                           97,116,105,111,110,32,105,115,32,99,114,101,97,116,
                           101,100,32,98,121,32,116,104,101,32,112,97,114,115,
                           101,32,116,114,97,110,115,102,111,114,109,32,98,
                           121,32,97,110,97,108,121,122,105,110,103,32,116,
                           104,101,32,112,97,116,116,101,114,110,32,111,102,
                           32,116,104,101,32,103,101,110,101,114,97,116,111,
                           114,32,99,97,108,108,105,110,103]}],
                        0,false},
                       {text,"\r*qlc:table/2*"},
                       {sep,
                        [{text,
                          [150,97,110,100,32,102,105,108,116,101,114,115,32,
                           117,115,105,110,103,32,118,97,114,105,97,98,108,
                           101,115,32,105,110,116,114,111,100,117,99,101,100,
                           32,105,110,32,116,104,101,32,112,97,116,116,101,
                           114,110,46,32,73,102,32,116,104,101,32,112,97,114,
                           115,101,32,116,114,97,110,115,102,111,114,109,32,
                           99,97,110,110,111,116,32,102,105,110,100,32,97,32,
                           109,97,116,99,104,32,115,112,101,99,105,102,105,99,
                           97,116,105,111,110,32,101,113,117,105,118,97,108,
                           101,110,116,32,116,111,32,116,104,101,32,112,97,
                           116,116,101,114,110,32,97,110,100,32,102,105,108,
                           116,101,114,115,44]}],
                        0,false},
                       {text,"\r*TraverseFun*"},
                       {sep,
                        [{text,
                          "<is called with a match specification returning every object."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{sep,
                      [{text,
                        "WModules that can use match specifications for optimized traversal of tables are to call"}],
                      0,false},
                     {text,"\r*qlc:table/2*"},
                     {sep,[{text,"\rwith an unary"}],0,false},
                     {text,"\r*TraverseFun*"},
                     {sep,
                      [{text,
                        [15,46,32,65,110,32,101,120,97,109,112,108,101,32,105,
                         115]}],
                      0,false},
                     {text,
                      [28,91,101,116,115,35,116,97,98,108,101,47,50,93,40,46,
                       47,101,116,115,35,116,97,98,108,101,47,50,41]},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,false},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{sep,
                      [{text,"#Other modules can provide a nullary"}],
                      0,false},
                     {text,"\r*TraverseFun*"},
                     {sep,
                      [{text,
                        [15,46,32,65,110,32,101,120,97,109,112,108,101,32,105,
                         115]}],
                      0,false},
                     {text,
                      [18,42,103,98,95,116,97,98,108,101,58,116,97,98,108,101,
                       47,49,42]},
                     {sep,[{text,"\nin section"}],0,false},
                     {text,
                      "5[Implementing a QLC Table](#implementing_a_qlc_table)"},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,false}}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          [23,85,110,97,114,121,32,99,97,108,108,98,97,99,107,
                           32,102,117,110,99,116,105,111,110]}],
                        0,false},
                       {text,"\b*PreFun*"},
                       {sep,
                        [{text,
                          "jis called once before the table is read for the first time. If the call fails, the query evaluation fails."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,[{text,"\bArgument"}],0,false},
                       {text,"\t*PreArgs*"},
                       {sep,
                        [{text,
                          "/is a list of tagged values. There are two tags,"}],
                        0,false},
                       {text,
                        [14,42,112,97,114,101,110,116,95,118,97,108,117,101,
                         42]},
                       {sep,[{text,[3,97,110,100]}],0,false},
                       {text,"\n*stop_fun*"},
                       {sep,
                        [{text,
                          "+, used by Mnesia for managing transactions."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{sep,[{text,"\fThe value of"}],0,false},
                     {text,
                      [14,42,112,97,114,101,110,116,95,118,97,108,117,101,42]},
                     {sep,
                      [{text,
                        [24,105,115,32,116,104,101,32,118,97,108,117,101,32,
                         114,101,116,117,114,110,101,100,32,98,121]}],
                      0,false},
                     {text,"\v*ParentFun*"},
                     {sep,[{text,[4,44,32,111,114]}],0,false},
                     {text,"\v*undefined*"},
                     {sep,
                      [{text,
                        [14,105,102,32,116,104,101,114,101,32,105,115,32,110,
                         111]}],
                      0,false},
                     {text,"\v*ParentFun*"},
                     {sep,[{text,[1,46]}],0,false},
                     {text,"\v*ParentFun*"},
                     {sep,
                      [{text,"&is called once just before the call of"}],
                      0,false},
                     {text,"\b*PreFun*"},
                     {sep,
                      [{text,"%in the context of the process calling"}],
                      0,false},
                     {text,
                      [17,91,101,118,97,108,47,49,93,40,35,101,118,97,108,47,
                       49,41]},
                     {sep,[{text,[1,44]}],0,false},
                     {text,
                      [17,91,102,111,108,100,47,51,93,40,35,102,111,108,100,
                       47,51,41]},
                     {sep,[{text,[4,44,32,111,114]}],0,false},
                     {text,
                      [21,91,99,117,114,115,111,114,47,49,93,40,35,99,117,114,
                       115,111,114,47,49,41]},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,false},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{sep,[{text,"\fThe value of"}],0,false},
                     {text,"\n*stop_fun*"},
                     {sep,
                      [{text,
                        "Fis a nullary fun that deletes the cursor if called from the parent, or"}],
                      0,false},
                     {text,"\v*undefined*"},
                     {sep,
                      [{text,
                        [22,105,102,32,116,104,101,114,101,32,105,115,32,110,
                         111,32,99,117,114,115,111,114,46]}],
                      0,false}],
                    0,false}],
                  0,false}}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [25,78,117,108,108,97,114,121,32,99,97,108,108,98,97,
                          99,107,32,102,117,110,99,116,105,111,110]}],
                       0,false},
                      {text,"\t*PostFun*"},
                      {sep,
                       [{text,
                         "_is called once after the table was last read. The return value, which is caught, is ignored. If"}],
                       0,false},
                      {text,"\b*PreFun*"},
                      {sep,
                       [{text,
                         [28,104,97,115,32,98,101,101,110,32,99,97,108,108,
                          101,100,32,102,111,114,32,97,32,116,97,98,108,101,
                          44]}],
                       0,false},
                      {text,"\t*PostFun*"},
                      {sep,
                       [{text,
                         "eis guaranteed to be called for that table, even if the evaluation of the query fails for some reason."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "QThe pre (post) functions for different tables are evaluated in unspecified order."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "0Other table access than reading, such as calling"}],
                       0,false},
                      {text,"\t*InfoFun*"},
                      {sep,
                       [{text,"\", is assumed to be OK at any time."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,"#<a name=\"lookup_fun\">lookup_fun</a>"},
                     {sep,
                      [{text,
                        [24,66,105,110,97,114,121,32,99,97,108,108,98,97,99,
                         107,32,102,117,110,99,116,105,111,110]}],
                      0,false},
                     {text,"\v*LookupFun*"},
                     {sep,
                      [{text,
                        "?is used for looking up objects in the table. The first argument"}],
                      0,false},
                     {text,"\n*Position*"},
                     {sep,
                      [{text,
                        "Bis the key position or an indexed position and the second argument"}],
                      0,false},
                     {text,[6,42,75,101,121,115,42]},
                     {sep,
                      [{text,
                        "uis a sorted list of unique values. The return value is to be a list of all objects (tuples), such that the element at"}],
                      0,false},
                     {text,"\n*Position*"},
                     {sep,
                      [{text,
                        [14,105,115,32,97,32,109,101,109,98,101,114,32,111,
                         102]}],
                      0,false},
                     {text,[6,42,75,101,121,115,42]},
                     {sep,
                      [{text,
                        "R. Any other return value is immediately returned as value of the query evaluation."}],
                      0,false},
                     {text,"\v*LookupFun*"},
                     {sep,
                      [{text,
                        [144,105,115,32,99,97,108,108,101,100,32,105,110,115,
                         116,101,97,100,32,111,102,32,116,114,97,118,101,114,
                         115,105,110,103,32,116,104,101,32,116,97,98,108,101,
                         32,105,102,32,116,104,101,32,112,97,114,115,101,32,
                         116,114,97,110,115,102,111,114,109,32,97,116,32,99,
                         111,109,112,105,108,101,32,116,105,109,101,32,99,97,
                         110,32,100,101,116,101,114,109,105,110,101,32,116,
                         104,97,116,32,116,104,101,32,102,105,108,116,101,114,
                         115,32,109,97,116,99,104,32,97,110,100,32,99,111,109,
                         112,97,114,101,32,116,104,101,32,101,108,101,109,101,
                         110,116,32,97,116]}],
                      0,false},
                     {text,"\n*Position*"},
                     {sep,
                      [{text,
                        [23,105,110,32,115,117,99,104,32,97,32,119,97,121,32,
                         116,104,97,116,32,111,110,108,121]}],
                      0,false},
                     {text,[6,42,75,101,121,115,42]},
                     {sep,
                      [{text,
                        "3need to be looked up to find all potential answers."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,"'The key position is obtained by calling"}],
                      0,false},
                     {sep,
                      [{text,[1,42]},
                       {sep,
                        [{sep,[{text,[7,73,110,102,111,70,117,110]}],0,false},
                         {sep,[{text,"\b(keypos)"}],0,false}],
                        0,false},
                       {text,[1,42]}],
                      0,false},
                     {sep,
                      [{text,"$and the indexed positions by calling"}],
                      0,false},
                     {sep,
                      [{text,[1,42]},
                       {sep,
                        [{sep,[{text,[7,73,110,102,111,70,117,110]}],0,false},
                         {sep,[{text,"\t(indices)"}],0,false}],
                        0,false},
                       {text,[1,42]}],
                      0,false},
                     {sep,
                      [{text,
                        "ó. If the key position can be used for lookup, it is always chosen, otherwise the indexed position requiring the least number of lookups is chosen. If there is a tie between two indexed positions, the one occurring first in the list returned by"}],
                      0,false},
                     {text,"\t*InfoFun*"},
                     {sep,
                      [{text,"(is chosen. Positions requiring more than"}],
                      0,false},
                     {text,
                      [25,91,109,97,120,95,108,111,111,107,117,112,93,40,35,
                       109,97,120,95,108,111,111,107,117,112,41]},
                     {sep,
                      [{text,
                        [20,108,111,111,107,117,112,115,32,97,114,101,32,105,
                         103,110,111,114,101,100,46]}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [23,85,110,97,114,121,32,99,97,108,108,98,97,99,107,32,
                        102,117,110,99,116,105,111,110]}],
                     0,false},
                    {text,"\t*InfoFun*"},
                    {sep,
                     [{text,")is to return information about the table."}],
                     0,false},
                    {text,"\v*undefined*"},
                    {sep,
                     [{text,
                       "6is to be returned if the value of some tag is unknown:"}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,
               {text,[4,60,100,108,62]},
               {nest,4,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,116,62]},
                              {sep,
                               [{text,[7,105,110,100,105,99,101,115]}],
                               0,false},
                              {text,[5,60,47,100,116,62]}],
                             0,true},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,100,62]},
                              {text,
                               "AReturns a list of indexed positions, a list of positive integers."},
                              {text,[5,60,47,100,100,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,
                              [{text,
                                [17,105,115,95,117,110,105,113,117,101,95,111,
                                 98,106,101,99,116,115]}],
                              0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {sep,
                             [{sep,
                               [{text,[7,82,101,116,117,114,110,115]}],
                               0,false},
                              {text,[4,116,114,117,101]},
                              {sep,
                               [{text,
                                 [26,105,102,32,116,104,101,32,111,98,106,101,
                                  99,116,115,32,114,101,116,117,114,110,101,
                                  100,32,98,121]}],
                               0,false},
                              {text,"\vTraverseFun"},
                              {sep,[{text,"\vare unique."}],0,false}],
                             0,false},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,[{text,[6,107,101,121,112,111,115]}],0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {text,
                           ":Returns the position of the table key, a positive integer."},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,[{text,"\ris_sorted_key"}],0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {sep,
                         [{sep,
                           [{text,[7,82,101,116,117,114,110,115]}],
                           0,false},
                          {text,[4,116,114,117,101]},
                          {sep,
                           [{text,
                             [26,105,102,32,116,104,101,32,111,98,106,101,99,
                              116,115,32,114,101,116,117,114,110,101,100,32,
                              98,121]}],
                           0,false},
                          {text,"\vTraverseFun"},
                          {sep,
                           [{text,
                             [22,97,114,101,32,115,111,114,116,101,100,32,111,
                              110,32,116,104,101,32,107,101,121,46]}],
                           0,false}],
                         0,false},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,
                        [{text,
                          [14,110,117,109,95,111,102,95,111,98,106,101,99,116,
                           115]}],
                        0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {text,
                       "CReturns the number of objects in the table, a non-negative integer."},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}}}},
              {text,[5,60,47,100,108,62]}}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [23,85,110,97,114,121,32,99,97,108,108,98,97,99,107,32,
                       102,117,110,99,116,105,111,110]}],
                    0,false},
                   {text,"\v*FormatFun*"},
                   {sep,[{text,"\nis used by"}],0,false},
                   {text,
                    [17,91,105,110,102,111,47,49,93,40,35,105,110,102,111,47,
                     49,41]},
                   {sep,
                    [{text,
                      "Ofor displaying the call that created the query handle of the table. Defaults to"}],
                    0,false},
                   {text,"\v*undefined*"},
                   {sep,
                    [{text,
                      [18,44,32,119,104,105,99,104,32,109,101,97,110,115,32,
                       116,104,97,116]}],
                    0,false},
                   {text,"\n*info/1,2*"},
                   {sep,
                    [{text,
                      [18,100,105,115,112,108,97,121,115,32,97,32,99,97,108,
                       108,32,116,111]}],
                    0,false},
                   {text,
                    [17,42,39,36,77,79,68,39,58,39,36,70,85,78,39,47,48,42]},
                   {sep,[{text,"\r. It is up to"}],0,false},
                   {text,"\v*FormatFun*"},
                   {sep,
                    [{text,
                      "Óto present the selected objects of the table in a suitable way. However, if a character list is chosen for presentation, it must be an Erlang expression that can be scanned and parsed (a trailing dot is added by"}],
                    0,false},
                   {text,"\n*info/1,2*"},
                   {sep,[{text,"\bthough)."}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,"\v*FormatFun*"},
                   {sep,
                    [{text,
                      [156,105,115,32,99,97,108,108,101,100,32,119,105,116,
                       104,32,97,110,32,97,114,103,117,109,101,110,116,32,116,
                       104,97,116,32,100,101,115,99,114,105,98,101,115,32,116,
                       104,101,32,115,101,108,101,99,116,101,100,32,111,98,
                       106,101,99,116,115,32,98,97,115,101,100,32,111,110,32,
                       111,112,116,105,109,105,122,97,116,105,111,110,115,32,
                       100,111,110,101,32,97,115,32,97,32,114,101,115,117,108,
                       116,32,111,102,32,97,110,97,108,121,122,105,110,103,32,
                       116,104,101,32,102,105,108,116,101,114,115,32,111,102,
                       32,116,104,101,32,81,76,67,32,119,104,101,114,101,32,
                       116,104,101,32,99,97,108,108,32,116,111]}],
                    0,false},
                   {text,"\r*qlc:table/2*"},
                   {sep,
                    [{text,
                      "3occurs. The argument can have the following values:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,
              {text,[4,60,100,108,62]},
              {nest,4,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,
                          [{sep,
                            [{text,
                              "-{lookup, Position, Keys, NElements, DepthFun}"},
                             {sep,[{text,[1,46]}],0,false}],
                            0,false}],
                          0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,100,62]},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{text,"\tLookupFun"},
                                {sep,
                                 [{text,
                                   ",is used for looking up objects in the table."}],
                                 0,false}],
                               0,false}],
                             0,true},
                            null},
                           null}},
                         {text,[5,60,47,100,100,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,116,62]},
                        {sep,
                         [{text,
                           [29,123,109,97,116,99,104,95,115,112,101,99,44,32,
                            77,97,116,99,104,69,120,112,114,101,115,115,105,
                            111,110,125]}],
                         0,false},
                        {text,[5,60,47,100,116,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,100,62]},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "¦No way of finding all possible answers by looking up keys was found, but the filters could be transformed into a match specification. All answers are found by calling"}],
                               0,false},
                              {text,
                               [28,84,114,97,118,101,114,115,101,70,117,110,
                                40,77,97,116,99,104,69,120,112,114,101,115,
                                115,105,111,110,41]},
                              {sep,[{text,[1,46]}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {text,[5,60,47,100,100,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,116,62]},
                      {sep,
                       [{text,
                         [26,123,97,108,108,44,32,78,69,108,101,109,101,110,
                          116,115,44,32,68,101,112,116,104,70,117,110,125]}],
                       0,false},
                      {text,[5,60,47,100,116,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {sep,
                      [{above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "PNo optimization was found. A match specification matching all objects is used if"}],
                               0,false},
                              {text,"\vTraverseFun"},
                              {sep,[{text,"\tis unary."}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,"\tNElements"},
                              {sep,
                               [{text,
                                 [19,105,115,32,116,104,101,32,118,97,108,117,
                                  101,32,111,102,32,116,104,101]}],
                               0,false},
                              {text,"\binfo/1,2"},
                              {sep,
                               [{text,[6,111,112,116,105,111,110]}],
                               0,false},
                              {text,"\nn_elements"},
                              {sep,[{text,[1,46]}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,"\bDepthFun"},
                              {sep,
                               [{text,
                                 "Fis a function that can be used for limiting the size of terms; calling"}],
                               0,false},
                              {text,
                               [14,68,101,112,116,104,70,117,110,40,84,101,
                                114,109,41]},
                              {sep,[{text,"\vsubstitutes"}],0,false},
                              {text,[5,39,46,46,46,39]},
                              {sep,[{text,"\ffor parts of"}],0,false},
                              {text,[4,84,101,114,109]},
                              {sep,
                               [{text," below the depth specified by the"}],
                               0,false},
                              {text,"\binfo/1,2"},
                              {sep,
                               [{text,[6,111,112,116,105,111,110]}],
                               0,false},
                              {text,[5,100,101,112,116,104]},
                              {sep,[{text,[1,46]}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,[{text,"\nIf calling"}],0,false},
                              {sep,[{text,"\tFormatFun"}],0,false},
                              {sep,
                               [{text,
                                 [26,119,105,116,104,32,97,110,32,97,114,103,
                                  117,109,101,110,116,32,105,110,99,108,117,
                                  100,105,110,103]}],
                               0,false},
                              {text,"\tNElements"},
                              {sep,[{text,[3,97,110,100]}],0,false},
                              {text,"\bDepthFun"},
                              {sep,[{text,[6,102,97,105,108,115,44]}],0,false},
                              {sep,[{text,"\tFormatFun"}],0,false},
                              {sep,
                               [{text,
                                 "/is called once again with an argument excluding"}],
                               0,false},
                              {text,"\tNElements"},
                              {sep,[{text,[3,97,110,100]}],0,false},
                              {text,"\bDepthFun"},
                              {sep,[{text,[1,40]}],0,false},
                              {text,
                               [26,123,108,111,111,107,117,112,44,194,160,80,
                                111,115,105,116,105,111,110,44,194,160,75,101,
                                121,115,125]},
                              {sep,[{text,[2,111,114]}],0,false},
                              {text,[3,97,108,108]},
                              {sep,[{text,[2,41,46]}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}}],
                      0,false},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}}}},
             {text,[5,60,47,100,108,62]}}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"'<a name=\"key_equality\">key_equality</a>"},
           {sep,
            [{text,
              [19,84,104,101,32,118,97,108,117,101,32,111,102,32,111,112,116,
               105,111,110]}],
            0,false},
           {text,[14,42,107,101,121,95,101,113,117,97,108,105,116,121,42]},
           {sep,[{text,"\bis to be"}],0,false},
           {text,[7,42,39,61,58,61,39,42]},
           {sep,
            [{text,
              ">if the table considers two keys equal if they match, and to be"}],
            0,false},
           {text,[6,42,39,61,61,39,42]},
           {sep,
            [{text,
              "8if two keys are equal if they compare equal. Defaults to"}],
            0,false},
           {text,[7,42,39,61,58,61,39,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"%For the various options recognized by"}],0,false},
             {text,"\v*table/1,2*"},
             {sep,
              [{text,
                [25,105,110,32,114,101,115,112,101,99,116,105,118,101,32,109,
                 111,100,117,108,101,44,32,115,101,101]}],
              0,false},
             {text,
              [28,91,101,116,115,35,116,97,98,108,101,47,49,93,40,46,47,101,
               116,115,35,116,97,98,108,101,47,49,41]},
             {sep,[{text,[1,44]}],0,false},
             {text,
              [30,91,100,101,116,115,35,116,97,98,108,101,47,49,93,40,46,47,
               100,101,116,115,35,116,97,98,108,101,47,49,41]},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,"1[mnesia/mnesia#table/1](../mnesia/mnesia#table/1)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## See Also"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"\f[dets](dets)"},
          {sep,[{text,[1,44]}],0,false},
          {text,
           [20,91,101,114,108,95,101,118,97,108,93,40,101,114,108,95,101,118,
            97,108,41]},
          {sep,[{text,[1,44]}],0,false},
          {text,
           [23,91,101,114,116,115,47,101,114,108,97,110,103,93,40,46,47,101,
            114,108,97,110,103,41]},
          {sep,[{text,[1,44]}],0,false},
          {text,"%[kernel/error_logger](./error_logger)"},
          {sep,[{text,[1,44]}],0,false},
          {text,"\n[ets](ets)"},
          {sep,[{text,[1,44]}],0,false},
          {text,
           [21,91,107,101,114,110,101,108,47,102,105,108,101,93,40,46,47,102,
            105,108,101,41]},
          {sep,[{text,[1,44]}],0,false},
          {text,
           [26,91,102,105,108,101,95,115,111,114,116,101,114,93,40,102,105,
            108,101,95,115,111,114,116,101,114,41]},
          {sep,[{text,[1,44]}],0,false},
          {text,
           [25,91,109,110,101,115,105,97,47,109,110,101,115,105,97,93,40,46,
            47,109,110,101,115,105,97,41]},
          {sep,[{text,[1,44]}],0,false},
          {text,[14,91,115,104,101,108,108,93,40,115,104,101,108,108,41]},
          {sep,[{text,[1,44]}],0,false},
          {text,"([Erlang Reference Manual](./users_guide)"},
          {sep,[{text,[1,44]}],0,false},
          {text,"%[Programming Examples](./users_guide)"}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
