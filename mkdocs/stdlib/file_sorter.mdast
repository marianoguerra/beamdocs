{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\r# file_sorter"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\r# file_sorter"},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{sep,[{sep,[{text,"\fFile sorter."}],0,false}],0,true},null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [437,84,104,105,115,32,109,111,100,117,108,101,32,99,111,
                   110,116,97,105,110,115,32,102,117,110,99,116,105,111,110,
                   115,32,102,111,114,32,115,111,114,116,105,110,103,32,116,
                   101,114,109,115,32,111,110,32,102,105,108,101,115,44,32,
                   109,101,114,103,105,110,103,32,97,108,114,101,97,100,121,
                   32,115,111,114,116,101,100,32,102,105,108,101,115,44,32,97,
                   110,100,32,99,104,101,99,107,105,110,103,32,102,105,108,
                   101,115,32,102,111,114,32,115,111,114,116,101,100,110,101,
                   115,115,46,32,67,104,117,110,107,115,32,99,111,110,116,97,
                   105,110,105,110,103,32,98,105,110,97,114,121,32,116,101,
                   114,109,115,32,97,114,101,32,114,101,97,100,32,102,114,111,
                   109,32,97,32,115,101,113,117,101,110,99,101,32,111,102,32,
                   102,105,108,101,115,44,32,115,111,114,116,101,100,32,105,
                   110,116,101,114,110,97,108,108,121,32,105,110,32,109,101,
                   109,111,114,121,32,97,110,100,32,119,114,105,116,116,101,
                   110,32,111,110,32,116,101,109,112,111,114,97,114,121,32,
                   102,105,108,101,115,44,32,119,104,105,99,104,32,97,114,101,
                   32,109,101,114,103,101,100,32,112,114,111,100,117,99,105,
                   110,103,32,111,110,101,32,115,111,114,116,101,100,32,102,
                   105,108,101,32,97,115,32,111,117,116,112,117,116,46,32,77,
                   101,114,103,105,110,103,32,105,115,32,112,114,111,118,105,
                   100,101,100,32,97,115,32,97,110,32,111,112,116,105,109,105,
                   122,97,116,105,111,110,59,32,105,116,32,105,115,32,102,97,
                   115,116,101,114,32,119,104,101,110,32,116,104,101,32,102,
                   105,108,101,115,32,97,114,101,32,97,108,114,101,97,100,121,
                   32,115,111,114,116,101,100,44,32,98,117,116,32,105,116,32,
                   97,108,119,97,121,115,32,119,111,114,107,115,32,116,111,32,
                   115,111,114,116,32,105,110,115,116,101,97,100,32,111,102,
                   32,109,101,114,103,101,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "kOn a file, a term is represented by a header and a binary. Two options define the format of terms on files:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,
            {text,[4,60,100,108,62]},
            {nest,4,
             {above,
              {above,
               {above,
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{text,
                        [22,123,104,101,97,100,101,114,44,32,72,101,97,100,
                         101,114,76,101,110,103,116,104,125]}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{text,"\fHeaderLength"},
                            {sep,
                             [{text,
                               "Â­determines the number of bytes preceding each binary and containing the length of the binary in bytes. Defaults to 4. The order of the header bytes is defined as follows: if"}],
                             0,false},
                            {text,[1,66]},
                            {sep,
                             [{text,
                               "*is a binary containing a header only, size"}],
                             0,false},
                            {text,[4,83,105,122,101]},
                            {sep,
                             [{text,
                               [30,111,102,32,116,104,101,32,98,105,110,97,
                                114,121,32,105,115,32,99,97,108,99,117,108,97,
                                116,101,100,32,97,115]}],
                             0,false},
                            {text," <<Size:HeaderLength/unit:8>> = B"},
                            {sep,[{text,[1,46]}],0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{text,
                       [16,123,102,111,114,109,97,116,44,32,70,111,114,109,97,
                        116,125]}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {sep,
                    [{above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
                            {text,[6,70,111,114,109,97,116]},
                            {sep,
                             [{text,
                               "adetermines the function that is applied to binaries to create the terms to be sorted. Defaults to"}],
                             0,false},
                            {text,"\vbinary_term"},
                            {sep,
                             [{text,
                               [24,44,32,119,104,105,99,104,32,105,115,32,101,
                                113,117,105,118,97,108,101,110,116,32,116,
                                111]}],
                             0,false},
                            {text,
                             [21,102,117,110,194,160,98,105,110,97,114,121,95,
                              116,111,95,116,101,114,109,47,49]},
                            {sep,[{text,[7,46,32,86,97,108,117,101]}],0,false},
                            {text,[6,98,105,110,97,114,121]},
                            {sep,
                             [{text,
                               [16,105,115,32,101,113,117,105,118,97,108,101,
                                110,116,32,116,111]}],
                             0,false},
                            {text,
                             [15,102,117,110,40,88,41,32,45,62,32,88,32,101,
                              110,100]},
                            {sep,
                             [{text,
                               "V, which means that the binaries are sorted as they are. This is the fastest format. If"}],
                             0,false},
                            {text,[6,70,111,114,109,97,116]},
                            {sep,[{text,[2,105,115]}],0,false},
                            {text,[4,116,101,114,109]},
                            {sep,[{text,[1,44]}],0,false},
                            {text,"\tio:read/2"},
                            {sep,
                             [{text,
                               "Gis called to read terms. In that case, only the default value of option"}],
                             0,false},
                            {text,[6,104,101,97,100,101,114]},
                            {sep,[{text,"\vis allowed."}],0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
                            {text,[6,102,111,114,109,97,116]},
                            {sep,
                             [{text,
                               "=also determines what is written to the sorted output file: if"}],
                             0,false},
                            {text,[6,70,111,114,109,97,116]},
                            {sep,[{text,[2,105,115]}],0,false},
                            {text,[4,116,101,114,109]},
                            {sep,[{text,[6,44,32,116,104,101,110]}],0,false},
                            {text,"\vio:format/3"},
                            {sep,
                             [{text,
                               "Âµis called to write each term, otherwise the binary prefixed by a header is written. Notice that the binary written is the same binary that was read; the results of applying function"}],
                             0,false},
                            {text,[6,70,111,114,109,97,116]},
                            {sep,
                             [{text,
                               "Tare thrown away when the terms have been sorted. Reading and writing terms using the"}],
                             0,false},
                            {text,[2,105,111]},
                            {sep,
                             [{text,
                               "8module is much slower than reading and writing binaries."}],
                             0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}}],
                    0,false},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}}}},
           {text,[5,60,47,100,108,62]}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [18,79,116,104,101,114,32,111,112,116,105,111,110,115,32,97,
                   114,101,58]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,
            {text,[4,60,100,108,62]},
            {nest,4,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,
                              [{text,
                                [14,123,111,114,100,101,114,44,32,79,114,100,
                                 101,114,125]}],
                              0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,100,62]},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{sep,
                                     [{text,
                                       "QThe default is to sort terms in ascending order, but that can be changed by value"}],
                                     0,false},
                                    {text,"\ndescending"},
                                    {sep,
                                     [{text,
                                       "%or by specifying an ordering function"}],
                                     0,false},
                                    {text,[3,70,117,110]},
                                    {sep,
                                     [{text,
                                       "?. An ordering function is antisymmetric, transitive, and total."}],
                                     0,false},
                                    {text,"\nFun(A,ÃÂ B)"},
                                    {sep,[{text,"\fis to return"}],0,false},
                                    {text,[4,116,114,117,101]},
                                    {sep,[{text,[2,105,102]}],0,false},
                                    {text,[1,65]},
                                    {sep,[{text,"\fcomes before"}],0,false},
                                    {text,[1,66]},
                                    {sep,
                                     [{text,
                                       [26,105,110,32,116,104,101,32,111,114,
                                        100,101,114,105,110,103,44,32,111,116,
                                        104,101,114,119,105,115,101]}],
                                     0,false},
                                    {text,[5,102,97,108,115,101]},
                                    {sep,
                                     [{text,
                                       "E. An example of a typical ordering function is less than or equal to,"}],
                                     0,false},
                                    {text,[4,61,60,47,50]},
                                    {sep,
                                     [{text,
                                       "H. Using an ordering function slows down the sort considerably. Functions"}],
                                     0,false},
                                    {text,[7,107,101,121,115,111,114,116]},
                                    {sep,[{text,[1,44]}],0,false},
                                    {text,"\bkeymerge"},
                                    {sep,[{text,[3,97,110,100]}],0,false},
                                    {text,"\bkeycheck"},
                                    {sep,
                                     [{text,
                                       "!do not accept ordering functions."}],
                                     0,false}],
                                   0,false}],
                                 0,true},
                                null},
                               null}},
                             {text,[5,60,47,100,100,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,116,62]},
                            {sep,
                             [{text,
                               [19,123,117,110,105,113,117,101,44,32,98,111,
                                111,108,101,97,110,40,41,125]}],
                             0,false},
                            {text,[5,60,47,100,116,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,100,62]},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,
                                 [{sep,
                                   [{text,
                                     "YWhen sorting or merging files, only the first of a sequence of terms that compare equal ("}],
                                   0,false},
                                  {text,[2,61,61]},
                                  {sep,
                                   [{text,
                                     "$) is output if this option is set to"}],
                                   0,false},
                                  {text,[4,116,114,117,101]},
                                  {sep,[{text,"\r. Defaults to"}],0,false},
                                  {text,[5,102,97,108,115,101]},
                                  {sep,
                                   [{text,
                                     "Â», which implies that all terms that compare equal are output. When checking files for sortedness, a check that no pair of consecutive terms compares equal is done if this option is set to"}],
                                   0,false},
                                  {text,[4,116,114,117,101]},
                                  {sep,[{text,[1,46]}],0,false}],
                                 0,false}],
                               0,true},
                              null},
                             null}},
                           {text,[5,60,47,100,100,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,116,62]},
                          {sep,
                           [{text,
                             [23,123,116,109,112,100,105,114,44,32,84,101,109,
                              112,68,105,114,101,99,116,111,114,121,125]}],
                           0,false},
                          {text,[5,60,47,100,116,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,100,62]},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{sep,
                                 [{text,
                                   "cThe directory where temporary files are put can be chosen explicitly. The default, implied by value"}],
                                 0,false},
                                {text,[2,34,34]},
                                {sep,
                                 [{text,
                                   [139,44,32,105,115,32,116,111,32,112,117,
                                    116,32,116,101,109,112,111,114,97,114,121,
                                    32,102,105,108,101,115,32,111,110,32,116,
                                    104,101,32,115,97,109,101,32,100,105,114,
                                    101,99,116,111,114,121,32,97,115,32,116,
                                    104,101,32,115,111,114,116,101,100,32,111,
                                    117,116,112,117,116,32,102,105,108,101,46,
                                    32,73,102,32,111,117,116,112,117,116,32,
                                    105,115,32,97,32,102,117,110,99,116,105,
                                    111,110,32,40,115,101,101,32,98,101,108,
                                    111,119,41,44,32,116,104,101,32,100,105,
                                    114,101,99,116,111,114,121,32,114,101,116,
                                    117,114,110,101,100,32,98,121]}],
                                 0,false},
                                {text,
                                 [14,102,105,108,101,58,103,101,116,95,99,119,
                                  100,40,41]},
                                {sep,
                                 [{text,
                                   "Tis used instead. The names of temporary files are derived from the Erlang nodename ("}],
                                 0,false},
                                {text,[6,110,111,100,101,40,41]},
                                {sep,
                                 [{text,
                                   ":), the process identifier of the current Erlang emulator ("}],
                                 0,false},
                                {text,"\vos:getpid()"},
                                {sep,
                                 [{text,
                                   [25,41,44,32,97,110,100,32,97,32,117,110,
                                    105,113,117,101,32,105,110,116,101,103,
                                    101,114,32,40]}],
                                 0,false},
                                {text,"!erlang:unique_integer([positive])"},
                                {sep,
                                 [{text,
                                   [20,41,46,32,65,32,116,121,112,105,99,97,
                                    108,32,110,97,109,101,32,105,115]}],
                                 0,false},
                                {text,
                                 [29,102,115,95,109,121,110,111,100,101,64,
                                  109,121,104,111,115,116,95,49,55,54,51,95,
                                  52,55,49,49,46,49,55]},
                                {sep,
                                 [{text,[7,44,32,119,104,101,114,101]}],
                                 0,false},
                                {text,[2,49,55]},
                                {sep,
                                 [{text,
                                   "fis a sequence number. Existing files are overwritten. Temporary files are deleted unless some uncaught"}],
                                 0,false},
                                {text,[4,69,88,73,84]},
                                {sep,
                                 [{text,
                                   [14,115,105,103,110,97,108,32,111,99,99,
                                    117,114,115,46]}],
                                 0,false}],
                               0,false}],
                             0,true},
                            null},
                           null}},
                         {text,[5,60,47,100,100,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,116,62]},
                        {sep,
                         [{text,
                           [23,123,99,111,109,112,114,101,115,115,101,100,44,
                            32,98,111,111,108,101,97,110,40,41,125]}],
                         0,false},
                        {text,[5,60,47,100,116,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,100,62]},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "?Temporary files and the output file can be compressed. Defaults"}],
                               0,false},
                              {text,[5,102,97,108,115,101]},
                              {sep,
                               [{text,
                                 "X, which implies that written files are not compressed. Regardless of the value of option"}],
                               0,false},
                              {text,"\ncompressed"},
                              {sep,
                               [{text,
                                 [157,44,32,99,111,109,112,114,101,115,115,
                                  101,100,32,102,105,108,101,115,32,99,97,110,
                                  32,97,108,119,97,121,115,32,98,101,32,114,
                                  101,97,100,46,32,78,111,116,105,99,101,32,
                                  116,104,97,116,32,114,101,97,100,105,110,
                                  103,32,97,110,100,32,119,114,105,116,105,
                                  110,103,32,99,111,109,112,114,101,115,115,
                                  101,100,32,102,105,108,101,115,32,97,114,
                                  101,32,115,105,103,110,105,102,105,99,97,
                                  110,116,108,121,32,115,108,111,119,101,114,
                                  32,116,104,97,110,32,114,101,97,100,105,110,
                                  103,32,97,110,100,32,119,114,105,116,105,
                                  110,103,32,117,110,99,111,109,112,114,101,
                                  115,115,101,100,32,102,105,108,101,115,46]}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {text,[5,60,47,100,100,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,116,62]},
                      {sep,[{text,"\f{size, Size}"}],0,false},
                      {text,[5,60,47,100,116,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{text,
                             "dBy default about 512*1024 bytes read from files are sorted internally. This option is rarely needed."}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{text,
                       [19,123,110,111,95,102,105,108,101,115,44,32,78,111,70,
                        105,108,101,115,125]}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{text,
                           "GBy default 16 files are merged at a time. This option is rarely needed."}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}}}},
           {text,[5,60,47,100,108,62]}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "sAs an alternative to sorting files, a function of one argument can be specified as input. When called with argument"}],
                  0,false},
                 {text,[6,42,114,101,97,100,42]},
                 {sep,
                  [{text,
                    "<, the function is assumed to return either of the following:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,[14,42,101,110,100,95,111,102,95,105,110,112,117,116,42]},
               {sep,[{text,[2,111,114]}],0,false},
               {text,
                [24,42,123,101,110,100,95,111,102,95,105,110,112,117,116,44,
                 32,86,97,108,117,101,125,125,42]},
               {sep,
                [{text,
                  [29,119,104,101,110,32,116,104,101,114,101,32,105,115,32,
                   110,111,32,109,111,114,101,32,105,110,112,117,116,32,40]}],
                0,false},
               {text,[7,42,86,97,108,117,101,42]},
               {sep,
                [{text,
                  [20,105,115,32,101,120,112,108,97,105,110,101,100,32,98,101,
                   108,111,119,41,46]}],
                0,false}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [16,42,123,79,98,106,101,99,116,115,44,32,70,117,110,125,42]},
               {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
               {text,"\t*Objects*"},
               {sep,
                [{text,
                  ";is a list of binaries or terms depending on the format, and"}],
                0,false},
               {text,[5,42,70,117,110,42]},
               {sep,
                [{text,
                  [24,105,115,32,97,32,110,101,119,32,105,110,112,117,116,32,
                   102,117,110,99,116,105,111,110,46]}],
                0,false}],
              0,false}],
            0,false}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "GAny other value is immediately returned as value of the current call to"}],
                  0,false},
                 {text,[6,42,115,111,114,116,42]},
                 {sep,[{text,[2,111,114]}],0,false},
                 {text,"\t*keysort*"},
                 {sep,
                  [{text,
                    "k. Each input function is called exactly once. If an error occurs, the last function is called with argument"}],
                  0,false},
                 {text,[7,42,99,108,111,115,101,42]},
                 {sep,[{text," , the reply of which is ignored."}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [588,65,32,102,117,110,99,116,105,111,110,32,111,102,32,
                     111,110,101,32,97,114,103,117,109,101,110,116,32,99,97,
                     110,32,98,101,32,115,112,101,99,105,102,105,101,100,32,
                     97,115,32,111,117,116,112,117,116,46,32,84,104,101,32,
                     114,101,115,117,108,116,115,32,111,102,32,115,111,114,
                     116,105,110,103,32,111,114,32,109,101,114,103,105,110,
                     103,32,116,104,101,32,105,110,112,117,116,32,105,115,32,
                     99,111,108,108,101,99,116,101,100,32,105,110,32,97,32,
                     110,111,110,45,101,109,112,116,121,32,115,101,113,117,
                     101,110,99,101,32,111,102,32,118,97,114,105,97,98,108,
                     101,32,108,101,110,103,116,104,32,108,105,115,116,115,32,
                     111,102,32,98,105,110,97,114,105,101,115,32,111,114,32,
                     116,101,114,109,115,32,100,101,112,101,110,100,105,110,
                     103,32,111,110,32,116,104,101,32,102,111,114,109,97,116,
                     46,32,84,104,101,32,111,117,116,112,117,116,32,102,117,
                     110,99,116,105,111,110,32,105,115,32,99,97,108,108,101,
                     100,32,119,105,116,104,32,111,110,101,32,108,105,115,116,
                     32,97,116,32,97,32,116,105,109,101,44,32,97,110,100,32,
                     105,115,32,97,115,115,117,109,101,100,32,116,111,32,114,
                     101,116,117,114,110,32,97,32,110,101,119,32,111,117,116,
                     112,117,116,32,102,117,110,99,116,105,111,110,46,32,65,
                     110,121,32,111,116,104,101,114,32,114,101,116,117,114,
                     110,32,118,97,108,117,101,32,105,115,32,105,109,109,101,
                     100,105,97,116,101,108,121,32,114,101,116,117,114,110,
                     101,100,32,97,115,32,118,97,108,117,101,32,111,102,32,
                     116,104,101,32,99,117,114,114,101,110,116,32,99,97,108,
                     108,32,116,111,32,116,104,101,32,115,111,114,116,32,111,
                     114,32,109,101,114,103,101,32,102,117,110,99,116,105,111,
                     110,46,32,69,97,99,104,32,111,117,116,112,117,116,32,102,
                     117,110,99,116,105,111,110,32,105,115,32,99,97,108,108,
                     101,100,32,101,120,97,99,116,108,121,32,111,110,99,101,
                     46,32,87,104,101,110,32,115,111,109,101,32,111,117,116,
                     112,117,116,32,102,117,110,99,116,105,111,110,32,104,97,
                     115,32,98,101,101,110,32,97,112,112,108,105,101,100,32,
                     116,111,32,97,108,108,32,111,102,32,116,104,101,32,114,
                     101,115,117,108,116,115,32,111,114,32,97,110,32,101,114,
                     114,111,114,32,111,99,99,117,114,115,44,32,116,104,101,
                     32,108,97,115,116,32,102,117,110,99,116,105,111,110,32,
                     105,115,32,99,97,108,108,101,100,32,119,105,116,104,32,
                     97,114,103,117,109,101,110,116]}],
                  0,false},
                 {text,[7,42,99,108,111,115,101,42]},
                 {sep,
                  [{text,
                    "W, and the reply is returned as value of the current call to the sort or merge function."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "GIf a function is specified as input and the last input function returns"}],
                  0,false},
                 {text,
                  [23,42,123,101,110,100,95,111,102,95,105,110,112,117,116,44,
                   32,86,97,108,117,101,125,42]},
                 {sep,
                  [{text,
                    ":, the function specified as output is called with argument"}],
                  0,false},
                 {text,
                  [16,42,123,118,97,108,117,101,44,32,86,97,108,117,101,125,
                   42]},
                 {sep,
                  [{text,
                    "q. This makes it easy to initiate the sequence of output functions with a value calculated by the input functions."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ÃAs an example, consider sorting the terms on a disk log file. A function that reads chunks from the disk log and returns a list of binaries is used as input. The results are collected in a list of terms."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [812,10,115,111,114,116,40,76,111,103,41,32,45,62,10,32,32,
                   32,32,123,111,107,44,32,95,125,32,61,32,100,105,115,107,95,
                   108,111,103,58,111,112,101,110,40,91,123,110,97,109,101,44,
                   76,111,103,125,44,32,123,109,111,100,101,44,114,101,97,100,
                   95,111,110,108,121,125,93,41,44,10,32,32,32,32,73,110,112,
                   117,116,32,61,32,105,110,112,117,116,40,76,111,103,44,32,
                   115,116,97,114,116,41,44,10,32,32,32,32,79,117,116,112,117,
                   116,32,61,32,111,117,116,112,117,116,40,91,93,41,44,10,32,
                   32,32,32,82,101,112,108,121,32,61,32,102,105,108,101,95,
                   115,111,114,116,101,114,58,115,111,114,116,40,73,110,112,
                   117,116,44,32,79,117,116,112,117,116,44,32,123,102,111,114,
                   109,97,116,44,116,101,114,109,125,41,44,10,32,32,32,32,111,
                   107,32,61,32,100,105,115,107,95,108,111,103,58,99,108,111,
                   115,101,40,76,111,103,41,44,10,32,32,32,32,82,101,112,108,
                   121,46,10,10,105,110,112,117,116,40,76,111,103,44,32,67,
                   111,110,116,41,32,45,62,10,32,32,32,32,102,117,110,40,99,
                   108,111,115,101,41,32,45,62,10,32,32,32,32,32,32,32,32,32,
                   32,32,32,111,107,59,10,32,32,32,32,32,32,32,40,114,101,97,
                   100,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,99,
                   97,115,101,32,100,105,115,107,95,108,111,103,58,99,104,117,
                   110,107,40,76,111,103,44,32,67,111,110,116,41,32,111,102,
                   10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,101,
                   114,114,111,114,44,32,82,101,97,115,111,110,125,32,45,62,
                   10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                   32,32,123,101,114,114,111,114,44,32,82,101,97,115,111,110,
                   125,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                   123,67,111,110,116,50,44,32,84,101,114,109,115,125,32,45,
                   62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                   32,32,32,123,84,101,114,109,115,44,32,105,110,112,117,116,
                   40,76,111,103,44,32,67,111,110,116,50,41,125,59,10,32,32,
                   32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,67,111,110,
                   116,50,44,32,84,101,114,109,115,44,32,95,66,97,100,98,121,
                   116,101,115,125,32,45,62,10,32,32,32,32,32,32,32,32,32,32,
                   32,32,32,32,32,32,32,32,32,32,123,84,101,114,109,115,44,32,
                   105,110,112,117,116,40,76,111,103,44,32,67,111,110,116,50,
                   41,125,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                   32,101,111,102,32,45,62,10,32,32,32,32,32,32,32,32,32,32,
                   32,32,32,32,32,32,32,32,32,32,101,110,100,95,111,102,95,
                   105,110,112,117,116,10,32,32,32,32,32,32,32,32,32,32,32,32,
                   101,110,100,10,32,32,32,32,101,110,100,46,10,10,111,117,
                   116,112,117,116,40,76,41,32,45,62,10,32,32,32,32,102,117,
                   110,40,99,108,111,115,101,41,32,45,62,10,32,32,32,32,32,32,
                   32,32,32,32,32,32,108,105,115,116,115,58,97,112,112,101,
                   110,100,40,108,105,115,116,115,58,114,101,118,101,114,115,
                   101,40,76,41,41,59,10,32,32,32,32,32,32,32,40,84,101,114,
                   109,115,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,
                   111,117,116,112,117,116,40,91,84,101,114,109,115,32,124,32,
                   76,93,41,10,32,32,32,32,101,110,100,46]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "FFor more examples of functions as input and output, see the end of the"}],
                  0,false},
                 {text,"\r*file_sorter*"},
                 {sep,[{text,"\vmodule; the"}],0,false},
                 {text,[6,42,116,101,114,109,42]},
                 {sep,
                  [{text,"%format is implemented with functions."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [22,84,104,101,32,112,111,115,115,105,98,108,101,32,118,
                     97,108,117,101,115,32,111,102]}],
                  0,false},
                 {text,"\b*Reason*"},
                 {sep,
                  [{text,"\"returned when an error occurs are:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,"\f*bad_object*"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,
                  [24,42,123,98,97,100,95,111,98,106,101,99,116,44,32,70,105,
                   108,101,78,97,109,101,125,42]},
                 {sep,
                  [{text,
                    "k- Applying the format function failed for some binary, or the key(s) could not be extracted from some term."}],
                  0,false}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [22,42,123,98,97,100,95,116,101,114,109,44,32,70,105,108,
                   101,78,97,109,101,125,42]},
                 {sep,[{text,[1,45]}],0,false},
                 {text,"\v*io:read/2*"},
                 {sep,
                  [{text,
                    [25,102,97,105,108,101,100,32,116,111,32,114,101,97,100,
                     32,115,111,109,101,32,116,101,114,109,46]}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,"&*{file_error, FileName, file:posix()}*"},
                {sep,
                 [{text,
                   [23,45,32,70,111,114,32,97,110,32,101,120,112,108,97,110,
                    97,116,105,111,110,32,111,102]}],
                 0,false},
                {text,[14,42,102,105,108,101,58,112,111,115,105,120,40,41,42]},
                {sep,[{text,[5,44,32,115,101,101]}],0,false},
                {text,
                 [21,91,107,101,114,110,101,108,47,102,105,108,101,93,40,46,
                  47,102,105,108,101,41]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,"\e*{premature_eof, FileName}*"},
               {sep,
                [{text,
                  "6- End-of-file was encountered inside some binary term."}],
                0,false}],
              0,false}],
            0,false}}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f# Data Types"},null},null}},
    {sep,[{sep,[{text,"\tfile_name"}],0,false}],0,false},
    {sep,[{sep,[{text,"\nfile_names"}],0,false}],0,false},
    {sep,[{sep,[{text,"\ti_command"}],0,false}],0,false},
    {sep,[{sep,[{text,[7,105,95,114,101,112,108,121]}],0,false}],0,false},
    {sep,[{sep,[{text,[5,105,110,102,117,110]}],0,false}],0,false},
    {sep,[{sep,[{text,[5,105,110,112,117,116]}],0,false}],0,false},
    {sep,[{sep,[{text,"\vinput_reply"}],0,false}],0,false},
    {sep,[{sep,[{text,"\to_command"}],0,false}],0,false},
    {sep,[{sep,[{text,[7,111,95,114,101,112,108,121]}],0,false}],0,false},
    {sep,[{sep,[{text,[6,111,98,106,101,99,116]}],0,false}],0,false},
    {sep,[{sep,[{text,[6,111,117,116,102,117,110]}],0,false}],0,false},
    {sep,[{sep,[{text,[6,111,117,116,112,117,116]}],0,false}],0,false},
    {sep,[{sep,[{text,"\foutput_reply"}],0,false}],0,false},
    {sep,[{sep,[{text,[5,118,97,108,117,101]}],0,false}],0,false},
    {sep,[{sep,[{text,[7,111,112,116,105,111,110,115]}],0,false}],0,false},
    {sep,[{sep,[{text,[6,111,112,116,105,111,110]}],0,false}],0,false},
    {sep,[{sep,[{text,[6,102,111,114,109,97,116]}],0,false}],0,false},
    {sep,[{sep,[{text,"\nformat_fun"}],0,false}],0,false},
    {sep,[{sep,[{text,"\rheader_length"}],0,false}],0,false},
    {sep,[{sep,[{text,[7,107,101,121,95,112,111,115]}],0,false}],0,false},
    {sep,[{sep,[{text,"\bno_files"}],0,false}],0,false},
    {sep,[{sep,[{text,[5,111,114,100,101,114]}],0,false}],0,false},
    {sep,[{sep,[{text,"\torder_fun"}],0,false}],0,false},
    {sep,[{sep,[{text,[4,115,105,122,101]}],0,false}],0,false},
    {sep,[{sep,[{text,"\rtmp_directory"}],0,false}],0,false},
    {sep,[{sep,[{text,[6,114,101,97,115,111,110]}],0,false}],0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## check/1"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## check/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"(Check whether terms on files are sorted."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [138,67,104,101,99,107,115,32,102,105,108,101,115,32,102,111,114,
              32,115,111,114,116,101,100,110,101,115,115,46,32,73,102,32,97,
              32,102,105,108,101,32,105,115,32,110,111,116,32,115,111,114,116,
              101,100,44,32,116,104,101,32,102,105,114,115,116,32,111,117,116,
              45,111,102,45,111,114,100,101,114,32,101,108,101,109,101,110,
              116,32,105,115,32,114,101,116,117,114,110,101,100,46,32,84,104,
              101,32,102,105,114,115,116,32,116,101,114,109,32,111,110,32,97,
              32,102,105,108,101,32,104,97,115,32,112,111,115,105,116,105,111,
              110,32,49,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [17,42,99,104,101,99,107,40,70,105,108,101,78,97,109,101,41,42]},
            {sep,
             [{text,
               [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                111]}],
             0,false},
            {text,
             [23,42,99,104,101,99,107,40,91,70,105,108,101,78,97,109,101,93,
              44,32,91,93,41,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\r## keycheck/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\r## keycheck/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"/Check whether terms on files are sorted by key."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [138,67,104,101,99,107,115,32,102,105,108,101,115,32,102,111,114,
              32,115,111,114,116,101,100,110,101,115,115,46,32,73,102,32,97,
              32,102,105,108,101,32,105,115,32,110,111,116,32,115,111,114,116,
              101,100,44,32,116,104,101,32,102,105,114,115,116,32,111,117,116,
              45,111,102,45,111,114,100,101,114,32,101,108,101,109,101,110,
              116,32,105,115,32,114,101,116,117,114,110,101,100,46,32,84,104,
              101,32,102,105,114,115,116,32,116,101,114,109,32,111,110,32,97,
              32,102,105,108,101,32,104,97,115,32,112,111,115,105,116,105,111,
              110,32,49,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [28,42,107,101,121,99,104,101,99,107,40,75,101,121,80,111,115,44,
              32,70,105,108,101,78,97,109,101,41,42]},
            {sep,
             [{text,
               [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                111]}],
             0,false},
            {text,"\"*keycheck(KeyPos, [FileName], [])*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\r## keymerge/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\r## keymerge/4"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [28,77,101,114,103,101,32,116,101,114,109,115,32,111,110,32,102,
            105,108,101,115,32,98,121,32,107,101,121,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "JMerges tuples on files. Each input file is assumed to be sorted on key(s)."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"%*keymerge(KeyPos, FileNames, Output)*"},
            {sep,
             [{text,
               [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                111]}],
             0,false},
            {text,")*keymerge(KeyPos, FileNames, Output, [])*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\f## keysort/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,[{sep,[{text,"\eSort terms on files by key."}],0,false}],0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [22,83,111,114,116,115,32,116,117,112,108,101,115,32,111,110,32,
              102,105,108,101,115,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [22,42,107,101,121,115,111,114,116,40,78,44,32,70,105,108,101,78,
              97,109,101,41,42]},
            {sep,
             [{text,
               [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                111]}],
             0,false},
            {text,"\"*keysort(N, [FileName], FileName)*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\f## keysort/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\f## keysort/4"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,[{sep,[{text,"\eSort terms on files by key."}],0,false}],0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "KSorts tuples on files. The sort is performed on the element(s) mentioned in"}],
             0,false},
            {text,"\b*KeyPos*"},
            {sep,
             [{text,
               [31,46,32,73,102,32,116,119,111,32,116,117,112,108,101,115,32,
                99,111,109,112,97,114,101,32,101,113,117,97,108,32,40]}],
             0,false},
            {text,[4,42,61,61,42]},
            {sep,
             [{text,"/) on one element, the next element according to"}],
             0,false},
            {text,"\b*KeyPos*"},
            {sep,[{text," is compared. The sort is stable."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\e*keysort(N, Input, Output)*"},
            {sep,
             [{text,
               [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                111]}],
             0,false},
            {text,
             [31,42,107,101,121,115,111,114,116,40,78,44,32,73,110,112,117,
              116,44,32,79,117,116,112,117,116,44,32,91,93,41,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## merge/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## merge/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [21,77,101,114,103,101,32,116,101,114,109,115,32,111,110,32,102,
            105,108,101,115,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "?Merges terms on files. Each input file is assumed to be sorted."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [26,42,109,101,114,103,101,40,70,105,108,101,78,97,109,101,115,
              44,32,79,117,116,112,117,116,41,42]},
            {sep,
             [{text,
               [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                111]}],
             0,false},
            {text,
             [30,42,109,101,114,103,101,40,70,105,108,101,78,97,109,101,115,
              44,32,79,117,116,112,117,116,44,32,91,93,41,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## sort/1"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [20,83,111,114,116,32,116,101,114,109,115,32,111,110,32,102,105,
            108,101,115,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [21,83,111,114,116,115,32,116,101,114,109,115,32,111,110,32,102,
              105,108,101,115,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [16,42,115,111,114,116,40,70,105,108,101,78,97,109,101,41,42]},
            {sep,
             [{text,
               [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                111]}],
             0,false},
            {text,
             [28,42,115,111,114,116,40,91,70,105,108,101,78,97,109,101,93,44,
              32,70,105,108,101,78,97,109,101,41,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## sort/2"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## sort/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [20,83,111,114,116,32,116,101,114,109,115,32,111,110,32,102,105,
            108,101,115,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [21,83,111,114,116,115,32,116,101,114,109,115,32,111,110,32,102,
              105,108,101,115,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [21,42,115,111,114,116,40,73,110,112,117,116,44,32,79,117,116,
              112,117,116,41,42]},
            {sep,
             [{text,
               [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                111]}],
             0,false},
            {text,
             [25,42,115,111,114,116,40,73,110,112,117,116,44,32,79,117,116,
              112,117,116,44,32,91,93,41,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
