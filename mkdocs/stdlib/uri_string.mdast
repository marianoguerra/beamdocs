{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f# uri_string"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f# uri_string"},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [25,85,82,73,32,112,114,111,99,101,115,115,105,110,103,32,102,117,
             110,99,116,105,111,110,115,46]}],
          0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    ">This module contains functions for parsing and handling URIs ("}],
                  0,false},
                 {text,"0[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)"},
                 {sep,
                  [{text,"%) and form-urlencoded query strings ("}],
                  0,false},
                 {text,")[HTML 5.2](https://www.w3.org/TR/html52/)"},
                 {sep,[{text,[2,41,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "TParsing and serializing non-UTF-8 form-urlencoded query strings are also supported ("}],
                  0,false},
                 {text,")[HTML 5.0](https://www.w3.org/TR/html50/)"},
                 {sep,[{text,[2,41,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "\\A URI is an identifier consisting of a sequence of characters matching the syntax rule named"}],
                  0,false},
                 {text,[7,42,42,85,82,73,42,42]},
                 {sep,[{text,[2,105,110]}],0,false},
                 {text,"0[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [137,84,104,101,32,103,101,110,101,114,105,99,32,85,82,73,
                   32,115,121,110,116,97,120,32,99,111,110,115,105,115,116,
                   115,32,111,102,32,97,32,104,105,101,114,97,114,99,104,105,
                   99,97,108,32,115,101,113,117,101,110,99,101,32,111,102,32,
                   99,111,109,112,111,110,101,110,116,115,32,114,101,102,101,
                   114,114,101,100,32,116,111,32,97,115,32,116,104,101,32,115,
                   99,104,101,109,101,44,32,97,117,116,104,111,114,105,116,
                   121,44,32,112,97,116,104,44,32,113,117,101,114,121,44,32,
                   97,110,100,32,102,114,97,103,109,101,110,116,58]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [660,10,32,32,32,32,85,82,73,32,32,32,32,32,32,32,32,32,61,
                   32,115,99,104,101,109,101,32,34,58,34,32,104,105,101,114,
                   45,112,97,114,116,32,91,32,34,63,34,32,113,117,101,114,121,
                   32,93,32,91,32,34,35,34,32,102,114,97,103,109,101,110,116,
                   32,93,10,32,32,32,32,104,105,101,114,45,112,97,114,116,32,
                   32,32,61,32,34,47,47,34,32,97,117,116,104,111,114,105,116,
                   121,32,112,97,116,104,45,97,98,101,109,112,116,121,10,32,
                   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,
                   32,112,97,116,104,45,97,98,115,111,108,117,116,101,10,32,
                   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,
                   32,112,97,116,104,45,114,111,111,116,108,101,115,115,10,32,
                   32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,
                   32,112,97,116,104,45,101,109,112,116,121,10,32,32,32,32,
                   115,99,104,101,109,101,32,32,32,32,32,32,61,32,65,76,80,72,
                   65,32,42,40,32,65,76,80,72,65,32,47,32,68,73,71,73,84,32,
                   47,32,34,43,34,32,47,32,34,45,34,32,47,32,34,46,34,32,41,
                   10,32,32,32,32,97,117,116,104,111,114,105,116,121,32,32,32,
                   61,32,91,32,117,115,101,114,105,110,102,111,32,34,64,34,32,
                   93,32,104,111,115,116,32,91,32,34,58,34,32,112,111,114,116,
                   32,93,10,32,32,32,32,117,115,101,114,105,110,102,111,32,32,
                   32,32,61,32,42,40,32,117,110,114,101,115,101,114,118,101,
                   100,32,47,32,112,99,116,45,101,110,99,111,100,101,100,32,
                   47,32,115,117,98,45,100,101,108,105,109,115,32,47,32,34,58,
                   34,32,41,10,10,32,32,32,32,114,101,115,101,114,118,101,100,
                   32,32,32,32,61,32,103,101,110,45,100,101,108,105,109,115,
                   32,47,32,115,117,98,45,100,101,108,105,109,115,10,32,32,32,
                   32,103,101,110,45,100,101,108,105,109,115,32,32,61,32,34,
                   58,34,32,47,32,34,47,34,32,47,32,34,63,34,32,47,32,34,35,
                   34,32,47,32,34,91,34,32,47,32,34,93,34,32,47,32,34,64,34,
                   10,32,32,32,32,115,117,98,45,100,101,108,105,109,115,32,32,
                   61,32,34,33,34,32,47,32,34,36,34,32,47,32,34,38,34,32,47,
                   32,34,39,34,32,47,32,34,40,34,32,47,32,34,41,34,10,32,32,
                   32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,32,34,42,34,
                   32,47,32,34,43,34,32,47,32,34,44,34,32,47,32,34,59,34,32,
                   47,32,34,61,34,10,10,32,32,32,32,117,110,114,101,115,101,
                   114,118,101,100,32,32,61,32,65,76,80,72,65,32,47,32,68,73,
                   71,73,84,32,47,32,34,45,34,32,47,32,34,46,34,32,47,32,34,
                   95,34,32,47,32,34,126,34,10,32,32,32,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,{above,null,null},null},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [134,84,104,101,32,105,110,116,101,114,112,114,101,116,97,
                   116,105,111,110,32,111,102,32,97,32,85,82,73,32,100,101,
                   112,101,110,100,115,32,111,110,108,121,32,111,110,32,116,
                   104,101,32,99,104,97,114,97,99,116,101,114,115,32,117,115,
                   101,100,32,97,110,100,32,110,111,116,32,111,110,32,104,111,
                   119,32,116,104,111,115,101,32,99,104,97,114,97,99,116,101,
                   114,115,32,97,114,101,32,114,101,112,114,101,115,101,110,
                   116,101,100,32,105,110,32,97,32,110,101,116,119,111,114,
                   107,32,112,114,111,116,111,99,111,108,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "GThe functions implemented by this module cover the following use cases:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,
            {above,
             {above,
              {above,
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{sep,
                    [{text,
                      "3Parsing URIs into its components and returing a map"}],
                    0,false},
                   {above,{above,null,null},null},
                   {text,
                    [19,91,112,97,114,115,101,47,49,93,40,35,112,97,114,115,
                     101,47,49,41]}],
                  0,false}],
                0,false},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{sep,
                    [{text,
                      "5Recomposing a map of URI components into a URI string"}],
                    0,false},
                   {above,{above,null,null},null},
                   {text,"\e[recompose/1](#recompose/1)"}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,
                   [{text,
                     "4Changing inbound binary and percent-encoding of URIs"}],
                   0,false},
                  {above,{above,null,null},null},
                  {text,"\e[transcode/2](#transcode/2)"}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,"(Transforming URIs into a normalized form"}],
                  0,false},
                 {above,{above,null,null},null},
                 {text,"\e[normalize/1](#normalize/1)"},
                 {above,{above,null,null},null},
                 {text,"\e[normalize/2](#normalize/2)"}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   "FComposing form-urlencoded query strings from a list of key-value pairs"}],
                 0,false},
                {above,{above,null,null},null},
                {text,"#[compose_query/1](#compose_query/1)"},
                {above,{above,null,null},null},
                {text,"#[compose_query/2](#compose_query/2)"}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{sep,
                [{text,
                  "GDissecting form-urlencoded query strings into a list of key-value pairs"}],
                0,false},
               {above,{above,null,null},null},
               {text,"#[dissect_query/1](#dissect_query/1)"}],
              0,false}],
            0,false}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "GThere are four different encodings present during the handling of URIs:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},{text,"#Inbound binary encoding in binaries"}],
              0,false},
             {sep,
              [{text,[1,42]},
               {text,".Inbound percent-encoding in lists and binaries"}],
              0,false}},
            {sep,
             [{text,[1,42]},{text,"$Outbound binary encoding in binaries"}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {text,"/Outbound percent-encoding in lists and binaries"}],
            0,false}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [14,70,117,110,99,116,105,111,110,115,32,119,105,116,
                     104]}],
                  0,false},
                 {text,
                  [14,42,117,114,105,95,115,116,114,105,110,103,40,41,42]},
                 {sep,
                  [{text,
                    "targument accept lists, binaries and mixed lists (lists with binary elements) as input type. All of the functions but"}],
                  0,false},
                 {text,"\r*transcode/2*"},
                 {sep,
                  [{text,
                    [158,101,120,112,101,99,116,115,32,105,110,112,117,116,32,
                     97,115,32,108,105,115,116,115,32,111,102,32,117,110,105,
                     99,111,100,101,32,99,111,100,101,112,111,105,110,116,115,
                     44,32,85,84,70,45,56,32,101,110,99,111,100,101,100,32,98,
                     105,110,97,114,105,101,115,32,97,110,100,32,85,84,70,45,
                     56,32,112,101,114,99,101,110,116,45,101,110,99,111,100,
                     101,100,32,85,82,73,32,112,97,114,116,115,32,40,34,37,67,
                     51,37,66,54,34,32,99,111,114,114,101,115,112,111,110,100,
                     115,32,116,111,32,116,104,101,32,117,110,105,99,111,100,
                     101,32,99,104,97,114,97,99,116,101,114,32,34,195,182,34,
                     41,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ÝUnless otherwise specified the return value type and encoding are the same as the input type and encoding. That is, binary input returns binary output, list input returns a list output but mixed input returns list output."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [133,73,110,32,99,97,115,101,32,111,102,32,108,105,115,
                     116,115,32,116,104,101,114,101,32,105,115,32,111,110,108,
                     121,32,112,101,114,99,101,110,116,45,101,110,99,111,100,
                     105,110,103,46,32,73,110,32,98,105,110,97,114,105,101,
                     115,44,32,104,111,119,101,118,101,114,44,32,98,111,116,
                     104,32,98,105,110,97,114,121,32,101,110,99,111,100,105,
                     110,103,32,97,110,100,32,112,101,114,99,101,110,116,45,
                     101,110,99,111,100,105,110,103,32,115,104,97,108,108,32,
                     98,101,32,99,111,110,115,105,100,101,114,101,100,46]}],
                  0,false},
                 {text,"\r*transcode/2*"},
                 {sep,
                  [{text,
                    "Iprovides the means to convert between the supported encodings, it takes a"}],
                  0,false},
                 {text,
                  [14,42,117,114,105,95,115,116,114,105,110,103,40,41,42]},
                 {sep,
                  [{text,
                    "@and a list of options specifying inbound and outbound encodings."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"0[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)"},
                 {sep,
                  [{text,
                    [258,100,111,101,115,32,110,111,116,32,109,97,110,100,97,
                     116,101,32,97,110,121,32,115,112,101,99,105,102,105,99,
                     32,99,104,97,114,97,99,116,101,114,32,101,110,99,111,100,
                     105,110,103,32,97,110,100,32,105,116,32,105,115,32,117,
                     115,117,97,108,108,121,32,100,101,102,105,110,101,100,32,
                     98,121,32,116,104,101,32,112,114,111,116,111,99,111,108,
                     32,111,114,32,115,117,114,114,111,117,110,100,105,110,
                     103,32,116,101,120,116,46,32,84,104,105,115,32,108,105,
                     98,114,97,114,121,32,116,97,107,101,115,32,116,104,101,
                     32,115,97,109,101,32,97,115,115,117,109,112,116,105,111,
                     110,44,32,98,105,110,97,114,121,32,97,110,100,32,112,101,
                     114,99,101,110,116,45,101,110,99,111,100,105,110,103,32,
                     97,114,101,32,104,97,110,100,108,101,100,32,97,115,32,
                     111,110,101,32,99,111,110,102,105,103,117,114,97,116,105,
                     111,110,32,117,110,105,116,44,32,116,104,101,121,32,99,
                     97,110,110,111,116,32,98,101,32,115,101,116,32,116,111,
                     32,100,105,102,102,101,114,101,110,116,32,118,97,108,117,
                     101,115,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f# Data Types"},null},null}},
    {sep,
     [{sep,[{text,[5,101,114,114,111,114]}],0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "RError tuple indicating the type of error. Possible values of the second component:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {sep,
                 [{text,[1,42]},
                  {text,
                   [19,42,105,110,118,97,108,105,100,95,99,104,97,114,97,99,
                    116,101,114,42]}],
                 0,false},
                {sep,
                 [{text,[1,42]},
                  {text,
                   [18,42,105,110,118,97,108,105,100,95,101,110,99,111,100,
                    105,110,103,42]}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {text,
                  [15,42,105,110,118,97,108,105,100,95,105,110,112,117,116,
                   42]}],
                0,false}},
              {sep,[{text,[1,42]},{text,"\r*invalid_map*"}],0,false}},
             {sep,
              [{text,[1,42]},
               {text,
                [26,42,105,110,118,97,108,105,100,95,112,101,114,99,101,110,
                 116,95,101,110,99,111,100,105,110,103,42]}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {text,
               [16,42,105,110,118,97,108,105,100,95,115,99,104,101,109,101,
                42]}],
             0,false}},
           {sep,[{text,[1,42]},{text,"\r*invalid_uri*"}],0,false}},
          {sep,
           [{text,[1,42]},
            {text,[14,42,105,110,118,97,108,105,100,95,117,116,102,56,42]}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {text,
            [15,42,109,105,115,115,105,110,103,95,118,97,108,117,101,42]}],
          0,false}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "\\The third component is a term providing additional information about the cause of the error."}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{sep,[{text,[7,117,114,105,95,109,97,112]}],0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,")Map holding the main components of a URI."}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{sep,[{text,"\nuri_string"}],0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "XList of unicode codepoints, a UTF-8 encoded binary, or a mix of the two, representing an"}],
                0,false},
               {text,"0[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)"},
               {sep,
                [{text,
                  [15,99,111,109,112,108,105,97,110,116,32,85,82,73,32,40]}],
                0,false},
               {text,
                [24,42,42,112,101,114,99,101,110,116,45,101,110,99,111,100,
                 101,100,32,102,111,114,109,42,42]},
               {sep,
                [{text,
                  [140,41,46,32,65,32,85,82,73,32,105,115,32,97,32,115,101,
                   113,117,101,110,99,101,32,111,102,32,99,104,97,114,97,99,
                   116,101,114,115,32,102,114,111,109,32,97,32,118,101,114,
                   121,32,108,105,109,105,116,101,100,32,115,101,116,58,32,
                   116,104,101,32,108,101,116,116,101,114,115,32,111,102,32,
                   116,104,101,32,98,97,115,105,99,32,76,97,116,105,110,32,97,
                   108,112,104,97,98,101,116,44,32,100,105,103,105,116,115,44,
                   32,97,110,100,32,97,32,102,101,119,32,115,112,101,99,105,
                   97,108,32,99,104,97,114,97,99,116,101,114,115,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [18,35,35,32,99,111,109,112,111,115,101,95,113,117,101,114,121,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," Compose urlencoded query string."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [26,67,111,109,112,111,115,101,115,32,97,32,102,111,114,109,45,
                117,114,108,101,110,99,111,100,101,100]}],
             0,false},
            {text,"\r*QueryString*"},
            {sep,[{text,"\nbased on a"}],0,false},
            {text,"\v*QueryList*"},
            {sep,
             [{text,
               "h, a list of non-percent-encoded key-value pairs. Form-urlencoding is defined in section 4.10.21.6 of the"}],
             0,false},
            {text,")[HTML 5.2](https://www.w3.org/TR/html52/)"},
            {sep,
             [{text,"-specification and in section 4.10.22.6 of the"}],
             0,false},
            {text,")[HTML 5.0](https://www.w3.org/TR/html50/)"},
            {sep,[{text,"&specification for non-UTF-8 encodings."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [31,83,101,101,32,97,108,115,111,32,116,104,101,32,111,112,112,
                111,115,105,116,101,32,111,112,101,114,97,116,105,111,110]}],
             0,false},
            {text,"#[dissect_query/1](#dissect_query/1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,
             "?uri_string:compose_query([{\"foo bar\",\"1\"},{\"city\",\"Ã¶rebro\"}])."},
            {text,[1,10]},
            {text,
             [28,34,102,111,111,43,98,97,114,61,49,38,99,105,116,121,61,37,67,
              51,37,66,54,114,101,98,114,111,34]},
            {text,[4,10,50,62,32]},
            {text,
             "Xuri_string:compose_query([{<<\"foo bar\">>,<<\"1\">>},\n2> {<<\"city\">>,<<\"Ã¶rebro\"/utf8>>}])."},
            {text,[1,10]},
            {text," <<\"foo+bar=1&city=%C3%B6rebro\">>"},
            {text,"\b\n\t"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [18,35,35,32,99,111,109,112,111,115,101,95,113,117,101,114,121,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," Compose urlencoded query string."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {text,
             [17,42,99,111,109,112,111,115,101,95,113,117,101,114,121,47,49,
              42]},
            {sep,
             [{text,
               [22,98,117,116,32,119,105,116,104,32,97,110,32,97,100,100,105,
                116,105,111,110,97,108]}],
             0,false},
            {text,"\t*Options*"},
            {sep,
             [{text,
               "tparameter, that controls the encoding (\"charset\") used by the encoding algorithm. There are two supported encodings:"}],
             0,false},
            {text,[6,42,117,116,102,56,42]},
            {sep,[{text,[3,40,111,114]}],0,false},
            {text,"\t*unicode*"},
            {sep,[{text,[5,41,32,97,110,100]}],0,false},
            {text,"\b*latin1*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [335,69,97,99,104,32,99,104,97,114,97,99,116,101,114,32,105,110,
              32,116,104,101,32,101,110,116,114,121,39,115,32,110,97,109,101,
              32,97,110,100,32,118,97,108,117,101,32,116,104,97,116,32,99,97,
              110,110,111,116,32,98,101,32,101,120,112,114,101,115,115,101,
              100,32,117,115,105,110,103,32,116,104,101,32,115,101,108,101,99,
              116,101,100,32,99,104,97,114,97,99,116,101,114,32,101,110,99,
              111,100,105,110,103,44,32,105,115,32,114,101,112,108,97,99,101,
              100,32,98,121,32,97,32,115,116,114,105,110,103,32,99,111,110,
              115,105,115,116,105,110,103,32,111,102,32,97,32,85,43,48,48,50,
              54,32,65,77,80,69,82,83,65,78,68,32,99,104,97,114,97,99,116,101,
              114,32,40,38,41,44,32,97,32,34,35,34,32,40,85,43,48,48,50,51,41,
              32,99,104,97,114,97,99,116,101,114,44,32,111,110,101,32,111,114,
              32,109,111,114,101,32,65,83,67,73,73,32,100,105,103,105,116,115,
              32,114,101,112,114,101,115,101,110,116,105,110,103,32,116,104,
              101,32,85,110,105,99,111,100,101,32,99,111,100,101,32,112,111,
              105,110,116,32,111,102,32,116,104,101,32,99,104,97,114,97,99,
              116,101,114,32,105,110,32,98,97,115,101,32,116,101,110,44,32,97,
              110,100,32,102,105,110,97,108,108,121,32,97,32,34,59,34,32,40,
              85,43,48,48,51,66,41,32,99,104,97,114,97,99,116,101,114,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ðBytes that are out of the range 0x2A, 0x2D, 0x2E, 0x30 to 0x39, 0x41 to 0x5A, 0x5F, 0x61 to 0x7A, are percent-encoded (U+0025 PERCENT SIGN character (%) followed by uppercase ASCII hex digits representing the hexadecimal value of the byte)."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [31,83,101,101,32,97,108,115,111,32,116,104,101,32,111,112,112,
                111,115,105,116,101,32,111,112,101,114,97,116,105,111,110]}],
             0,false},
            {text,"#[dissect_query/1](#dissect_query/1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,
             ">uri_string:compose_query([{\"foo bar\",\"1\"},{\"city\",\"Ã¶rebro\"}],"},
            {text,"\e\n1> [{encoding, latin1}]).\n"},
            {text,
             [138,34,102,111,111,43,98,97,114,61,49,38,99,105,116,121,61,37,
              70,54,114,101,98,114,111,34,10,50,62,32,117,114,105,95,115,116,
              114,105,110,103,58,99,111,109,112,111,115,101,95,113,117,101,
              114,121,40,91,123,60,60,34,102,111,111,32,98,97,114,34,62,62,44,
              60,60,34,49,34,62,62,125,44,10,50,62,32,123,60,60,34,99,105,116,
              121,34,62,62,44,60,60,34,230,157,177,228,186,172,34,47,117,116,
              102,56,62,62,125,93,44,32,91,123,101,110,99,111,100,105,110,103,
              44,32,108,97,116,105,110,49,125,93,41,46]},
            {text,[1,10]},
            {text,"1<<\"foo+bar=1&city=%26%2326481%3B%26%2320140%3B\">>"},
            {text,"\b\n\t"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [18,35,35,32,100,105,115,115,101,99,116,95,113,117,101,114,121,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [21,68,105,115,115,101,99,116,32,113,117,101,114,121,32,115,116,
            114,105,110,103,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [22,68,105,115,115,101,99,116,115,32,97,110,32,117,114,108,101,
                110,99,111,100,101,100]}],
             0,false},
            {text,"\r*QueryString*"},
            {sep,[{text,"\rand returns a"}],0,false},
            {text,"\v*QueryList*"},
            {sep,
             [{text,
               "h, a list of non-percent-encoded key-value pairs. Form-urlencoding is defined in section 4.10.21.6 of the"}],
             0,false},
            {text,")[HTML 5.2](https://www.w3.org/TR/html52/)"},
            {sep,
             [{text,"-specification and in section 4.10.22.6 of the"}],
             0,false},
            {text,")[HTML 5.0](https://www.w3.org/TR/html50/)"},
            {sep,[{text,"&specification for non-UTF-8 encodings."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [31,83,101,101,32,97,108,115,111,32,116,104,101,32,111,112,112,
                111,115,105,116,101,32,111,112,101,114,97,116,105,111,110]}],
             0,false},
            {text,"#[compose_query/1](#compose_query/1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,
             "7uri_string:dissect_query(\"foo+bar=1&city=%C3%B6rebro\")."},
            {text,")\n[{\"foo bar\",\"1\"},{\"city\",\"Ã¶rebro\"}]\n2> "},
            {text,
             "Luri_string:dissect_query(<<\"foo+bar=1&city=%26%2326481%3B%26%2320140%3B\">>)."},
            {text,[1,10]},
            {text,
             "E[{<<\"foo bar\">>,<<\"1\">>},\n {<<\"city\">>,<<230,157,177,228,186,172>>}] "},
            {text,"\b\n\t"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[14,35,35,32,110,111,114,109,97,108,105,122,101,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,[{sep,[{text,"\eSyntax-based normalization."}],0,false}],0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\rTransforms an"}],0,false},
            {text,[5,42,85,82,73,42]},
            {sep,
             [{text,
               "Einto a normalized form using Syntax-Based Normalization as defined by"}],
             0,false},
            {text,"0[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÂThis function implements case normalization, percent-encoding normalization, path segment normalization and scheme based normalization for HTTP(S) with basic support for FTP, SSH, SFTP and TFTP."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,")uri_string:normalize(\"/a/b/c/./../../g\")."},
            {text,"\v\n\"/a/g\"\n2> "},
            {text,"/uri_string:normalize(<<\"mid/content=5/../6\">>)."},
            {text,[1,10]},
            {text,"\v<<\"mid/6\">>"},
            {text,
             "I\n3> uri_string:normalize(\"http://localhost:80\").\n\"https://localhost/\"\n4> "},
            {text,
             "Nuri_string:normalize(#{scheme => \"http\",port => 80,path => \"/a/b/c/./../../g\","},
            {text,
             "H\n4> host => \"localhost-Ã¶rebro\"}).\n\"http://localhost-%C3%B6rebro/a/g\"\n\t"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[14,35,35,32,110,111,114,109,97,108,105,122,101,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,[{sep,[{text,"\eSyntax-based normalization."}],0,false}],0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
            {text,"\r*normalize/1*"},
            {sep,
             [{text,
               [22,98,117,116,32,119,105,116,104,32,97,110,32,97,100,100,105,
                116,105,111,110,97,108]}],
             0,false},
            {text,"\t*Options*"},
            {sep,
             [{text,
               "pparameter, that controls if the normalized URI shall be returned as an uri_map(). There is one supported option:"}],
             0,false},
            {text,"\f*return_map*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,
             "7uri_string:normalize(\"/a/b/c/./../../g\", [return_map])."},
            {text,
             [22,10,35,123,112,97,116,104,32,61,62,32,34,47,97,47,103,34,125,
              10,50,62,32]},
            {text,
             "=uri_string:normalize(<<\"mid/content=5/../6\">>, [return_map])."},
            {text,[1,10]},
            {text,
             [22,35,123,112,97,116,104,32,61,62,32,60,60,34,109,105,100,47,54,
              34,62,62,125]},
            {text,
             "v\n3> uri_string:normalize(\"http://localhost:80\", [return_map]).\n#{scheme => \"http\",path => \"/\",host => \"localhost\"}\n4> "},
            {text,
             "Nuri_string:normalize(#{scheme => \"http\",port => 80,path => \"/a/b/c/./../../g\","},
            {text,
             "x\n4> host => \"localhost-Ã¶rebro\"}, [return_map]).\n#{scheme => \"http\",path => \"/a/g\",host => \"localhost-Ã¶rebro\"}\n\t"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## parse/1"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [21,80,97,114,115,101,32,85,82,73,32,105,110,116,111,32,97,32,109,
            97,112,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\tParses an"}],0,false},
            {text,"0[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)"},
            {sep,[{text,"\tcompliant"}],0,false},
            {text,[14,42,117,114,105,95,115,116,114,105,110,103,40,41,42]},
            {sep,[{text,[6,105,110,116,111,32,97]}],0,false},
            {text,"\v*uri_map()*"},
            {sep,
             [{text,"), that holds the parsed components of the"}],
             0,false},
            {text,[5,42,85,82,73,42]},
            {sep,
             [{text,"/. If parsing fails, an error tuple is returned."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [31,83,101,101,32,97,108,115,111,32,116,104,101,32,111,112,112,
                111,115,105,116,101,32,111,112,101,114,97,116,105,111,110]}],
             0,false},
            {text,"\e[recompose/1](#recompose/1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,
             "Luri_string:parse(\"foo://user@example.com:8042/over/there?name=ferret#nose\")."},
            {text,
             [145,10,35,123,102,114,97,103,109,101,110,116,32,61,62,32,34,110,
              111,115,101,34,44,104,111,115,116,32,61,62,32,34,101,120,97,109,
              112,108,101,46,99,111,109,34,44,10,32,32,112,97,116,104,32,61,
              62,32,34,47,111,118,101,114,47,116,104,101,114,101,34,44,112,
              111,114,116,32,61,62,32,56,48,52,50,44,113,117,101,114,121,32,
              61,62,32,34,110,97,109,101,61,102,101,114,114,101,116,34,44,10,
              32,32,115,99,104,101,109,101,32,61,62,32,102,111,111,44,117,115,
              101,114,105,110,102,111,32,61,62,32,34,117,115,101,114,34,125,
              10,50,62,32]},
            {text,
             "Kuri_string:parse(<<\"foo://user@example.com:8042/over/there?name=ferret\">>)."},
            {text,[1,10]},
            {text,
             [143,35,123,104,111,115,116,32,61,62,32,60,60,34,101,120,97,109,
              112,108,101,46,99,111,109,34,62,62,44,112,97,116,104,32,61,62,
              32,60,60,34,47,111,118,101,114,47,116,104,101,114,101,34,62,62,
              44,10,32,32,112,111,114,116,32,61,62,32,56,48,52,50,44,113,117,
              101,114,121,32,61,62,32,60,60,34,110,97,109,101,61,102,101,114,
              114,101,116,34,62,62,44,115,99,104,101,109,101,32,61,62,32,60,
              60,34,102,111,111,34,62,62,44,10,32,32,117,115,101,114,105,110,
              102,111,32,61,62,32,60,60,34,117,115,101,114,34,62,62,125]},
            {text,"\b\n\t"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[14,35,35,32,114,101,99,111,109,112,111,115,101,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,[14,82,101,99,111,109,112,111,115,101,32,85,82,73,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\nCreates an"}],0,false},
            {text,"0[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)"},
            {sep,[{text,"\tcompliant"}],0,false},
            {text,"\v*URIString*"},
            {sep,
             [{text,"-(percent-encoded), based on the components of"}],
             0,false},
            {text,"\b*URIMap*"},
            {sep,[{text,"\b. If the"}],0,false},
            {text,"\b*URIMap*"},
            {sep,[{text,"'is invalid, an error tuple is returned."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [31,83,101,101,32,97,108,115,111,32,116,104,101,32,111,112,112,
                111,115,105,116,101,32,111,112,101,114,97,116,105,111,110]}],
             0,false},
            {text,
             [19,91,112,97,114,115,101,47,49,93,40,35,112,97,114,115,101,47,
              49,41]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,
             "LURIMap = #{fragment => \"nose\", host => \"example.com\", path => \"/over/there\","},
            {text,
             "á\n1> port => 8042, query => \"name=ferret\", scheme => \"foo\", userinfo => \"user\"}.\n#{fragment => \"top\",host => \"example.com\",\n  path => \"/over/there\",port => 8042,query => \"?name=ferret\",\n  scheme => foo,userinfo => \"user\"}\n\n2> "},
            {text,
             [29,117,114,105,95,115,116,114,105,110,103,58,114,101,99,111,109,
              112,111,115,101,40,85,82,73,77,97,112,41,46]},
            {text,
             "5\n\"foo://example.com:8042/over/there?name=ferret#nose\""}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,[14,35,35,32,116,114,97,110,115,99,111,100,101,47,50]},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,[14,84,114,97,110,115,99,111,100,101,32,85,82,73,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\rTranscodes an"}],0,false},
            {text,"0[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)"},
            {sep,[{text,"\tcompliant"}],0,false},
            {text,"\v*URIString*"},
            {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
            {text,"\t*Options*"},
            {sep,
             [{text,"4is a list of tagged tuples, specifying the inbound ("}],
             0,false},
            {text,"\r*in_encoding*"},
            {sep,
             [{text,
               [16,41,32,97,110,100,32,111,117,116,98,111,117,110,100,32,40]}],
             0,false},
            {text,[14,42,111,117,116,95,101,110,99,111,100,105,110,103,42]},
            {sep,[{text,"\f) encodings."}],0,false},
            {text,"\r*in_encoding*"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[14,42,111,117,116,95,101,110,99,111,100,105,110,103,42]},
            {sep,
             [{text,
               "æspecifies both binary encoding and percent-encoding for the input and output data. Mixed encoding, where binary encoding is not the same as percent-encoding, is not supported. If an argument is invalid, an error tuple is returned."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,"4uri_string:transcode(<<\"foo%00%00%00%F6bar\"/utf32>>,"},
            {text,"2\n1> [{in_encoding, utf32},{out_encoding, utf8}]).\n"},
            {text,
             [23,60,60,34,102,111,111,37,67,51,37,66,54,98,97,114,34,47,117,
              116,102,56,62,62]},
            {text,
             "p\n2> uri_string:transcode(\"foo%F6bar\", [{in_encoding, latin1},\n2> {out_encoding, utf8}]).\n\"foo%C3%B6bar\"\n\t"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false}],
  0,false}}
