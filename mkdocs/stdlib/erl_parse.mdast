{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\v# erl_parse"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\v# erl_parse"},null},null}}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [18,84,104,101,32,69,114,108,97,110,103,32,112,97,114,115,101,
               114,46]}],
            0,false}],
          0,true},
         null},
        null}}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "Ã‚This module is the basic Erlang parser that converts tokens into the abstract form of either forms (that is, top-level constructs), expressions, or terms. The Abstract Format is described in the"}],
                    0,false},
                   {text,
                    [30,91,69,82,84,83,32,85,115,101,114,39,115,32,71,117,105,
                     100,101,93,40,46,47,97,98,115,102,111,114,109,41]},
                   {sep,
                    [{text,",. Notice that a token list must end with the"}],
                    0,false},
                   {text,[7,42,42,100,111,116,42,42]},
                   {sep,
                    [{text,
                      "6token to be acceptable to the parse functions (see the"}],
                    0,false},
                   {text,
                    [20,91,101,114,108,95,115,99,97,110,93,40,101,114,108,95,
                     115,99,97,110,41]},
                   {sep,[{text,"\t) module."}],0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}],
         0,true},
        null},
       null}}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\f# Data Types"},null},null}},
      {sep,
       [{sep,
         [{text,
           [17,97,98,115,116,114,97,99,116,95,99,108,97,117,115,101,40,41]}],
         0,false},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,[{text,"\"Abstract form of an Erlang clause."}],0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,false},
      {sep,
       [{sep,
         [{text,[15,97,98,115,116,114,97,99,116,95,101,120,112,114,40,41]}],
         0,false},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"&Abstract form of an Erlang expression."}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,false},
      {sep,
       [{sep,
         [{text,[15,97,98,115,116,114,97,99,116,95,102,111,114,109,40,41]}],
         0,false},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,[{text," Abstract form of an Erlang form."}],0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,false},
      {sep,
       [{sep,
         [{text,[15,97,98,115,116,114,97,99,116,95,116,121,112,101,40,41]}],
         0,false},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,[{text," Abstract form of an Erlang type."}],0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,false},
      {sep,
       [{sep,
         [{text,[14,101,114,108,95,112,97,114,115,101,95,116,114,101,101]}],
         0,false}],
       0,false},
      {sep,
       [{sep,
         [{text,
           [17,101,114,114,111,114,95,100,101,115,99,114,105,112,116,105,111,
            110]}],
         0,false}],
       0,false},
      {sep,[{sep,[{text,"\nerror_info"}],0,false}],0,false},
      {sep,
       [{sep,[{text,"\tform_info"}],0,false},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[6,84,117,112,108,101,115]}],0,false},
                 {text,
                  [23,42,123,101,114,114,111,114,44,32,101,114,114,111,114,95,
                   105,110,102,111,40,41,125,42]},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,
                  [25,42,123,119,97,114,110,105,110,103,44,32,101,114,114,111,
                   114,95,105,110,102,111,40,41,125,42]},
                 {sep,
                  [{text,
                    ":, denoting syntactically incorrect forms and warnings, and"}],
                  0,false},
                 {text,
                  [15,42,123,101,111,102,44,32,108,105,110,101,40,41,125,42]},
                 {sep,
                  [{text,
                    "O, denoting an end-of-stream encountered before a complete form had been parsed."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,false},
      {sep,[{sep,[{text,[5,116,111,107,101,110]}],0,false}],0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\v# Functions"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\r## abstract/1"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"-Convert an Erlang term into an abstract form."}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\"Converts the Erlang data structure"}],0,false},
              {text,[6,42,68,97,116,97,42]},
              {sep,
               [{text,
                 [29,105,110,116,111,32,97,110,32,97,98,115,116,114,97,99,116,
                  32,102,111,114,109,32,111,102,32,116,121,112,101]}],
               0,false},
              {text,"\t*AbsTerm*"},
              {sep,[{text,"!. This function is the inverse of"}],0,false},
              {text,"\e[normalise/1](#normalise/1)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [23,42,101,114,108,95,112,97,114,115,101,58,97,98,115,116,114,
                97,99,116,40,84,41,42]},
              {sep,
               [{text,
                 [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                  111]}],
               0,false},
              {text,
               [26,42,101,114,108,95,112,97,114,115,101,58,97,98,115,116,114,
                97,99,116,40,84,44,32,48,41,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\r## abstract/2"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"-Convert an Erlang term into an abstract form."}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,[{text,[1,42]},{text,"\rencoding_func"}],0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\"Converts the Erlang data structure"}],0,false},
              {text,[6,42,68,97,116,97,42]},
              {sep,
               [{text,
                 [29,105,110,116,111,32,97,110,32,97,98,115,116,114,97,99,116,
                  32,102,111,114,109,32,111,102,32,116,121,112,101]}],
               0,false},
              {text,"\t*AbsTerm*"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
              {text,[6,42,76,105,110,101,42]},
              {sep,
               [{text,"*is the line to be assigned to each node of"}],
               0,false},
              {text,"\t*AbsTerm*"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
              {text,"\n*Encoding*"},
              {sep,
               [{text,
                 "~is used for selecting which integer lists to be considered as strings. The default is to use the encoding returned by function"}],
               0,false},
              {text,"2[epp#default_encoding/0](./epp#default_encoding/0)"},
              {sep,[{text,[7,46,32,86,97,108,117,101]}],0,false},
              {text,[6,42,110,111,110,101,42]},
              {sep,
               [{text,
                 "6means that no integer lists are considered as strings."}],
               0,false},
              {text,
               [17,42,101,110,99,111,100,105,110,103,95,102,117,110,99,40,41,
                42]},
              {sep,
               [{text,
                 "=is called with one integer of a list at a time; if it returns"}],
               0,false},
              {text,[6,42,116,114,117,101,42]},
              {sep,
               [{text,"3for every integer, the list is considered a string."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [19,35,35,32,97,110,110,111,95,102,114,111,109,95,116,101,114,109,47,
          49]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [28,82,101,116,117,114,110,32,97,110,110,111,116,97,116,105,111,
              110,115,32,97,115,32,116,101,114,109,115,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\fAssumes that"}],0,false},
              {text,[6,42,84,101,114,109,42]},
              {sep,[{text,"&is a term with the same structure as a"}],0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 [25,116,114,101,101,44,32,98,117,116,32,119,105,116,104,32,
                  116,101,114,109,115,44,32,115,97,121]}],
               0,false},
              {text,[3,42,84,42]},
              {sep,[{text,"\t, where a"}],0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,".tree has collections of annotations. Returns a"}],
               0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 [20,116,114,101,101,32,119,104,101,114,101,32,101,97,99,104,
                  32,116,101,114,109]}],
               0,false},
              {text,[3,42,84,42]},
              {sep,[{text,"$is replaced by the value returned by"}],0,false},
              {text,".[erl_anno#from_term/1](./erl_anno#from_term/1)"},
              {sep,[{text,"\n. The term"}],0,false},
              {text,[6,42,84,101,114,109,42]},
              {sep,
               [{text,
                 "5is traversed in a depth-first, left-to-right fashion."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [17,35,35,32,97,110,110,111,95,116,111,95,116,101,114,109,47,49]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,")Return the representation of annotations."}],0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,"3Returns a term where each collection of annotations"}],
               0,false},
              {text,[6,42,65,110,110,111,42]},
              {sep,
               [{text,
                 [19,111,102,32,116,104,101,32,110,111,100,101,115,32,111,102,
                  32,116,104,101]}],
               0,false},
              {text,"\v*erl_parse*"},
              {sep,[{text,[4,116,114,101,101]}],0,false},
              {text,[7,42,65,98,115,116,114,42]},
              {sep,[{text,"#is replaced by the term returned by"}],0,false},
              {text,"*[erl_anno#to_term/1](./erl_anno#to_term/1)"},
              {sep,[{text,[5,46,32,84,104,101]}],0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 ":tree is traversed in a depth-first, left-to-right fashion."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[14,35,35,32,102,111,108,100,95,97,110,110,111,47,51]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"*Fold a function over the annotations of an"}],
             0,false},
            {text,"\v*erl_parse*"},
            {sep,[{text,[5,116,114,101,101,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\"Updates an accumulator by applying"}],0,false},
              {text,[5,42,70,117,110,42]},
              {sep,
               [{text,"(on each collection of annotations of the"}],
               0,false},
              {text,"\v*erl_parse*"},
              {sep,[{text,[4,116,114,101,101]}],0,false},
              {text,[7,42,65,98,115,116,114,42]},
              {sep,
               [{text,
                 [19,46,32,84,104,101,32,102,105,114,115,116,32,99,97,108,108,
                  32,116,111]}],
               0,false},
              {text,[5,42,70,117,110,42]},
              {sep,[{text,[3,104,97,115]}],0,false},
              {text,[7,42,65,99,99,73,110,42]},
              {sep,[{text,"%as argument, the returned accumulator"}],0,false},
              {text,"\b*AccOut*"},
              {sep,
               [{text,
                 "Zis passed to the next call, and so on. The final value of the accumulator is returned. The"}],
               0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 ":tree is traversed in a depth-first, left-to-right fashion."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,")## format_error(ErrorDescriptor) -> Chars"},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,[{sep,[{text,"\eFormat an error descriptor."}],0,false}],0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{sep,
             [{text,
               [17,69,114,114,111,114,68,101,115,99,114,105,112,116,111,114,
                32,61]}],
             0,false},
            {text,"'[error_description()](#type-error_info)"}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [24,67,104,97,114,115,32,61,32,91,99,104,97,114,40,41,32,124,32,67,
            104,97,114,115,93]}],
         0,false}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[7,85,115,101,115,32,97,110]}],0,false},
              {text,
               [17,42,69,114,114,111,114,68,101,115,99,114,105,112,116,111,
                114,42]},
              {sep,
               [{text,
                 "aand returns a string that describes the error. This function is usually called implicitly when an"}],
               0,false},
              {text,"\v*ErrorInfo*"},
              {sep,[{text,"#structure is processed (see section"}],0,false},
              {text,
               [31,91,69,114,114,111,114,32,73,110,102,111,114,109,97,116,105,
                111,110,93,40,35,101,114,114,111,114,105,110,102,111,41]},
              {sep,[{text,[2,41,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\r## map_anno/2"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,")Map a function over the annotations of an"}],
             0,false},
            {text,"\v*erl_parse*"},
            {sep,[{text,[5,116,114,101,101,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\fModifies the"}],0,false},
              {text,"\v*erl_parse*"},
              {sep,[{text,[4,116,114,101,101]}],0,false},
              {text,[7,42,65,98,115,116,114,42]},
              {sep,[{text,"\vby applying"}],0,false},
              {text,[5,42,70,117,110,42]},
              {sep,
               [{text,
                 "5on each collection of annotations of the nodes of the"}],
               0,false},
              {text,"\v*erl_parse*"},
              {sep,[{text,"\ttree. The"}],0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 ":tree is traversed in a depth-first, left-to-right fashion."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [17,35,35,32,109,97,112,102,111,108,100,95,97,110,110,111,47,51]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"2Map and fold a function over the annotations of an"}],
             0,false},
            {text,"\v*erl_parse*"},
            {sep,[{text,[5,116,114,101,101,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\fModifies the"}],0,false},
              {text,"\v*erl_parse*"},
              {sep,[{text,[4,116,114,101,101]}],0,false},
              {text,[7,42,65,98,115,116,114,42]},
              {sep,[{text,"\vby applying"}],0,false},
              {text,[5,42,70,117,110,42]},
              {sep,
               [{text,
                 "5on each collection of annotations of the nodes of the"}],
               0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 "Gtree, while at the same time updating an accumulator. The first call to"}],
               0,false},
              {text,[5,42,70,117,110,42]},
              {sep,[{text,[3,104,97,115]}],0,false},
              {text,[7,42,65,99,99,73,110,42]},
              {sep,
               [{text,",as second argument, the returned accumulator"}],
               0,false},
              {text,"\b*AccOut*"},
              {sep,
               [{text,"3is passed to the next call, and so on. The modified"}],
               0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 "=tree and the final value of the accumulator are returned. The"}],
               0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 ":tree is traversed in a depth-first, left-to-right fashion."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\r## new_anno/1"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [23,67,114,101,97,116,101,32,110,101,119,32,97,110,110,111,116,
              97,116,105,111,110,115,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\fAssumes that"}],0,false},
              {text,[6,42,84,101,114,109,42]},
              {sep,[{text,"&is a term with the same structure as a"}],0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 [14,116,114,101,101,44,32,98,117,116,32,119,105,116,104]}],
               0,false},
              {text,"%[locations](./erl_anno#type-location)"},
              {sep,[{text,[7,119,104,101,114,101,32,97]}],0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,".tree has collections of annotations. Returns a"}],
               0,false},
              {text,"\v*erl_parse*"},
              {sep,
               [{text,
                 [24,116,114,101,101,32,119,104,101,114,101,32,101,97,99,104,
                  32,108,111,99,97,116,105,111,110]}],
               0,false},
              {text,[3,42,76,42]},
              {sep,[{text,"$is replaced by the value returned by"}],0,false},
              {text,"\"[erl_anno#new/1](./erl_anno#new/1)"},
              {sep,[{text,"\n. The term"}],0,false},
              {text,[6,42,84,101,114,109,42]},
              {sep,
               [{text,
                 "5is traversed in a depth-first, left-to-right fashion."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[14,35,35,32,110,111,114,109,97,108,105,115,101,47,49]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"(Convert abstract form to an Erlang term."}],0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [26,67,111,110,118,101,114,116,115,32,116,104,101,32,97,98,
                  115,116,114,97,99,116,32,102,111,114,109]}],
               0,false},
              {text,"\t*AbsTerm*"},
              {sep,
               [{text,
                 "oof a term into a conventional Erlang data structure (that is, the term itself). This function is the inverse of"}],
               0,false},
              {text,
               [25,91,97,98,115,116,114,97,99,116,47,49,93,40,35,97,98,115,
                116,114,97,99,116,47,49,41]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[16,35,35,32,112,97,114,115,101,95,101,120,112,114,115,47,49]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [25,80,97,114,115,101,32,69,114,108,97,110,103,32,101,120,112,
              114,101,115,115,105,111,110,115,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[6,80,97,114,115,101,115]}],0,false},
              {text,"\b*Tokens*"},
              {sep,
               [{text,
                 "Aas if it was a list of expressions. Returns one of the following:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {text,[4,60,100,108,62]},
         {nest,4,
          {above,
           {above,
            {above,
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,
                   [{sep,
                     [{sep,[{text,[4,123,111,107,44]}],0,false},
                      {sep,[{text,"\bExprList"}],0,false},
                      {sep,[{text,[1,125]}],0,false}],
                     0,false}],
                   0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,"\eThe parsing was successful."}],
                          0,false},
                         {sep,[{text,"\bExprList"}],0,false},
                         {sep,
                          [{text,
                            ":is a list of the abstract forms of the parsed expressions."}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{sep,
                    [{sep,[{text,[7,123,101,114,114,111,114,44]}],0,false},
                     {sep,[{text,"\tErrorInfo"}],0,false},
                     {sep,[{text,[1,125]}],0,false}],
                    0,false}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        [18,65,110,32,101,114,114,111,114,32,111,99,99,117,
                         114,114,101,100,46]}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}}}},
        {text,[5,60,47,100,108,62]}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[15,35,35,32,112,97,114,115,101,95,102,111,114,109,47,49]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [21,80,97,114,115,101,32,97,110,32,69,114,108,97,110,103,32,102,
              111,114,109,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[6,80,97,114,115,101,115]}],0,false},
              {text,"\b*Tokens*"},
              {sep,
               [{text,"2as if it was a form. Returns one of the following:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {text,[4,60,100,108,62]},
         {nest,4,
          {above,
           {above,
            {above,
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,
                   [{sep,
                     [{sep,[{text,[4,123,111,107,44]}],0,false},
                      {sep,[{text,[7,65,98,115,70,111,114,109]}],0,false},
                      {sep,[{text,[1,125]}],0,false}],
                     0,false}],
                   0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,"\eThe parsing was successful."}],
                          0,false},
                         {sep,[{text,[7,65,98,115,70,111,114,109]}],0,false},
                         {sep,
                          [{text,"(is the abstract form of the parsed form."}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{sep,
                    [{sep,[{text,[7,123,101,114,114,111,114,44]}],0,false},
                     {sep,[{text,"\tErrorInfo"}],0,false},
                     {sep,[{text,[1,125]}],0,false}],
                    0,false}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        [18,65,110,32,101,114,114,111,114,32,111,99,99,117,
                         114,114,101,100,46]}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}}}},
        {text,[5,60,47,100,108,62]}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[15,35,35,32,112,97,114,115,101,95,116,101,114,109,47,49]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [21,80,97,114,115,101,32,97,110,32,69,114,108,97,110,103,32,116,
              101,114,109,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[6,80,97,114,115,101,115]}],0,false},
              {text,"\b*Tokens*"},
              {sep,
               [{text,"2as if it was a term. Returns one of the following:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {text,[4,60,100,108,62]},
         {nest,4,
          {above,
           {above,
            {above,
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,
                   [{sep,
                     [{sep,[{text,[4,123,111,107,44]}],0,false},
                      {sep,[{text,[4,84,101,114,109]}],0,false},
                      {sep,[{text,[1,125]}],0,false}],
                     0,false}],
                   0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,"\eThe parsing was successful."}],
                          0,false},
                         {sep,[{text,[4,84,101,114,109]}],0,false},
                         {sep,
                          [{text,
                            "3is the Erlang term corresponding to the token list."}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{sep,
                    [{sep,[{text,[7,123,101,114,114,111,114,44]}],0,false},
                     {sep,[{text,"\tErrorInfo"}],0,false},
                     {sep,[{text,[1,125]}],0,false}],
                    0,false}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        [18,65,110,32,101,114,114,111,114,32,111,99,99,117,
                         114,114,101,100,46]}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}}}},
        {text,[5,60,47,100,108,62]}}],
      0,false},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\v## tokens/1"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\v## tokens/2"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,",Generate a list of tokens for an expression."}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "9Generates a list of tokens representing the abstract form"}],
               0,false},
              {text,"\t*AbsTerm*"},
              {sep,
               [{text,
                 [29,111,102,32,97,110,32,101,120,112,114,101,115,115,105,111,
                  110,46,32,79,112,116,105,111,110,97,108,108,121,44]}],
               0,false},
              {text,"\f*MoreTokens*"},
              {sep,[{text,"\fis appended."}],0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}],
    0,false}},
  {sep,
   [{text,"!<a name=\"errorinfo\">errorinfo</a>"},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [20,35,35,32,69,114,114,111,114,32,73,110,102,111,114,109,97,116,105,
         111,110]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"\v*ErrorInfo*"},
           {sep,
            [{text,
              [15,105,115,32,116,104,101,32,115,116,97,110,100,97,114,100]}],
            0,false},
           {text,"\v*ErrorInfo*"},
           {sep,
            [{text,
              "Jstructure that is returned from all I/O modules. The format is as follows:"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,[{text,"%\n{ErrorLine, Module, ErrorDescriptor}"}],0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "BA string describing the error is obtained with the following call:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,[{text,"%\nModule:format_error(ErrorDescriptor)"}],0,true}},
        {text,[3,96,96,96]}},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## See Also"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [20,91,101,114,108,95,97,110,110,111,93,40,101,114,108,95,97,110,
            110,111,41]},
          {sep,[{text,[1,44]}],0,false},
          {text,
           [20,91,101,114,108,95,115,99,97,110,93,40,101,114,108,95,115,99,97,
            110,41]},
          {sep,[{text,[1,44]}],0,false},
          {text,"\b[io](io)"},
          {sep,[{text,"\t, section"}],0,false},
          {text," [The Abstract Format](./absform)"},
          {sep,
           [{text,
             [24,105,110,32,116,104,101,32,69,82,84,83,32,85,115,101,114,39,
              115,32,71,117,105,100,101]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
