{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\v# ct_telnet"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\v# ct_telnet"},null},null}}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "GCommon Test specific layer on top of Telnet client ct_telnet_client.erl"}],
            0,false}],
          0,true},
         null},
        null}}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,"\r*Common Test*"},
                   {sep,
                    [{text,"&specific layer on top of Telnet client"}],
                    0,false},
                   {text,
                    [22,42,99,116,95,116,101,108,110,101,116,95,99,108,105,
                     101,110,116,46,101,114,108,42]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [136,85,115,101,32,116,104,105,115,32,109,111,100,117,
                       108,101,32,116,111,32,115,101,116,32,117,112,32,84,101,
                       108,110,101,116,32,99,111,110,110,101,99,116,105,111,
                       110,115,44,32,115,101,110,100,32,99,111,109,109,97,110,
                       100,115,44,32,97,110,100,32,112,101,114,102,111,114,
                       109,32,115,116,114,105,110,103,32,109,97,116,99,104,
                       105,110,103,32,111,110,32,116,104,101,32,114,101,115,
                       117,108,116,46,32,70,111,114,32,105,110,102,111,114,
                       109,97,116,105,111,110,32,97,98,111,117,116,32,104,111,
                       119,32,116,111,32,117,115,101]}],
                    0,false},
                   {text,"\v*ct_telnet*"},
                   {sep,
                    [{text,
                      "?and configure connections, specifically for UNIX hosts, see the"}],
                    0,false},
                   {text,
                    [26,91,117,110,105,120,95,116,101,108,110,101,116,93,40,
                     117,110,105,120,95,116,101,108,110,101,116,41]},
                   {sep,[{text,"\fmanual page."}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [25,68,101,102,97,117,108,116,32,118,97,108,117,101,115,
                       32,100,101,102,105,110,101,100,32,105,110]}],
                    0,false},
                   {text,"\v*ct_telnet*"},
                   {sep,[{text,[1,58]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {text,"+<a name=\"Default_values\">Default_values</a>"},
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{text,
                        "=Connection timeout (time to wait for connection) = 10 seconds"}],
                      0,false}],
                    0,false},
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{text,
                        "CCommand timeout (time to wait for a command to return) = 10 seconds"}],
                      0,false}],
                    0,false}},
                  {sep,
                   [{text,[1,42]},
                    {sep,
                     [{text,"'Max number of reconnection attempts = 3"}],
                     0,false}],
                   0,false}},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{text,
                      "QReconnection interval (time to wait in between reconnection attempts) = 5 seconds"}],
                    0,false}],
                  0,false}},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{sep,
                     [{text,
                       "HKeep alive (sends NOP to the server every 8 sec if connection is idle) ="}],
                     0,false},
                    {text,[6,42,116,114,117,101,42]}],
                   0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    "TPolling limit (max number of times to poll to get a remaining string terminated) = 0"}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   "6Polling interval (sleep time between polls) = 1 second"}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    "@The TCP_NODELAY option for the telnet socket is disabled (set to"}],
                  0,false},
                 {text,[7,42,102,97,108,115,101,42]},
                 {sep,[{text,"\r) per default"}],0,false}],
                0,false}],
              0,false}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "SThese parameters can be modified by the user with the following configuration term:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [360,10,32,123,116,101,108,110,101,116,95,115,101,116,116,
                     105,110,103,115,44,32,91,123,99,111,110,110,101,99,116,
                     95,116,105,109,101,111,117,116,44,77,105,108,108,105,115,
                     101,99,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,123,99,111,109,109,97,110,100,95,
                     116,105,109,101,111,117,116,44,77,105,108,108,105,115,
                     101,99,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,123,114,101,99,111,110,110,101,99,
                     116,105,111,110,95,97,116,116,101,109,112,116,115,44,78,
                     125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,123,114,101,99,111,110,110,101,99,116,105,
                     111,110,95,105,110,116,101,114,118,97,108,44,77,105,108,
                     108,105,115,101,99,125,44,10,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,123,107,101,101,112,95,
                     97,108,105,118,101,44,66,111,111,108,125,44,10,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,
                     112,111,108,108,95,108,105,109,105,116,44,78,125,44,10,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,123,112,111,108,108,95,105,110,116,101,114,118,97,108,
                     44,77,105,108,108,105,115,101,99,125,44,10,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,116,
                     99,112,95,110,111,100,101,108,97,121,44,66,111,111,108,
                     125,93,125,46]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,"%*Millisec = integer(), N = integer()*"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,"\tEnter the"}],0,false},
                   {text,
                    [17,42,116,101,108,110,101,116,95,115,101,116,116,105,110,
                     103,115,42]},
                   {sep,
                    [{text,
                      "5term in a configuration file included in the test and"}],
                    0,false},
                   {text,"\v*ct_telnet*"},
                   {sep,
                    [{text,"(retrieves the information automatically."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,"\f*keep_alive*"},
                   {sep,
                    [{text,
                      "?can be specified per connection, if necessary. For details, see"}],
                    0,false},
                   {text,
                    [26,91,117,110,105,120,95,116,101,108,110,101,116,93,40,
                     117,110,105,120,95,116,101,108,110,101,116,41]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}],
         0,true},
        null},
       null}}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\n## Logging"},null},null}},
      {text,
       [29,60,97,32,110,97,109,101,61,34,76,111,103,103,105,110,103,34,62,76,
        111,103,103,105,110,103,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [31,84,104,101,32,100,101,102,97,117,108,116,32,108,111,103,
                 103,105,110,103,32,98,101,104,97,118,105,111,114,32,111,
                 102]}],
              0,false},
             {text,"\v*ct_telnet*"},
             {sep,
              [{text,
                "õis to print information about performed operations, commands, and their corresponding results to the test case HTML log. The following is not printed to the HTML log: text strings sent from the Telnet server that are not explicitly received by a"}],
              0,false},
             {text,"\v*ct_telnet*"},
             {sep,
              [{text,
                [17,102,117,110,99,116,105,111,110,44,32,115,117,99,104,32,97,
                 115]}],
              0,false},
             {text,"\n*expect/3*"},
             {sep,[{text,"\n. However,"}],0,false},
             {text,"\v*ct_telnet*"},
             {sep,
              [{text,
                "Hcan be configured to use a special purpose event handler, implemented in"}],
              0,false},
             {text,[15,42,99,116,95,99,111,110,110,95,108,111,103,95,104,42]},
             {sep,[{text,"\r, for logging"}],0,false},
             {text,[7,42,42,97,108,108,42,42]},
             {sep,
              [{text,".Telnet traffic. To use this handler, install a"}],
              0,false},
             {text,"\r*Common Test*"},
             {sep,[{text,"\nhook named"}],0,false},
             {text,[14,42,99,116,104,95,99,111,110,110,95,108,111,103,42]},
             {sep,
              [{text,
                "6. Example (using the test suite information function):"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "P\n suite() ->\n     [{ct_hooks, [{cth_conn_log, [{conn_mod(),hook_options()}]}]}]."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\f*conn_mod()*"},
             {sep,
              [{text,
                [18,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,
                 116,104,101]}],
              0,false},
             {text,"\r*Common Test*"},
             {sep,
              [{text,
                "5module implementing the connection protocol, that is,"}],
              0,false},
             {text,"\v*ct_telnet*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,[14,42,99,116,104,95,99,111,110,110,95,108,111,103,42]},
             {sep,
              [{text,
                "ðhook performs unformatted logging of Telnet data to a separate text file. All Telnet communication is captured and printed, including any data sent from the server. The link to this text file is located at the top of the test case HTML log."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "OBy default, data for all Telnet connections is logged in one common file (named"}],
              0,false},
             {text,"\t*default*"},
             {sep,
              [{text,
                "¾), which can get messy, for example, if multiple Telnet sessions are running in parallel. Therefore a separate log file can be created for each connection. To configure this, use hook option"}],
              0,false},
             {text,[7,42,104,111,115,116,115,42]},
             {sep,
              [{text,
                "zand list the names of the servers/connections to be used in the suite. The connections must be named for this to work (see"}],
              0,false},
             {text,
              [17,91,111,112,101,110,45,49,93,40,35,111,112,101,110,45,49,41]},
             {sep,[{text,[2,41,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\vHook option"}],0,false},
             {text,"\n*log_type*"},
             {sep,
              [{text,
                [25,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,99,
                 104,97,110,103,101,32,116,104,101]}],
              0,false},
             {text,[14,42,99,116,104,95,99,111,110,110,95,108,111,103,42]},
             {sep,
              [{text,"-behavior. The default value of this option is"}],
              0,false},
             {text,[5,42,114,97,119,42]},
             {sep,
              [{text,
                "G, which results in the behavior described above. If the value is set to"}],
              0,false},
             {text,[6,42,104,116,109,108,42]},
             {sep,
              [{text,
                "H, all Telnet communication is printed to the test case HTML log instead."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,65,108,108]}],0,false},
             {text,[14,42,99,116,104,95,99,111,110,110,95,108,111,103,42]},
             {sep,
              [{text,
                "`hook options described can also be specified in a configuration file with configuration variable"}],
              0,false},
             {text,"\r*ct_conn_log*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "d\n {ct_conn_log, [{ct_telnet,[{log_type,raw},\n                            {hosts,[key_or_name()]}]}]}"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         "gHook options specified in a configuration file overwrite any hard-coded hook options in the test suite."}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}},
      {text,"-<a name=\"Logging_example\">Logging_example</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [20,42,42,76,111,103,103,105,110,103,32,69,120,97,109,112,108,
               101,58,42,42]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rThe following"}],0,false},
             {text,"\n*ct_hooks*"},
             {sep,
              [{text,
                "Pstatement causes printing of Telnet traffic to separate logs for the connections"}],
              0,false},
             {text,"\t*server1*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\t*server2*"},
             {sep,
              [{text,
                "H. Traffic for any other connections is logged in the default Telnet log."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "c\n suite() ->\n     [{ct_hooks,\n       [{cth_conn_log, [{ct_telnet,[{hosts,[server1,server2]}]}]}]}]."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "xAs previously explained, this specification can also be provided by an entry like the following in a configuration file:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              ";\n {ct_conn_log, [{ct_telnet,[{hosts,[server1,server2]}]}]}."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [16,73,110,32,116,104,105,115,32,99,97,115,101,32,116,104,
                 101]}],
              0,false},
             {text,"\n*ct_hooks*"},
             {sep,
              [{text,"0statement in the test suite can look as follows:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "5\n suite() ->\n     [{ct_hooks, [{cth_conn_log, []}]}]."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\r## Data Types"},null},null}},
     {text,
      [25,60,97,32,110,97,109,101,61,34,116,121,112,101,115,34,62,116,121,112,
       101,115,60,47,97,62]},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{text,
                       "Lconnection() = handle() | {target_name(), connection_type()} | target_name()"}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {sep,
                     [{text,
                       [15,116,121,112,101,45,99,111,110,110,101,99,116,105,
                        111,110]},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{sep,[{text,[3,70,111,114]}],0,false},
                             {text,"\rtarget_name()"},
                             {sep,[{text,"\f, see module"}],0,false},
                             {text,[2,99,116]},
                             {sep,[{text,[1,46]}],0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}}],
                     0,false},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,
                    [{text,"&connection_type() = telnet | ts1 | ts2"}],
                    0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {text,
                   [20,116,121,112,101,45,99,111,110,110,101,99,116,105,111,
                    110,95,116,121,112,101]},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{text,
                    [19,104,97,110,100,108,101,40,41,32,61,32,104,97,110,100,
                     108,101,40,41]}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {sep,
                 [{text,"\vtype-handle"},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            "3Handle for a specific Telnet connection, see module"}],
                          0,false},
                         {text,[2,99,116]},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,
                [{text,
                  [26,112,114,111,109,112,116,95,114,101,103,101,120,112,40,
                   41,32,61,32,115,116,114,105,110,103,40,41]}],
                0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {sep,
               [{text,
                 [18,116,121,112,101,45,112,114,111,109,112,116,95,114,101,
                  103,101,120,112]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          "LRegular expression matching all possible prompts for a specific target type."}],
                        0,false},
                       {text,[6,114,101,103,101,120,112]},
                       {sep,
                        [{text,
                          "1must not have any groups, that is, when matching,"}],
                        0,false},
                       {text,"\bre:run/3"},
                       {sep,
                        [{text,
                          "7(in STDLIB) must return a list with one single element."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,",## close(Connection) -> ok | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "?Closes the Telnet connection and stops the process managing it."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [25,67,111,110,110,101,99,116,105,111,110,32,61,32,99,111,110,110,
           101,99,116,105,111,110,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,
       [29,60,97,32,110,97,109,101,61,34,99,108,111,115,101,45,49,34,62,99,
        108,111,115,101,45,49,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "?Closes the Telnet connection and stops the process managing it."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "EA connection can be associated with a target name and/or a handle. If"}],
              0,false},
             {text,"\f*Connection*"},
             {sep,
              [{text,
                "Ohas no associated target name, it can only be closed with the handle value (see"}],
              0,false},
             {text,
              [17,91,111,112,101,110,45,52,93,40,35,111,112,101,110,45,52,41]},
             {sep,[{text,[2,41,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"7## cmd(Connection, Cmd) -> {ok, Data} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"'Equivalent to cmd(Connection, Cmd, [])."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,
       [25,60,97,32,110,97,109,101,61,34,99,109,100,45,50,34,62,99,109,100,45,
        50,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rEquivalent to"}],0,false},
             {text,[15,91,99,109,100,45,51,93,40,35,99,109,100,45,51,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"=## cmd(Connection, Cmd, Opts) -> {ok, Data} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"4Sends a command through Telnet and waits for prompt."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [25,67,111,110,110,101,99,116,105,111,110,32,61,32,99,111,110,
               110,101,99,116,105,111,110,40,41]}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[14,67,109,100,32,61,32,115,116,114,105,110,103,40,41]}],
            0,false}],
          0,false}},
        {sep,[{text,[1,42]},{sep,[{text,"\fOpts = [Opt]"}],0,false}],0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            "<Opt = {timeout, timeout()} | {newline, boolean() | string()}"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,68,97,116,97,32,61,32,91,115,116,114,105,110,103,40,41,93]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,
       [25,60,97,32,110,97,109,101,61,34,99,109,100,45,51,34,62,99,109,100,45,
        51,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"4Sends a command through Telnet and waits for prompt."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "kBy default, this function adds \"\\n\" to the end of the specified command. If this is not desired, use option"}],
              0,false},
             {text,
              [17,42,123,110,101,119,108,105,110,101,44,102,97,108,115,101,
               125,42]},
             {sep,
              [{text,
                [130,46,32,84,104,105,115,32,105,115,32,110,101,99,101,115,
                 115,97,114,121,44,32,102,111,114,32,101,120,97,109,112,108,
                 101,44,32,119,104,101,110,32,115,101,110,100,105,110,103,32,
                 84,101,108,110,101,116,32,99,111,109,109,97,110,100,32,115,
                 101,113,117,101,110,99,101,115,32,112,114,101,102,105,120,
                 101,100,32,119,105,116,104,32,99,104,97,114,97,99,116,101,
                 114,32,73,110,116,101,114,112,114,101,116,32,65,115,32,67,
                 111,109,109,97,110,100,32,40,73,65,67,41,46,32,79,112,116,
                 105,111,110]}],
              0,false},
             {text,
              [20,42,123,110,101,119,108,105,110,101,44,115,116,114,105,110,
               103,40,41,125,42]},
             {sep,
              [{text,
                "Lcan also be used if a different line end than \"\\n\" is required, for instance"}],
              0,false},
             {text,
              [18,42,123,110,101,119,108,105,110,101,44,34,92,114,92,110,34,
               125,42]},
             {sep,
              [{text,
                "5, to add both carriage return and newline characters."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
             {text,"\t*timeout*"},
             {sep,
              [{text,
                "]specifies how long the client must wait for prompt. If the time expires, the function returns"}],
              0,false},
             {text,
              [17,42,123,101,114,114,111,114,44,116,105,109,101,111,117,116,
               125,42]},
             {sep,
              [{text,
                "J. For information about the default value for the command timeout, see the"}],
              0,false},
             {text,")[list of default values](#Default_values)"},
             {sep,[{text," in the beginning of this module."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "D## cmdf(Connection, CmdFormat, Args) -> {ok, Data} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"4Equivalent to cmdf(Connection, CmdFormat, Args, [])."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"\e<a name=\"cmdf-3\">cmdf-3</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rEquivalent to"}],0,false},
             {text,
              [17,91,99,109,100,102,45,52,93,40,35,99,109,100,102,45,52,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "J## cmdf(Connection, CmdFormat, Args, Opts) -> {ok, Data} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "pSends a Telnet command and waits for prompt (uses a format string and a list of arguments to build the command)."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [25,67,111,110,110,101,99,116,105,111,110,32,61,32,99,111,110,
                110,101,99,116,105,111,110,40,41]}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [20,67,109,100,70,111,114,109,97,116,32,61,32,115,116,114,105,
                110,103,40,41]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},{sep,[{text,"\rArgs = list()"}],0,false}],
          0,false}},
        {sep,[{text,[1,42]},{sep,[{text,"\fOpts = [Opt]"}],0,false}],0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            "<Opt = {timeout, timeout()} | {newline, boolean() | string()}"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,68,97,116,97,32,61,32,91,115,116,114,105,110,103,40,41,93]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,"\e<a name=\"cmdf-4\">cmdf-4</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "pSends a Telnet command and waits for prompt (uses a format string and a list of arguments to build the command)."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [16,70,111,114,32,100,101,116,97,105,108,115,44,32,115,101,
                 101]}],
              0,false},
             {text,[15,91,99,109,100,45,51,93,40,35,99,109,100,45,51,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,")## expect(Connection, Patterns) -> term()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"0Equivalent to expect(Connections, Patterns, [])."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,
       [31,60,97,32,110,97,109,101,61,34,101,120,112,101,99,116,45,50,34,62,
        101,120,112,101,99,116,45,50,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rEquivalent to"}],0,false},
             {text,
              [21,91,101,120,112,101,99,116,45,51,93,40,35,101,120,112,101,99,
               116,45,51,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "d## expect(Connection, Patterns, Opts) -> {ok, Match} | {ok, MatchList, HaltReason} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "9Gets data from Telnet and waits for the expected pattern."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{text,
                        [25,67,111,110,110,101,99,116,105,111,110,32,61,32,99,
                         111,110,110,101,99,116,105,111,110,40,41]}],
                      0,false}],
                    0,false},
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{text,
                        [30,80,97,116,116,101,114,110,115,32,61,32,80,97,116,
                         116,101,114,110,32,124,32,91,80,97,116,116,101,114,
                         110,93]}],
                      0,false}],
                    0,false}},
                  {sep,
                   [{text,[1,42]},
                    {sep,
                     [{text,
                       "@Pattern = string() | {Tag, string()} | prompt | {prompt, Prompt}"}],
                     0,false}],
                   0,false}},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{text,
                      [17,80,114,111,109,112,116,32,61,32,115,116,114,105,110,
                       103,40,41]}],
                    0,false}],
                  0,false}},
                {sep,
                 [{text,[1,42]},{sep,[{text,"\fTag = term()"}],0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},{sep,[{text,"\fOpts = [Opt]"}],0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   "ÊOpt = {idle_timeout, IdleTimeout} | {total_timeout, TotalTimeout} | repeat | {repeat, N} | sequence | {halt, HaltPatterns} | ignore_prompt | no_prompt_check | wait_for_prompt | {wait_for_prompt, Prompt}"}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,[{text,"\"IdleTimeout = infinity | integer()"}],0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,[{text,"#TotalTimeout = infinity | integer()"}],0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},{sep,[{text,"\rN = integer()"}],0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [23,72,97,108,116,80,97,116,116,101,114,110,115,32,61,32,80,97,
                116,116,101,114,110,115]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [19,77,97,116,99,104,76,105,115,116,32,61,32,91,77,97,116,99,
               104,93]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"3Match = RxMatch | {Tag, RxMatch} | {prompt, Prompt}"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [20,82,120,77,97,116,99,104,32,61,32,91,115,116,114,105,110,103,
             40,41,93]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [25,72,97,108,116,82,101,97,115,111,110,32,61,32,100,111,110,101,
            32,124,32,77,97,116,99,104]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"#Reason = timeout | {prompt, Prompt}"}],0,false}],
      0,false}},
    {sep,
     [{text,
       [31,60,97,32,110,97,109,101,61,34,101,120,112,101,99,116,45,51,34,62,
        101,120,112,101,99,116,45,51,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "9Gets data from Telnet and waits for the expected pattern."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\t*Pattern*"},
             {sep,
              [{text,
                [144,99,97,110,32,98,101,32,97,32,80,79,83,73,88,32,114,101,
                 103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,
                 110,46,32,84,104,101,32,102,117,110,99,116,105,111,110,32,
                 114,101,116,117,114,110,115,32,119,104,101,110,32,97,32,112,
                 97,116,116,101,114,110,32,105,115,32,115,117,99,99,101,115,
                 115,102,117,108,108,121,32,109,97,116,99,104,101,100,32,40,
                 97,116,32,108,101,97,115,116,32,111,110,101,44,32,105,110,32,
                 116,104,101,32,99,97,115,101,32,111,102,32,109,117,108,116,
                 105,112,108,101,32,112,97,116,116,101,114,110,115,41,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\t*RxMatch*"},
             {sep,
              [{text,"1is a list of matched strings. It looks as follows"}],
              0,false},
             {text,"(*[FullMatch, SubMatch1, SubMatch2, ...]*"},
             {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
             {text,"\v*FullMatch*"},
             {sep,
              [{text,
                ":is the string matched by the whole regular expression, and"}],
              0,false},
             {text,"\v*SubMatchN*"},
             {sep,
              [{text,"/is the string that matched subexpression number"}],
              0,false},
             {text,[3,42,78,42]},
             {sep,[{text,"!. Subexpressions are denoted with"}],0,false},
             {text,"\t*'(' ')'*"},
             {sep,
              [{text,
                [26,105,110,32,116,104,101,32,114,101,103,117,108,97,114,32,
                 101,120,112,114,101,115,115,105,111,110,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,73,102,32,97]}],0,false},
             {text,[5,42,84,97,103,42]},
             {sep,
              [{text,
                [26,105,115,32,115,112,101,99,105,102,105,101,100,44,32,116,
                 104,101,32,114,101,116,117,114,110,101,100]}],
              0,false},
             {text,[7,42,77,97,116,99,104,42]},
             {sep,
              [{text,
                [25,97,108,115,111,32,105,110,99,108,117,100,101,115,32,116,
                 104,101,32,109,97,116,99,104,101,100]}],
              0,false},
             {text,[5,42,84,97,103,42]},
             {sep,
              [{text,
                [17,46,32,79,116,104,101,114,119,105,115,101,44,32,111,110,
                 108,121]}],
              0,false},
             {text,"\t*RxMatch*"},
             {sep,[{text,"\fis returned."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Options:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,[{text,"\fidle_timeout"}],0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,100,62]},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{sep,
                                     [{text,
                                       "tIndicates that the function must return if the Telnet client is idle (that is, if no data is received) for more than"}],
                                     0,false},
                                    {text,"\vIdleTimeout"},
                                    {sep,
                                     [{text,
                                       "-milliseconds. Default time-out is 10 seconds."}],
                                     0,false}],
                                   0,false}],
                                 0,true},
                                null},
                               null}},
                             {text,[5,60,47,100,100,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,116,62]},
                            {sep,[{text,"\rtotal_timeout"}],0,false},
                            {text,[5,60,47,100,116,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,100,62]},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,
                                 [{sep,
                                   [{text,
                                     "\"Sets a time limit for the complete"}],
                                   0,false},
                                  {text,[6,101,120,112,101,99,116]},
                                  {sep,
                                   [{text,
                                     [16,111,112,101,114,97,116,105,111,110,
                                      46,32,65,102,116,101,114]}],
                                   0,false},
                                  {text,"\fTotalTimeout"},
                                  {sep,[{text,"\rmilliseconds,"}],0,false},
                                  {text,
                                   [15,123,101,114,114,111,114,44,116,105,109,
                                    101,111,117,116,125]},
                                  {sep,
                                   [{text,
                                     [23,105,115,32,114,101,116,117,114,110,
                                      101,100,46,32,68,101,102,97,117,108,116,
                                      32,105,115]}],
                                   0,false},
                                  {text,"\binfinity"},
                                  {sep,
                                   [{text,
                                     [25,40,116,104,97,116,32,105,115,44,32,
                                      110,111,32,116,105,109,101,32,108,105,
                                      109,105,116,41,46]}],
                                   0,false}],
                                 0,false}],
                               0,true},
                              null},
                             null}},
                           {text,[5,60,47,100,100,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,116,62]},
                          {sep,
                           [{text,
                             [31,105,103,110,111,114,101,95,112,114,111,109,
                              112,116,32,124,32,110,111,95,112,114,111,109,
                              112,116,95,99,104,101,99,107]}],
                           0,false},
                          {text,[5,60,47,100,116,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,100,62]},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{sep,
                                 [{text,
                                   "]>The function returns when a prompt is received, even if no pattern has yet been matched, and"}],
                                 0,false},
                                {text,
                                 [23,123,101,114,114,111,114,44,123,112,114,
                                  111,109,112,116,44,80,114,111,109,112,116,
                                  125,125]},
                                {sep,
                                 [{text,
                                   "?is returned. However, this behavior can be modified with option"}],
                                 0,false},
                                {text,"\rignore_prompt"},
                                {sep,[{text,"\tor option"}],0,false},
                                {text,
                                 [15,110,111,95,112,114,111,109,112,116,95,99,
                                  104,101,99,107]},
                                {sep,[{text,"\r, which tells"}],0,false},
                                {text,[6,101,120,112,101,99,116]},
                                {sep,
                                 [{text,
                                   "9to return only when a match is found or after a time-out."}],
                                 0,false}],
                               0,false}],
                             0,true},
                            null},
                           null}},
                         {text,[5,60,47,100,100,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,116,62]},
                        {sep,[{text,"\rignore_prompt"}],0,false},
                        {text,[5,60,47,100,116,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,100,62]},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,"\tct_telnet"},
                              {sep,
                               [{text,
                                 "pignores any prompt found. This option is useful if data sent by the server can include a pattern matching prompt"}],
                               0,false},
                              {text,[6,114,101,103,101,120,112]},
                              {sep,
                               [{text,
                                 [15,40,97,115,32,114,101,116,117,114,110,101,
                                  100,32,98,121]}],
                               0,false},
                              {text,
                               [29,84,97,114,103,101,100,77,111,100,58,103,
                                101,116,95,112,114,111,109,112,116,95,114,101,
                                103,101,120,112,47,48]},
                              {sep,
                               [{text,
                                 "2), but is not to not cause the function to return."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {text,[5,60,47,100,100,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,116,62]},
                      {sep,
                       [{text,
                         [15,110,111,95,112,114,111,109,112,116,95,99,104,101,
                          99,107]}],
                       0,false},
                      {text,[5,60,47,100,116,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{text,"\tct_telnet"},
                            {sep,
                             [{text,
                               "Ddoes not search for a prompt at all. This is useful if, for example,"}],
                             0,false},
                            {text,[7,80,97,116,116,101,114,110]},
                            {sep,
                             [{text,
                               [26,105,116,115,101,108,102,32,109,97,116,99,
                                104,101,115,32,116,104,101,32,112,114,111,109,
                                112,116,46]}],
                             0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{text,
                       [15,119,97,105,116,95,102,111,114,95,112,114,111,109,
                        112,116]}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,[{text,[6,70,111,114,99,101,115]}],0,false},
                          {text,"\tct_telnet"},
                          {sep,
                           [{text,
                             [131,116,111,32,119,97,105,116,32,117,110,116,
                              105,108,32,116,104,101,32,112,114,111,109,112,
                              116,32,115,116,114,105,110,103,32,105,115,32,
                              114,101,99,101,105,118,101,100,32,98,101,102,
                              111,114,101,32,114,101,116,117,114,110,105,110,
                              103,32,40,101,118,101,110,32,105,102,32,97,32,
                              112,97,116,116,101,114,110,32,104,97,115,32,97,
                              108,114,101,97,100,121,32,98,101,101,110,32,109,
                              97,116,99,104,101,100,41,46,32,84,104,105,115,
                              32,105,115,32,101,113,117,97,108,32,116,111,32,
                              99,97,108,108,105,110,103]}],
                           0,false},
                          {text,
                           ":expect(Conn, Patterns++[{prompt,Prompt}], [sequence|Opts])"},
                          {sep,
                           [{text,
                             [20,46,32,78,111,116,105,99,101,32,116,104,97,
                              116,32,111,112,116,105,111,110]}],
                           0,false},
                          {text,"\fidle_timeout"},
                          {sep,[{text,[3,97,110,100]}],0,false},
                          {text,"\rtotal_timeout"},
                          {sep,
                           [{text,
                             ".can abort the operation of waiting for prompt."}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,
                   [{text,
                     [18,114,101,112,101,97,116,32,124,32,114,101,112,101,97,
                      116,44,32,78]}],
                   0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           "1The pattern(s) must be matched multiple times. If"}],
                         0,false},
                        {text,[1,78]},
                        {sep,
                         [{text,"(is specified, the pattern(s) are matched"}],
                         0,false},
                        {text,[1,78]},
                        {sep,
                         [{text,
                           [31,116,105,109,101,115,44,32,97,110,100,32,116,
                            104,101,32,102,117,110,99,116,105,111,110,32,114,
                            101,116,117,114,110,115]}],
                         0,false},
                        {text,
                         [17,72,97,108,116,82,101,97,115,111,110,32,61,32,100,
                          111,110,101]},
                        {sep,
                         [{text,
                           "/. This option can be interrupted by one or more"}],
                         0,false},
                        {text,"\fHaltPatterns"},
                        {sep,[{text,[1,46]}],0,false},
                        {text,"\tMatchList"},
                        {sep,
                         [{text,"&is always returned, that is, a list of"}],
                         0,false},
                        {text,[5,77,97,116,99,104]},
                        {sep,
                         [{text,
                           [19,105,110,115,116,101,97,100,32,111,102,32,111,
                            110,108,121,32,111,110,101]}],
                         0,false},
                        {text,[5,77,97,116,99,104]},
                        {sep,[{text,[6,46,32,65,108,115,111]}],0,false},
                        {text,"\nHaltReason"},
                        {sep,[{text,"\fis returned."}],0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,"\bsequence"}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [146,65,108,108,32,112,97,116,116,101,114,110,115,32,
                          109,117,115,116,32,98,101,32,109,97,116,99,104,101,
                          100,32,105,110,32,97,32,115,101,113,117,101,110,99,
                          101,46,32,65,32,109,97,116,99,104,32,105,115,32,110,
                          111,116,32,99,111,110,99,108,117,100,101,100,32,117,
                          110,116,105,108,32,97,108,108,32,112,97,116,116,101,
                          114,110,115,32,97,114,101,32,109,97,116,99,104,101,
                          100,46,32,84,104,105,115,32,111,112,116,105,111,110,
                          32,99,97,110,32,98,101,32,105,110,116,101,114,114,
                          117,112,116,101,100,32,98,121,32,111,110,101,32,111,
                          114,32,109,111,114,101]}],
                       0,false},
                      {text,"\fHaltPatterns"},
                      {sep,[{text,[1,46]}],0,false},
                      {text,"\tMatchList"},
                      {sep,
                       [{text,"&is always returned, that is, a list of"}],
                       0,false},
                      {text,[5,77,97,116,99,104]},
                      {sep,
                       [{text,
                         [19,105,110,115,116,101,97,100,32,111,102,32,111,110,
                          108,121,32,111,110,101]}],
                       0,false},
                      {text,[5,77,97,116,99,104]},
                      {sep,[{text,[6,46,32,65,108,115,111]}],0,false},
                      {text,"\nHaltReason"},
                      {sep,[{text,"\fis returned."}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[14,42,42,69,120,97,109,112,108,101,32,49,58,42,42]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "N\n expect(Connection,[{abc,\"ABC\"},{xyz,\"XYZ\"}],[sequence,{halt,[{nnn,\"NNN\"}]}])"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [25,70,105,114,115,116,32,116,104,105,115,32,116,114,105,101,
                 115,32,116,111,32,109,97,116,99,104]}],
              0,false},
             {text,[7,42,34,65,66,67,34,42]},
             {sep,[{text,"\n, and then"}],0,false},
             {text,[7,42,34,88,89,90,34,42]},
             {sep,[{text,"\b, but if"}],0,false},
             {text,[7,42,34,78,78,78,34,42]},
             {sep,
              [{text,
                [29,97,112,112,101,97,114,115,44,32,116,104,101,32,102,117,
                 110,99,116,105,111,110,32,114,101,116,117,114,110,115]}],
              0,false},
             {text,
              [23,42,123,101,114,114,111,114,44,123,110,110,110,44,91,34,78,
               78,78,34,93,125,125,42]},
             {sep,[{text,"\t. If both"}],0,false},
             {text,[7,42,34,65,66,67,34,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[7,42,34,88,89,90,34,42]},
             {sep,[{text,"!are matched, the function returns"}],0,false},
             {text,
              [26,42,123,111,107,44,91,65,98,99,77,97,116,99,104,44,88,121,
               122,77,97,116,99,104,93,125,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[14,42,42,69,120,97,109,112,108,101,32,50,58,42,42]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "P\n expect(Connection,[{abc,\"ABC\"},{xyz,\"XYZ\"}],[{repeat,2},{halt,[{nnn,\"NNN\"}]}])"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,84,104,105,115,32,116,114,105,101,115,32,116,111,32,109,
                 97,116,99,104]}],
              0,false},
             {text,[7,42,34,65,66,67,34,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,[7,42,34,88,89,90,34,42]},
             {sep,[{text,"\ttwice. If"}],0,false},
             {text,[7,42,34,78,78,78,34,42]},
             {sep,
              [{text,
                [29,97,112,112,101,97,114,115,44,32,116,104,101,32,102,117,
                 110,99,116,105,111,110,32,114,101,116,117,114,110,115]}],
              0,false},
             {text,
              [28,42,72,97,108,116,82,101,97,115,111,110,32,61,32,123,110,110,
               110,44,91,34,78,78,78,34,93,125,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,79,112,116,105,111,110,115]}],0,false},
             {text,"\b*repeat*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\n*sequence*"},
             {sep,
              [{text,"3can be combined to match a sequence multiple times."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"7## get_data(Connection) -> {ok, Data} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "LGets all data received by the Telnet client since the last command was sent."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [25,67,111,110,110,101,99,116,105,111,110,32,61,32,99,111,110,110,
            101,99,116,105,111,110,40,41]}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,68,97,116,97,32,61,32,91,115,116,114,105,110,103,40,41,93]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,"#<a name=\"get_data-1\">get_data-1</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "üGets all data received by the Telnet client since the last command was sent. Only newline-terminated strings are returned. If the last received string has not yet been terminated, the connection can be polled automatically until the string is complete."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "=The polling feature is controlled by the configuration values"}],
              0,false},
             {text,"\f*poll_limit*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [15,42,112,111,108,108,95,105,110,116,101,114,118,97,108,42]},
             {sep,
              [{text,
                "¢and is by default disabled. This means that the function immediately returns all complete strings received and saves a remaining non-terminated string for a later"}],
              0,false},
             {text,"\n*get_data*"},
             {sep,[{text,[5,99,97,108,108,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"/## open(Name) -> {ok, Handle} | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"!Equivalent to open(Name, telnet)."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"\e<a name=\"open-1\">open-1</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rEquivalent to"}],0,false},
             {text,
              [17,91,111,112,101,110,45,50,93,40,35,111,112,101,110,45,50,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"9## open(Name, ConnType) -> {ok, Handle} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"7Opens a Telnet connection to the specified target host."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [20,78,97,109,101,32,61,32,116,97,114,103,101,116,95,110,97,109,
             101,40,41]}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [28,67,111,110,110,84,121,112,101,32,61,32,99,111,110,110,101,99,
             116,105,111,110,95,116,121,112,101,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,72,97,110,100,108,101,32,61,32,104,97,110,100,108,101,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,"\e<a name=\"open-2\">open-2</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "7Opens a Telnet connection to the specified target host."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "I## open(KeyOrName, ConnType, TargetMod) -> {ok, Handle} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"7Equivalent to open(KeyOrName, ConnType, TargetMod, [])."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"\e<a name=\"open-3\">open-3</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rEquivalent to"}],0,false},
             {text,
              [17,91,111,112,101,110,45,52,93,40,35,111,112,101,110,45,52,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "P## open(KeyOrName, ConnType, TargetMod, Extra) -> {ok, Handle} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"7Opens a Telnet connection to the specified target host."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [22,75,101,121,79,114,78,97,109,101,32,61,32,75,101,121,32,
                 124,32,78,97,109,101]}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [20,78,97,109,101,32,61,32,116,97,114,103,101,116,95,110,97,
                109,101,40,41]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [28,67,111,110,110,84,121,112,101,32,61,32,99,111,110,110,101,
               99,116,105,111,110,95,116,121,112,101,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [18,84,97,114,103,101,116,77,111,100,32,61,32,97,116,111,109,40,
              41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[14,69,120,116,114,97,32,61,32,116,101,114,109,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [17,72,97,110,100,108,101,32,61,32,104,97,110,100,108,101,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,"\e<a name=\"open-4\">open-4</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "7Opens a Telnet connection to the specified target host."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "YThe target data must exist in a configuration file. The connection can be associated with"}],
              0,false},
             {text,[6,42,78,97,109,101,42]},
             {sep,
              [{text,
                [19,97,110,100,47,111,114,32,116,104,101,32,114,101,116,117,
                 114,110,101,100]}],
              0,false},
             {text,"\b*Handle*"},
             {sep,
              [{text,
                "K. To allocate a name for the target, use one of the following alternatives:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [30,91,99,116,35,114,101,113,117,105,114,101,45,50,93,40,46,47,
              99,116,35,114,101,113,117,105,114,101,45,50,41]},
            {sep,
             [{text,[14,105,110,32,97,32,116,101,115,116,32,99,97,115,101]}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,[{text,[1,65]}],0,false},
            {text,"\t*require*"},
            {sep,
             [{text,"-statement in the suite information function ("}],
             0,false},
            {text,"\t*suite/0*"},
            {sep,[{text,[1,41]}],0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,[{text,[1,65]}],0,false},
           {text,"\t*require*"},
           {sep,
            [{text,"-statement in a test case information function"}],
            0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"0If you want the connection to be associated with"}],
              0,false},
             {text,"\b*Handle*"},
             {sep,
              [{text,
                "Lonly (if you, for example, need to open multiple connections to a host), use"}],
              0,false},
             {text,[5,42,75,101,121,42]},
             {sep,
              [{text,
                [144,44,32,116,104,101,32,99,111,110,102,105,103,117,114,97,
                 116,105,111,110,32,118,97,114,105,97,98,108,101,32,110,97,
                 109,101,44,32,116,111,32,115,112,101,99,105,102,121,32,116,
                 104,101,32,116,97,114,103,101,116,46,32,78,111,116,105,99,
                 101,32,116,104,97,116,32,97,32,99,111,110,110,101,99,116,105,
                 111,110,32,119,105,116,104,111,117,116,32,97,110,32,97,115,
                 115,111,99,105,97,116,101,100,32,116,97,114,103,101,116,32,
                 110,97,109,101,32,99,97,110,32,111,110,108,121,32,98,101,32,
                 99,108,111,115,101,100,32,119,105,116,104,32,116,104,101]}],
              0,false},
             {text,"\b*Handle*"},
             {sep,[{text,[6,118,97,108,117,101,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\v*TargetMod*"},
             {sep,[{text,"&is a module that exports the functions"}],0,false},
             {text,"%*connect(Ip, Port, KeepAlive, Extra)*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [21,42,103,101,116,95,112,114,111,109,112,116,95,114,101,103,
               101,120,112,40,41,42]},
             {sep,
              [{text,
                [17,102,111,114,32,116,104,101,32,115,112,101,99,105,102,105,
                 101,100]}],
              0,false},
             {text,"\f*TargetType*"},
             {sep,[{text,"\r(for example,"}],0,false},
             {text,"\r*unix_telnet*"},
             {sep,[{text,[2,41,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,70,111,114]}],0,false},
             {text,[15,42,116,97,114,103,101,116,95,110,97,109,101,40,41,42]},
             {sep,[{text,"\f, see module"}],0,false},
             {text,"\b[ct](ct)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,
              [30,91,99,116,35,114,101,113,117,105,114,101,45,50,93,40,46,47,
               99,116,35,114,101,113,117,105,114,101,45,50,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"0## send(Connection, Cmd) -> ok | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"(Equivalent to send(Connection, Cmd, [])."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"\e<a name=\"send-2\">send-2</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rEquivalent to"}],0,false},
             {text,
              [17,91,115,101,110,100,45,51,93,40,35,115,101,110,100,45,51,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"6## send(Connection, Cmd, Opts) -> ok | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"/Sends a Telnet command and returns immediately."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [25,67,111,110,110,101,99,116,105,111,110,32,61,32,99,111,110,
              110,101,99,116,105,111,110,40,41]}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[14,67,109,100,32,61,32,115,116,114,105,110,103,40,41]}],
           0,false}],
         0,false}},
       {sep,[{text,[1,42]},{sep,[{text,"\fOpts = [Opt]"}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,[{text,"%Opt = {newline, boolean() | string()}"}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,"\e<a name=\"send-3\">send-3</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"/Sends a Telnet command and returns immediately."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "gBy default, this function adds \"\\n\" to the end of the specified command. If this is not desired, option"}],
              0,false},
             {text,
              [17,42,123,110,101,119,108,105,110,101,44,102,97,108,115,101,
               125,42]},
             {sep,
              [{text,
                [141,99,97,110,32,98,101,32,117,115,101,100,46,32,84,104,105,
                 115,32,105,115,32,110,101,99,101,115,115,97,114,121,44,32,
                 102,111,114,32,101,120,97,109,112,108,101,44,32,119,104,101,
                 110,32,115,101,110,100,105,110,103,32,84,101,108,110,101,116,
                 32,99,111,109,109,97,110,100,32,115,101,113,117,101,110,99,
                 101,115,32,112,114,101,102,105,120,101,100,32,119,105,116,
                 104,32,99,104,97,114,97,99,116,101,114,32,73,110,116,101,114,
                 112,114,101,116,32,65,115,32,67,111,109,109,97,110,100,32,40,
                 73,65,67,41,46,32,79,112,116,105,111,110]}],
              0,false},
             {text,
              [20,42,123,110,101,119,108,105,110,101,44,115,116,114,105,110,
               103,40,41,125,42]},
             {sep,
              [{text,
                "Lcan also be used if a different line end than \"\\n\" is required, for instance"}],
              0,false},
             {text,
              [18,42,123,110,101,119,108,105,110,101,44,34,92,114,92,110,34,
               125,42]},
             {sep,
              [{text,
                "5, to add both carriage return and newline characters."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "6The resulting output from the command can be read with"}],
              0,false},
             {text,
              [25,91,103,101,116,95,100,97,116,97,45,49,93,40,35,103,101,116,
               95,100,97,116,97,45,49,41]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,
              [21,91,101,120,112,101,99,116,45,50,93,40,35,101,120,112,101,99,
               116,45,50,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"=## sendf(Connection, CmdFormat, Args) -> ok | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"5Equivalent to sendf(Connection, CmdFormat, Args, [])."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,
       [29,60,97,32,110,97,109,101,61,34,115,101,110,100,102,45,51,34,62,115,
        101,110,100,102,45,51,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rEquivalent to"}],0,false},
             {text,
              [19,91,115,101,110,100,102,45,52,93,40,35,115,101,110,100,102,
               45,52,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "C## sendf(Connection, CmdFormat, Args, Opts) -> ok | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "sSends a Telnet command and returns immediately (uses a format string and a list of arguments to build the command)."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [25,67,111,110,110,101,99,116,105,111,110,32,61,32,99,111,110,
               110,101,99,116,105,111,110,40,41]}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [20,67,109,100,70,111,114,109,97,116,32,61,32,115,116,114,105,
               110,103,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},{sep,[{text,"\rArgs = list()"}],0,false}],
         0,false}},
       {sep,[{text,[1,42]},{sep,[{text,"\fOpts = [Opt]"}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,[{text,"%Opt = {newline, boolean() | string()}"}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,
       [29,60,97,32,110,97,109,101,61,34,115,101,110,100,102,45,52,34,62,115,
        101,110,100,102,45,52,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "sSends a Telnet command and returns immediately (uses a format string and a list of arguments to build the command)."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [16,70,111,114,32,100,101,116,97,105,108,115,44,32,115,101,
                 101]}],
              0,false},
             {text,
              [17,91,115,101,110,100,45,51,93,40,35,115,101,110,100,45,51,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## See Also"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [26,91,117,110,105,120,95,116,101,108,110,101,116,93,40,117,110,
            105,120,95,116,101,108,110,101,116,41]}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
