{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [19,35,32,67,111,109,109,111,110,32,84,101,115,116,32,72,111,111,107,
          115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\n# ct_hooks"},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"+A callback interface on top of Common Test."}],
          0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,
                  [26,42,42,67,111,109,109,111,110,32,84,101,115,116,32,72,
                   111,111,107,32,40,67,84,72,41,42,42]},
                 {sep,
                  [{text,
                    "6framework allows extensions of the default behavior of"}],
                  0,false},
                 {text,"\r*Common Test*"},
                 {sep,
                  [{text,
                    "Xby callbacks before and after all test suite calls. It is intended for advanced users of"}],
                  0,false},
                 {text,"\r*Common Test*"},
                 {sep,
                  [{text,
                    "Iwho want to abstract out behavior that is common to multiple test suites."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [28,73,110,32,98,114,105,101,102,44,32,67,84,72,32,97,108,
                   108,111,119,115,32,121,111,117,32,116,111,58]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "JManipulate the runtime configuration before each suite configuration call."}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "jManipulate the return of all suite configuration calls and by extension the result of the test themselves."}],
              0,false}],
            0,false}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "MThe following sections describe the mandatory and optional CTH functions that"}],
                  0,false},
                 {text,"\r*Common Test*"},
                 {sep,
                  [{text,
                    ":calls during test execution. For more details, see section"}],
                  0,false},
                 {text,"%[Common Test Hooks](ct_hooks_chapter)"},
                 {sep,
                  [{text,
                    [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,
                     117,105,100,101,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "AFor information about how to add a CTH to your suite, see section"}],
                  0,false},
                 {text,"1[Installing a CTH](./ct_hooks_chapter#installing)"},
                 {sep,
                  [{text,
                    [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,
                     117,105,100,101,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,"+For a minimal example of a CTH, see section"}],
                    0,false},
                   {text,")[Example CTH](./ct_hooks_chapter#example)"},
                   {sep,
                    [{text,
                      [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,
                       71,117,105,100,101,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [21,35,35,32,67,97,108,108,98,97,99,107,32,70,117,110,99,116,105,111,
         110,115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "@The following functions define the callback interface for a CTH."}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "?## Module:init(Id, Opts) -> {ok, State} | {ok, State, Priority}"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [31,73,110,105,116,105,97,116,101,115,32,116,104,101,32,67,111,109,
            109,111,110,32,84,101,115,116,32,72,111,111,107,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [25,73,100,32,61,32,114,101,102,101,114,101,110,99,101,40,41,32,
            124,32,116,101,114,109,40,41]}],
         0,false}],
       0,false},
      {sep,[{text,[1,42]},{sep,[{text,"\rOpts = term()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,83,116,97,116,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [20,80,114,105,111,114,105,116,121,32,61,32,105,110,116,101,103,101,
          114,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\tMANDATORY"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [141,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,115,
              32,97,108,119,97,121,115,32,99,97,108,108,101,100,32,98,101,102,
              111,114,101,32,97,110,121,32,111,116,104,101,114,32,99,97,108,
              108,98,97,99,107,32,102,117,110,99,116,105,111,110,46,32,85,115,
              101,32,105,116,32,116,111,32,105,110,105,116,105,97,116,101,32,
              97,110,121,32,99,111,109,109,111,110,32,115,116,97,116,101,46,
              32,73,116,32,105,115,32,116,111,32,114,101,116,117,114,110,32,
              97,32,115,116,97,116,101,32,102,111,114,32,116,104,105,115,32,
              67,84,72,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,[4,42,73,100,42]},
            {sep,
             [{text,
               [29,105,115,32,101,105,116,104,101,114,32,116,104,101,32,114,
                101,116,117,114,110,32,118,97,108,117,101,32,111,102]}],
             0,false},
            {text,"\e[Module:id-1](#Module:id-1)"},
            {sep,[{text,[6,44,32,111,114,32,97]}],0,false},
            {text,"\v*reference*"},
            {sep,
             [{text,[14,40,99,114,101,97,116,101,100,32,117,115,105,110,103]}],
             0,false},
            {text,".[erlang:make_ref/0](../erts/erlang#make_ref-0)"},
            {sep,[{text,"\vin ERTS) if"}],0,false},
            {text,"\e[Module:id-1](#Module:id-1)"},
            {sep,
             [{text,
               [19,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,
                116,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\n*Priority*"},
            {sep,
             [{text,
               [128,105,115,32,116,104,101,32,114,101,108,97,116,105,118,101,
                32,112,114,105,111,114,105,116,121,32,111,102,32,116,104,105,
                115,32,104,111,111,107,46,32,72,111,111,107,115,32,119,105,
                116,104,32,97,32,108,111,119,101,114,32,112,114,105,111,114,
                105,116,121,32,97,114,101,32,101,120,101,99,117,116,101,100,
                32,102,105,114,115,116,46,32,73,102,32,110,111,32,112,114,105,
                111,114,105,116,121,32,105,115,32,115,112,101,99,105,102,105,
                101,100,44,32,105,116,32,105,115,32,115,101,116,32,116,111]}],
             0,false},
            {text,[3,42,48,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [22,70,111,114,32,100,101,116,97,105,108,115,32,97,98,111,117,
                116,32,119,104,101,110]}],
             0,false},
            {text,[6,42,105,110,105,116,42]},
            {sep,
             [{text,
               [22,105,115,32,99,97,108,108,101,100,44,32,115,101,101,32,115,
                101,99,116,105,111,110]}],
             0,false},
            {text,"%[CTH Scope](./ct_hooks_chapter#scope)"},
            {sep,
             [{text,
               [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,";## Module:post_groups(SuiteName, GroupDefs) -> NewGroupDefs"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [22,67,97,108,108,101,100,32,97,102,116,101,114,32,103,114,111,117,
            112,115,47,48,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,
                    109,40,41]}],
                 0,false}],
               0,false},
              {sep,
               [{text,[1,42]},
                {sep,[{text,"\"GroupDefs = NewGroupDefs = [Group]"}],0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,"1Group = {GroupName,Properties,GroupsAndTestCases}"}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,71,114,111,117,112,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "BProperties = [parallel | sequence | Shuffle | {GroupRepeatType,N}]"}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               "_GroupsAndTestCases = [Group | {group,GroupName} | TestCase | {testcase,TestCase,TCRepeatProps}]"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [17,84,101,115,116,67,97,115,101,32,61,32,97,116,111,109,40,
               41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             "JTCRepeatProps = [{repeat,N} | {repeat_until_ok,N} | {repeat_until_fail,N}]"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"\"Shuffle = shuffle | {shuffle,Seed}"}],0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,[{text,"&Seed = {integer(),integer(),integer()}"}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          "tGroupRepeatType = repeat | repeat_until_all_ok | repeat_until_all_fail | repeat_until_any_ok | repeat_until_any_fail"}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [23,78,32,61,32,105,110,116,101,103,101,114,40,41,32,124,32,102,111,
          114,101,118,101,114]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,97,102,116,101,114]}],
             0,false},
            {text,
             "<[common_test#Module:groups-0](./common_test#Module:groups-0)"},
            {sep,
             [{text,
               "s. It is used to modify the test group definitions, for instance to add or remove groups or change group properties."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\v*GroupDefs*"},
            {sep,[{text,[7,105,115,32,119,104,97,116]}],0,false},
            {text,
             "<[common_test#Module:groups-0](./common_test#Module:groups-0)"},
            {sep,
             [{text,"/returned, that is, a list of group definitions."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,[14,42,78,101,119,71,114,111,117,112,68,101,102,115,42]},
            {sep,
             [{text,".is the possibly modified version of this list."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "7This function is called only if the CTH is added before"}],
             0,false},
            {text,
             [16,42,105,110,105,116,95,112,101,114,95,115,117,105,116,101,42]},
            {sep,[{text," is run. For details, see section"}],0,false},
            {text,"%[CTH Scope](./ct_hooks_chapter#scope)"},
            {sep,
             [{text,
               [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "7Notice that for CTHs that are installed by means of the"}],
             0,false},
            {text,
             ":[common_test#Module:suite-0](./common_test#Module:suite-0)"},
            {sep,[{text,"\tfunction,"}],0,false},
            {text,[15,42,112,111,115,116,95,103,114,111,117,112,115,47,50,42]},
            {sep,
             [{text,
               [20,105,115,32,99,97,108,108,101,100,32,98,101,102,111,114,101,
                32,116,104,101]}],
             0,false},
            {text,
             [31,91,77,111,100,117,108,101,58,105,110,105,116,45,50,93,40,35,
              77,111,100,117,108,101,58,105,110,105,116,45,50,41]},
            {sep,
             [{text,
               "Vhook function. However, for CTHs that are installed by means of the CT start flag, the"}],
             0,false},
            {text,
             [31,91,77,111,100,117,108,101,58,105,110,105,116,45,50,93,40,35,
              77,111,100,117,108,101,58,105,110,105,116,45,50,41]},
            {sep,
             [{text,
               [25,102,117,110,99,116,105,111,110,32,105,115,32,99,97,108,108,
                101,100,32,102,105,114,115,116,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
          {sep,
           [{text,[4,32,32,32,32]},
            {sep,
             [{sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          [153,80,114,105,111,114,32,116,111,32,101,97,99,104,
                           32,116,101,115,116,32,101,120,101,99,117,116,105,
                           111,110,44,32,67,111,109,109,111,110,32,84,101,115,
                           116,32,100,111,101,115,32,97,32,115,105,109,117,
                           108,97,116,101,100,32,116,101,115,116,32,114,117,
                           110,32,105,110,32,111,114,100,101,114,32,116,111,
                           32,99,111,117,110,116,32,116,101,115,116,32,115,
                           117,105,116,101,115,44,32,103,114,111,117,112,115,
                           32,97,110,100,32,99,97,115,101,115,32,102,111,114,
                           32,108,111,103,103,105,110,103,32,112,117,114,112,
                           111,115,101,115,46,32,84,104,105,115,32,99,97,117,
                           115,101,115,32,116,104,101]}],
                        0,false},
                       {text,
                        [15,42,112,111,115,116,95,103,114,111,117,112,115,47,
                         50,42]},
                       {sep,
                        [{text,
                          "ihook function to always be called twice. For this reason, side effects are best avoided in this callback."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,true}],
           0,false}},
         {text,[0]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,"=## Module:post_all(SuiteName, Return, GroupDefs) -> NewReturn"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [19,67,97,108,108,101,100,32,97,102,116,101,114,32,97,108,108,47,
            48,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{text,
                        [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,
                         111,109,40,41]}],
                      0,false}],
                    0,false},
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{text,"*Return = NewReturn = Tests | {skip,Reason}"}],
                      0,false}],
                    0,false}},
                  {sep,
                   [{text,[1,42]},
                    {sep,
                     [{text,
                       [146,84,101,115,116,115,32,61,32,91,84,101,115,116,67,
                        97,115,101,32,124,32,123,116,101,115,116,99,97,115,
                        101,44,84,101,115,116,67,97,115,101,44,84,67,82,101,
                        112,101,97,116,80,114,111,112,115,125,32,124,32,123,
                        103,114,111,117,112,44,71,114,111,117,112,78,97,109,
                        101,125,32,124,32,123,103,114,111,117,112,44,71,114,
                        111,117,112,78,97,109,101,44,80,114,111,112,101,114,
                        116,105,101,115,125,32,124,32,123,103,114,111,117,112,
                        44,71,114,111,117,112,78,97,109,101,44,80,114,111,112,
                        101,114,116,105,101,115,44,83,117,98,71,114,111,117,
                        112,115,125,93]}],
                     0,false}],
                   0,false}},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{text,
                      [17,84,101,115,116,67,97,115,101,32,61,32,97,116,111,
                       109,40,41]}],
                    0,false}],
                  0,false}},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,
                     "JTCRepeatProps = [{repeat,N} | {repeat_until_ok,N} | {repeat_until_fail,N}]"}],
                   0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    [18,71,114,111,117,112,78,97,109,101,32,61,32,97,116,111,
                     109,40,41]}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,"&Properties = GroupProperties | default"}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "GSubGroups = [{GroupName,Properties} | {GroupName,Properties,SubGroups}]"}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,[{text,"\"Shuffle = shuffle | {shuffle,Seed}"}],0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,[{text,"&Seed = {integer(),integer(),integer()}"}],0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               "tGroupRepeatType = repeat | repeat_until_all_ok | repeat_until_all_fail | repeat_until_any_ok | repeat_until_any_fail"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [23,78,32,61,32,105,110,116,101,103,101,114,40,41,32,124,32,102,
               111,114,101,118,101,114]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,[{text,"\"GroupDefs = NewGroupDefs = [Group]"}],0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"6Group = {GroupName,GroupProperties,GroupsAndTestCases}"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           "GGroupProperties = [parallel | sequence | Shuffle | {GroupRepeatType,N}]"}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          ";GroupsAndTestCases = [Group | {group,GroupName} | TestCase]"}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,97,102,116,101,114]}],
             0,false},
            {text,"6[common_test#Module:all-0](./common_test#Module:all-0)"},
            {sep,
             [{text,
               "¾. It is used to modify the set of test cases and test group to be executed, for instance to add or remove test cases and groups, change group properties, or even skip all tests in the suite."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\b*Return*"},
            {sep,[{text,[7,105,115,32,119,104,97,116]}],0,false},
            {text,"6[common_test#Module:all-0](./common_test#Module:all-0)"},
            {sep,
             [{text,
               "Mreturned, that is, a list of test cases and groups to be executed, or a tuple"}],
             0,false},
            {text,[15,42,123,115,107,105,112,44,82,101,97,115,111,110,125,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\v*GroupDefs*"},
            {sep,[{text,[7,105,115,32,119,104,97,116]}],0,false},
            {text,
             "<[common_test#Module:groups-0](./common_test#Module:groups-0)"},
            {sep,[{text,[6,111,114,32,116,104,101]}],0,false},
            {text,[15,42,112,111,115,116,95,103,114,111,117,112,115,47,50,42]},
            {sep,
             [{text,"4hook returned, that is, a list of group definitions."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\v*NewReturn*"},
            {sep,[{text,"#is the possibly modified version of"}],0,false},
            {text,"\b*Return*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "7This function is called only if the CTH is added before"}],
             0,false},
            {text,
             [16,42,105,110,105,116,95,112,101,114,95,115,117,105,116,101,42]},
            {sep,[{text," is run. For details, see section"}],0,false},
            {text,"%[CTH Scope](./ct_hooks_chapter#scope)"},
            {sep,
             [{text,
               [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "7Notice that for CTHs that are installed by means of the"}],
             0,false},
            {text,
             ":[common_test#Module:suite-0](./common_test#Module:suite-0)"},
            {sep,[{text,"\tfunction,"}],0,false},
            {text,"\f*post_all/2*"},
            {sep,
             [{text,
               [20,105,115,32,99,97,108,108,101,100,32,98,101,102,111,114,101,
                32,116,104,101]}],
             0,false},
            {text,
             [31,91,77,111,100,117,108,101,58,105,110,105,116,45,50,93,40,35,
              77,111,100,117,108,101,58,105,110,105,116,45,50,41]},
            {sep,
             [{text,
               "Vhook function. However, for CTHs that are installed by means of the CT start flag, the"}],
             0,false},
            {text,
             [31,91,77,111,100,117,108,101,58,105,110,105,116,45,50,93,40,35,
              77,111,100,117,108,101,58,105,110,105,116,45,50,41]},
            {sep,
             [{text,
               [25,102,117,110,99,116,105,111,110,32,105,115,32,99,97,108,108,
                101,100,32,102,105,114,115,116,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
          {sep,
           [{text,[4,32,32,32,32]},
            {sep,
             [{sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          [153,80,114,105,111,114,32,116,111,32,101,97,99,104,
                           32,116,101,115,116,32,101,120,101,99,117,116,105,
                           111,110,44,32,67,111,109,109,111,110,32,84,101,115,
                           116,32,100,111,101,115,32,97,32,115,105,109,117,
                           108,97,116,101,100,32,116,101,115,116,32,114,117,
                           110,32,105,110,32,111,114,100,101,114,32,116,111,
                           32,99,111,117,110,116,32,116,101,115,116,32,115,
                           117,105,116,101,115,44,32,103,114,111,117,112,115,
                           32,97,110,100,32,99,97,115,101,115,32,102,111,114,
                           32,108,111,103,103,105,110,103,32,112,117,114,112,
                           111,115,101,115,46,32,84,104,105,115,32,99,97,117,
                           115,101,115,32,116,104,101]}],
                        0,false},
                       {text,"\f*post_all/3*"},
                       {sep,
                        [{text,
                          "ihook function to always be called twice. For this reason, side effects are best avoided in this callback."}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,true}],
           0,false}},
         {text,[0]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "E## Module:pre_init_per_suite(SuiteName, InitData, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,67,97,108,108,101,100,32,98,101,102,111,114,101,32,105,110,105,
            116,95,112,101,114,95,115,117,105,116,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [30,73,110,105,116,68,97,116,97,32,61,32,67,111,110,102,105,
                  103,32,124,32,83,107,105,112,79,114,70,97,105,108]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,[{text,"\"Config = NewConfig = [{Key,Value}]"}],0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
                116,97,116,101,32,61,32,116,101,114,109,40,41]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [30,82,101,115,117,108,116,32,61,32,123,82,101,116,117,114,110,
               44,32,78,101,119,67,84,72,83,116,97,116,101,125]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [31,82,101,116,117,114,110,32,61,32,78,101,119,67,111,110,102,
              105,103,32,124,32,83,107,105,112,79,114,70,97,105,108]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,",SkipOrFail = {fail, Reason} | {skip, Reason}"}],
          0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [30,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,98,101,102,111,114,101]}],
             0,false},
            {text,
             "L[common_test#Module:init_per_suite-1](./common_test#Module:init_per_suite-1)"},
            {sep,
             [{text,
               "Sif it exists. It typically contains initialization/logging that must be done before"}],
             0,false},
            {text,
             [16,42,105,110,105,116,95,112,101,114,95,115,117,105,116,101,42]},
            {sep,[{text,"\ris called. If"}],0,false},
            {text,[15,42,123,115,107,105,112,44,82,101,97,115,111,110,125,42]},
            {sep,[{text,[2,111,114]}],0,false},
            {text,[15,42,123,102,97,105,108,44,82,101,97,115,111,110,125,42]},
            {sep,[{text,"\fis returned,"}],0,false},
            {text,
             [16,42,105,110,105,116,95,112,101,114,95,115,117,105,116,101,42]},
            {sep,
             [{text,"/and all test cases of the suite are skipped and"}],
             0,false},
            {text,"\b*Reason*"},
            {sep,
             [{text,")printed in the overview log of the suite."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\v*SuiteName*"},
            {sep,[{text,"#is the name of the suite to be run."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\n*InitData*"},
            {sep,
             [{text,
               ":is the original configuration list of the test suite, or a"}],
             0,false},
            {text,"\f*SkipOrFail*"},
            {sep,
             [{text,"*tuple if a previous CTH has returned this."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\n*CTHState*"},
            {sep,
             [{text,")is the current internal state of the CTH."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\b*Return*"},
            {sep,
             [{text,
               [20,105,115,32,116,104,101,32,114,101,115,117,108,116,32,111,
                102,32,116,104,101]}],
             0,false},
            {text,
             [16,42,105,110,105,116,95,112,101,114,95,115,117,105,116,101,42]},
            {sep,
             [{text,
               [18,102,117,110,99,116,105,111,110,46,32,73,102,32,105,116,32,
                105,115]}],
             0,false},
            {text,[15,42,123,115,107,105,112,44,82,101,97,115,111,110,125,42]},
            {sep,[{text,[2,111,114]}],0,false},
            {text,[15,42,123,102,97,105,108,44,82,101,97,115,111,110,125,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,
             "L[common_test#Module:init_per_suite-1](./common_test#Module:init_per_suite-1)"},
            {sep,
             [{text,
               "ais never called, instead the initiation is considered to be skipped or failed, respectively. If a"}],
             0,false},
            {text,"\v*NewConfig*"},
            {sep,
             [{text,
               [17,108,105,115,116,32,105,115,32,114,101,116,117,114,110,101,
                100,44]}],
             0,false},
            {text,
             "L[common_test#Module:init_per_suite-1](./common_test#Module:init_per_suite-1)"},
            {sep,
             [{text,
               [19,105,115,32,99,97,108,108,101,100,32,119,105,116,104,32,116,
                104,97,116]}],
             0,false},
            {text,"\v*NewConfig*"},
            {sep,[{text,"#list. For more details, see section"}],0,false},
            {text,"#[Pre Hooks](./ct_hooks_chapter#pre)"},
            {sep,
             [{text,
               [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "7This function is called only if the CTH is added before"}],
             0,false},
            {text,
             [23,42,105,110,105,116,95,112,101,114,95,115,117,105,116,101,32,
              105,115,32,114,117,110,42]},
            {sep,
             [{text,
               [26,46,32,70,111,114,32,100,101,116,97,105,108,115,44,32,115,
                101,101,32,115,101,99,116,105,111,110]}],
             0,false},
            {text,"%[CTH Scope](./ct_hooks_chapter#scope)"},
            {sep,
             [{text,
               [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "L## Module:post_init_per_suite(SuiteName, Config, Return, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [28,67,97,108,108,101,100,32,97,102,116,101,114,32,105,110,105,116,
            95,112,101,114,95,115,117,105,116,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                 40,41]}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [22,67,111,110,102,105,103,32,61,32,91,123,75,101,121,44,86,
                 97,108,117,101,125,93]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"1Return = NewReturn = Config | SkipOrFail | term()"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"5SkipOrFail = {fail, Reason} | {skip, Reason} | term()"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
              116,97,116,101,32,61,32,116,101,114,109,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"!Result = {NewReturn, NewCTHState}"}],0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,97,102,116,101,114]}],
             0,false},
            {text,
             "L[common_test#Module:init_per_suite-1](./common_test#Module:init_per_suite-1)"},
            {sep,
             [{text,
               "sif it exists. It typically contains extra checks to ensure that all the correct dependencies are started correctly."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\b*Return*"},
            {sep,[{text,[7,105,115,32,119,104,97,116]}],0,false},
            {text,
             "L[common_test#Module:init_per_suite-1](./common_test#Module:init_per_suite-1)"},
            {sep,
             [{text,
               [18,114,101,116,117,114,110,101,100,44,32,116,104,97,116,32,
                105,115,44]}],
             0,false},
            {text,[15,42,123,102,97,105,108,44,82,101,97,115,111,110,125,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,[15,42,123,115,107,105,112,44,82,101,97,115,111,110,125,42]},
            {sep,[{text,[3,44,32,97]}],0,false},
            {text,"\b*Config*"},
            {sep,
             [{text,
               [30,108,105,115,116,44,32,111,114,32,97,32,116,101,114,109,32,
                100,101,115,99,114,105,98,105,110,103,32,104,111,119]}],
             0,false},
            {text,
             "L[common_test#Module:init_per_suite-1](./common_test#Module:init_per_suite-1)"},
            {sep,[{text,[7,102,97,105,108,101,100,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\v*NewReturn*"},
            {sep,[{text,"(is the possibly modified return value of"}],0,false},
            {text,
             "L[common_test#Module:init_per_suite-1](./common_test#Module:init_per_suite-1)"},
            {sep,
             [{text,
               [30,46,32,84,111,32,114,101,99,111,118,101,114,32,102,114,111,
                109,32,97,32,102,97,105,108,117,114,101,32,105,110]}],
             0,false},
            {text,
             "L[common_test#Module:init_per_suite-1](./common_test#Module:init_per_suite-1)"},
            {sep,[{text,"\b, return"}],0,false},
            {text,"\f*ConfigList*"},
            {sep,[{text,"\bwith the"}],0,false},
            {text,"\v*tc_status*"},
            {sep,[{text,"&element removed. For more details, see"}],0,false},
            {text,"%[Post Hooks](./ct_hooks_chapter#post)"},
            {sep,
             [{text,
               "4in section \"Manipulating Tests\" in the User's Guide."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\n*CTHState*"},
            {sep,
             [{text,")is the current internal state of the CTH."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "=This function is called only if the CTH is added before or in"}],
             0,false},
            {text,
             [16,42,105,110,105,116,95,112,101,114,95,115,117,105,116,101,42]},
            {sep,
             [{text,
               [26,46,32,70,111,114,32,100,101,116,97,105,108,115,44,32,115,
                101,101,32,115,101,99,116,105,111,110]}],
             0,false},
            {text,"%[CTH Scope](./ct_hooks_chapter#scope)"},
            {sep,
             [{text,
               [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "P## Module:pre_init_per_group(SuiteName, GroupName, InitData, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,67,97,108,108,101,100,32,98,101,102,111,114,101,32,105,110,105,
            116,95,112,101,114,95,103,114,111,117,112,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,71,114,111,117,112,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [30,73,110,105,116,68,97,116,97,32,61,32,67,111,110,102,105,
                 103,32,124,32,83,107,105,112,79,114,70,97,105,108]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,[{text,"\"Config = NewConfig = [{Key,Value}]"}],0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
               116,97,116,101,32,61,32,116,101,114,109,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,".Result = {NewConfig | SkipOrFail, NewCTHState}"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"+SkipOrFail = {fail,Reason} | {skip, Reason}"}],
          0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [30,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,98,101,102,111,114,101]}],
             0,false},
            {text,
             "L[common_test#Module:init_per_group-2](./common_test#Module:init_per_group-2)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "N[ct_hooks#Module:pre_init_per_suite-3](./ct_hooks#Module:pre_init_per_suite-3)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,
             "L[common_test#Module:init_per_group-2](./common_test#Module:init_per_group-2)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,
             [29,42,77,111,100,117,108,101,58,112,114,101,95,105,110,105,116,
              95,112,101,114,95,103,114,111,117,112,47,52,42]},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,
             ":*Module:pre_init_per_group(GroupName, InitData, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "W## Module:post_init_per_group(SuiteName, GroupName, Config, Return, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [28,67,97,108,108,101,100,32,97,102,116,101,114,32,105,110,105,116,
            95,112,101,114,95,103,114,111,117,112,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,71,114,111,117,112,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [22,67,111,110,102,105,103,32,61,32,91,123,75,101,121,44,86,
                 97,108,117,101,125,93]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"1Return = NewReturn = Config | SkipOrFail | term()"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"+SkipOrFail = {fail,Reason} | {skip, Reason}"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
              116,97,116,101,32,61,32,116,101,114,109,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"!Result = {NewReturn, NewCTHState}"}],0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,97,102,116,101,114]}],
             0,false},
            {text,
             "L[common_test#Module:init_per_group-2](./common_test#Module:init_per_group-2)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "P[ct_hooks#Module:post_init_per_suite-4](./ct_hooks#Module:post_init_per_suite-4)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,
             "L[common_test#Module:init_per_group-2](./common_test#Module:init_per_group-2)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,
             [30,42,77,111,100,117,108,101,58,112,111,115,116,95,105,110,105,
              116,95,112,101,114,95,103,114,111,117,112,47,53,42]},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,
             "A*Module:post_init_per_group(GroupName, Config, Return, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "V## Module:pre_init_per_testcase(SuiteName, TestcaseName, InitData, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," Called before init_per_testcase."}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [21,84,101,115,116,99,97,115,101,78,97,109,101,32,61,32,97,
                  116,111,109,40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [30,73,110,105,116,68,97,116,97,32,61,32,67,111,110,102,105,
                 103,32,124,32,83,107,105,112,79,114,70,97,105,108]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,[{text,"\"Config = NewConfig = [{Key,Value}]"}],0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
               116,97,116,101,32,61,32,116,101,114,109,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,".Result = {NewConfig | SkipOrFail, NewCTHState}"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"+SkipOrFail = {fail,Reason} | {skip, Reason}"}],
          0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [30,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,98,101,102,111,114,101]}],
             0,false},
            {text,
             "R[common_test#Module:init_per_testcase-2](./common_test#Module:init_per_testcase-2)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "N[ct_hooks#Module:pre_init_per_suite-3](./ct_hooks#Module:pre_init_per_suite-3)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,
             "R[common_test#Module:init_per_testcase-2](./common_test#Module:init_per_testcase-2)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text," *Module:pre_init_per_testcase/4*"},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,
             "@*Module:pre_init_per_testcase(TestcaseName, InitData, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [136,67,84,72,115,32,99,97,110,110,111,116,32,98,101,32,97,100,
              100,101,100,32,104,101,114,101,32,114,105,103,104,116,32,110,
              111,119,46,32,84,104,97,116,32,102,101,97,116,117,114,101,32,
              109,97,121,32,98,101,32,97,100,100,101,100,32,105,110,32,97,32,
              108,97,116,101,114,32,114,101,108,101,97,115,101,44,32,98,117,
              116,32,105,116,32,119,111,117,108,100,32,114,105,103,104,116,32,
              110,111,119,32,98,114,101,97,107,32,98,97,99,107,119,97,114,100,
              115,32,99,111,109,112,97,116,105,98,105,108,105,116,121,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "]## Module:post_init_per_testcase(SuiteName, TestcaseName, Config, Return, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [31,67,97,108,108,101,100,32,97,102,116,101,114,32,105,110,105,116,
            95,112,101,114,95,116,101,115,116,99,97,115,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [21,84,101,115,116,99,97,115,101,78,97,109,101,32,61,32,97,
                  116,111,109,40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [22,67,111,110,102,105,103,32,61,32,91,123,75,101,121,44,86,
                 97,108,117,101,125,93]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"1Return = NewReturn = Config | SkipOrFail | term()"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"+SkipOrFail = {fail,Reason} | {skip, Reason}"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
              116,97,116,101,32,61,32,116,101,114,109,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"!Result = {NewReturn, NewCTHState}"}],0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,97,102,116,101,114]}],
             0,false},
            {text,
             "R[common_test#Module:init_per_testcase-2](./common_test#Module:init_per_testcase-2)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "P[ct_hooks#Module:post_init_per_suite-4](./ct_hooks#Module:post_init_per_suite-4)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,
             "R[common_test#Module:init_per_testcase-2](./common_test#Module:init_per_testcase-2)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,"!*Module:post_init_per_testcase/5*"},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,
             "G*Module:post_init_per_testcase(TestcaseName, Config, Return, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "T## Module:pre_end_per_testcase(SuiteName, TestcaseName, EndData, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [31,67,97,108,108,101,100,32,98,101,102,111,114,101,32,101,110,100,
            95,112,101,114,95,116,101,115,116,99,97,115,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                 40,41]}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [21,84,101,115,116,99,97,115,101,78,97,109,101,32,61,32,97,
                 116,111,109,40,41]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [16,69,110,100,68,97,116,97,32,61,32,67,111,110,102,105,103]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,[{text,"\"Config = NewConfig = [{Key,Value}]"}],0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
              116,97,116,101,32,61,32,116,101,114,109,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"!Result = {NewConfig, NewCTHState}"}],0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [30,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,98,101,102,111,114,101]}],
             0,false},
            {text,
             "P[common_test#Module:end_per_testcase-2](./common_test#Module:end_per_testcase-2)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "L[ct_hooks#Module:pre_end_per_suite-3](./ct_hooks#Module:pre_end_per_suite-3)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,
             "P[common_test#Module:end_per_testcase-2](./common_test#Module:end_per_testcase-2)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "tThis function cannot change the result of the test case by returning skip or fail tuples, but it may insert items in"}],
             0,false},
            {text,"\b*Config*"},
            {sep,
             [{text,
               [19,116,104,97,116,32,99,97,110,32,98,101,32,114,101,97,100,32,
                105,110]}],
             0,false},
            {text,
             [20,42,101,110,100,95,112,101,114,95,116,101,115,116,99,97,115,
              101,47,50,42]},
            {sep,[{text,[5,111,114,32,105,110]}],0,false},
            {text,
             [25,42,112,111,115,116,95,101,110,100,95,112,101,114,95,116,101,
              115,116,99,97,115,101,47,53,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,
             [31,42,77,111,100,117,108,101,58,112,114,101,95,101,110,100,95,
              112,101,114,95,116,101,115,116,99,97,115,101,47,52,42]},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,
             ">*Module:pre_end_per_testcase(TestcaseName, EndData, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "\\## Module:post_end_per_testcase(SuiteName, TestcaseName, Config, Return, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [30,67,97,108,108,101,100,32,97,102,116,101,114,32,101,110,100,95,
            112,101,114,95,116,101,115,116,99,97,115,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [21,84,101,115,116,99,97,115,101,78,97,109,101,32,61,32,97,
                  116,111,109,40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [22,67,111,110,102,105,103,32,61,32,91,123,75,101,121,44,86,
                 97,108,117,101,125,93]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"1Return = NewReturn = Config | SkipOrFail | term()"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"+SkipOrFail = {fail,Reason} | {skip, Reason}"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
              116,97,116,101,32,61,32,116,101,114,109,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"!Result = {NewReturn, NewCTHState}"}],0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,97,102,116,101,114]}],
             0,false},
            {text,
             "P[common_test#Module:end_per_testcase-2](./common_test#Module:end_per_testcase-2)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "N[ct_hooks#Module:post_end_per_suite-4](./ct_hooks#Module:post_end_per_suite-4)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,
             "P[common_test#Module:end_per_testcase-2](./common_test#Module:end_per_testcase-2)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text," *Module:post_end_per_testcase/5*"},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,
             "F*Module:post_end_per_testcase(TestcaseName, Config, Return, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "N## Module:pre_end_per_group(SuiteName, GroupName, EndData, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [28,67,97,108,108,101,100,32,98,101,102,111,114,101,32,101,110,100,
            95,112,101,114,95,103,114,111,117,112,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,71,114,111,117,112,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [29,69,110,100,68,97,116,97,32,61,32,67,111,110,102,105,103,
                 32,124,32,83,107,105,112,79,114,70,97,105,108]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,[{text,"\"Config = NewConfig = [{Key,Value}]"}],0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
               116,97,116,101,32,61,32,116,101,114,109,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,".Result = {NewConfig | SkipOrFail, NewCTHState}"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"+SkipOrFail = {fail,Reason} | {skip, Reason}"}],
          0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [30,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,98,101,102,111,114,101]}],
             0,false},
            {text,
             "J[common_test#Module:end_per_group-2](./common_test#Module:end_per_group-2)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "N[ct_hooks#Module:pre_init_per_suite-3](./ct_hooks#Module:pre_init_per_suite-3)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,
             "J[common_test#Module:end_per_group-2](./common_test#Module:end_per_group-2)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,
             [28,42,77,111,100,117,108,101,58,112,114,101,95,101,110,100,95,
              112,101,114,95,103,114,111,117,112,47,52,42]},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,"8*Module:pre_end_per_group(GroupName, EndData, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "V## Module:post_end_per_group(SuiteName, GroupName, Config, Return, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,[{sep,[{text,"\eCalled after end_per_group."}],0,false}],0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,71,114,111,117,112,78,97,109,101,32,61,32,97,116,111,109,
                  40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [22,67,111,110,102,105,103,32,61,32,91,123,75,101,121,44,86,
                 97,108,117,101,125,93]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"1Return = NewReturn = Config | SkipOrFail | term()"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"+SkipOrFail = {fail,Reason} | {skip, Reason}"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
              116,97,116,101,32,61,32,116,101,114,109,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"!Result = {NewReturn, NewCTHState}"}],0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,97,102,116,101,114]}],
             0,false},
            {text,
             "J[common_test#Module:end_per_group-2](./common_test#Module:end_per_group-2)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "P[ct_hooks#Module:post_init_per_suite-4](./ct_hooks#Module:post_init_per_suite-4)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,"5[end_per_group](./common_test#Module:end_per_group-2)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,
             [29,42,77,111,100,117,108,101,58,112,111,115,116,95,101,110,100,
              95,112,101,114,95,103,114,111,117,112,47,53,42]},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,
             "@*Module:post_end_per_group(GroupName, Config, Return, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "C## Module:pre_end_per_suite(SuiteName, EndData, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [28,67,97,108,108,101,100,32,98,101,102,111,114,101,32,101,110,100,
            95,112,101,114,95,115,117,105,116,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                 40,41]}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [29,69,110,100,68,97,116,97,32,61,32,67,111,110,102,105,103,
                 32,124,32,83,107,105,112,79,114,70,97,105,108]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,[{text,"\"Config = NewConfig = [{Key,Value}]"}],0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
               116,97,116,101,32,61,32,116,101,114,109,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,".Result = {NewConfig | SkipOrFail, NewCTHState}"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"+SkipOrFail = {fail,Reason} | {skip, Reason}"}],
          0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [30,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,98,101,102,111,114,101]}],
             0,false},
            {text,
             "J[common_test#Module:end_per_suite-1](./common_test#Module:end_per_suite-1)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "N[ct_hooks#Module:pre_init_per_suite-3](./ct_hooks#Module:pre_init_per_suite-3)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,
             "J[common_test#Module:end_per_suite-1](./common_test#Module:end_per_suite-1)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "K## Module:post_end_per_suite(SuiteName, Config, Return, CTHState) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,[{sep,[{text,"\eCalled after end_per_suite."}],0,false}],0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,
                 40,41]}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [22,67,111,110,102,105,103,32,61,32,91,123,75,101,121,44,86,
                 97,108,117,101,125,93]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"1Return = NewReturn = Config | SkipOrFail | term()"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"+SkipOrFail = {fail,Reason} | {skip, Reason}"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,
              116,97,116,101,32,61,32,116,101,114,109,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"!Result = {NewReturn, NewCTHState}"}],0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = atom()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115,32,99,97,108,108,101,100,32,97,102,116,101,114]}],
             0,false},
            {text,
             "J[common_test#Module:end_per_suite-1](./common_test#Module:end_per_suite-1)"},
            {sep,[{text,"(if it exists. It behaves the same way as"}],0,false},
            {text,
             "P[ct_hooks#Module:post_init_per_suite-4](./ct_hooks#Module:post_init_per_suite-4)"},
            {sep,
             [{text,
               [18,44,32,98,117,116,32,102,111,114,32,102,117,110,99,116,105,
                111,110]}],
             0,false},
            {text,
             "J[common_test#Module:end_per_suite-1](./common_test#Module:end_per_suite-1)"},
            {sep,[{text,"\binstead."}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "J## Module:on_tc_fail(SuiteName, TestName, Reason, CTHState) -> NewCTHState"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," Called after the CTH scope ends."}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,40,
              41]}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [132,84,101,115,116,78,97,109,101,32,61,32,105,110,105,116,95,
              112,101,114,95,115,117,105,116,101,32,124,32,101,110,100,95,112,
              101,114,95,115,117,105,116,101,32,124,32,123,105,110,105,116,95,
              112,101,114,95,103,114,111,117,112,44,71,114,111,117,112,78,97,
              109,101,125,32,124,32,123,101,110,100,95,112,101,114,95,103,114,
              111,117,112,44,71,114,111,117,112,78,97,109,101,125,32,124,32,
              123,70,117,110,99,78,97,109,101,44,71,114,111,117,112,78,97,109,
              101,125,32,124,32,70,117,110,99,78,97,109,101]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [17,70,117,110,99,78,97,109,101,32,61,32,97,116,111,109,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [18,71,114,111,117,112,78,97,109,101,32,61,32,97,116,111,109,40,
            41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,116,
          97,116,101,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¡This function is called whenever a test case (or configuration function) fails. It is called after the post function is called for the failed test case, that is:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,[{text,[2,73,102]}],0,false},
          {text,
           [16,42,105,110,105,116,95,112,101,114,95,115,117,105,116,101,42]},
          {sep,[{text,"$fails, this function is called after"}],0,false},
          {text,
           "=[Module:post_init_per_suite-4](#Module:post_init_per_suite-4)"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{text,"2If a test case fails, this funcion is called after"}],
           0,false},
          {text,
           "A[Module:post_end_per_testcase-5](#Module:post_end_per_testcase-5)"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "SIf the failed test case belongs to a test case group, the first argument is a tuple"}],
             0,false},
            {text,
             [22,42,123,70,117,110,99,78,97,109,101,44,71,114,111,117,112,78,
              97,109,101,125,42]},
            {sep,[{text,"#, otherwise only the function name."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [24,84,104,101,32,100,97,116,97,32,116,104,97,116,32,99,111,
                109,101,115,32,119,105,116,104]}],
             0,false},
            {text,"\b*Reason*"},
            {sep,
             [{text,
               [26,102,111,108,108,111,119,115,32,116,104,101,32,115,97,109,
                101,32,102,111,114,109,97,116,32,97,115]}],
             0,false},
            {text,
             "F[event_handler_chapter#failreason](./event_handler_chapter#failreason)"},
            {sep,[{text,"\bin event"}],0,false},
            {text,
             "@[event_handler_chapter#tc_done](./event_handler_chapter#tc_done)"},
            {sep,
             [{text,
               [26,46,32,70,111,114,32,100,101,116,97,105,108,115,44,32,115,
                101,101,32,115,101,99,116,105,111,110]}],
             0,false},
            {text,"0[Event Handling](./event_handler_chapter#events)"},
            {sep,
             [{text,
               [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,
             [21,42,77,111,100,117,108,101,58,111,110,95,116,99,95,102,97,105,
              108,47,52,42]},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,"/*Module:on_tc_fail(TestName, Reason, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "J## Module:on_tc_skip(SuiteName, TestName, Reason, CTHState) -> NewCTHState"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," Called after the CTH scope ends."}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [18,83,117,105,116,101,78,97,109,101,32,61,32,97,116,111,109,40,
              41]}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [132,84,101,115,116,78,97,109,101,32,61,32,105,110,105,116,95,
              112,101,114,95,115,117,105,116,101,32,124,32,101,110,100,95,112,
              101,114,95,115,117,105,116,101,32,124,32,123,105,110,105,116,95,
              112,101,114,95,103,114,111,117,112,44,71,114,111,117,112,78,97,
              109,101,125,32,124,32,123,101,110,100,95,112,101,114,95,103,114,
              111,117,112,44,71,114,111,117,112,78,97,109,101,125,32,124,32,
              123,70,117,110,99,78,97,109,101,44,71,114,111,117,112,78,97,109,
              101,125,32,124,32,70,117,110,99,78,97,109,101]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [17,70,117,110,99,78,97,109,101,32,61,32,97,116,111,109,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [18,71,114,111,117,112,78,97,109,101,32,61,32,97,116,111,109,40,
            41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,".Reason = {tc_auto_skip | tc_user_skip, term()}"}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [31,67,84,72,83,116,97,116,101,32,61,32,78,101,119,67,84,72,83,116,
          97,116,101,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "§This function is called whenever a test case (or configuration function) is skipped. It is called after the post function is called for the skipped test case, that is:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,[{text,[2,73,102]}],0,false},
          {text,
           [16,42,105,110,105,116,95,112,101,114,95,103,114,111,117,112,42]},
          {sep,[{text,")is skipped, this function is called after"}],0,false},
          {text,
           "=[Module:post_init_per_group-5](#Module:post_init_per_group-5)"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{text,
             "8If a test case is skipped, this function is called after"}],
           0,false},
          {text,
           "A[Module:post_end_per_testcase-5](#Module:post_end_per_testcase-5)"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "TIf the skipped test case belongs to a test case group, the first argument is a tuple"}],
             0,false},
            {text,
             [22,42,123,70,117,110,99,78,97,109,101,44,71,114,111,117,112,78,
              97,109,101,125,42]},
            {sep,[{text,"#, otherwise only the function name."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [24,84,104,101,32,100,97,116,97,32,116,104,97,116,32,99,111,
                109,101,115,32,119,105,116,104]}],
             0,false},
            {text,"\b*Reason*"},
            {sep,[{text,"!follows the same format as events"}],0,false},
            {text,
             "J[event_handler_chapter#tc_auto_skip](./event_handler_chapter#tc_auto_skip)"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,
             "J[event_handler_chapter#tc_user_skip](./event_handler_chapter#tc_user_skip)"},
            {sep,
             [{text,
               [24,70,111,114,32,100,101,116,97,105,108,115,44,32,115,101,101,
                32,115,101,99,116,105,111,110]}],
             0,false},
            {text,"0[Event Handling](./event_handler_chapter#events)"},
            {sep,
             [{text,
               [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,
             [21,42,77,111,100,117,108,101,58,111,110,95,116,99,95,115,107,
              105,112,47,52,42]},
            {sep,
             [{text,"1is not exported, common_test will attempt to call"}],
             0,false},
            {text,"/*Module:on_tc_skip(TestName, Reason, CTHState)*"},
            {sep,
             [{text,"-instead. This is for backwards compatibility."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [29,35,35,32,77,111,100,117,108,101,58,116,101,114,109,105,110,97,116,
        101,40,67,84,72,83,116,97,116,101,41]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," Called after the CTH scope ends."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,[1,42]},
     {sep,
      [{text,[17,67,84,72,83,116,97,116,101,32,61,32,116,101,114,109,40,41]}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"+This function is called at the end of a CTH"}],
             0,false},
            {text,"![scope](./ct_hooks_chapter#scope)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [24,35,35,32,77,111,100,117,108,101,58,105,100,40,79,112,116,115,41,32,
        45,62,32,73,100]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,")Called before the init function of a CTH."}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,[{text,[1,42]},{sep,[{text,"\rOpts = term()"}],0,false}],0,false},
    {sep,[{text,[1,42]},{sep,[{text,"\vId = term()"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\bOPTIONAL"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,[4,42,73,100,42]},
            {sep,
             [{text,
               "?identifies a CTH instance uniquely. If two CTHs return the same"}],
             0,false},
            {text,[4,42,73,100,42]},
            {sep,
             [{text,
               "y, the second CTH is ignored and subsequent calls to the CTH are only made to the first instance. For details, see section"}],
             0,false},
            {text,"1[Installing a CTH](./ct_hooks_chapter#installing)"},
            {sep,
             [{text,
               [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                105,100,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [16,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                115]}],
             0,false},
            {text,[7,42,42,110,111,116,42,42]},
            {sep,
             [{text,
               "?to have any side effects, as it can be called multiple times by"}],
             0,false},
            {text,"\r*Common Test*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "GIf not implemented, the CTH acts as if this function returned a call to"}],
             0,false},
            {text,"\f*make_ref/0*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
