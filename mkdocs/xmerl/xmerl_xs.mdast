{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\n# xmerl_xs"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\n# xmerl_xs"},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "\\Erlang has similarities to XSLT since both languages have a functional programming approach."}],
          0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "bErlang has similarities to XSLT since both languages have a functional programming approach. Using"}],
                  0,false},
                 {text,"\r*xmerl_xpath*"},
                 {sep,
                  [{text,
                    "7it is possible to write XSLT like transforms in Erlang."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [257,88,83,76,84,32,115,116,121,108,101,115,104,101,101,116,
                   115,32,97,114,101,32,111,102,116,101,110,32,117,115,101,
                   100,32,119,104,101,110,32,116,114,97,110,115,102,111,114,
                   109,105,110,103,32,88,77,76,32,100,111,99,117,109,101,110,
                   116,115,44,32,116,111,32,111,116,104,101,114,32,88,77,76,
                   32,100,111,99,117,109,101,110,116,115,32,111,114,32,40,88,
                   41,72,84,77,76,32,102,111,114,32,112,114,101,115,101,110,
                   116,97,116,105,111,110,46,32,88,83,76,84,32,99,111,110,116,
                   97,105,110,115,32,113,117,105,116,101,32,109,97,110,121,32,
                   102,117,110,99,116,105,111,110,115,32,97,110,100,32,108,
                   101,97,114,110,105,110,103,32,116,104,101,109,32,97,108,
                   108,32,109,97,121,32,116,97,107,101,32,115,111,109,101,32,
                   101,102,102,111,114,116,46,32,84,104,105,115,32,100,111,99,
                   117,109,101,110,116,32,97,115,115,117,109,101,115,32,97,32,
                   98,97,115,105,99,32,108,101,118,101,108,32,111,102,32,117,
                   110,100,101,114,115,116,97,110,100,105,110,103,32,111,102,
                   32,88,83,76,84,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [335,83,105,110,99,101,32,88,83,76,84,32,105,115,32,98,97,
                   115,101,100,32,111,110,32,97,32,102,117,110,99,116,105,111,
                   110,97,108,32,112,114,111,103,114,97,109,109,105,110,103,
                   32,97,112,112,114,111,97,99,104,32,119,105,116,104,32,112,
                   97,116,116,101,114,110,32,109,97,116,99,104,105,110,103,32,
                   97,110,100,32,114,101,99,117,114,115,105,111,110,32,105,
                   116,32,105,115,32,112,111,115,115,105,98,108,101,32,116,
                   111,32,119,114,105,116,101,32,115,105,109,105,108,97,114,
                   32,115,116,121,108,101,32,115,104,101,101,116,115,32,105,
                   110,32,69,114,108,97,110,103,46,32,65,116,32,108,101,97,
                   115,116,32,102,111,114,32,98,97,115,105,99,32,116,114,97,
                   110,115,102,111,114,109,115,46,32,84,104,105,115,32,100,
                   111,99,117,109,101,110,116,32,100,101,115,99,114,105,98,
                   101,115,32,104,111,119,32,116,111,32,117,115,101,32,116,
                   104,101,32,88,80,97,116,104,32,105,109,112,108,101,109,101,
                   110,116,97,116,105,111,110,32,116,111,103,101,116,104,101,
                   114,32,119,105,116,104,32,69,114,108,97,110,103,115,32,112,
                   97,116,116,101,114,110,32,109,97,116,99,104,105,110,103,32,
                   97,110,100,32,97,32,99,111,117,112,108,101,32,111,102,32,
                   102,117,110,99,116,105,111,110,115,32,116,111,32,119,114,
                   105,116,101,32,88,83,76,84,32,108,105,107,101,32,116,114,
                   97,110,115,102,111,114,109,115,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "Ã£This approach is probably easier for an Erlanger but if you need to use real XSLT stylesheets in order to \"comply to the standard\" there is an adapter available to the Sablotron XSLT package which is written i C++. See also the"}],
                  0,false},
                 {text,"\"[Tutorial](xmerl_xs_examples.html)"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## built_in_rules(Fun, E) -> List"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,84,104,101,32,100,101,102,97,117,108,116,32,102,97,108,108,98,
             97,99,107,32,98,101,104,97,118,105,111,117,114,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"/<a name=\"built_in_rules-2\">built_in_rules-2</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                ">The default fallback behaviour. Template funs should end with:"}],
              0,false},
             {above,{above,null,null},null},
             {text,"2*template(E) -> built_in_rules(fun template/1, E)*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"### select(String::string(), E) -> E"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"8Extracts the nodes from the xml tree according to XPath."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,
       [31,60,97,32,110,97,109,101,61,34,115,101,108,101,99,116,45,50,34,62,
        115,101,108,101,99,116,45,50,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "8Extracts the nodes from the xml tree according to XPath."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\r**See also:**"},
             {text,
              [25,91,118,97,108,117,101,95,111,102,47,49,93,40,35,118,97,108,
               117,101,95,111,102,45,49,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [22,35,35,32,118,97,108,117,101,95,111,102,40,69,41,32,45,62,32,76,
         105,115,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Concatenates all text nodes within the tree."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,[{text,[1,42]},{sep,[{text,"\nE = term()"}],0,false}],0,false},
    {sep,
     [{text,"#<a name=\"value_of-1\">value_of-1</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,",Concatenates all text nodes within the tree."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\bExample:"}],0,false}],0,true},null},
        null}},
      {above,{above,null,null},null},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [131,10,32,32,60,120,115,108,58,116,101,109,112,108,97,116,101,
               32,109,97,116,99,104,61,34,116,105,116,108,101,34,62,10,32,32,
               32,32,60,100,105,118,32,97,108,105,103,110,61,34,99,101,110,
               116,101,114,34,62,10,32,32,32,32,32,32,60,104,49,62,60,120,115,
               108,58,118,97,108,117,101,45,111,102,32,115,101,108,101,99,116,
               61,34,46,34,32,47,62,60,47,104,49,62,10,32,32,32,32,60,47,100,
               105,118,62,10,32,32,60,47,120,115,108,58,116,101,109,112,108,
               97,116,101,62,10,32,32]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\bbecomes:"}],0,false}],0,true},null},
        null}},
      {above,{above,null,null},null},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [131,10,32,32,32,116,101,109,112,108,97,116,101,40,69,32,61,32,
               35,120,109,108,69,108,101,109,101,110,116,123,110,97,109,101,
               61,39,116,105,116,108,101,39,125,41,32,45,62,10,32,32,32,32,32,
               91,34,60,100,105,118,32,97,108,105,103,110,61,34,99,101,110,
               116,101,114,34,62,60,104,49,62,34,44,10,32,32,32,32,32,32,32,
               118,97,108,117,101,95,111,102,40,115,101,108,101,99,116,40,34,
               46,34,44,32,69,41,41,44,32,34,60,47,104,49,62,60,47,100,105,
               118,62,34,93,10,32,32]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"1## xslapply(Fun::Function, EList::list()) -> List"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "Ixslapply is a wrapper to make things look similar to xsl:apply-templates."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [23,70,117,110,99,116,105,111,110,32,61,32,40,41,32,45,62,32,108,105,
          115,116,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{text,"#<a name=\"xslapply-2\">xslapply-2</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "Ixslapply is a wrapper to make things look similar to xsl:apply-templates."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [23,69,120,97,109,112,108,101,44,32,111,114,105,103,105,110,97,
               108,32,88,83,76,84,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,{above,null,null},null},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "h\n  <xsl:template match=\"doc/title\">\n    <h1>\n      <xsl:apply-templates/>\n    </h1>\n  </xsl:template>\n  "}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [18,98,101,99,111,109,101,115,32,105,110,32,69,114,108,97,110,
               103,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,{above,null,null},null},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [134,10,32,32,116,101,109,112,108,97,116,101,40,69,32,61,32,35,
               120,109,108,69,108,101,109,101,110,116,123,32,112,97,114,101,
               110,116,115,61,91,123,39,100,111,99,39,44,95,125,124,95,93,44,
               32,110,97,109,101,61,39,116,105,116,108,101,39,125,41,32,45,62,
               10,32,32,32,32,91,34,60,104,49,62,34,44,10,32,32,32,32,32,120,
               115,108,97,112,112,108,121,40,102,117,110,32,116,101,109,112,
               108,97,116,101,47,49,44,32,69,41,44,10,32,32,32,32,32,34,60,47,
               104,49,62,34,93,59,10,32,32]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t# Authors"},null},null}},
   {sep,[{sep,[null],0,false},{sep,[null],0,false}],0,false}],
  0,false}}
