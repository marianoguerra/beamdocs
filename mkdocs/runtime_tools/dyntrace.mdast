{above,
 {above,
  {above,
   {above,
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\n# dyntrace"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\n# dyntrace"},null},null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [28,73,110,116,101,114,102,97,99,101,32,116,111,32,100,121,110,97,
            109,105,99,32,116,114,97,99,105,110,103]}],
         0,false}],
       0,true},
      null},
     null}}},
  {above,
   {above,{above,{text,[0]},null},null},
   {above,
    {above,
     {sep,
      [{sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [257,84,104,105,115,32,109,111,100,117,108,101,32,105,109,
                  112,108,101,109,101,110,116,115,32,105,110,116,101,114,102,
                  97,99,101,115,32,116,111,32,100,121,110,97,109,105,99,32,
                  116,114,97,99,105,110,103,44,32,115,104,111,117,108,100,32,
                  115,117,99,104,32,98,101,32,99,111,109,112,105,108,101,100,
                  32,105,110,116,111,32,116,104,101,32,118,105,114,116,117,97,
                  108,32,109,97,99,104,105,110,101,46,32,70,111,114,32,97,32,
                  115,116,97,110,100,97,114,100,32,97,110,100,47,111,114,32,
                  99,111,109,109,101,114,99,105,97,108,32,98,117,105,108,100,
                  44,32,110,111,32,100,121,110,97,109,105,99,32,116,114,97,99,
                  105,110,103,32,105,115,32,97,118,97,105,108,97,98,108,101,
                  44,32,105,110,32,119,104,105,99,104,32,99,97,115,101,32,110,
                  111,110,101,32,111,102,32,116,104,101,32,102,117,110,99,116,
                  105,111,110,115,32,105,110,32,116,104,105,115,32,109,111,
                  100,117,108,101,32,105,115,32,117,115,97,98,108,101,32,111,
                  114,32,103,105,118,101,32,97,110,121,32,101,102,102,101,99,
                  116,46]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "RShould dynamic tracing be enabled in the current build, either by configuring with"}],
                 0,false},
                {text,")*./configure --with-dynamic-trace=dtrace*"},
                {sep,[{text,[7,111,114,32,119,105,116,104]}],0,false},
                {text,",*./configure --with-dynamic-trace=systemtap*"},
                {sep,
                 [{text,"(, the module can be used for two things:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{sep,
               [{text,
                 [22,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,
                  114,45,112,114,111,98,101]}],
               0,false},
              {text,
               [17,42,117,115,101,114,95,116,114,97,99,101,95,105,52,115,52,
                42]},
              {sep,
               [{text,
                 [18,105,110,32,116,104,101,32,78,73,70,32,108,105,98,114,97,
                  114,121]}],
               0,false},
              {text,"\r*dyntrace.so*"},
              {sep,[{text,"\nby calling"}],0,false},
              {text,
               [30,42,100,121,110,116,114,97,99,101,58,112,47,123,49,44,50,44,
                51,44,52,44,53,44,54,44,55,44,56,125,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{sep,
               [{text,
                 "OSet a user specified tag that will be present in the trace messages of both the"}],
               0,false},
              {text,"\v*efile_drv*"},
              {sep,[{text,"#and the user-probe mentioned above."}],0,false}],
             0,false}],
           0,false}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "ËBoth building with dynamic trace probes and using them is experimental and unsupported by Erlang/OTP. It is included as an option for the developer to trace and debug performance issues in their systems."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [406,84,104,101,32,111,114,105,103,105,110,97,108,32,105,109,
                  112,108,101,109,101,110,116,97,116,105,111,110,32,105,115,
                  32,109,111,115,116,108,121,32,100,111,110,101,32,98,121,32,
                  83,99,111,116,116,32,76,121,115,116,105,103,101,114,32,70,
                  114,105,116,99,104,105,101,32,97,115,32,97,110,32,79,112,
                  101,110,32,83,111,117,114,99,101,32,67,111,110,116,114,105,
                  98,117,116,105,111,110,32,97,110,100,32,105,116,32,115,104,
                  111,117,108,100,32,98,101,32,118,105,101,119,101,100,32,97,
                  115,32,115,117,99,104,32,101,118,101,110,32,116,104,111,117,
                  103,104,32,116,104,101,32,115,111,117,114,99,101,32,102,111,
                  114,32,100,121,110,97,109,105,99,32,116,114,97,99,105,110,
                  103,32,97,115,32,119,101,108,108,32,97,115,32,116,104,105,
                  115,32,109,111,100,117,108,101,32,105,115,32,105,110,99,108,
                  117,100,101,100,32,105,110,32,116,104,101,32,109,97,105,110,
                  32,100,105,115,116,114,105,98,117,116,105,111,110,46,32,72,
                  111,119,101,118,101,114,44,32,116,104,101,32,97,98,105,108,
                  105,116,121,32,116,111,32,117,115,101,32,100,121,110,97,109,
                  105,99,32,116,114,97,99,105,110,103,32,111,102,32,116,104,
                  101,32,118,105,114,116,117,97,108,32,109,97,99,104,105,110,
                  101,32,105,115,32,97,32,118,101,114,121,32,118,97,108,117,
                  97,98,108,101,32,99,111,110,116,114,105,98,117,116,105,111,
                  110,32,119,104,105,99,104,32,79,84,80,32,104,97,115,32,101,
                  118,101,114,121,32,105,110,116,101,110,116,105,111,110,32,
                  116,111,32,109,97,105,110,116,97,105,110,32,97,115,32,97,32,
                  116,111,111,108,32,102,111,114,32,116,104,101,32,100,101,
                  118,101,108,111,112,101,114,46]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\fHow to write"}],0,false},
                {text,[3,42,100,42]},
                {sep,[{text,"\vprograms or"}],0,false},
                {text,"\v*systemtap*"},
                {sep,
                 [{text,
                   "¾scripts can be learned from books and from a lot of pages on the Internet. This manual page does not include any documentation about using the dynamic trace tools of respective platform. The"}],
                 0,false},
                {text,"\n*examples*"},
                {sep,
                 [{text,
                   [16,100,105,114,101,99,116,111,114,121,32,111,102,32,116,
                    104,101]}],
                 0,false},
                {text,
                 [15,42,114,117,110,116,105,109,101,95,116,111,111,108,115,
                  42]},
                {sep,
                 [{text,
                   ";application however contains comprehensive examples of both"}],
                 0,false},
                {text,[3,42,100,42]},
                {sep,[{text,[3,97,110,100]}],0,false},
                {text,"\v*systemtap*"},
                {sep,
                 [{text,
                   "Mprograms that will help you get started. Another source of information is the"}],
                 0,false},
                {text,
                 [16,91,100,116,114,97,99,101,93,40,68,84,82,65,67,69,41]},
                {sep,[{text,[3,97,110,100]}],0,false},
                {text,
                 [22,91,115,121,115,116,101,109,116,97,112,93,40,83,89,83,84,
                  69,77,84,65,80,41]},
                {sep,
                 [{text,"+chapters in the Runtime Tools Users' Guide."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,true},
     null},
    null}}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\e## available() -> boolean()"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"%Check if dynamic tracing is available"}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "`This function uses the NIF library to determine if dynamic tracing is available. Usually calling"}],
             0,false},
            {text,"4[erlang:system_info/1](../erts/erlang#system_info/1)"},
            {sep,
             [{text,
               "=is a better indicator of the availability of dynamic tracing."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"+The function will throw an exception if the"}],
             0,false},
            {text,"\n*dyntrace*"},
            {sep,
             [{text,
               "GNIF library could not be loaded by the on_load function of this module."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"'## p() -> true | false | error | badarg"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,114,
            32,116,114,97,99,101,32,112,114,111,98,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÈCalling this function will trigger the \"user\" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message only containing the user tag and zeroes/empty strings in all other fields."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,";## p(integer() | string()) -> true | false | error | badarg"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,114,
            32,116,114,97,99,101,32,112,114,111,98,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÜCalling this function will trigger the \"user\" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer or string parameter in the first integer/string field."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "Q## p(integer() | string(), integer() | string()) -> true | false | error | badarg"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,114,
            32,116,114,97,99,101,32,112,114,111,98,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [302,67,97,108,108,105,110,103,32,116,104,105,115,32,102,117,
                110,99,116,105,111,110,32,119,105,108,108,32,116,114,105,103,
                103,101,114,32,116,104,101,32,34,117,115,101,114,34,32,116,
                114,97,99,101,32,112,114,111,98,101,32,117,115,101,114,95,116,
                114,97,99,101,95,105,52,115,52,32,105,110,32,116,104,101,32,
                100,121,110,116,114,97,99,101,32,78,73,70,32,109,111,100,117,
                108,101,44,32,115,101,110,100,105,110,103,32,97,32,116,114,97,
                99,101,32,109,101,115,115,97,103,101,32,99,111,110,116,97,105,
                110,105,110,103,32,116,104,101,32,117,115,101,114,32,116,97,
                103,32,97,110,100,32,116,104,101,32,105,110,116,101,103,101,
                114,40,41,32,111,114,32,115,116,114,105,110,103,40,41,32,112,
                97,114,97,109,101,116,101,114,115,32,97,115,32,116,104,101,32,
                102,105,114,115,116,32,102,105,101,108,100,115,32,111,102,32,
                114,101,115,112,101,99,116,105,118,101,32,116,121,112,101,46,
                32,105,110,116,101,103,101,114,40,41,32,112,97,114,97,109,101,
                116,101,114,115,32,115,104,111,117,108,100,32,98,101,32,112,
                117,116,32,98,101,102,111,114,101,32,97,110,121,32,115,116,
                114,105,110,103,40,41,32,112,97,114,97,109,101,116,101,114,
                115,46,32,73,46,101,46]}],
             0,false},
            {text,[14,42,112,40,49,44,34,72,101,108,108,111,34,41,42]},
            {sep,[{text,"\fis ok, as is"}],0,false},
            {text,"\b*p(1,1)*"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,
             [20,42,112,40,34,72,101,108,108,111,34,44,34,65,103,97,105,110,
              34,41,42]},
            {sep,[{text,"\t, but not"}],0,false},
            {text,[14,42,112,40,34,72,101,108,108,111,34,44,49,41,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "g## p(integer() | string(), integer() | string(), integer() | string()) -> true | false | error | badarg"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,114,
            32,116,114,97,99,101,32,112,114,111,98,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [303,67,97,108,108,105,110,103,32,116,104,105,115,32,102,117,
                110,99,116,105,111,110,32,119,105,108,108,32,116,114,105,103,
                103,101,114,32,116,104,101,32,34,117,115,101,114,34,32,116,
                114,97,99,101,32,112,114,111,98,101,32,117,115,101,114,95,116,
                114,97,99,101,95,105,52,115,52,32,105,110,32,116,104,101,32,
                100,121,110,116,114,97,99,101,32,78,73,70,32,109,111,100,117,
                108,101,44,32,115,101,110,100,105,110,103,32,97,32,116,114,97,
                99,101,32,109,101,115,115,97,103,101,32,99,111,110,116,97,105,
                110,105,110,103,32,116,104,101,32,117,115,101,114,32,116,97,
                103,32,97,110,100,32,116,104,101,32,105,110,116,101,103,101,
                114,40,41,32,111,114,32,115,116,114,105,110,103,40,41,32,112,
                97,114,97,109,101,116,101,114,115,32,97,115,32,116,104,101,32,
                102,105,114,115,116,32,102,105,101,108,100,115,32,111,102,32,
                114,101,115,112,101,99,116,105,118,101,32,116,121,112,101,46,
                32,105,110,116,101,103,101,114,40,41,32,112,97,114,97,109,101,
                116,101,114,115,32,115,104,111,117,108,100,32,98,101,32,112,
                117,116,32,98,101,102,111,114,101,32,97,110,121,32,115,116,
                114,105,110,103,40,41,32,112,97,114,97,109,101,116,101,114,
                115,44,32,97,115,32,105,110]}],
             0,false},
            {text,"\v[p/2](#p/2)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "}## p(integer() | string(), integer() | string(), integer() | string(), integer() | string()) -> true | false | error | badarg"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,114,
            32,116,114,97,99,101,32,112,114,111,98,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [303,67,97,108,108,105,110,103,32,116,104,105,115,32,102,117,
                110,99,116,105,111,110,32,119,105,108,108,32,116,114,105,103,
                103,101,114,32,116,104,101,32,34,117,115,101,114,34,32,116,
                114,97,99,101,32,112,114,111,98,101,32,117,115,101,114,95,116,
                114,97,99,101,95,105,52,115,52,32,105,110,32,116,104,101,32,
                100,121,110,116,114,97,99,101,32,78,73,70,32,109,111,100,117,
                108,101,44,32,115,101,110,100,105,110,103,32,97,32,116,114,97,
                99,101,32,109,101,115,115,97,103,101,32,99,111,110,116,97,105,
                110,105,110,103,32,116,104,101,32,117,115,101,114,32,116,97,
                103,32,97,110,100,32,116,104,101,32,105,110,116,101,103,101,
                114,40,41,32,111,114,32,115,116,114,105,110,103,40,41,32,112,
                97,114,97,109,101,116,101,114,115,32,97,115,32,116,104,101,32,
                102,105,114,115,116,32,102,105,101,108,100,115,32,111,102,32,
                114,101,115,112,101,99,116,105,118,101,32,116,121,112,101,46,
                32,105,110,116,101,103,101,114,40,41,32,112,97,114,97,109,101,
                116,101,114,115,32,115,104,111,117,108,100,32,98,101,32,112,
                117,116,32,98,101,102,111,114,101,32,97,110,121,32,115,116,
                114,105,110,103,40,41,32,112,97,114,97,109,101,116,101,114,
                115,44,32,97,115,32,105,110]}],
             0,false},
            {text,"\v[p/2](#p/2)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "|## p(integer(), integer() | string(), integer() | string(), integer() | string(), string()) -> true | false | error | badarg"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,114,
            32,116,114,97,99,101,32,112,114,111,98,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [303,67,97,108,108,105,110,103,32,116,104,105,115,32,102,117,
                110,99,116,105,111,110,32,119,105,108,108,32,116,114,105,103,
                103,101,114,32,116,104,101,32,34,117,115,101,114,34,32,116,
                114,97,99,101,32,112,114,111,98,101,32,117,115,101,114,95,116,
                114,97,99,101,95,105,52,115,52,32,105,110,32,116,104,101,32,
                100,121,110,116,114,97,99,101,32,78,73,70,32,109,111,100,117,
                108,101,44,32,115,101,110,100,105,110,103,32,97,32,116,114,97,
                99,101,32,109,101,115,115,97,103,101,32,99,111,110,116,97,105,
                110,105,110,103,32,116,104,101,32,117,115,101,114,32,116,97,
                103,32,97,110,100,32,116,104,101,32,105,110,116,101,103,101,
                114,40,41,32,111,114,32,115,116,114,105,110,103,40,41,32,112,
                97,114,97,109,101,116,101,114,115,32,97,115,32,116,104,101,32,
                102,105,114,115,116,32,102,105,101,108,100,115,32,111,102,32,
                114,101,115,112,101,99,116,105,118,101,32,116,121,112,101,46,
                32,105,110,116,101,103,101,114,40,41,32,112,97,114,97,109,101,
                116,101,114,115,32,115,104,111,117,108,100,32,98,101,32,112,
                117,116,32,98,101,102,111,114,101,32,97,110,121,32,115,116,
                114,105,110,103,40,41,32,112,97,114,97,109,101,116,101,114,
                115,44,32,97,115,32,105,110]}],
             0,false},
            {text,"\v[p/2](#p/2)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [149,84,104,101,114,101,32,99,97,110,32,98,101,32,110,111,32,109,
              111,114,101,32,116,104,97,110,32,102,111,117,114,32,112,97,114,
              97,109,101,116,101,114,115,32,111,102,32,97,110,121,32,116,121,
              112,101,32,40,105,110,116,101,103,101,114,40,41,32,111,114,32,
              115,116,114,105,110,103,40,41,41,44,32,115,111,32,116,104,101,
              32,102,105,114,115,116,32,112,97,114,97,109,101,116,101,114,32,
              104,97,115,32,116,111,32,98,101,32,97,110,32,105,110,116,101,
              103,101,114,40,41,32,97,110,100,32,116,104,101,32,108,97,115,
              116,32,97,32,115,116,114,105,110,103,40,41,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "{## p(integer(), integer(), integer() | string(), integer() | string(), string(), string()) -> true | false | error | badarg"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,114,
            32,116,114,97,99,101,32,112,114,111,98,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [303,67,97,108,108,105,110,103,32,116,104,105,115,32,102,117,
                110,99,116,105,111,110,32,119,105,108,108,32,116,114,105,103,
                103,101,114,32,116,104,101,32,34,117,115,101,114,34,32,116,
                114,97,99,101,32,112,114,111,98,101,32,117,115,101,114,95,116,
                114,97,99,101,95,105,52,115,52,32,105,110,32,116,104,101,32,
                100,121,110,116,114,97,99,101,32,78,73,70,32,109,111,100,117,
                108,101,44,32,115,101,110,100,105,110,103,32,97,32,116,114,97,
                99,101,32,109,101,115,115,97,103,101,32,99,111,110,116,97,105,
                110,105,110,103,32,116,104,101,32,117,115,101,114,32,116,97,
                103,32,97,110,100,32,116,104,101,32,105,110,116,101,103,101,
                114,40,41,32,111,114,32,115,116,114,105,110,103,40,41,32,112,
                97,114,97,109,101,116,101,114,115,32,97,115,32,116,104,101,32,
                102,105,114,115,116,32,102,105,101,108,100,115,32,111,102,32,
                114,101,115,112,101,99,116,105,118,101,32,116,121,112,101,46,
                32,105,110,116,101,103,101,114,40,41,32,112,97,114,97,109,101,
                116,101,114,115,32,115,104,111,117,108,100,32,98,101,32,112,
                117,116,32,98,101,102,111,114,101,32,97,110,121,32,115,116,
                114,105,110,103,40,41,32,112,97,114,97,109,101,116,101,114,
                115,44,32,97,115,32,105,110]}],
             0,false},
            {text,"\v[p/2](#p/2)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [157,84,104,101,114,101,32,99,97,110,32,98,101,32,110,111,32,109,
              111,114,101,32,116,104,97,110,32,102,111,117,114,32,112,97,114,
              97,109,101,116,101,114,115,32,111,102,32,97,110,121,32,116,121,
              112,101,32,40,105,110,116,101,103,101,114,40,41,32,111,114,32,
              115,116,114,105,110,103,40,41,41,44,32,115,111,32,116,104,101,
              32,102,105,114,115,116,32,116,119,111,32,112,97,114,97,109,101,
              116,101,114,115,32,104,97,115,32,116,111,32,98,101,32,105,110,
              116,101,103,101,114,40,41,39,115,32,97,110,100,32,116,104,101,
              32,108,97,115,116,32,116,119,111,32,115,116,114,105,110,103,40,
              41,39,115,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "z## p(integer(), integer(), integer(), integer() | string(), string(), string(), string()) -> true | false | error | badarg"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,114,
            32,116,114,97,99,101,32,112,114,111,98,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [303,67,97,108,108,105,110,103,32,116,104,105,115,32,102,117,
                110,99,116,105,111,110,32,119,105,108,108,32,116,114,105,103,
                103,101,114,32,116,104,101,32,34,117,115,101,114,34,32,116,
                114,97,99,101,32,112,114,111,98,101,32,117,115,101,114,95,116,
                114,97,99,101,95,105,52,115,52,32,105,110,32,116,104,101,32,
                100,121,110,116,114,97,99,101,32,78,73,70,32,109,111,100,117,
                108,101,44,32,115,101,110,100,105,110,103,32,97,32,116,114,97,
                99,101,32,109,101,115,115,97,103,101,32,99,111,110,116,97,105,
                110,105,110,103,32,116,104,101,32,117,115,101,114,32,116,97,
                103,32,97,110,100,32,116,104,101,32,105,110,116,101,103,101,
                114,40,41,32,111,114,32,115,116,114,105,110,103,40,41,32,112,
                97,114,97,109,101,116,101,114,115,32,97,115,32,116,104,101,32,
                102,105,114,115,116,32,102,105,101,108,100,115,32,111,102,32,
                114,101,115,112,101,99,116,105,118,101,32,116,121,112,101,46,
                32,105,110,116,101,103,101,114,40,41,32,112,97,114,97,109,101,
                116,101,114,115,32,115,104,111,117,108,100,32,98,101,32,112,
                117,116,32,98,101,102,111,114,101,32,97,110,121,32,115,116,
                114,105,110,103,40,41,32,112,97,114,97,109,101,116,101,114,
                115,44,32,97,115,32,105,110]}],
             0,false},
            {text,"\v[p/2](#p/2)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¡There can be no more than four parameters of any type (integer() or string()), so the first three parameters has to be integer()'s and the last three string()'s."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "y## p(integer(), integer(), integer(), integer(), string(), string(), string(), string()) -> true | false | error | badarg"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,84,114,105,103,103,101,114,32,116,104,101,32,117,115,101,114,
            32,116,114,97,99,101,32,112,114,111,98,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "éCalling this function will trigger the \"user\" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing all the integer()'s and string()'s provided, as well as any user tag set in the current process."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"$## get_tag() -> binary() | undefined"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"$Get the user tag set in the process."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [127,84,104,105,115,32,102,117,110,99,116,105,111,110,32,114,
                101,116,117,114,110,115,32,116,104,101,32,117,115,101,114,32,
                116,97,103,32,115,101,116,32,105,110,32,116,104,101,32,99,117,
                114,114,101,110,116,32,112,114,111,99,101,115,115,46,32,73,
                102,32,110,111,32,116,97,103,32,105,115,32,115,101,116,32,111,
                114,32,100,121,110,97,109,105,99,32,116,114,97,99,105,110,103,
                32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,
                44,32,105,116,32,114,101,116,117,114,110,115]}],
             0,false},
            {text,"\v*undefined*"}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"$## get_tag() -> binary() | undefined"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           ";Get the user tag set in the process or sent to the process."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "®This function returns the user tag set in the current process or, if no user tag is present, the last user tag sent to the process together with a message (in the same way as"}],
             0,false},
            {text,"&[sequential trace tokens](./seq_trace)"},
            {sep,
             [{text,
               [131,97,114,101,32,115,112,114,101,97,100,32,116,111,32,111,
                116,104,101,114,32,112,114,111,99,101,115,115,101,115,32,116,
                111,103,101,116,104,101,114,32,119,105,116,104,32,109,101,115,
                115,97,103,101,115,46,32,70,111,114,32,97,110,32,101,120,112,
                108,97,110,97,116,105,111,110,32,111,102,32,104,111,119,32,
                117,115,101,114,32,116,97,103,115,32,99,97,110,32,98,101,32,
                115,112,114,101,97,100,32,116,111,103,101,116,104,101,114,32,
                119,105,116,104,32,109,101,115,115,97,103,101,115,44,32,115,
                101,101]}],
             0,false},
            {text,
             [29,91,115,112,114,101,97,100,95,116,97,103,47,49,93,40,35,115,
              112,114,101,97,100,95,116,97,103,47,49,41]},
            {sep,
             [{text,
               "D. If no tag is found or dynamic tracing is not available, it returns"}],
             0,false},
            {text,"\v*undefined*"}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"(## put_tag(Item) -> binary() | undefined"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"(Set the user tag of the current process."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,[1,42]},
     {sep,
      [{text,[15,73,116,101,109,32,61,32,105,111,100,97,116,97,40,41]}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¸This function sets the user tag of the current process. The user tag is a binary(), but can be specified as any iodata(), which is automatically converted to a binary by this function."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "BThe user tag is provided to the user probes triggered by calls top"}],
             0,false},
            {text,
             [30,42,100,121,110,116,114,97,99,101,58,112,47,123,49,44,50,44,
              51,44,52,44,53,44,54,44,55,44,56,125,42]},
            {sep,
             [{text,
               "^as well as probes in the efile_driver. In the future, user tags might be added to more probes."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,")The old user tag (if any) is returned, or"}],
             0,false},
            {text,"\v*undefined*"},
            {sep,
             [{text,
               "=if no user tag was present or dynamic tracing is not enabled."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"### spread_tag(boolean()) -> TagData"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "FStart or stop spreading dynamic trace user tags with the next message."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,[1,42]},
     {sep,
      [{sep,
        [{sep,
          [{text,"6TagData = opaque data that can be used as parameter to"}],
          0,false},
         {text,
          [31,91,114,101,115,116,111,114,101,95,116,97,103,47,49,93,40,35,114,
           101,115,116,111,114,101,95,116,97,103,47,49,41]}],
        0,false}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [307,84,104,105,115,32,102,117,110,99,116,105,111,110,32,99,111,
              110,116,114,111,108,115,32,105,102,32,117,115,101,114,32,116,97,
              103,115,32,97,114,101,32,116,111,32,98,101,32,115,112,114,101,
              97,100,32,116,111,32,111,116,104,101,114,32,112,114,111,99,101,
              115,115,101,115,32,119,105,116,104,32,116,104,101,32,110,101,
              120,116,32,109,101,115,115,97,103,101,46,32,83,112,114,101,97,
              100,105,110,103,32,111,102,32,117,115,101,114,32,116,97,103,115,
              32,119,111,114,107,32,108,105,107,101,32,115,112,114,101,97,100,
              105,110,103,32,111,102,32,115,101,113,117,101,110,116,105,97,
              108,32,116,114,97,99,101,32,116,111,107,101,110,115,44,32,115,
              111,32,116,104,97,116,32,97,32,114,101,99,101,105,118,101,100,
              32,117,115,101,114,32,116,97,103,32,119,105,108,108,32,98,101,
              32,97,99,116,105,118,101,32,105,110,32,116,104,101,32,112,114,
              111,99,101,115,115,32,117,110,116,105,108,32,116,104,101,32,110,
              101,120,116,32,109,101,115,115,97,103,101,32,97,114,114,105,118,
              101,115,32,40,105,102,32,116,104,97,116,32,109,101,115,115,97,
              103,101,32,100,111,101,115,32,110,111,116,32,97,108,115,111,32,
              99,111,110,116,97,105,110,32,116,104,101,32,117,115,101,114,32,
              116,97,103,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "­This functionality is used when a client process communicates with a file i/o-server to spread the user tag to the I/O-server and then down to the efile_drv driver. By using"}],
             0,false},
            {text,[14,42,115,112,114,101,97,100,95,116,97,103,47,49,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[15,42,114,101,115,116,111,114,101,95,116,97,103,47,49,42]},
            {sep,
             [{text,
               [296,44,32,111,110,101,32,99,97,110,32,101,110,97,98,108,101,
                32,111,114,32,100,105,115,97,98,108,101,32,115,112,114,101,97,
                100,105,110,103,32,111,102,32,117,115,101,114,32,116,97,103,
                115,32,116,111,32,111,116,104,101,114,32,112,114,111,99,101,
                115,115,101,115,32,97,110,100,32,116,104,101,110,32,114,101,
                115,116,111,114,101,32,116,104,101,32,112,114,101,118,105,111,
                117,115,32,115,116,97,116,101,32,111,102,32,116,104,101,32,
                117,115,101,114,32,116,97,103,46,32,84,104,101,32,84,97,103,
                68,97,116,97,32,114,101,116,117,114,110,101,100,32,102,114,
                111,109,32,116,104,105,115,32,99,97,108,108,32,99,111,110,116,
                97,105,110,115,32,97,108,108,32,112,114,101,118,105,111,117,
                115,32,105,110,102,111,114,109,97,116,105,111,110,32,115,111,
                32,116,104,101,32,115,116,97,116,101,32,40,105,110,99,108,117,
                100,105,110,103,32,97,110,121,32,112,114,101,118,105,111,117,
                115,108,121,32,115,112,114,101,97,100,32,117,115,101,114,32,
                116,97,103,115,41,32,119,105,108,108,32,98,101,32,99,111,109,
                112,108,101,116,101,108,121,32,114,101,115,116,111,114,101,
                100,32,98,121,32,97,32,108,97,116,101,114,32,99,97,108,108,32,
                116,111]}],
             0,false},
            {text,[15,42,114,101,115,116,111,114,101,95,116,97,103,47,49,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,[14,91,102,105,108,101,93,40,46,47,102,105,108,101,41]},
            {sep,
             [{text,
               [147,109,111,100,117,108,101,32,97,108,114,101,97,100,121,32,
                115,112,114,101,97,100,39,115,32,116,97,103,115,44,32,115,111,
                32,116,104,101,114,101,32,105,115,32,110,111,111,32,110,101,
                101,100,32,116,111,32,109,97,110,117,97,108,108,121,32,99,97,
                108,108,32,116,104,101,115,101,32,102,117,110,99,116,105,111,
                110,32,116,111,32,103,101,116,32,117,115,101,114,32,116,97,
                103,115,32,115,112,114,101,97,100,32,116,111,32,116,104,101,
                32,101,102,105,108,101,32,100,114,105,118,101,114,32,116,104,
                114,111,117,103,104,32,116,104,97,116,32,109,111,100,117,108,
                101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "BThe most use of this function would be if one for example uses the"}],
             0,false},
            {text,"\n[io](./io)"},
            {sep,
             [{text,
               "[module to communicate with an I/O-server for a regular file, like in the following example:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "¯\nf() ->\n   {ok, F} = file:open(\"test.tst\",[write]),\n   Saved = dyntrace:spread_tag(true),\n   io:format(F,\"Hello world!\",[]),\n   dyntrace:restore_tag(Saved),\n   file:close(F).\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "zIn this example, any user tag set in the calling process will be spread to the I/O-server when the io:format call is done."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [31,35,35,32,114,101,115,116,111,114,101,95,116,97,103,40,84,97,103,68,
        97,116,97,41,32,45,62,32,116,114,117,101]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"2Restore to a previous state of user tag spreading."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,[1,42]},
     {sep,
      [{sep,
        [{sep,[{text,"!TagData = opaque data returned by"}],0,false},
         {text,
          [29,91,115,112,114,101,97,100,95,116,97,103,47,49,93,40,35,115,112,
           114,101,97,100,95,116,97,103,47,49,41]}],
        0,false}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "WRestores the previous state of user tags and their spreading as it was before a call to"}],
             0,false},
            {text,
             [29,91,115,112,114,101,97,100,95,116,97,103,47,49,93,40,35,115,
              112,114,101,97,100,95,116,97,103,47,49,41]},
            {sep,
             [{text,
               "Ê. Note that the restoring is not limited to the same process, one can utilize this to turn off spreding in one process and restore it in a newly created, the one that actually is going to send messages:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "×\nf() ->\n    TagData=dyntrace:spread_tag(false),\n    spawn(fun() ->\n             dyntrace:restore_tag(TagData),\n             do_something()\n          end),\n    do_something_else(),\n    dyntrace:restore_tag(TagData).\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [343,67,111,114,114,101,99,116,108,121,32,104,97,110,100,108,105,
              110,103,32,117,115,101,114,32,116,97,103,115,32,97,110,100,32,
              116,104,101,105,114,32,115,112,114,101,97,100,105,110,103,32,
              109,105,103,104,116,32,116,97,107,101,32,115,111,109,101,32,101,
              102,102,111,114,116,44,32,97,115,32,69,114,108,97,110,103,32,
              112,114,111,103,114,97,109,115,32,116,101,110,100,32,116,111,32,
              115,101,110,100,32,97,110,100,32,114,101,99,101,105,118,101,32,
              109,101,115,115,97,103,101,115,32,115,111,32,116,104,97,116,32,
              115,111,109,101,116,105,109,101,115,32,116,104,101,32,117,115,
              101,114,32,116,97,103,32,103,101,116,115,32,108,111,115,116,32,
              100,117,101,32,116,111,32,118,97,114,105,111,117,115,32,116,104,
              105,110,103,115,44,32,108,105,107,101,32,100,111,117,98,108,101,
              32,114,101,99,101,105,118,101,115,32,111,114,32,99,111,109,109,
              117,110,105,99,97,116,105,111,110,32,119,105,116,104,32,97,32,
              112,111,114,116,32,40,112,111,114,116,115,32,100,111,32,110,111,
              116,32,104,97,110,100,108,101,32,117,115,101,114,32,116,97,103,
              115,44,32,105,110,32,116,104,101,32,115,97,109,101,32,119,97,
              121,32,97,115,32,116,104,101,121,32,100,111,32,110,111,116,32,
              104,97,110,100,108,101,32,114,101,103,117,108,97,114,32,115,101,
              113,117,101,110,116,105,97,108,32,116,114,97,99,101,32,116,111,
              107,101,110,115,41,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
