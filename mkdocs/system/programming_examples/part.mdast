{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [22,35,32,80,114,111,103,114,97,109,109,105,110,103,32,69,120,97,109,
          112,108,101,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "7<a name=\"programming examples\">programming examples</a>"},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "_This section contains examples on using records, funs, list comprehensions, and the bit syntax."}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}],
         0,true},
        null},
       null}}},
    {sep,
     [{sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [22,35,35,35,32,82,101,99,111,114,100,115,32,97,110,100,32,84,117,
             112,108,101,115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "Ã·The main advantage of using records rather than tuples is that fields in a record are accessed by name, whereas fields in a tuple are accessed by position. To illustrate these differences, suppose that you want to represent a person with the tuple"}],
                0,false},
               {text,
                [24,42,123,78,97,109,101,44,32,65,100,100,114,101,115,115,44,
                 32,80,104,111,110,101,125,42]},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "ETo write functions that manipulate this data, remember the following:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,[6,42,78,97,109,101,42]},
              {sep,
               [{text,"(field is the first element of the tuple."}],
               0,false}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,"\t*Address*"},
              {sep,
               [{text,
                 [28,102,105,101,108,100,32,105,115,32,116,104,101,32,115,101,
                  99,111,110,100,32,101,108,101,109,101,110,116,46]}],
               0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,[7,42,80,104,111,110,101,42]},
             {sep,[{text,"\efield is the third element."}],0,false}],
            0,false}],
          0,false}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,",For example, to extract data from a variable"}],
                0,false},
               {text,[3,42,80,42]},
               {sep,
                [{text,
                  "zthat contains such a tuple, you can write the following code and then use pattern matching to extract the relevant fields:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "3\nName = element(1, P),\nAddress = element(2, P),\n..."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                [290,83,117,99,104,32,99,111,100,101,32,105,115,32,100,105,
                 102,102,105,99,117,108,116,32,116,111,32,114,101,97,100,32,
                 97,110,100,32,117,110,100,101,114,115,116,97,110,100,44,32,
                 97,110,100,32,101,114,114,111,114,115,32,111,99,99,117,114,
                 32,105,102,32,116,104,101,32,110,117,109,98,101,114,105,110,
                 103,32,111,102,32,116,104,101,32,101,108,101,109,101,110,116,
                 115,32,105,110,32,116,104,101,32,116,117,112,108,101,32,105,
                 115,32,119,114,111,110,103,46,32,73,102,32,116,104,101,32,
                 100,97,116,97,32,114,101,112,114,101,115,101,110,116,97,116,
                 105,111,110,32,111,102,32,116,104,101,32,102,105,101,108,100,
                 115,32,105,115,32,99,104,97,110,103,101,100,44,32,98,121,32,
                 114,101,45,111,114,100,101,114,105,110,103,44,32,97,100,100,
                 105,110,103,44,32,111,114,32,114,101,109,111,118,105,110,103,
                 32,102,105,101,108,100,115,44,32,97,108,108,32,114,101,102,
                 101,114,101,110,99,101,115,32,116,111,32,116,104,101,32,112,
                 101,114,115,111,110,32,116,117,112,108,101,32,109,117,115,
                 116,32,98,101,32,99,104,101,99,107,101,100,32,97,110,100,32,
                 112,111,115,115,105,98,108,121,32,109,111,100,105,102,105,
                 101,100,46]}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                [152,82,101,99,111,114,100,115,32,97,108,108,111,119,32,114,
                 101,102,101,114,101,110,99,101,115,32,116,111,32,116,104,101,
                 32,102,105,101,108,100,115,32,98,121,32,110,97,109,101,44,32,
                 105,110,115,116,101,97,100,32,111,102,32,98,121,32,112,111,
                 115,105,116,105,111,110,46,32,73,110,32,116,104,101,32,102,
                 111,108,108,111,119,105,110,103,32,101,120,97,109,112,108,
                 101,44,32,97,32,114,101,99,111,114,100,32,105,110,115,116,
                 101,97,100,32,111,102,32,97,32,116,117,112,108,101,32,105,
                 115,32,117,115,101,100,32,116,111,32,115,116,111,114,101,32,
                 116,104,101,32,100,97,116,97,58]}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,")\n-record(person, {name, phone, address})."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "LThis enables references to the fields of the record by name. For example, if"}],
                0,false},
               {text,[3,42,80,42]},
               {sep,
                [{text,
                  [30,105,115,32,97,32,118,97,114,105,97,98,108,101,32,119,
                   104,111,115,101,32,118,97,108,117,101,32,105,115,32,97]}],
                0,false},
               {text,"\b*person*"},
               {sep,
                [{text,
                  "Mrecord, the following code access the name and address fields of the records:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "6\nName = P#person.name,\nAddress = P#person.address,\n..."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "8Internally, records are represented using tagged tuples:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [31,10,123,112,101,114,115,111,110,44,32,78,97,109,101,44,32,
                 80,104,111,110,101,44,32,65,100,100,114,101,115,115,125]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [21,35,35,35,32,68,101,102,105,110,105,110,103,32,97,32,82,101,99,
             111,114,100]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [30,84,104,105,115,32,102,111,108,108,111,119,105,110,103,
                   32,100,101,102,105,110,105,116,105,111,110,32,111,102,32,
                   97]}],
                0,false},
               {text,"\b*person*"},
               {sep,
                [{text,
                  "Gis used in several examples in this section. Three fields are included,"}],
                0,false},
               {text,[6,42,110,97,109,101,42]},
               {sep,[{text,[1,44]}],0,false},
               {text,[7,42,112,104,111,110,101,42]},
               {sep,[{text,[5,44,32,97,110,100]}],0,false},
               {text,"\t*address*"},
               {sep,
                [{text,
                  [24,46,32,84,104,101,32,100,101,102,97,117,108,116,32,118,
                   97,108,117,101,115,32,102,111,114]}],
                0,false},
               {text,[6,42,110,97,109,101,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[7,42,112,104,111,110,101,42]},
               {sep,
                [{text,
                  "1is \"\" and [], respectively. The default value for"}],
                0,false},
               {text,"\t*address*"},
               {sep,[{text,"\vis the atom"}],0,false},
               {text,"\v*undefined*"},
               {sep,
                [{text,
                  "4, since no default value is supplied for this field:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "3\n-record(person, {name = \"\", phone = [], address})."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "[The record must be defined in the shell to enable use of the record syntax in the examples:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,[3,10,62,32]},
               {text,"-rd(person, {name = \"\", phone = [], address})."},
               {text,[7,10,112,101,114,115,111,110]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [131,84,104,105,115,32,105,115,32,98,101,99,97,117,115,101,
                   32,114,101,99,111,114,100,32,100,101,102,105,110,105,116,
                   105,111,110,115,32,97,114,101,32,111,110,108,121,32,97,118,
                   97,105,108,97,98,108,101,32,97,116,32,99,111,109,112,105,
                   108,101,32,116,105,109,101,44,32,110,111,116,32,97,116,32,
                   114,117,110,116,105,109,101,46,32,70,111,114,32,100,101,
                   116,97,105,108,115,32,111,110,32,114,101,99,111,114,100,
                   115,32,105,110,32,116,104,101,32,115,104,101,108,108,44,32,
                   115,101,101,32,116,104,101]}],
                0,false},
               {text,
                [19,91,115,104,101,108,108,40,51,41,93,40,46,47,115,104,101,
                 108,108,41]},
               {sep,
                [{text,
                  [22,109,97,110,117,97,108,32,112,97,103,101,32,105,110,32,
                   83,84,68,76,73,66,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [21,35,35,35,32,67,114,101,97,116,105,110,103,32,97,32,82,101,99,
             111,114,100]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[5,65,32,110,101,119]}],0,false},
               {text,"\b*person*"},
               {sep,
                [{text,
                  [29,114,101,99,111,114,100,32,105,115,32,99,114,101,97,116,
                   101,100,32,97,115,32,102,111,108,108,111,119,115,58]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,[3,10,62,32]},
               {text,"0#person{phone=[0,8,2,3,4,3,1,2], name=\"Robert\"}."},
               {text,
                "G\n#person{name = \"Robert\",phone = [0,8,2,3,4,3,1,2],address = undefined}"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[6,65,115,32,116,104,101]}],0,false},
               {text,"\t*address*"},
               {sep,
                [{text,"-field was omitted, its default value is used."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "\\From Erlang 5.1/OTP R8B, a value to all fields in a record can be set with the special field"}],
                0,false},
               {text,[3,42,95,42]},
               {sep,[{text,[1,46]}],0,false},
               {text,[3,42,95,42]},
               {sep,
                [{text,",means \"all fields not explicitly specified\"."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,[3,10,62,32]},
               {text,"!#person{name = \"Jakob\", _ = '_'}."},
               {text,
                "2\n#person{name = \"Jakob\",phone = '_',address = '_'}"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,"&It is primarily intended to be used in"}],
                0,false},
               {text,"\r*ets:match/2*"},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,
                [23,42,109,110,101,115,105,97,58,109,97,116,99,104,95,111,98,
                 106,101,99,116,47,51,42]},
               {sep,[{text,"\", to set record fields to the atom"}],0,false},
               {text,[5,42,39,95,39,42]},
               {sep,
                [{text,
                  [24,46,32,40,84,104,105,115,32,105,115,32,97,32,119,105,108,
                   100,99,97,114,100,32,105,110]}],
                0,false},
               {text,"\r*ets:match/2*"},
               {sep,[{text,[2,46,41]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [28,35,35,35,32,65,99,99,101,115,115,105,110,103,32,97,32,82,101,
             99,111,114,100,32,70,105,101,108,100]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "9The following example shows how to access a record field:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,[3,10,62,32]},
               {text,
                "5P = #person{name = \"Joe\", phone = [0,8,2,3,4,3,1,2]}."},
               {text,
                "G\n#person{name = \"Joe\",phone = [0,8,2,3,4,3,1,2],address = undefined}\n> "},
               {text,[14,80,35,112,101,114,115,111,110,46,110,97,109,101,46]},
               {text,[6,10,34,74,111,101,34]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [21,35,35,35,32,85,112,100,97,116,105,110,103,32,97,32,82,101,99,
             111,114,100]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,"3The following example shows how to update a record:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,[3,10,62,32]},
               {text,
                "<P1 = #person{name=\"Joe\", phone=[1,2,3], address=\"A street\"}."},
               {text,
                ">\n#person{name = \"Joe\",phone = [1,2,3],address = \"A street\"}\n> "},
               {text,
                [30,80,50,32,61,32,80,49,35,112,101,114,115,111,110,123,110,
                 97,109,101,61,34,82,111,98,101,114,116,34,125,46]},
               {text,
                ">\n#person{name = \"Robert\",phone = [1,2,3],address = \"A street\"}"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [16,35,35,35,32,84,121,112,101,32,84,101,115,116,105,110,103]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "6The following example shows that the guard succeeds if"}],
                0,false},
               {text,[3,42,80,42]},
               {sep,
                [{text,
                  [17,105,115,32,114,101,99,111,114,100,32,111,102,32,116,121,
                   112,101]}],
                0,false},
               {text,"\b*person*"},
               {sep,[{text,[1,58]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "F\nfoo(P) when is_record(P, person) -> a_person;\nfoo(_) -> not_a_person."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [20,35,35,35,32,80,97,116,116,101,114,110,32,77,97,116,99,104,105,
             110,103]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "TMatching can be used in combination with records, as shown in the following example:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,[3,10,62,32]},
               {text,
                "<P3 = #person{name=\"Joe\", phone=[0,0,7], address=\"A street\"}."},
               {text,
                ">\n#person{name = \"Joe\",phone = [0,0,7],address = \"A street\"}\n> "},
               {text," #person{name = Name} = P3, Name."},
               {text,[6,10,34,74,111,101,34]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,"&The following function takes a list of"}],
                0,false},
               {text,"\b*person*"},
               {sep,
                [{text,
                  "Mrecords and searches for the phone number of a person with a particular name:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "Â¬\nfind_phone([#person{name=Name, phone=Phone} | _], Name) ->\n    {found,  Phone};\nfind_phone([_| T], Name) ->\n    find_phone(T, Name);\nfind_phone([], Name) ->\n    not_found."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "@The fields referred to in the pattern can be given in any order."}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [18,35,35,35,32,78,101,115,116,101,100,32,82,101,99,111,114,100,
             115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "Â§The value of a field in a record can be an instance of a record. Retrieval of nested data can be done stepwise, or in a single step, as shown in the following example:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "Ã\n-record(name, {first = \"Robert\", last = \"Ericsson\"}).\n-record(person, {name = #name{}, phone}).\n\ndemo() ->\n  P = #person{name= #name{first=\"Robert\",last=\"Virding\"}, phone=123},\n  First = (P#person.name)#name.first."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[5,72,101,114,101,44]}],0,false},
               {text,"\b*demo()*"},
               {sep,[{text,"\fevaluates to"}],0,false},
               {text,"\n*\"Robert\"*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [20,35,35,35,32,65,32,76,111,110,103,101,114,32,69,120,97,109,112,
             108,101]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,"/Comments are embedded in the following example:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [525,10,37,37,32,70,105,108,101,58,32,112,101,114,115,111,110,
                 46,104,114,108,10,10,37,37,45,45,45,45,45,45,45,45,45,45,45,
                 45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
                 45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
                 45,45,45,45,45,45,45,45,10,37,37,32,68,97,116,97,32,84,121,
                 112,101,58,32,112,101,114,115,111,110,10,37,37,32,119,104,
                 101,114,101,58,10,37,37,32,32,32,32,110,97,109,101,58,32,32,
                 65,32,115,116,114,105,110,103,32,40,100,101,102,97,117,108,
                 116,32,105,115,32,117,110,100,101,102,105,110,101,100,41,46,
                 10,37,37,32,32,32,32,97,103,101,58,32,32,32,65,110,32,105,
                 110,116,101,103,101,114,32,40,100,101,102,97,117,108,116,32,
                 105,115,32,117,110,100,101,102,105,110,101,100,41,46,10,37,
                 37,32,32,32,32,112,104,111,110,101,58,32,65,32,108,105,115,
                 116,32,111,102,32,105,110,116,101,103,101,114,115,32,40,100,
                 101,102,97,117,108,116,32,105,115,32,91,93,41,46,10,37,37,32,
                 32,32,32,100,105,99,116,58,32,32,65,32,100,105,99,116,105,
                 111,110,97,114,121,32,99,111,110,116,97,105,110,105,110,103,
                 32,118,97,114,105,111,117,115,32,105,110,102,111,114,109,97,
                 116,105,111,110,32,10,37,37,32,32,32,32,32,32,32,32,32,32,32,
                 97,98,111,117,116,32,116,104,101,32,112,101,114,115,111,110,
                 46,32,10,37,37,32,32,32,32,32,32,32,32,32,32,32,65,32,123,75,
                 101,121,44,32,86,97,108,117,101,125,32,108,105,115,116,32,40,
                 100,101,102,97,117,108,116,32,105,115,32,116,104,101,32,101,
                 109,112,116,121,32,108,105,115,116,41,46,10,37,37,45,45,45,
                 45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
                 45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
                 45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,45,114,
                 101,99,111,114,100,40,112,101,114,115,111,110,44,32,123,110,
                 97,109,101,44,32,97,103,101,44,32,112,104,111,110,101,32,61,
                 32,91,93,44,32,100,105,99,116,32,61,32,91,93,125,41,46]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [1162,10,45,109,111,100,117,108,101,40,112,101,114,115,111,
                 110,41,46,10,45,105,110,99,108,117,100,101,40,34,112,101,114,
                 115,111,110,46,104,114,108,34,41,46,10,45,99,111,109,112,105,
                 108,101,40,101,120,112,111,114,116,95,97,108,108,41,46,32,37,
                 32,70,111,114,32,116,101,115,116,32,112,117,114,112,111,115,
                 101,115,32,111,110,108,121,46,10,10,37,37,32,84,104,105,115,
                 32,99,114,101,97,116,101,115,32,97,110,32,105,110,115,116,97,
                 110,99,101,32,111,102,32,97,32,112,101,114,115,111,110,46,10,
                 37,37,32,32,32,78,111,116,101,58,32,84,104,101,32,112,104,
                 111,110,101,32,110,117,109,98,101,114,32,105,115,32,110,111,
                 116,32,115,117,112,112,108,105,101,100,32,115,111,32,116,104,
                 101,10,37,37,32,32,32,32,32,32,32,32,32,100,101,102,97,117,
                 108,116,32,118,97,108,117,101,32,91,93,32,119,105,108,108,32,
                 98,101,32,117,115,101,100,46,10,10,109,97,107,101,95,104,97,
                 99,107,101,114,95,119,105,116,104,111,117,116,95,112,104,111,
                 110,101,40,78,97,109,101,44,32,65,103,101,41,32,45,62,10,32,
                 32,32,35,112,101,114,115,111,110,123,110,97,109,101,32,61,32,
                 78,97,109,101,44,32,97,103,101,32,61,32,65,103,101,44,32,10,
                 32,32,32,32,32,32,32,32,32,32,32,100,105,99,116,32,61,32,91,
                 123,99,111,109,112,117,116,101,114,95,107,110,111,119,108,
                 101,100,103,101,44,32,101,120,99,101,108,108,101,110,116,125,
                 44,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                 32,32,123,100,114,105,110,107,115,44,32,99,111,107,101,125,
                 93,125,46,10,10,37,37,32,84,104,105,115,32,100,101,109,111,
                 110,115,116,114,97,116,101,115,32,109,97,116,99,104,105,110,
                 103,32,105,110,32,97,114,103,117,109,101,110,116,115,10,10,
                 112,114,105,110,116,40,35,112,101,114,115,111,110,123,110,97,
                 109,101,32,61,32,78,97,109,101,44,32,97,103,101,32,61,32,65,
                 103,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,
                 104,111,110,101,32,61,32,80,104,111,110,101,44,32,100,105,99,
                 116,32,61,32,68,105,99,116,125,41,32,45,62,10,32,32,105,111,
                 58,102,111,114,109,97,116,40,34,78,97,109,101,58,32,126,115,
                 44,32,65,103,101,58,32,126,119,44,32,80,104,111,110,101,58,
                 32,126,119,32,126,110,34,32,10,32,32,32,32,32,32,32,32,32,32,
                 32,32,34,68,105,99,116,105,111,110,97,114,121,58,32,126,119,
                 46,126,110,34,44,32,91,78,97,109,101,44,32,65,103,101,44,32,
                 80,104,111,110,101,44,32,68,105,99,116,93,41,46,10,10,37,37,
                 32,68,101,109,111,110,115,116,114,97,116,101,115,32,116,121,
                 112,101,32,116,101,115,116,105,110,103,44,32,115,101,108,101,
                 99,116,111,114,44,32,117,112,100,97,116,105,110,103,46,10,10,
                 98,105,114,116,104,100,97,121,40,80,41,32,119,104,101,110,32,
                 114,101,99,111,114,100,40,80,44,32,112,101,114,115,111,110,
                 41,32,45,62,32,10,32,32,32,80,35,112,101,114,115,111,110,123,
                 97,103,101,32,61,32,80,35,112,101,114,115,111,110,46,97,103,
                 101,32,43,32,49,125,46,10,10,114,101,103,105,115,116,101,114,
                 95,116,119,111,95,104,97,99,107,101,114,115,40,41,32,45,62,
                 10,32,32,32,72,97,99,107,101,114,49,32,61,32,109,97,107,101,
                 95,104,97,99,107,101,114,95,119,105,116,104,111,117,116,95,
                 112,104,111,110,101,40,34,74,111,101,34,44,32,50,57,41,44,10,
                 32,32,32,79,108,100,72,97,99,107,101,114,32,61,32,98,105,114,
                 116,104,100,97,121,40,72,97,99,107,101,114,49,41,44,10,32,32,
                 32,37,32,84,104,101,32,99,101,110,116,114,97,108,95,114,101,
                 103,105,115,116,101,114,95,115,101,114,118,101,114,32,115,
                 104,111,117,108,100,32,104,97,118,101,32,10,32,32,32,37,32,
                 97,110,32,105,110,116,101,114,102,97,99,101,32,102,117,110,
                 99,116,105,111,110,32,102,111,114,32,116,104,105,115,46,10,
                 32,32,32,99,101,110,116,114,97,108,95,114,101,103,105,115,
                 116,101,114,95,115,101,114,118,101,114,32,33,32,123,114,101,
                 103,105,115,116,101,114,95,112,101,114,115,111,110,44,32,72,
                 97,99,107,101,114,49,125,44,10,32,32,32,99,101,110,116,114,
                 97,108,95,114,101,103,105,115,116,101,114,95,115,101,114,118,
                 101,114,32,33,32,123,114,101,103,105,115,116,101,114,95,112,
                 101,114,115,111,110,44,32,10,32,32,32,32,32,32,32,32,32,32,
                 32,32,32,79,108,100,72,97,99,107,101,114,35,112,101,114,115,
                 111,110,123,110,97,109,101,32,61,32,34,82,111,98,101,114,116,
                 34,44,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                 32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,104,111,110,
                 101,32,61,32,91,48,44,56,44,51,44,50,44,52,44,53,44,51,44,49,
                 93,125,125,46]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}}],
       0,false}],
     0,false}},
   {sep,
    [{sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,[7,35,35,35,32,109,97,112]},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [23,84,104,101,32,102,111,108,108,111,119,105,110,103,32,102,
                  117,110,99,116,105,111,110,44]}],
               0,false},
              {text,"\b*double*"},
              {sep,[{text,"\", doubles every element in a list:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "7\ndouble([H|T]) -> [2*H|double(T)];\ndouble([])    -> []."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               ";Hence, the argument entered as input is doubled as follows:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,[3,10,62,32]},
              {text,
               [18,100,111,117,98,108,101,40,91,49,44,50,44,51,44,52,93,41,
                46]},
              {text,"\n\n[2,4,6,8]"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [23,84,104,101,32,102,111,108,108,111,119,105,110,103,32,102,
                  117,110,99,116,105,111,110,44]}],
               0,false},
              {text,"\t*add_one*"},
              {sep,
               [{text,"&, adds one to every element in a list:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               ":\nadd_one([H|T]) -> [H+1|add_one(T)];\nadd_one([])    -> []."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\rThe functions"}],0,false},
              {text,"\b*double*"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"\t*add_one*"},
              {sep,
               [{text,
                 "@have a similar structure. This can be used by writing a function"}],
               0,false},
              {text,[5,42,109,97,112,42]},
              {sep,
               [{text,
                 [31,116,104,97,116,32,101,120,112,114,101,115,115,101,115,32,
                  116,104,105,115,32,115,105,109,105,108,97,114,105,116,121,
                  58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "9\n\nmap(F, [H|T]) -> [F(H)|map(F, T)];\nmap(F, [])    -> []."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\rThe functions"}],0,false},
              {text,"\b*double*"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"\t*add_one*"},
              {sep,[{text," can now be expressed in terms of"}],0,false},
              {text,[5,42,109,97,112,42]},
              {sep,[{text,"\vas follows:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "T\ndouble(L)  -> map(fun(X) -> 2*X end, L).\nadd_one(L) -> map(fun(X) -> 1 + X end, L)."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,[14,42,109,97,112,40,70,44,32,76,105,115,116,41,42]},
              {sep,[{text,"#is a function that takes a function"}],0,false},
              {text,[3,42,70,42]},
              {sep,[{text,"\nand a list"}],0,false},
              {text,[3,42,76,42]},
              {sep,
               [{text,
                 "9as arguments and returns a new list, obtained by applying"}],
               0,false},
              {text,[3,42,70,42]},
              {sep,
               [{text,
                 [26,116,111,32,101,97,99,104,32,111,102,32,116,104,101,32,
                  101,108,101,109,101,110,116,115,32,105,110]}],
               0,false},
              {text,[3,42,76,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "^The process of abstracting out the common features of a number of different programs is called"}],
               0,false},
              {text,
               [26,42,42,112,114,111,99,101,100,117,114,97,108,32,97,98,115,
                116,114,97,99,116,105,111,110,42,42]},
              {sep,
               [{text,
                 "Â¢. Procedural abstraction can be used to write several different functions that have a similar structure, but differ in some minor detail. This is done as follows:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"\v**Step 1.**"},
            {sep,
             [{text,
               "JWrite one function that represents the common features of these functions."}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"\v**Step 2.**"},
            {sep,
             [{text,
               "fParameterize the difference in terms of functions that are passed as arguments to the common function."}],
             0,false}],
           0,false}],
         0,false}}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\v### foreach"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "}This section illustrates procedural abstraction. Initially, the following two examples are written as conventional functions."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               ":This function prints all elements of a list onto a stream:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [128,10,112,114,105,110,116,95,108,105,115,116,40,83,116,114,
                101,97,109,44,32,91,72,124,84,93,41,32,45,62,10,32,32,32,32,
                105,111,58,102,111,114,109,97,116,40,83,116,114,101,97,109,44,
                32,34,126,112,126,110,34,44,32,91,72,93,41,44,10,32,32,32,32,
                112,114,105,110,116,95,108,105,115,116,40,83,116,114,101,97,
                109,44,32,84,41,59,10,112,114,105,110,116,95,108,105,115,116,
                40,83,116,114,101,97,109,44,32,91,93,41,32,45,62,10,32,32,32,
                32,116,114,117,101,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               ":This function broadcasts a message to a list of processes:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "e\nbroadcast(Msg, [Pid|Pids]) ->\n    Pid ! Msg,\n    broadcast(Msg, Pids);\nbroadcast(_, []) ->\n    true."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "ÃThese two functions have a similar structure. They both iterate over a list and do something to each element in the list. The \"something\" is passed on as an extra argument to the function that does this."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\fThe function"}],0,false},
              {text,"\t*foreach*"},
              {sep,
               [{text,
                 [26,101,120,112,114,101,115,115,101,115,32,116,104,105,115,
                  32,115,105,109,105,108,97,114,105,116,121,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "M\n\nforeach(F, [H|T]) ->\n    F(H),\n    foreach(F, T);\nforeach(F, []) ->\n    ok."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [18,85,115,105,110,103,32,116,104,101,32,102,117,110,99,116,
                  105,111,110]}],
               0,false},
              {text,"\t*foreach*"},
              {sep,
               [{text,
                 [14,44,32,116,104,101,32,102,117,110,99,116,105,111,110]}],
               0,false},
              {text,"\f*print_list*"},
              {sep,[{text,"\bbecomes:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "3\nforeach(fun(H) -> io:format(S, \"~p~n\",[H]) end, L)"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [18,85,115,105,110,103,32,116,104,101,32,102,117,110,99,116,
                  105,111,110]}],
               0,false},
              {text,"\t*foreach*"},
              {sep,
               [{text,
                 [14,44,32,116,104,101,32,102,117,110,99,116,105,111,110]}],
               0,false},
              {text,"\v*broadcast*"},
              {sep,[{text,"\bbecomes:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"$\nforeach(fun(Pid) -> Pid ! M end, L)"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"\t*foreach*"},
              {sep,
               [{text,"3is evaluated for its side-effect and not its value."}],
               0,false},
              {text,
               [17,42,102,111,114,101,97,99,104,40,70,117,110,32,44,76,41,42]},
              {sep,[{text,[5,99,97,108,108,115]}],0,false},
              {text,"\b*Fun(X)*"},
              {sep,
               [{text,
                 [16,102,111,114,32,101,97,99,104,32,101,108,101,109,101,110,
                  116]}],
               0,false},
              {text,[3,42,88,42]},
              {sep,[{text,[2,105,110]}],0,false},
              {text,[3,42,76,42]},
              {sep,
               [{text,
                 "Hand the processing occurs in the order that the elements were defined in"}],
               0,false},
              {text,[3,42,76,42]},
              {sep,[{text,[1,46]}],0,false},
              {text,[5,42,109,97,112,42]},
              {sep,
               [{text,
                 ">does not define the order in which its elements are processed."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [18,35,35,35,32,83,121,110,116,97,120,32,111,102,32,70,117,110,
            115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,"/Funs are written with the following syntax (see"}],
               0,false},
              {text,
               ";[Fun Expressions](../doc/reference_manual/expressions#funs)"},
              {sep,
               [{text,
                 [22,102,111,114,32,102,117,108,108,32,100,101,115,99,114,105,
                  112,116,105,111,110,41,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "6\nF = fun (Arg1, Arg2, ... ArgN) ->\n        ...\n    end"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"%This creates an anonymous function of"}],0,false},
              {text,[3,42,78,42]},
              {sep,[{text,"&arguments and binds it to the variable"}],0,false},
              {text,[3,42,70,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [17,65,110,111,116,104,101,114,32,102,117,110,99,116,105,111,
                  110,44]}],
               0,false},
              {text,[14,42,70,117,110,99,116,105,111,110,78,97,109,101,42]},
              {sep,
               [{text,
                 "W, written in the same module, can be passed as an argument, using the following syntax:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"\e\nF = fun FunctionName/Arity"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "tWith this form of function reference, the function that is referred to does not need to be exported from the module."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "dIt is also possible to refer to a function defined in a different module, with the following syntax:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"\"\nF = fun Module:FunctionName/Arity"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "HIn this case, the function must be exported from the module in question."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "FThe following program illustrates the different ways of creating funs:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Â²\n\n-module(fun_test).\n-export([t1/0, t2/0]).\n-import(lists, [map/2]).\n\nt1() -> map(fun(X) -> 2 * X end, [1,2,3,4,5]).\n\nt2() -> map(fun double/1, [1,2,3,4,5]).\n\ndouble(X) -> X * 2."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[7,84,104,101,32,102,117,110]}],0,false},
              {text,[3,42,70,42]},
              {sep,
               [{text,"+can be evaluated with the following syntax:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [25,10,70,40,65,114,103,49,44,32,65,114,103,50,44,32,46,46,46,
                44,32,65,114,103,110,41]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,".To check whether a term is a fun, use the test"}],
               0,false},
              {text,
               [15,42,105,115,95,102,117,110,99,116,105,111,110,47,49,42]},
              {sep,[{text,"\vin a guard."}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Y\nf(F, Args) when is_function(F) ->\n   apply(F, Args);\nf(N, _) when is_integer(N) ->\n   N."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\"Funs are a distinct type. The BIFs"}],0,false},
              {text,
               [21,42,101,114,108,97,110,103,58,102,117,110,95,105,110,102,
                111,47,49,44,50,42]},
              {sep,
               [{text,
                 "<can be used to retrieve information about a fun, and the BIF"}],
               0,false},
              {text,
               [22,42,101,114,108,97,110,103,58,102,117,110,95,116,111,95,108,
                105,115,116,47,49,42]},
              {sep,
               [{text,".returns a textual representation of a fun. The"}],
               0,false},
              {text,
               [22,42,99,104,101,99,107,95,112,114,111,99,101,115,115,95,99,
                111,100,101,47,50,42]},
              {sep,[{text,"\vBIF returns"}],0,false},
              {text,[6,42,116,114,117,101,42]},
              {sep,
               [{text,
                 "Hif the process contains funs that depend on the old version of a module."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"\"### Variable Bindings Within a Fun"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "@The scope rules for variables that occur in funs are as follows:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {text,
            "RAll variables that occur in the head of a fun are assumed to be \"fresh\" variables."}],
          0,false},
         {sep,
          [{text,[1,42]},
           {text,
            [148,86,97,114,105,97,98,108,101,115,32,116,104,97,116,32,97,114,
             101,32,100,101,102,105,110,101,100,32,98,101,102,111,114,101,32,
             116,104,101,32,102,117,110,44,32,97,110,100,32,116,104,97,116,32,
             111,99,99,117,114,32,105,110,32,102,117,110,99,116,105,111,110,
             32,99,97,108,108,115,32,111,114,32,103,117,97,114,100,32,116,101,
             115,116,115,32,119,105,116,104,105,110,32,116,104,101,32,102,117,
             110,44,32,104,97,118,101,32,116,104,101,32,118,97,108,117,101,
             115,32,116,104,101,121,32,104,97,100,32,111,117,116,115,105,100,
             101,32,116,104,101,32,102,117,110,46]}],
          0,false}},
        {sep,
         [{text,[1,42]},{text,"(Variables cannot be exported from a fun."}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,".The following examples illustrate these rules:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [156,10,112,114,105,110,116,95,108,105,115,116,40,70,105,108,
                101,44,32,76,105,115,116,41,32,45,62,10,32,32,32,32,123,111,
                107,44,32,83,116,114,101,97,109,125,32,61,32,102,105,108,101,
                58,111,112,101,110,40,70,105,108,101,44,32,119,114,105,116,
                101,41,44,10,32,32,32,32,102,111,114,101,97,99,104,40,102,117,
                110,40,88,41,32,45,62,32,105,111,58,102,111,114,109,97,116,40,
                83,116,114,101,97,109,44,34,126,112,126,110,34,44,91,88,93,41,
                32,101,110,100,44,32,76,105,115,116,41,44,10,32,32,32,32,102,
                105,108,101,58,99,108,111,115,101,40,83,116,114,101,97,109,41,
                46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [18,72,101,114,101,44,32,116,104,101,32,118,97,114,105,97,98,
                  108,101]}],
               0,false},
              {text,[3,42,88,42]},
              {sep,
               [{text,
                 "A, defined in the head of the fun, is a new variable. The variable"}],
               0,false},
              {text,"\b*Stream*"},
              {sep,
               [{text,
                 "7, which is used within the fun, gets its value from the"}],
               0,false},
              {text,"\v*file:open*"},
              {sep,[{text,[5,108,105,110,101,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "wAs any variable that occurs in the head of a fun is considered a new variable, it is equally valid to write as follows:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Ã\nprint_list(File, List) ->\n    {ok, Stream} = file:open(File, write),\n    foreach(fun(File) -> \n                io:format(Stream,\"~p~n\",[File]) \n            end, List),\n    file:close(Stream)."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[5,72,101,114,101,44]}],0,false},
              {text,[6,42,70,105,108,101,42]},
              {sep,[{text,"&is used as the new variable instead of"}],0,false},
              {text,[3,42,88,42]},
              {sep,
               [{text,
                 "O. This is not so wise because code in the fun body cannot refer to the variable"}],
               0,false},
              {text,[6,42,70,105,108,101,42]},
              {sep,
               [{text,
                 "], which is defined outside of the fun. Compiling this example gives the following diagnostic:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "G\n./FileName.erl:Line: Warning: variable 'File' \n      shadowed in 'fun'"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text," This indicates that the variable"}],0,false},
              {text,[6,42,70,105,108,101,42]},
              {sep,
               [{text,
                 "=, which is defined inside the fun, collides with the variable"}],
               0,false},
              {text,[6,42,70,105,108,101,42]},
              {sep,[{text,"#, which is defined outside the fun."}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [270,84,104,101,32,114,117,108,101,115,32,102,111,114,32,105,
                  109,112,111,114,116,105,110,103,32,118,97,114,105,97,98,108,
                  101,115,32,105,110,116,111,32,97,32,102,117,110,32,104,97,
                  115,32,116,104,101,32,99,111,110,115,101,113,117,101,110,99,
                  101,32,116,104,97,116,32,99,101,114,116,97,105,110,32,112,
                  97,116,116,101,114,110,32,109,97,116,99,104,105,110,103,32,
                  111,112,101,114,97,116,105,111,110,115,32,109,117,115,116,
                  32,98,101,32,109,111,118,101,100,32,105,110,116,111,32,103,
                  117,97,114,100,32,101,120,112,114,101,115,115,105,111,110,
                  115,32,97,110,100,32,99,97,110,110,111,116,32,98,101,32,119,
                  114,105,116,116,101,110,32,105,110,32,116,104,101,32,104,
                  101,97,100,32,111,102,32,116,104,101,32,102,117,110,46,32,
                  70,111,114,32,101,120,97,109,112,108,101,44,32,121,111,117,
                  32,109,105,103,104,116,32,119,114,105,116,101,32,116,104,
                  101,32,102,111,108,108,111,119,105,110,103,32,99,111,100,
                  101,32,105,102,32,121,111,117,32,105,110,116,101,110,100,32,
                  116,104,101,32,102,105,114,115,116,32,99,108,97,117,115,101,
                  32,111,102]}],
               0,false},
              {text,[3,42,70,42]},
              {sep,
               [{text,"1to be evaluated when the value of its argument is"}],
               0,false},
              {text,[3,42,89,42]},
              {sep,[{text,[1,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [128,10,102,40,46,46,46,41,32,45,62,10,32,32,32,32,89,32,61,32,
                46,46,46,10,32,32,32,32,109,97,112,40,102,117,110,40,88,41,32,
                119,104,101,110,32,88,32,61,61,32,89,32,45,62,10,32,32,32,32,
                32,32,32,32,32,32,32,32,32,59,10,32,32,32,32,32,32,32,32,32,
                32,32,40,95,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,
                32,32,46,46,46,10,32,32,32,32,32,32,32,32,101,110,100,44,32,
                46,46,46,41,10,32,32,32,32,46,46,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,[{text,"&instead of writing the following code:"}],0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "t\nf(...) ->\n    Y = ...\n    map(fun(Y) ->\n             ;\n           (_) ->\n             ...\n        end, ...)\n    ..."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [25,35,35,35,32,70,117,110,115,32,97,110,100,32,77,111,100,117,108,
            101,32,76,105,115,116,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [131,84,104,101,32,102,111,108,108,111,119,105,110,103,32,
                  101,120,97,109,112,108,101,115,32,115,104,111,119,32,97,32,
                  100,105,97,108,111,103,117,101,32,119,105,116,104,32,116,
                  104,101,32,69,114,108,97,110,103,32,115,104,101,108,108,46,
                  32,65,108,108,32,116,104,101,32,104,105,103,104,101,114,32,
                  111,114,100,101,114,32,102,117,110,99,116,105,111,110,115,
                  32,100,105,115,99,117,115,115,101,100,32,97,114,101,32,101,
                  120,112,111,114,116,101,100,32,102,114,111,109,32,116,104,
                  101,32,109,111,100,117,108,101]}],
               0,false},
              {text,[7,42,108,105,115,116,115,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,[7,35,35,35,32,109,97,112]},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,[5,42,109,97,112,42]},
                {sep,
                 [{text,
                   "5takes a function of one argument and a list of terms:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "9\n\nmap(F, [H|T]) -> [F(H)|map(F, T)];\nmap(F, [])    -> []."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "TIt returns the list obtained by applying the function to every argument in the list."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "JWhen a new fun is defined in the shell, the value of the fun is printed as"}],
                 0,false},
                {text,
                 [16,42,70,117,110,35,60,101,114,108,95,101,118,97,108,62,42]},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,
                 [29,68,111,117,98,108,101,32,61,32,102,117,110,40,88,41,32,
                  45,62,32,50,32,42,32,88,32,101,110,100,46]},
                {text,[5,10,35,70,117,110]},
                {text,
                 [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,
                  48,51,49]},
                {text,[4,62,10,62,32]},
                {text,
                 [31,108,105,115,116,115,58,109,97,112,40,68,111,117,98,108,
                  101,44,32,91,49,44,50,44,51,44,52,44,53,93,41,46]},
                {text,"\r\n[2,4,6,8,10]"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,[7,35,35,35,32,97,110,121]},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,[5,42,97,110,121,42]},
                {sep,
                 [{text,
                   [17,116,97,107,101,115,32,97,32,112,114,101,100,105,99,97,
                    116,101]}],
                 0,false},
                {text,[3,42,80,42]},
                {sep,
                 [{text,"$of one argument and a list of terms:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [133,10,10,97,110,121,40,80,114,101,100,44,32,91,72,124,84,
                  93,41,32,45,62,10,32,32,32,32,99,97,115,101,32,80,114,101,
                  100,40,72,41,32,111,102,10,32,32,32,32,32,32,32,32,116,114,
                  117,101,32,32,45,62,32,32,116,114,117,101,59,10,32,32,32,32,
                  32,32,32,32,102,97,108,115,101,32,45,62,32,32,97,110,121,40,
                  80,114,101,100,44,32,84,41,10,32,32,32,32,101,110,100,59,10,
                  97,110,121,40,80,114,101,100,44,32,91,93,41,32,45,62,10,32,
                  32,32,32,102,97,108,115,101,46]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"&A predicate is a function that returns"}],
                 0,false},
                {text,[6,42,116,114,117,101,42]},
                {sep,[{text,[2,111,114]}],0,false},
                {text,[7,42,102,97,108,115,101,42]},
                {sep,[{text,[1,46]}],0,false},
                {text,[5,42,97,110,121,42]},
                {sep,[{text,[2,105,115]}],0,false},
                {text,[6,42,116,114,117,101,42]},
                {sep,
                 [{text,
                   [18,105,102,32,116,104,101,114,101,32,105,115,32,97,32,116,
                    101,114,109]}],
                 0,false},
                {text,[3,42,88,42]},
                {sep,
                 [{text,
                   [21,105,110,32,116,104,101,32,108,105,115,116,32,115,117,
                    99,104,32,116,104,97,116]}],
                 0,false},
                {text,[6,42,80,40,88,41,42]},
                {sep,[{text,[2,105,115]}],0,false},
                {text,[6,42,116,114,117,101,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\vA predicate"}],0,false},
                {text,"\b*Big(X)*"},
                {sep,
                 [{text,
                   [20,105,115,32,100,101,102,105,110,101,100,44,32,119,104,
                    105,99,104,32,105,115]}],
                 0,false},
                {text,[6,42,116,114,117,101,42]},
                {sep,[{text,"#if its argument is greater that 10:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,
                 ":Big =  fun(X) -> if X > 10 -> true; true -> false end end."},
                {text,[5,10,35,70,117,110]},
                {text,
                 [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,
                  48,51,49]},
                {text,[4,62,10,62,32]},
                {text,
                 [26,108,105,115,116,115,58,97,110,121,40,66,105,103,44,32,91,
                  49,44,50,44,51,44,52,93,41,46]},
                {text,"\t\nfalse\n> "},
                {text,
                 [29,108,105,115,116,115,58,97,110,121,40,66,105,103,44,32,91,
                  49,44,50,44,51,44,49,50,44,53,93,41,46]},
                {text,[5,10,116,114,117,101]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,[7,35,35,35,32,97,108,108]},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,[5,42,97,108,108,42]},
                {sep,
                 [{text,
                   [25,104,97,115,32,116,104,101,32,115,97,109,101,32,97,114,
                    103,117,109,101,110,116,115,32,97,115]}],
                 0,false},
                {text,[5,42,97,110,121,42]},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [133,10,10,97,108,108,40,80,114,101,100,44,32,91,72,124,84,
                  93,41,32,45,62,10,32,32,32,32,99,97,115,101,32,80,114,101,
                  100,40,72,41,32,111,102,10,32,32,32,32,32,32,32,32,116,114,
                  117,101,32,32,45,62,32,32,97,108,108,40,80,114,101,100,44,
                  32,84,41,59,10,32,32,32,32,32,32,32,32,102,97,108,115,101,
                  32,45,62,32,32,102,97,108,115,101,10,32,32,32,32,101,110,
                  100,59,10,97,108,108,40,80,114,101,100,44,32,91,93,41,32,45,
                  62,10,32,32,32,32,116,114,117,101,46]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[5,73,116,32,105,115]}],0,false},
                {text,[6,42,116,114,117,101,42]},
                {sep,
                 [{text,
                   "7if the predicate applied to all elements in the list is"}],
                 0,false},
                {text,[6,42,116,114,117,101,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,
                 [31,108,105,115,116,115,58,97,108,108,40,66,105,103,44,32,91,
                  49,44,50,44,51,44,52,44,49,50,44,54,93,41,46]},
                {text,"\f   \nfalse\n> "},
                {text,
                 [30,108,105,115,116,115,58,97,108,108,40,66,105,103,44,32,91,
                  49,50,44,49,51,44,49,52,44,49,53,93,41,46]},
                {text,"\f       \ntrue"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\v### foreach"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\t*foreach*"},
                {sep,
                 [{text,
                   "5takes a function of one argument and a list of terms:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "M\n\nforeach(F, [H|T]) ->\n    F(H),\n    foreach(F, T);\nforeach(F, []) ->\n    ok."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "5The function is applied to each argument in the list."}],
                 0,false},
                {text,"\t*foreach*"},
                {sep,[{text,[7,114,101,116,117,114,110,115]}],0,false},
                {text,[4,42,111,107,42]},
                {sep,
                 [{text,"&. It is only used for its side-effect:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,
                 ">lists:foreach(fun(X) -> io:format(\"~w~n\",[X]) end, [1,2,3,4])."},
                {text,"\f \n1\n2\n3\n4\nok"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\t### foldl"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,[7,42,102,111,108,100,108,42]},
                {sep,
                 [{text,
                   "=takes a function of two arguments, an accumulator and a list:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "[\n\nfoldl(F, Accu, [Hd|Tail]) ->\n    foldl(F, F(Hd, Accu), Tail);\nfoldl(F, Accu, []) -> Accu."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "Ã­The function is called with two arguments. The first argument is the successive elements in the list. The second argument is the accumulator. The function must return a new accumulator, which is used the next time the function is called."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\eIf you have a list of lists"}],0,false},
                {text,"\e*L = [\"I\",\"like\",\"Erlang\"]*"},
                {sep,
                 [{text,
                   "4, then you can sum the lengths of all the strings in"}],
                 0,false},
                {text,[3,42,76,42]},
                {sep,[{text,"\vas follows:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,
                 [26,76,32,61,32,91,34,73,34,44,34,108,105,107,101,34,44,34,
                  69,114,108,97,110,103,34,93,46]},
                {text,"\e\n[\"I\",\"like\",\"Erlang\"]\n10> "},
                {text,
                 "6lists:foldl(fun(X, Sum) -> length(X) + Sum end, 0, L)."},
                {text,
                 [23,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,10,49,49]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,[7,42,102,111,108,100,108,42]},
                {sep,[{text,"\fworks like a"}],0,false},
                {text,[7,42,119,104,105,108,101,42]},
                {sep,
                 [{text,
                   [31,108,111,111,112,32,105,110,32,97,110,32,105,109,112,
                    101,114,97,116,105,118,101,32,108,97,110,103,117,97,103,
                    101,58]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "f\nL =  [\"I\",\"like\",\"Erlang\"],\nSum = 0,\nwhile( L != []){\n    Sum += length(head(L)),\n    L = tail(L)\nend"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\f### mapfoldl"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\n*mapfoldl*"},
                {sep,
                 [{text,"*simultaneously maps and folds over a list:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Â¥\n\nmapfoldl(F, Accu0, [Hd|Tail]) ->\n    {R,Accu1} = F(Hd, Accu0),\n    {Rs,Accu2} = mapfoldl(F, Accu1, Tail),\n    {[R|Rs], Accu2};\nmapfoldl(F, Accu, []) -> {[], Accu}."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "8The following example shows how to change all letters in"}],
                 0,false},
                {text,[3,42,76,42]},
                {sep,[{text,"\"to upper case and then count them."}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [31,70,105,114,115,116,32,116,104,101,32,99,104,97,110,103,
                  101,32,116,111,32,117,112,112,101,114,32,99,97,115,101,58]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,
                 "7Upcase =  fun(X) when $a =< X,  X =< $z -> X + $A - $a;"},
                {text,[1,10]},
                {text,"\b(X) -> X"},
                {text,[2,32,10]},
                {text,[4,101,110,100,46]},
                {text,[5,10,35,70,117,110]},
                {text,
                 [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,
                  48,51,49]},
                {text,[4,62,10,62,32]},
                {text,"\rUpcase_word ="},
                {text,[2,32,10]},
                {text,"\tfun(X) ->"},
                {text,[2,32,10]},
                {text,
                 [20,108,105,115,116,115,58,109,97,112,40,85,112,99,97,115,
                  101,44,32,88,41]},
                {text,[2,32,10]},
                {text,[4,101,110,100,46]},
                {text,[5,10,35,70,117,110]},
                {text,
                 [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,
                  48,51,49]},
                {text,[4,62,10,62,32]},
                {text,
                 [22,85,112,99,97,115,101,95,119,111,114,100,40,34,69,114,108,
                  97,110,103,34,41,46]},
                {text,"\f\n\"ERLANG\"\n> "},
                {text,
                 [26,108,105,115,116,115,58,109,97,112,40,85,112,99,97,115,
                  101,95,119,111,114,100,44,32,76,41,46]},
                {text,
                 [22,10,91,34,73,34,44,34,76,73,75,69,34,44,34,69,82,76,65,78,
                  71,34,93]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "7Now, the fold and the map can be done at the same time:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text," lists:mapfoldl(fun(Word, Sum) ->"},
                {text,[1,10]},
                {text,"'{Upcase_word(Word), Sum + length(Word)}"},
                {text,[1,10]},
                {text,"\vend, 0, L)."},
                {text,"\e\n{[\"I\",\"LIKE\",\"ERLANG\"],11}"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\n### filter"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\b*filter*"},
                {sep,
                 [{text,
                   "mtakes a predicate of one argument and a list and returns all elements in the list that satisfy the predicate:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [133,10,10,102,105,108,116,101,114,40,70,44,32,91,72,124,84,
                  93,41,32,45,62,10,32,32,32,32,99,97,115,101,32,70,40,72,41,
                  32,111,102,10,32,32,32,32,32,32,32,32,116,114,117,101,32,32,
                  45,62,32,91,72,124,102,105,108,116,101,114,40,70,44,32,84,
                  41,93,59,10,32,32,32,32,32,32,32,32,102,97,108,115,101,32,
                  45,62,32,102,105,108,116,101,114,40,70,44,32,84,41,10,32,32,
                  32,32,101,110,100,59,10,102,105,108,116,101,114,40,70,44,32,
                  91,93,41,32,45,62,32,91,93,46]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,"%lists:filter(Big, [500,12,2,45,6,7])."},
                {text,"\f\n[500,12,45]"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "rCombining maps and filters enables writing of very succinct code. For example, to define a set difference function"}],
                 0,false},
                {text,[14,42,100,105,102,102,40,76,49,44,32,76,50,41,42]},
                {sep,
                 [{text,"&to be the difference between the lists"}],
                 0,false},
                {text,[4,42,76,49,42]},
                {sep,[{text,[3,97,110,100]}],0,false},
                {text,[4,42,76,50,42]},
                {sep,
                 [{text,"%, the code can be written as follows:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "B\ndiff(L1, L2) -> \n    filter(fun(X) -> not member(X, L2) end, L1)."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "GThis gives the list of all elements in L1 that are not contained in L2."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text," The AND intersection of the list"}],0,false},
                {text,[4,42,76,49,42]},
                {sep,[{text,[3,97,110,100]}],0,false},
                {text,[4,42,76,50,42]},
                {sep,
                 [{text,
                   [23,105,115,32,97,108,115,111,32,101,97,115,105,108,121,32,
                    100,101,102,105,110,101,100,58]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "?\nintersection(L1,L2) -> filter(fun(X) -> member(X,L1) end, L2)."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\r### takewhile"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [17,42,116,97,107,101,119,104,105,108,101,40,80,44,32,76,41,
                  42]},
                {sep,
                 [{text,
                   [14,116,97,107,101,115,32,101,108,101,109,101,110,116,
                    115]}],
                 0,false},
                {text,[3,42,88,42]},
                {sep,[{text,"\vfrom a list"}],0,false},
                {text,[3,42,76,42]},
                {sep,
                 [{text,
                   [24,97,115,32,108,111,110,103,32,97,115,32,116,104,101,32,
                    112,114,101,100,105,99,97,116,101]}],
                 0,false},
                {text,[6,42,80,40,88,41,42]},
                {sep,[{text,"\bis true:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [148,10,10,116,97,107,101,119,104,105,108,101,40,80,114,101,
                  100,44,32,91,72,124,84,93,41,32,45,62,10,32,32,32,32,99,97,
                  115,101,32,80,114,101,100,40,72,41,32,111,102,10,32,32,32,
                  32,32,32,32,32,116,114,117,101,32,32,45,62,32,91,72,124,116,
                  97,107,101,119,104,105,108,101,40,80,114,101,100,44,32,84,
                  41,93,59,10,32,32,32,32,32,32,32,32,102,97,108,115,101,32,
                  45,62,32,91,93,10,32,32,32,32,101,110,100,59,10,116,97,107,
                  101,119,104,105,108,101,40,80,114,101,100,44,32,91,93,41,32,
                  45,62,10,32,32,32,32,91,93,46]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,",lists:takewhile(Big, [200,500,45,5,3,45,6])."},
                {text,[15,32,32,10,91,50,48,48,44,53,48,48,44,52,53,93]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\r### dropwhile"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\v*dropwhile*"},
                {sep,
                 [{text,
                   [20,105,115,32,116,104,101,32,99,111,109,112,108,101,109,
                    101,110,116,32,111,102]}],
                 0,false},
                {text,"\v*takewhile*"},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [147,10,10,100,114,111,112,119,104,105,108,101,40,80,114,101,
                  100,44,32,91,72,124,84,93,41,32,45,62,10,32,32,32,32,99,97,
                  115,101,32,80,114,101,100,40,72,41,32,111,102,10,32,32,32,
                  32,32,32,32,32,116,114,117,101,32,32,45,62,32,100,114,111,
                  112,119,104,105,108,101,40,80,114,101,100,44,32,84,41,59,10,
                  32,32,32,32,32,32,32,32,102,97,108,115,101,32,45,62,32,91,
                  72,124,84,93,10,32,32,32,32,101,110,100,59,10,100,114,111,
                  112,119,104,105,108,101,40,80,114,101,100,44,32,91,93,41,32,
                  45,62,10,32,32,32,32,91,93,46]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,",lists:dropwhile(Big, [200,500,45,5,3,45,6])."},
                {text,"\v\n[5,3,45,6]"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\r### splitwith"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [17,42,115,112,108,105,116,119,105,116,104,40,80,44,32,76,41,
                  42]},
                {sep,
                 [{text,
                   [15,115,112,108,105,116,115,32,116,104,101,32,108,105,115,
                    116]}],
                 0,false},
                {text,[3,42,76,42]},
                {sep,
                 [{text,
                   [21,105,110,116,111,32,116,104,101,32,116,119,111,32,115,
                    117,98,108,105,115,116,115]}],
                 0,false},
                {text,"\n*{L1, L2}*"},
                {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
                {text,
                 [21,42,76,32,61,32,116,97,107,101,119,104,105,108,101,40,80,
                  44,32,76,41,42]},
                {sep,[{text,[3,97,110,100]}],0,false},
                {text,
                 [22,42,76,50,32,61,32,100,114,111,112,119,104,105,108,101,40,
                  80,44,32,76,41,42]},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Ã°\n\nsplitwith(Pred, L) ->\n    splitwith(Pred, L, []).\n\nsplitwith(Pred, [H|T], L) ->\n    case Pred(H) of \n        true  -> splitwith(Pred, T, [H|L]);\n        false -> {reverse(L), [H|T]}\n    end;\nsplitwith(Pred, [], L) ->\n    {reverse(L), []}."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,",lists:splitwith(Big, [200,500,45,5,3,45,6])."},
                {text,
                 [26,10,123,91,50,48,48,44,53,48,48,44,52,53,93,44,91,53,44,
                  51,44,52,53,44,54,93,125]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [23,35,35,35,32,70,117,110,115,32,82,101,116,117,114,110,105,110,
            103,32,70,117,110,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "ÃSo far, only functions that take funs as arguments have been described. More powerful functions, that themselves return funs, can also be written. The following examples illustrate these type of functions."}],
             0,false}],
           0,true},
          null},
         null}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,{text,"!### Simple Higher Order Functions"},null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\n*Adder(X)*"},
                {sep,
                 [{text,
                   [24,105,115,32,97,32,102,117,110,99,116,105,111,110,32,116,
                    104,97,116,32,103,105,118,101,110]}],
                 0,false},
                {text,[3,42,88,42]},
                {sep,
                 [{text,
                   [24,44,32,114,101,116,117,114,110,115,32,97,32,110,101,119,
                    32,102,117,110,99,116,105,111,110]}],
                 0,false},
                {text,[3,42,71,42]},
                {sep,[{text,"\tsuch that"}],0,false},
                {text,[6,42,71,40,75,41,42]},
                {sep,[{text,[7,114,101,116,117,114,110,115]}],0,false},
                {text,[7,42,75,32,43,32,88,42]},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,"*Adder = fun(X) -> fun(Y) -> X + Y end end."},
                {text,[5,10,35,70,117,110]},
                {text,
                 [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,
                  48,51,49]},
                {text,[4,62,10,62,32]},
                {text,
                 [16,65,100,100,54,32,61,32,65,100,100,101,114,40,54,41,46]},
                {text,[5,10,35,70,117,110]},
                {text,
                 [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,
                  48,51,49]},
                {text,[4,62,10,62,32]},
                {text,"\tAdd6(10)."},
                {text,[3,10,49,54]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [18,35,35,35,32,73,110,102,105,110,105,116,101,32,76,105,115,116,
              115]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,[{text,"$The idea is to write something like:"}],0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "l\n-module(lazy).\n-export([ints_from/1]).\nints_from(N) ->\n    fun() ->\n            [N|ints_from(N+1)]\n    end."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [24,84,104,101,110,32,112,114,111,99,101,101,100,32,97,115,
                  32,102,111,108,108,111,119,115,58]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,
                 [23,88,88,32,61,32,108,97,122,121,58,105,110,116,115,95,102,
                  114,111,109,40,49,41,46]},
                {text,[5,10,35,70,117,110]},
                {text,[16,60,108,97,122,121,46,48,46,50,57,56,55,52,56,51,57]},
                {text,[4,62,10,62,32]},
                {text,[5,88,88,40,41,46]},
                {text,"\b\n[1|#Fun"},
                {text,[16,60,108,97,122,121,46,48,46,50,57,56,55,52,56,51,57]},
                {text,[5,62,93,10,62,32]},
                {text,"\thd(XX())."},
                {text,[5,10,49,10,62,32]},
                {text,"\rY = tl(XX())."},
                {text,[5,10,35,70,117,110]},
                {text,[16,60,108,97,122,121,46,48,46,50,57,56,55,52,56,51,57]},
                {text,[4,62,10,62,32]},
                {text,"\bhd(Y())."},
                {text,[2,10,50]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "2And so on. This is an example of \"lazy embedding\"."}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\v### Parsing"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 ":The following examples show parsers of the following type:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,")\nParser(Toks) -> {ok, Tree, Toks1} | fail"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,[6,42,84,111,107,115,42]},
                {sep,
                 [{text,
                   ">is the list of tokens to be parsed. A successful parse returns"}],
                 0,false},
                {text,
                 [19,42,123,111,107,44,32,84,114,101,101,44,32,84,111,107,115,
                  49,125,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,[6,42,84,114,101,101,42]},
              {sep,
               [{text,
                 [16,105,115,32,97,32,112,97,114,115,101,32,116,114,101,101,
                  46]}],
               0,false}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,[7,42,84,111,107,115,49,42]},
              {sep,[{text,"\fis a tail of"}],0,false},
              {text,[6,42,84,114,101,101,42]},
              {sep,
               [{text,
                 "Pthat contains symbols encountered after the structure that was correctly parsed."}],
               0,false}],
             0,false}],
           0,false}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [29,65,110,32,117,110,115,117,99,99,101,115,115,102,117,
                    108,32,112,97,114,115,101,32,114,101,116,117,114,110,
                    115]}],
                 0,false},
                {text,[6,42,102,97,105,108,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "VThe following example illustrates a simple, functional parser that parses the grammar:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [18,10,40,97,32,124,32,98,41,32,38,32,40,99,32,124,32,100,
                  41]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"%The following code defines a function"}],
                 0,false},
                {text,"\v*pconst(X)*"},
                {sep,[{text,"\rin the module"}],0,false},
                {text,"\n*funparse*"},
                {sep,
                 [{text,
                   "3, which returns a fun that parses a list of tokens:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [135,10,10,112,99,111,110,115,116,40,88,41,32,45,62,10,32,32,
                  32,32,102,117,110,32,40,84,41,32,45,62,10,32,32,32,32,32,32,
                  32,99,97,115,101,32,84,32,111,102,10,32,32,32,32,32,32,32,
                  32,32,32,32,91,88,124,84,49,93,32,45,62,32,123,111,107,44,
                  32,123,99,111,110,115,116,44,32,88,125,44,32,84,49,125,59,
                  10,32,32,32,32,32,32,32,32,32,32,32,95,32,32,32,32,32,32,45,
                  62,32,102,97,105,108,10,32,32,32,32,32,32,32,101,110,100,10,
                  32,32,32,32,101,110,100,46]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,[{text,"%This function can be used as follows:"}],0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,
                 [24,80,49,32,61,32,102,117,110,112,97,114,115,101,58,112,99,
                  111,110,115,116,40,97,41,46]},
                {text,[5,10,35,70,117,110]},
                {text,
                 [20,60,102,117,110,112,97,114,115,101,46,48,46,50,50,54,55,
                  52,48,55,53]},
                {text,[4,62,10,62,32]},
                {text,"\fP1([a,b,c])."},
                {text,
                 [24,10,123,111,107,44,123,99,111,110,115,116,44,97,125,44,91,
                  98,44,99,93,125,10,62,32]},
                {text,"\fP1([x,y,z])."},
                {text,"\n     \nfail"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"$Next, the two higher order functions"}],0,false},
                {text,[6,42,112,97,110,100,42]},
                {sep,[{text,[3,97,110,100]}],0,false},
                {text,[5,42,112,111,114,42]},
                {sep,
                 [{text,
                   "Lare defined. They combine primitive parsers to produce more complex parsers."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[5,70,105,114,115,116]}],0,false},
                {text,[6,42,112,97,110,100,42]},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [336,10,10,112,97,110,100,40,80,49,44,32,80,50,41,32,45,62,
                  10,32,32,32,32,102,117,110,32,40,84,41,32,45,62,10,32,32,32,
                  32,32,32,32,32,99,97,115,101,32,80,49,40,84,41,32,111,102,
                  10,32,32,32,32,32,32,32,32,32,32,32,32,123,111,107,44,32,82,
                  49,44,32,84,49,125,32,45,62,10,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,99,97,115,101,32,80,50,40,84,49,41,32,
                  111,102,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,123,111,107,44,32,82,50,44,32,84,50,125,32,45,
                  62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,123,111,107,44,32,123,39,97,110,100,39,44,
                  32,82,49,44,32,82,50,125,125,59,10,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,32,32,32,32,32,102,97,105,108,32,45,62,
                  10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,102,97,105,108,10,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,101,110,100,59,10,32,32,32,32,32,32,32,
                  32,32,32,32,32,102,97,105,108,32,45,62,10,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,32,32,32,102,97,105,108,10,32,32,32,32,
                  32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,46]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [14,71,105,118,101,110,32,97,32,112,97,114,115,101,114]}],
                 0,false},
                {text,[4,42,80,49,42]},
                {sep,[{text,"\vfor grammar"}],0,false},
                {text,[4,42,71,49,42]},
                {sep,
                 [{text,
                   [14,44,32,97,110,100,32,97,32,112,97,114,115,101,114]}],
                 0,false},
                {text,[4,42,80,50,42]},
                {sep,[{text,"\vfor grammar"}],0,false},
                {text,[4,42,71,50,42]},
                {sep,[{text,[1,44]}],0,false},
                {text,[14,42,112,97,110,100,40,80,49,44,32,80,50,41,42]},
                {sep,
                 [{text,
                   "Treturns a parser for the grammar, which consists of sequences of tokens that satisfy"}],
                 0,false},
                {text,[4,42,71,49,42]},
                {sep,
                 [{text,"., followed by sequences of tokens that satisfy"}],
                 0,false},
                {text,[4,42,71,50,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\r*por(P1, P2)*"},
                {sep,
                 [{text,
                   ":returns a parser for the language described by the grammar"}],
                 0,false},
                {text,[4,42,71,49,42]},
                {sep,[{text,[2,111,114]}],0,false},
                {text,[4,42,71,50,42]},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [351,10,10,112,111,114,40,80,49,44,32,80,50,41,32,45,62,10,
                  32,32,32,32,102,117,110,32,40,84,41,32,45,62,10,32,32,32,32,
                  32,32,32,32,99,97,115,101,32,80,49,40,84,41,32,111,102,10,
                  32,32,32,32,32,32,32,32,32,32,32,32,123,111,107,44,32,82,44,
                  32,84,49,125,32,45,62,32,10,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,123,111,107,44,32,123,39,111,114,39,44,49,
                  44,82,125,44,32,84,49,125,59,10,32,32,32,32,32,32,32,32,32,
                  32,32,32,102,97,105,108,32,45,62,32,10,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,32,32,99,97,115,101,32,80,50,40,84,41,
                  32,111,102,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,123,111,107,44,32,82,49,44,32,84,49,125,32,
                  45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,123,111,107,44,32,123,39,111,114,39,44,
                  50,44,82,49,125,44,32,84,49,125,59,10,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,32,32,32,32,32,32,102,97,105,108,32,45,
                  62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,102,97,105,108,10,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,
                  32,101,110,100,10,32,32,32,32,101,110,100,46]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"-The original problem was to parse the grammar"}],
                 0,false},
                {text,
                 [19,42,40,97,32,124,32,98,41,32,38,32,40,99,32,124,32,100,41,
                  42]},
                {sep,
                 [{text,",. The following code addresses this problem:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "a\n\ngrammar() ->\n    pand(\n         por(pconst(a), pconst(b)),\n         por(pconst(c), pconst(d)))."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 ":The following code adds a parser interface to the grammar:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,"'\n\nparse(List) ->\n    (grammar())(List)."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,[{text,"$The parser can be tested as follows:"}],0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,[3,10,62,32]},
                {text,
                 [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,
                  91,97,44,99,93,41,46]},
                {text,
                 "6\n{ok,{'and',{'or',1,{const,a}},{'or',1,{const,c}}}}\n> "},
                {text,
                 [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,
                  91,97,44,100,93,41,46]},
                {text,
                 "7 \n{ok,{'and',{'or',1,{const,a}},{'or',2,{const,d}}}}\n> "},
                {text,
                 [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,
                  91,98,44,99,93,41,46]},
                {text,
                 "9   \n{ok,{'and',{'or',2,{const,b}},{'or',1,{const,c}}}}\n> "},
                {text,
                 [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,
                  91,98,44,100,93,41,46]},
                {text,
                 "7 \n{ok,{'and',{'or',2,{const,b}},{'or',2,{const,d}}}}\n> "},
                {text,
                 [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,
                  91,97,44,98,93,41,46]},
                {text,"\b   \nfail"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false}],
      0,false}],
    0,false}},
  {sep,
   [{sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [19,35,35,35,32,83,105,109,112,108,101,32,69,120,97,109,112,108,101,
           115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "LThis section starts with a simple example, showing a generator and a filter:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,"%[X || X <- [1,2,a,3,4,b,5,6], X > 3]."},
             {text,"\f\n[a,4,b,5,6]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "IThis is read as follows: The list of X such that X is taken from the list"}],
              0,false},
             {text,"\r*[1,2,a,...]*"},
             {sep,
              [{text,
                [24,97,110,100,32,88,32,105,115,32,103,114,101,97,116,101,114,
                 32,116,104,97,110,32,51,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\fThe notation"}],0,false},
             {text,[18,42,88,32,60,45,32,91,49,44,50,44,97,44,46,46,46,93,42]},
             {sep,[{text,"!is a generator and the expression"}],0,false},
             {text,[7,42,88,32,62,32,51,42]},
             {sep,[{text,"\fis a filter."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [21,65,110,32,97,100,100,105,116,105,111,110,97,108,32,102,
                 105,108,116,101,114,44]}],
              0,false},
             {text,"\f*integer(X)*"},
             {sep,
              [{text,"2, can be added to restrict the result to integers:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,"1[X || X <- [1,2,a,3,4,b,5,6], integer(X), X > 3]."},
             {text,"\b\n[4,5,6]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "fGenerators can be combined. For example, the Cartesian product of two lists can be written as follows:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,"%[{X, Y} || X <- [1,2,3], Y <- [a,b]]."},
             {text,"&\n[{1,a},{1,b},{2,a},{2,b},{3,a},{3,b}]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[14,35,35,35,32,81,117,105,99,107,32,83,111,114,116]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "<The well-known quick sort routine can be written as follows:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [127,10,115,111,114,116,40,91,80,105,118,111,116,124,84,93,41,
               32,45,62,10,32,32,32,32,115,111,114,116,40,91,32,88,32,124,124,
               32,88,32,60,45,32,84,44,32,88,32,60,32,80,105,118,111,116,93,
               41,32,43,43,10,32,32,32,32,91,80,105,118,111,116,93,32,43,43,
               10,32,32,32,32,115,111,114,116,40,91,32,88,32,124,124,32,88,32,
               60,45,32,84,44,32,88,32,62,61,32,80,105,118,111,116,93,41,59,
               10,115,111,114,116,40,91,93,41,32,45,62,32,91,93,46]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [14,84,104,101,32,101,120,112,114,101,115,115,105,111,110]}],
              0,false},
             {text,
              [26,42,91,88,32,124,124,32,88,32,60,45,32,84,44,32,88,32,60,32,
               80,105,118,111,116,93,42]},
             {sep,
              [{text,
                [30,105,115,32,116,104,101,32,108,105,115,116,32,111,102,32,
                 97,108,108,32,101,108,101,109,101,110,116,115,32,105,110]}],
              0,false},
             {text,[3,42,84,42]},
             {sep,
              [{text,
                [18,116,104,97,116,32,97,114,101,32,108,101,115,115,32,116,
                 104,97,110]}],
              0,false},
             {text,[7,42,80,105,118,111,116,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\e*[X || X <- T, X >= Pivot]*"},
             {sep,
              [{text,
                [30,105,115,32,116,104,101,32,108,105,115,116,32,111,102,32,
                 97,108,108,32,101,108,101,109,101,110,116,115,32,105,110]}],
              0,false},
             {text,[3,42,84,42]},
             {sep,[{text,"!that are greater than or equal to"}],0,false},
             {text,[7,42,80,105,118,111,116,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [25,65,32,108,105,115,116,32,115,111,114,116,101,100,32,97,115,
               32,102,111,108,108,111,119,115,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {text,
            "RThe first element in the list is isolated and the list is split into two sublists."}],
          0,false},
         {sep,
          [{text,[1,42]},
           {text,
            "\\The first sublist contains all elements that are smaller than the first element in the list."}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {text,
           "kThe second sublist contains all elements that are greater than, or equal to, the first element in the list."}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {text,":Then the sublists are sorted and the results are combined."}],
        0,false}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[16,35,35,35,32,80,101,114,109,117,116,97,116,105,111,110,115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "KThe following example generates all permutations of the elements in a list:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "G\nperms([]) -> [[]];\nperms(L)  -> [[H|T] || H <- L, T <- perms(L--[H])]."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\nThis takes"}],0,false},
             {text,[3,42,72,42]},
             {sep,[{text,[4,102,114,111,109]}],0,false},
             {text,[3,42,76,42]},
             {sep,
              [{text,
                "8in all possible ways. The result is the set of all lists"}],
              0,false},
             {text,[7,42,91,72,124,84,93,42]},
             {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
             {text,[3,42,84,42]},
             {sep,
              [{text,"*is the set of all possible permutations of"}],
              0,false},
             {text,[3,42,76,42]},
             {sep,[{text,[6,44,32,119,105,116,104]}],0,false},
             {text,[3,42,72,42]},
             {sep,[{text,"\bremoved:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,[15,112,101,114,109,115,40,91,98,44,117,44,103,93,41,46]},
             {text,"2\n[[b,u,g],[b,g,u],[u,b,g],[u,g,b],[g,b,u],[g,u,b]]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [24,35,35,35,32,80,121,116,104,97,103,111,114,101,97,110,32,84,114,
           105,112,108,101,116,115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,")Pythagorean triplets are sets of integers"}],
              0,false},
             {text,"\t*{A,B,C}*"},
             {sep,[{text,"\tsuch that"}],0,false},
             {text,
              [20,42,65,42,42,50,32,43,32,66,42,42,50,32,61,32,67,42,42,50,
               42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\fThe function"}],0,false},
             {text,"\t*pyth(N)*"},
             {sep,[{text," generates a list of all integers"}],0,false},
             {text,"\t*{A,B,C}*"},
             {sep,[{text,"\tsuch that"}],0,false},
             {text,
              [20,42,65,42,42,50,32,43,32,66,42,42,50,32,61,32,67,42,42,50,
               42]},
             {sep,
              [{text,
                "9and where the sum of the sides is equal to, or less than,"}],
              0,false},
             {text,[3,42,78,42]},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "Â¦\npyth(N) ->\n    [ {A,B,C} ||\n        A <- lists:seq(1,N),\n        B <- lists:seq(1,N),\n        C <- lists:seq(1,N),\n        A+B+C =< N,\n        A*A+B*B == C*C \n    ]."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,"\bpyth(3)."},
             {text,[7,10,91,93,46,10,62,32]},
             {text,"\tpyth(11)."},
             {text,[7,10,91,93,46,10,62,32]},
             {text,"\tpyth(12)."},
             {text,
              [21,10,91,123,51,44,52,44,53,125,44,123,52,44,51,44,53,125,93,
               10,62,32]},
             {text,"\tpyth(50)."},
             {text,
              [140,10,91,123,51,44,52,44,53,125,44,10,32,123,52,44,51,44,53,
               125,44,10,32,123,53,44,49,50,44,49,51,125,44,10,32,123,54,44,
               56,44,49,48,125,44,10,32,123,56,44,54,44,49,48,125,44,10,32,
               123,56,44,49,53,44,49,55,125,44,10,32,123,57,44,49,50,44,49,53,
               125,44,10,32,123,49,50,44,53,44,49,51,125,44,10,32,123,49,50,
               44,57,44,49,53,125,44,10,32,123,49,50,44,49,54,44,50,48,125,44,
               10,32,123,49,53,44,56,44,49,55,125,44,10,32,123,49,54,44,49,50,
               44,50,48,125,93]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "BThe following code reduces the search space and is more efficient:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "Â£\npyth1(N) ->\n   [{A,B,C} ||\n       A <- lists:seq(1,N-2),\n       B <- lists:seq(A+1,N-1),\n       C <- lists:seq(B+1,N),\n       A+B+C =< N,\n       A*A+B*B == C*C ]."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,",### Simplifications With List Comprehensions"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "SAs an example, list comprehensions can be used to simplify some of the functions in"}],
              0,false},
             {text,"\v*lists.erl*"},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "w\nappend(L)   ->  [X || L1 <- L, X <- L1].\nmap(Fun, L) -> [Fun(X) || X <- L].\nfilter(Pred, L) -> [X || X <- L, Pred(X)]."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,",### Variable Bindings in List Comprehensions"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "OThe scope rules for variables that occur in list comprehensions are as follows:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {text,
           "TAll variables that occur in a generator pattern are assumed to be \"fresh\" variables."}],
         0,false},
        {sep,
         [{text,[1,42]},
          {text,
           [147,65,110,121,32,118,97,114,105,97,98,108,101,115,32,116,104,97,
            116,32,97,114,101,32,100,101,102,105,110,101,100,32,98,101,102,
            111,114,101,32,116,104,101,32,108,105,115,116,32,99,111,109,112,
            114,101,104,101,110,115,105,111,110,44,32,97,110,100,32,116,104,
            97,116,32,97,114,101,32,117,115,101,100,32,105,110,32,102,105,108,
            116,101,114,115,44,32,104,97,118,101,32,116,104,101,32,118,97,108,
            117,101,115,32,116,104,101,121,32,104,97,100,32,98,101,102,111,
            114,101,32,116,104,101,32,108,105,115,116,32,99,111,109,112,114,
            101,104,101,110,115,105,111,110,46]}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {text,"7Variables cannot be exported from a list comprehension."}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "DAs an example of these rules, suppose you want to write the function"}],
              0,false},
             {text,"\b*select*"},
             {sep,
              [{text,
                "I, which selects certain elements from a list of tuples. Suppose you write"}],
              0,false},
             {text,"%*select(X, L) -> [Y || {X, Y} <- L].*"},
             {sep,
              [{text,"0with the intention of extracting all tuples from"}],
              0,false},
             {text,[3,42,76,42]},
             {sep,
              [{text,
                [25,44,32,119,104,101,114,101,32,116,104,101,32,102,105,114,
                 115,116,32,105,116,101,109,32,105,115]}],
              0,false},
             {text,[3,42,88,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,".Compiling this gives the following diagnostic:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "@\n./FileName.erl:Line: Warning: variable 'X' shadowed in generate"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"'This diagnostic warns that the variable"}],0,false},
             {text,[3,42,88,42]},
             {sep,
              [{text,".in the pattern is not the same as the variable"}],
              0,false},
             {text,[3,42,88,42]},
             {sep,[{text,"!that occurs in the function head."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\nEvaluating"}],0,false},
             {text,"\b*select*"},
             {sep,[{text,"\egives the following result:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,"$select(b,[{a,1},{b,2},{c,3},{b,7}])."},
             {text,"\n\n[1,2,3,7]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "=This is not the wanted result. To achieve the desired effect,"}],
              0,false},
             {text,"\b*select*"},
             {sep,[{text,"\emust be written as follows:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,"/\nselect(X, L) ->  [Y || {X1, Y} <- L, X == X1]."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "YThe generator now contains unbound variables and the test has been moved into the filter."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,[{sep,[{text,"\eThis now works as expected:"}],0,false}],0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,"$select(b,[{a,1},{b,2},{c,3},{b,7}])."},
             {text,[6,10,91,50,44,55,93]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÃA consequence of the rules for importing variables into a list comprehensions is that certain pattern matching operations must be moved into the filters and cannot be written directly in the generators."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [22,84,111,32,105,108,108,117,115,116,114,97,116,101,32,116,
                 104,105,115,44,32,100,111]}],
              0,false},
             {text,[7,42,42,110,111,116,42,42]},
             {sep,
              [{text,
                [17,119,114,105,116,101,32,97,115,32,102,111,108,108,111,119,
                 115,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "T\nf(...) ->\n    Y = ...\n    [ Expression || PatternInvolving Y  <- Expr, ...]\n    ..."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [26,73,110,115,116,101,97,100,44,32,119,114,105,116,101,32,97,
               115,32,102,111,108,108,111,119,115,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "^\nf(...) ->\n    Y = ...\n    [ Expression || PatternInvolving Y1  <- Expr, Y == Y1, ...]\n    ..."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[16,35,35,35,32,73,110,116,114,111,100,117,99,116,105,111,110]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "<The complete specification for the bit syntax appears in the"}],
             0,false},
            {text,
             "B[Reference Manual](../doc/reference_manual/expressions#bit_syntax)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "|In Erlang, a Bin is used for constructing binaries and matching binary patterns. A Bin is written with the following syntax:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [25,10,32,32,32,32,32,32,60,60,69,49,44,32,69,50,44,32,46,46,46,
              32,69,110,62,62]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "kA Bin is a low-level sequence of bits or bytes. The purpose of a Bin is to enable construction of binaries:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [25,10,66,105,110,32,61,32,60,60,69,49,44,32,69,50,44,32,46,46,
              46,32,69,110,62,62]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,".All elements must be bound. Or match a binary:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [26,10,60,60,69,49,44,32,69,50,44,32,46,46,46,32,69,110,62,62,32,
              61,32,66,105,110,32]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[5,72,101,114,101,44]}],0,false},
            {text,[5,42,66,105,110,42]},
            {sep,
             [{text,
               "@is bound and the elements are bound or unbound, as in any match."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             ":A Bin does not need to consist of a whole number of bytes."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[1,65]}],0,false},
            {text,"\r**bitstring**"},
            {sep,
             [{text,
               "Â©is a sequence of zero or more bits, where the number of bits does not need to be divisible by 8. If the number of bits is divisible by 8, the bitstring is also a binary."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text," Each element specifies a certain"}],0,false},
            {text,"\v**segment**"},
            {sep,
             [{text,
               "Ãof the bitstring. A segment is a set of contiguous bits of the binary (not necessarily on a byte boundary). The first element specifies the initial segment, the second element specifies the following segment, and so on."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "uThe following examples illustrate how binaries are constructed, or matched, and how elements and tails are specified."}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\f### Examples"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,[14,42,42,69,120,97,109,112,108,101,32,49,58,42,42]},
              {sep,
               [{text,
                 "HA binary can be constructed from a set of constants or a string literal:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,")\nBin11 = <<1, 17, 42>>,\nBin12 = <<\"abc\">>"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "BThis gives two binaries of size 3, with the following evaluations:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [23,42,98,105,110,97,114,121,95,116,111,95,108,105,115,116,40,66,
              105,110,49,49,41,42]},
            {sep,[{text,"\fevaluates to"}],0,false},
            {text,"\r*[1, 17, 42]*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [23,42,98,105,110,97,114,121,95,116,111,95,108,105,115,116,40,66,
              105,110,49,50,41,42]},
            {sep,[{text,"\fevaluates to"}],0,false},
            {text,[14,42,91,57,55,44,32,57,56,44,32,57,57,93,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,[14,42,42,69,120,97,109,112,108,101,32,50,58,42,42]},
              {sep,
               [{text,
                 "ESimilarly, a binary can be constructed from a set of bound variables:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,"-\nA = 1, B = 17, C = 42,\nBin2 = <<A, B, C:16>>"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"&This gives a binary of size 4. Here, a"}],0,false},
              {text,
               [19,42,42,115,105,122,101,32,101,120,112,114,101,115,115,105,
                111,110,42,42]},
              {sep,
               [{text,
                 [24,105,115,32,117,115,101,100,32,102,111,114,32,116,104,101,
                  32,118,97,114,105,97,98,108,101]}],
               0,false},
              {text,[3,42,67,42]},
              {sep,
               [{text,
                 [31,116,111,32,115,112,101,99,105,102,121,32,97,32,49,54,45,
                  98,105,116,115,32,115,101,103,109,101,110,116,32,111,102]}],
               0,false},
              {text,[6,42,66,105,110,50,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [22,42,98,105,110,97,114,121,95,116,111,95,108,105,115,116,40,
                66,105,110,50,41,42]},
              {sep,[{text,"\fevaluates to"}],0,false},
              {text,[17,42,91,49,44,32,49,55,44,32,48,48,44,32,52,50,93,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,[14,42,42,69,120,97,109,112,108,101,32,51,58,42,42]},
              {sep,[{text,"$A Bin can also be used for matching."}],0,false},
              {text,[3,42,68,42]},
              {sep,[{text,[1,44]}],0,false},
              {text,[3,42,69,42]},
              {sep,[{text,[5,44,32,97,110,100]}],0,false},
              {text,[3,42,70,42]},
              {sep,
               [{text,
                 [26,97,114,101,32,117,110,98,111,117,110,100,32,118,97,114,
                  105,97,98,108,101,115,44,32,97,110,100]}],
               0,false},
              {text,[6,42,66,105,110,50,42]},
              {sep,
               [{text,
                 [26,105,115,32,98,111,117,110,100,44,32,97,115,32,105,110,32,
                  69,120,97,109,112,108,101,32,50,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [29,10,60,60,68,58,49,54,44,32,69,44,32,70,47,98,105,110,97,
                114,121,62,62,32,61,32,66,105,110,50]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\nThis gives"}],0,false},
              {text,"\t*D = 273*"},
              {sep,[{text,[1,44]}],0,false},
              {text,"\b*E = 00*"},
              {sep,[{text,"$, and F binds to a binary of size 1:"}],0,false},
              {text,
               [26,42,98,105,110,97,114,121,95,116,111,95,108,105,115,116,40,
                70,41,32,61,32,91,52,50,93,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,[14,42,42,69,120,97,109,112,108,101,32,52,58,42,42]},
              {sep,
               [{text,
                 "<The following is a more elaborate example of matching. Here,"}],
               0,false},
              {text,[7,42,68,103,114,97,109,42]},
              {sep,
               [{text,
                 [145,105,115,32,98,111,117,110,100,32,116,111,32,116,104,101,
                  32,99,111,110,115,101,99,117,116,105,118,101,32,98,121,116,
                  101,115,32,111,102,32,97,110,32,73,80,32,100,97,116,97,103,
                  114,97,109,32,111,102,32,73,80,32,112,114,111,116,111,99,
                  111,108,32,118,101,114,115,105,111,110,32,52,46,32,84,104,
                  101,32,97,109,98,105,116,105,111,110,32,105,115,32,116,111,
                  32,101,120,116,114,97,99,116,32,116,104,101,32,104,101,97,
                  100,101,114,32,97,110,100,32,116,104,101,32,100,97,116,97,
                  32,111,102,32,116,104,101,32,100,97,116,97,103,114,97,109,
                  58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [423,10,45,100,101,102,105,110,101,40,73,80,95,86,69,82,83,73,
                79,78,44,32,52,41,46,10,45,100,101,102,105,110,101,40,73,80,
                95,77,73,78,95,72,68,82,95,76,69,78,44,32,53,41,46,10,10,68,
                103,114,97,109,83,105,122,101,32,61,32,98,121,116,101,95,115,
                105,122,101,40,68,103,114,97,109,41,44,10,99,97,115,101,32,68,
                103,114,97,109,32,111,102,32,10,32,32,32,32,60,60,63,73,80,95,
                86,69,82,83,73,79,78,58,52,44,32,72,76,101,110,58,52,44,32,83,
                114,118,99,84,121,112,101,58,56,44,32,84,111,116,76,101,110,
                58,49,54,44,32,10,32,32,32,32,32,32,73,68,58,49,54,44,32,70,
                108,103,115,58,51,44,32,70,114,97,103,79,102,102,58,49,51,44,
                10,32,32,32,32,32,32,84,84,76,58,56,44,32,80,114,111,116,111,
                58,56,44,32,72,100,114,67,104,107,83,117,109,58,49,54,44,10,
                32,32,32,32,32,32,83,114,99,73,80,58,51,50,44,10,32,32,32,32,
                32,32,68,101,115,116,73,80,58,51,50,44,32,82,101,115,116,68,
                103,114,97,109,47,98,105,110,97,114,121,62,62,32,119,104,101,
                110,32,72,76,101,110,62,61,53,44,32,52,42,72,76,101,110,61,60,
                68,103,114,97,109,83,105,122,101,32,45,62,10,32,32,32,32,32,
                32,32,32,79,112,116,115,76,101,110,32,61,32,52,42,40,72,76,
                101,110,32,45,32,63,73,80,95,77,73,78,95,72,68,82,95,76,69,78,
                41,44,10,32,32,32,32,32,32,32,32,60,60,79,112,116,115,58,79,
                112,116,115,76,101,110,47,98,105,110,97,114,121,44,68,97,116,
                97,47,98,105,110,97,114,121,62,62,32,61,32,82,101,115,116,68,
                103,114,97,109,44,10,32,32,32,32,46,46,46,10,101,110,100,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"&Here, the segment corresponding to the"}],0,false},
              {text,[6,42,79,112,116,115,42]},
              {sep,
               [{text,[14,118,97,114,105,97,98,108,101,32,104,97,115,32,97]}],
               0,false},
              {text,
               [17,42,42,116,121,112,101,32,109,111,100,105,102,105,101,114,
                42,42]},
              {sep,
               [{text,
                 [17,44,32,115,112,101,99,105,102,121,105,110,103,32,116,104,
                  97,116]}],
               0,false},
              {text,[6,42,79,112,116,115,42]},
              {sep,
               [{text,
                 "\\is to bind to a binary. All other variables have the default type equal to unsigned integer."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [143,65,110,32,73,80,32,100,97,116,97,103,114,97,109,32,104,
                  101,97,100,101,114,32,105,115,32,111,102,32,118,97,114,105,
                  97,98,108,101,32,108,101,110,103,116,104,46,32,84,104,105,
                  115,32,108,101,110,103,116,104,32,105,115,32,109,101,97,115,
                  117,114,101,100,32,105,110,32,116,104,101,32,110,117,109,98,
                  101,114,32,111,102,32,51,50,45,98,105,116,32,119,111,114,
                  100,115,32,97,110,100,32,105,115,32,103,105,118,101,110,32,
                  105,110,32,116,104,101,32,115,101,103,109,101,110,116,32,99,
                  111,114,114,101,115,112,111,110,100,105,110,103,32,116,
                  111]}],
               0,false},
              {text,[6,42,72,76,101,110,42]},
              {sep,
               [{text,
                 [22,46,32,84,104,101,32,109,105,110,105,109,117,109,32,118,
                  97,108,117,101,32,111,102]}],
               0,false},
              {text,[6,42,72,76,101,110,42]},
              {sep,
               [{text,"(is 5. It is the segment corresponding to"}],
               0,false},
              {text,[6,42,79,112,116,115,42]},
              {sep,
               [{text,
                 [23,116,104,97,116,32,105,115,32,118,97,114,105,97,98,108,
                  101,44,32,115,111,32,105,102]}],
               0,false},
              {text,[6,42,72,76,101,110,42]},
              {sep,
               [{text,[14,105,115,32,101,113,117,97,108,32,116,111,32,53,44]}],
               0,false},
              {text,[6,42,79,112,116,115,42]},
              {sep,
               [{text,
                 [24,98,101,99,111,109,101,115,32,97,110,32,101,109,112,116,
                  121,32,98,105,110,97,114,121,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [18,84,104,101,32,116,97,105,108,32,118,97,114,105,97,98,108,
                  101,115]}],
               0,false},
              {text,"\v*RestDgram*"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,[6,42,68,97,116,97,42]},
              {sep,
               [{text,
                 "Lbind to binaries, as all tail variables do. Both can bind to empty binaries."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\fThe match of"}],0,false},
              {text,[7,42,68,103,114,97,109,42]},
              {sep,[{text,"%fails if one of the following occurs:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,[{text,"\eThe first 4-bits segment of"}],0,false},
             {text,[7,42,68,103,114,97,109,42]},
             {sep,
              [{text,
                [18,105,115,32,110,111,116,32,101,113,117,97,108,32,116,111,
                 32,52,46]}],
              0,false}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[6,42,72,76,101,110,42]},
             {sep,
              [{text,
                [15,105,115,32,108,101,115,115,32,116,104,97,110,32,53,46]}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,[{text,"\vThe size of"}],0,false},
            {text,[7,42,68,103,114,97,109,42]},
            {sep,[{text,"\fis less than"}],0,false},
            {text,"\b*4*HLen*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,false}}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[16,35,35,35,32,76,101,120,105,99,97,108,32,78,111,116,101]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\rNotice that \""}],0,false},
            {text,"\t*B=<<1>>*"},
            {sep,
             [{text,
               [26,34,32,119,105,108,108,32,98,101,32,105,110,116,101,114,112,
                114,101,116,101,100,32,97,115,32,34]}],
             0,false},
            {text,"\v*B =< <1>>*"},
            {sep,
             [{text,
               "G\", which is a syntax error. The correct way to write the expression is:"}],
             0,false},
            {text,"\v*B = <<1>>*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f### Segments"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,".Each segment has the following general syntax:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [30,42,86,97,108,117,101,58,83,105,122,101,47,84,121,112,101,83,
              112,101,99,105,102,105,101,114,76,105,115,116,42]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,[6,42,83,105,122,101,42]},
            {sep,[{text,[6,111,114,32,116,104,101]}],0,false},
            {text,[15,42,84,121,112,101,83,112,101,99,105,102,105,101,114,42]},
            {sep,
             [{text,
               "D, or both, can be omitted. Thus, the following variants are allowed:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {sep,[{text,[1,42]},{text,[7,42,86,97,108,117,101,42]}],0,false},
       {sep,[{text,[1,42]},{text,"\f*Value:Size*"}],0,false}},
      {sep,
       [{text,[1,42]},
        {text,
         [25,42,86,97,108,117,101,47,84,121,112,101,83,112,101,99,105,102,105,
          101,114,76,105,115,116,42]}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "\\Default values are used when specifications are missing. The default values are described in"}],
             0,false},
            {text,
             [21,91,68,101,102,97,117,108,116,115,93,40,35,68,101,102,97,117,
              108,116,115,41]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,[7,42,86,97,108,117,101,42]},
            {sep,
             [{text,
               "Vpart is any expression, when used in binary construction. Used in binary matching, the"}],
             0,false},
            {text,[7,42,86,97,108,117,101,42]},
            {sep,
             [{text,
               "Dpart must be a literal or a variable. For more information about the"}],
             0,false},
            {text,[7,42,86,97,108,117,101,42]},
            {sep,[{text,"\tpart, see"}],0,false},
            {text,
             "M[Constructing Binaries and Bitstrings](#Constructing Binaries and Bitstrings)"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,"'[Matching Binaries](#Matching Binaries)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,[6,42,83,105,122,101,42]},
            {sep,
             [{text,"-part of the segment multiplied by the unit in"}],
             0,false},
            {text,
             [19,42,84,121,112,101,83,112,101,99,105,102,105,101,114,76,105,
              115,116,42]},
            {sep,
             [{text,
               "L(described later) gives the number of bits for the segment. In construction,"}],
             0,false},
            {text,[6,42,83,105,122,101,42]},
            {sep,
             [{text,
               "<is any expression that evaluates to an integer. In matching,"}],
             0,false},
            {text,[6,42,83,105,122,101,42]},
            {sep,
             [{text,",must be a constant expression or a variable."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,
             [19,42,84,121,112,101,83,112,101,99,105,102,105,101,114,76,105,
              115,116,42]},
            {sep,
             [{text,"2is a list of type specifiers separated by hyphens."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,[{text,[4,84,121,112,101]}],0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {sep,
                     [{sep,
                       [{text," The most commonly used types are"}],
                       0,false},
                      {text,[7,105,110,116,101,103,101,114]},
                      {sep,[{text,[1,44]}],0,false},
                      {text,[5,102,108,111,97,116]},
                      {sep,[{text,[5,44,32,97,110,100]}],0,false},
                      {text,[6,98,105,110,97,114,121]},
                      {sep,[{text,[5,46,32,83,101,101]}],0,false},
                      {text,".Bit Syntax Expressions in the Reference Manual"},
                      {sep,[{text,"\efor a complete description."}],0,false}],
                     0,false},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,"\nSignedness"}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {sep,
                   [{sep,
                     [{text,"*The signedness specification can be either"}],
                     0,false},
                    {text,[6,115,105,103,110,101,100]},
                    {sep,[{text,[2,111,114]}],0,false},
                    {text,"\bunsigned"},
                    {sep,
                     [{text,
                       "3. Notice that signedness only matters for matching."}],
                     0,false}],
                   0,false},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[{text,"\nEndianness"}],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {sep,
                 [{sep,
                   [{text,"*The endianness specification can be either"}],
                   0,false},
                  {text,[3,98,105,103]},
                  {sep,[{text,[1,44]}],0,false},
                  {text,[6,108,105,116,116,108,101]},
                  {sep,[{text,[4,44,32,111,114]}],0,false},
                  {text,[6,110,97,116,105,118,101]},
                  {sep,
                   [{text,
                     "Â¶. Native-endian means that the endian is resolved at load time, to be either big-endian or little-endian, depending on what is \"native\" for the CPU that the Erlang machine is run on."}],
                   0,false}],
                 0,false},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[{text,[4,85,110,105,116]}],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {sep,
               [{sep,
                 [{text,
                   [25,84,104,101,32,117,110,105,116,32,115,105,122,101,32,
                    105,115,32,103,105,118,101,110,32,97,115]}],
                 0,false},
                {text,
                 [19,117,110,105,116,58,73,110,116,101,103,101,114,76,105,116,
                  101,114,97,108]},
                {sep,
                 [{text,
                   "5. The allowed range is 1-256. It is multiplied by the"}],
                 0,false},
                {text,[4,83,105,122,101]},
                {sep,
                 [{text,
                   "|specifier to give the effective size of the segment. The unit size specifies the alignment for binary segments without size."}],
                 0,false}],
               0,false},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,[{text,"!\nX:4/little-signed-integer-unit:8"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "iThis element has a total size of 4\\*8 = 32 bits, and it contains a signed integer in little-endian order."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f### Defaults"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [31,60,97,32,110,97,109,101,61,34,68,101,102,97,117,108,116,115,
              34,62,68,101,102,97,117,108,116,115,60,47,97,62]},
            {sep,
             [{text,
               [154,84,104,101,32,100,101,102,97,117,108,116,32,116,121,112,
                101,32,102,111,114,32,97,32,115,101,103,109,101,110,116,32,
                105,115,32,105,110,116,101,103,101,114,46,32,84,104,101,32,
                100,101,102,97,117,108,116,32,116,121,112,101,32,100,111,101,
                115,32,110,111,116,32,100,101,112,101,110,100,32,111,110,32,
                116,104,101,32,118,97,108,117,101,44,32,101,118,101,110,32,
                105,102,32,116,104,101,32,118,97,108,117,101,32,105,115,32,97,
                32,108,105,116,101,114,97,108,46,32,70,111,114,32,101,120,97,
                109,112,108,101,44,32,116,104,101,32,100,101,102,97,117,108,
                116,32,116,121,112,101,32,105,110]}],
             0,false},
            {text,"\n*<<3.14>>*"},
            {sep,
             [{text,
               [22,105,115,32,105,110,116,101,103,101,114,44,32,110,111,116,
                32,102,108,111,97,116,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\vThe default"}],0,false},
            {text,[6,42,83,105,122,101,42]},
            {sep,
             [{text,
               "Ã«depends on the type. For integer it is 8. For float it is 64. For binary it is all of the binary. In matching, this default value is only valid for the last element. All other binary elements in matching must have a size specification."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"-The default unit depends on the the type. For"}],
             0,false},
            {text,"\t*integer*"},
            {sep,[{text,[1,44]}],0,false},
            {text,[7,42,102,108,111,97,116,42]},
            {sep,[{text,[5,44,32,97,110,100]}],0,false},
            {text,"\v*bitstring*"},
            {sep,
             [{text,
               [28,105,116,32,105,115,32,49,46,32,70,111,114,32,98,105,110,97,
                114,121,32,105,116,32,105,115,32,56,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [25,84,104,101,32,100,101,102,97,117,108,116,32,115,105,103,
                110,101,100,110,101,115,115,32,105,115]}],
             0,false},
            {text,"\n*unsigned*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [25,84,104,101,32,100,101,102,97,117,108,116,32,101,110,100,
                105,97,110,110,101,115,115,32,105,115]}],
             0,false},
            {text,[5,42,98,105,103,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,"(### Constructing Binaries and Bitstrings"},null},
       null}},
     {text,
      "W<a name=\"Constructing Binaries and Bitstrings\">Constructing Binaries and Bitstrings</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "Â§This section describes the rules for constructing binaries using the bit syntax. Unlike when constructing lists or tuples, the construction of a binary can fail with a"}],
             0,false},
            {text,"\b*badarg*"},
            {sep,[{text,"\nexception."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "PThere can be zero or more segments in a binary to be constructed. The expression"}],
             0,false},
            {text,[6,42,60,60,62,62,42]},
            {sep,[{text," constructs a zero length binary."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "wEach segment in a binary can consist of zero or more bits. There are no alignment rules for individual segments of type"}],
             0,false},
            {text,"\t*integer*"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[7,42,102,108,111,97,116,42]},
            {sep,
             [{text,
               "q. For binaries and bitstrings without size, the unit specifies the alignment. Since the default alignment for the"}],
             0,false},
            {text,"\b*binary*"},
            {sep,
             [{text,
               "`type is 8, the size of a binary segment must be a multiple of 8 bits, that is, only whole bytes."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,[{text,"#\n<<Bin/binary,Bitstring/bitstring>>"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\fThe variable"}],0,false},
            {text,[5,42,66,105,110,42]},
            {sep,
             [{text,"1must contain a whole number of bytes, because the"}],
             0,false},
            {text,"\b*binary*"},
            {sep,
             [{text,
               [16,116,121,112,101,32,100,101,102,97,117,108,116,115,32,116,
                111]}],
             0,false},
            {text,"\b*unit:8*"},
            {sep,[{text,[3,46,32,65]}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [25,101,120,99,101,112,116,105,111,110,32,105,115,32,103,101,
                110,101,114,97,116,101,100,32,105,102]}],
             0,false},
            {text,[5,42,66,105,110,42]},
            {sep,[{text,"!consist of, for example, 17 bits."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,"\v*Bitstring*"},
            {sep,
             [{text,
               "tvariable can consist of any number of bits, for example, 0, 1, 8, 11, 17, 42, and so on. This is because the default"}],
             0,false},
            {text,[6,42,117,110,105,116,42]},
            {sep,
             [{text,
               [20,102,111,114,32,98,105,116,115,116,114,105,110,103,115,32,
                105,115,32,49,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "UFor clarity, it is recommended not to change the unit size for binaries. Instead, use"}],
             0,false},
            {text,"\b*binary*"},
            {sep,[{text," when you need byte alignment and"}],0,false},
            {text,"\v*bitstring*"},
            {sep,
             [{text,
               [28,119,104,101,110,32,121,111,117,32,110,101,101,100,32,98,
                105,116,32,97,108,105,103,110,109,101,110,116,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "oThe following example successfully constructs a bitstring of 7 bits, provided that all of X and Y are integers:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,{text,[3,96,96,96]},{sep,[{text,"\f\n<<X:1,Y:6>>"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "AAs mentioned earlier, segments have the following general syntax:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [30,42,86,97,108,117,101,58,83,105,122,101,47,84,121,112,101,83,
              112,101,99,105,102,105,101,114,76,105,115,116,42]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\eWhen constructing binaries,"}],0,false},
            {text,[7,42,86,97,108,117,101,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[6,42,83,105,122,101,42]},
            {sep,
             [{text,
               "Dcan be any Erlang expression. However, for syntactical reasons, both"}],
             0,false},
            {text,[7,42,86,97,108,117,101,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[6,42,83,105,122,101,42]},
            {sep,
             [{text,
               [157,109,117,115,116,32,98,101,32,101,110,99,108,111,115,101,
                100,32,105,110,32,112,97,114,101,110,116,104,101,115,105,115,
                32,105,102,32,116,104,101,32,101,120,112,114,101,115,115,105,
                111,110,32,99,111,110,115,105,115,116,115,32,111,102,32,97,
                110,121,116,104,105,110,103,32,109,111,114,101,32,116,104,97,
                110,32,97,32,115,105,110,103,108,101,32,108,105,116,101,114,
                97,108,32,111,114,32,97,32,118,97,114,105,97,98,108,101,46,32,
                84,104,101,32,102,111,108,108,111,119,105,110,103,32,103,105,
                118,101,115,32,97,32,99,111,109,112,105,108,101,114,32,115,
                121,110,116,97,120,32,101,114,114,111,114,58]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,{text,[3,96,96,96]},{sep,[{text,"\n\n<<X+1:8>>"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "UThis expression must be rewritten into the following, to be accepted by the compiler:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,{text,[3,96,96,96]},{sep,[{text,"\f\n<<(X+1):8>>"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [29,35,35,35,32,73,110,99,108,117,100,105,110,103,32,76,105,116,
            101,114,97,108,32,83,116,114,105,110,103,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "6A literal string can be written instead of an element:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"\f\n<<\"hello\">>"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"*This is syntactic sugar for the following:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [19,10,60,60,36,104,44,36,101,44,36,108,44,36,108,44,36,111,62,
                62]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [21,35,35,35,32,77,97,116,99,104,105,110,103,32,66,105,110,97,114,
          105,101,115]},
        null},
       null}},
     {text,"1<a name=\"Matching Binaries\">Matching Binaries</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "MThis section describes the rules for matching binaries, using the bit syntax."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "ÃThere can be zero or more segments in a binary pattern. A binary pattern can occur wherever patterns are allowed, including inside other patterns. Binary patterns cannot be nested. The pattern"}],
             0,false},
            {text,[6,42,60,60,62,62,42]},
            {sep,
             [{text,
               [29,109,97,116,99,104,101,115,32,97,32,122,101,114,111,32,108,
                101,110,103,116,104,32,98,105,110,97,114,121,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "LEach segment in a binary can consist of zero or more bits. A segment of type"}],
             0,false},
            {text,"\b*binary*"},
            {sep,
             [{text,
               "|must have a size evenly divisible by 8 (or divisible by the unit size, if the unit size has been changed). A segment of type"}],
             0,false},
            {text,"\v*bitstring*"},
            {sep,[{text," has no restrictions on the size."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "AAs mentioned earlier, segments have the following general syntax:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [30,42,86,97,108,117,101,58,83,105,122,101,47,84,121,112,101,83,
              112,101,99,105,102,105,101,114,76,105,115,116,42]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\rWhen matching"}],0,false},
            {text,[7,42,86,97,108,117,101,42]},
            {sep,
             [{text,
               "j, value must be either a variable or an integer, or a floating point literal. Expressions are not allowed."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,[6,42,83,105,122,101,42]},
            {sep,
             [{text,
               "Ymust be an integer literal, or a previously bound variable. The following is not allowed:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,[{text,"&\nfoo(N, <<X:N,T/binary>>) ->\n   {X,T}."}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [22,84,104,101,32,116,119,111,32,111,99,99,117,114,114,101,110,
                99,101,115,32,111,102]}],
             0,false},
            {text,[3,42,78,42]},
            {sep,
             [{text,"4are not related. The compiler will complain that the"}],
             0,false},
            {text,[3,42,78,42]},
            {sep,
             [{text,
               [29,105,110,32,116,104,101,32,115,105,122,101,32,102,105,101,
                108,100,32,105,115,32,117,110,98,111,117,110,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"4The correct way to write this example is as follows:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,"4\nfoo(N, Bin) ->\n   <<X:N,T/binary>> = Bin,\n   {X,T}."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,"/### Getting the Rest of the Binary or Bitstring"},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "GTo match out the rest of a binary, specify a binary field without size:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [28,10,102,111,111,40,60,60,65,58,56,44,82,101,115,116,47,98,
                105,110,97,114,121,62,62,41,32,45,62]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"3The size of the tail must be evenly divisible by 8."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "CTo match out the rest of a bitstring, specify a field without size:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [31,10,102,111,111,40,60,60,65,58,56,44,82,101,115,116,47,98,
                105,116,115,116,114,105,110,103,62,62,41,32,45,62]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "<There are no restrictions on the number of bits in the tail."}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [25,35,35,35,32,65,112,112,101,110,100,105,110,103,32,116,111,32,97,
          32,66,105,110,97,114,121]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "AAppending to a binary in an efficient way can be done as follows:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "Â´\ntriples_to_bin(T) ->\n    triples_to_bin(T, <<>>).\n\ntriples_to_bin([{X,Y,Z} | T], Acc) ->\n    triples_to_bin(T, <<Acc/binary,X:32,Y:32,Z:32>>);\ntriples_to_bin([], Acc) -> \n    Acc."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false}],
  0,false}}
