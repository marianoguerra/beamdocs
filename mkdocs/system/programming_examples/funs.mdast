{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,[6,35,32,70,117,110,115]},null},null}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,[6,35,35,32,109,97,112]},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [23,84,104,101,32,102,111,108,108,111,119,105,110,103,32,
                   102,117,110,99,116,105,111,110,44]}],
                0,false},
               {text,"\b*double*"},
               {sep,[{text,"\", doubles every element in a list:"}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "7\ndouble([H|T]) -> [2*H|double(T)];\ndouble([])    -> []."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                ";Hence, the argument entered as input is doubled as follows:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,[3,10,62,32]},
               {text,
                [18,100,111,117,98,108,101,40,91,49,44,50,44,51,44,52,93,41,
                 46]},
               {text,"\n\n[2,4,6,8]"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [23,84,104,101,32,102,111,108,108,111,119,105,110,103,32,
                   102,117,110,99,116,105,111,110,44]}],
                0,false},
               {text,"\t*add_one*"},
               {sep,
                [{text,"&, adds one to every element in a list:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                ":\nadd_one([H|T]) -> [H+1|add_one(T)];\nadd_one([])    -> []."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,"\rThe functions"}],0,false},
               {text,"\b*double*"},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,"\t*add_one*"},
               {sep,
                [{text,
                  "@have a similar structure. This can be used by writing a function"}],
                0,false},
               {text,[5,42,109,97,112,42]},
               {sep,
                [{text,
                  [31,116,104,97,116,32,101,120,112,114,101,115,115,101,115,
                   32,116,104,105,115,32,115,105,109,105,108,97,114,105,116,
                   121,58]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "9\n\nmap(F, [H|T]) -> [F(H)|map(F, T)];\nmap(F, [])    -> []."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,"\rThe functions"}],0,false},
               {text,"\b*double*"},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,"\t*add_one*"},
               {sep,[{text," can now be expressed in terms of"}],0,false},
               {text,[5,42,109,97,112,42]},
               {sep,[{text,"\vas follows:"}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "T\ndouble(L)  -> map(fun(X) -> 2*X end, L).\nadd_one(L) -> map(fun(X) -> 1 + X end, L)."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,[14,42,109,97,112,40,70,44,32,76,105,115,116,41,42]},
               {sep,[{text,"#is a function that takes a function"}],0,false},
               {text,[3,42,70,42]},
               {sep,[{text,"\nand a list"}],0,false},
               {text,[3,42,76,42]},
               {sep,
                [{text,
                  "9as arguments and returns a new list, obtained by applying"}],
                0,false},
               {text,[3,42,70,42]},
               {sep,
                [{text,
                  [26,116,111,32,101,97,99,104,32,111,102,32,116,104,101,32,
                   101,108,101,109,101,110,116,115,32,105,110]}],
                0,false},
               {text,[3,42,76,42]},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "^The process of abstracting out the common features of a number of different programs is called"}],
                0,false},
               {text,
                [26,42,42,112,114,111,99,101,100,117,114,97,108,32,97,98,115,
                 116,114,97,99,116,105,111,110,42,42]},
               {sep,
                [{text,
                  "Â¢. Procedural abstraction can be used to write several different functions that have a similar structure, but differ in some minor detail. This is done as follows:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"\v**Step 1.**"},
             {sep,
              [{text,
                "JWrite one function that represents the common features of these functions."}],
              0,false}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"\v**Step 2.**"},
             {sep,
              [{text,
                "fParameterize the difference in terms of functions that are passed as arguments to the common function."}],
              0,false}],
            0,false}],
          0,false}}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\n## foreach"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "}This section illustrates procedural abstraction. Initially, the following two examples are written as conventional functions."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               ":This function prints all elements of a list onto a stream:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [128,10,112,114,105,110,116,95,108,105,115,116,40,83,116,114,
                101,97,109,44,32,91,72,124,84,93,41,32,45,62,10,32,32,32,32,
                105,111,58,102,111,114,109,97,116,40,83,116,114,101,97,109,44,
                32,34,126,112,126,110,34,44,32,91,72,93,41,44,10,32,32,32,32,
                112,114,105,110,116,95,108,105,115,116,40,83,116,114,101,97,
                109,44,32,84,41,59,10,112,114,105,110,116,95,108,105,115,116,
                40,83,116,114,101,97,109,44,32,91,93,41,32,45,62,10,32,32,32,
                32,116,114,117,101,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               ":This function broadcasts a message to a list of processes:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "e\nbroadcast(Msg, [Pid|Pids]) ->\n    Pid ! Msg,\n    broadcast(Msg, Pids);\nbroadcast(_, []) ->\n    true."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "ÃThese two functions have a similar structure. They both iterate over a list and do something to each element in the list. The \"something\" is passed on as an extra argument to the function that does this."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\fThe function"}],0,false},
              {text,"\t*foreach*"},
              {sep,
               [{text,
                 [26,101,120,112,114,101,115,115,101,115,32,116,104,105,115,
                  32,115,105,109,105,108,97,114,105,116,121,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "M\n\nforeach(F, [H|T]) ->\n    F(H),\n    foreach(F, T);\nforeach(F, []) ->\n    ok."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [18,85,115,105,110,103,32,116,104,101,32,102,117,110,99,116,
                  105,111,110]}],
               0,false},
              {text,"\t*foreach*"},
              {sep,
               [{text,
                 [14,44,32,116,104,101,32,102,117,110,99,116,105,111,110]}],
               0,false},
              {text,"\f*print_list*"},
              {sep,[{text,"\bbecomes:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "3\nforeach(fun(H) -> io:format(S, \"~p~n\",[H]) end, L)"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [18,85,115,105,110,103,32,116,104,101,32,102,117,110,99,116,
                  105,111,110]}],
               0,false},
              {text,"\t*foreach*"},
              {sep,
               [{text,
                 [14,44,32,116,104,101,32,102,117,110,99,116,105,111,110]}],
               0,false},
              {text,"\v*broadcast*"},
              {sep,[{text,"\bbecomes:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"$\nforeach(fun(Pid) -> Pid ! M end, L)"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"\t*foreach*"},
              {sep,
               [{text,"3is evaluated for its side-effect and not its value."}],
               0,false},
              {text,
               [17,42,102,111,114,101,97,99,104,40,70,117,110,32,44,76,41,42]},
              {sep,[{text,[5,99,97,108,108,115]}],0,false},
              {text,"\b*Fun(X)*"},
              {sep,
               [{text,
                 [16,102,111,114,32,101,97,99,104,32,101,108,101,109,101,110,
                  116]}],
               0,false},
              {text,[3,42,88,42]},
              {sep,[{text,[2,105,110]}],0,false},
              {text,[3,42,76,42]},
              {sep,
               [{text,
                 "Hand the processing occurs in the order that the elements were defined in"}],
               0,false},
              {text,[3,42,76,42]},
              {sep,[{text,[1,46]}],0,false},
              {text,[5,42,109,97,112,42]},
              {sep,
               [{text,
                 ">does not define the order in which its elements are processed."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [17,35,35,32,83,121,110,116,97,120,32,111,102,32,70,117,110,115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"/Funs are written with the following syntax (see"}],
              0,false},
             {text,
              ";[Fun Expressions](../doc/reference_manual/expressions#funs)"},
             {sep,
              [{text,
                [22,102,111,114,32,102,117,108,108,32,100,101,115,99,114,105,
                 112,116,105,111,110,41,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "6\nF = fun (Arg1, Arg2, ... ArgN) ->\n        ...\n    end"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"%This creates an anonymous function of"}],0,false},
             {text,[3,42,78,42]},
             {sep,[{text,"&arguments and binds it to the variable"}],0,false},
             {text,[3,42,70,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [17,65,110,111,116,104,101,114,32,102,117,110,99,116,105,111,
                 110,44]}],
              0,false},
             {text,[14,42,70,117,110,99,116,105,111,110,78,97,109,101,42]},
             {sep,
              [{text,
                "W, written in the same module, can be passed as an argument, using the following syntax:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,[{text,"\e\nF = fun FunctionName/Arity"}],0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "tWith this form of function reference, the function that is referred to does not need to be exported from the module."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "dIt is also possible to refer to a function defined in a different module, with the following syntax:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,[{text,"\"\nF = fun Module:FunctionName/Arity"}],0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "HIn this case, the function must be exported from the module in question."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "FThe following program illustrates the different ways of creating funs:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "Â²\n\n-module(fun_test).\n-export([t1/0, t2/0]).\n-import(lists, [map/2]).\n\nt1() -> map(fun(X) -> 2 * X end, [1,2,3,4,5]).\n\nt2() -> map(fun double/1, [1,2,3,4,5]).\n\ndouble(X) -> X * 2."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,84,104,101,32,102,117,110]}],0,false},
             {text,[3,42,70,42]},
             {sep,
              [{text,"+can be evaluated with the following syntax:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [25,10,70,40,65,114,103,49,44,32,65,114,103,50,44,32,46,46,46,
               44,32,65,114,103,110,41]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,".To check whether a term is a fun, use the test"}],
              0,false},
             {text,[15,42,105,115,95,102,117,110,99,116,105,111,110,47,49,42]},
             {sep,[{text,"\vin a guard."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "Y\nf(F, Args) when is_function(F) ->\n   apply(F, Args);\nf(N, _) when is_integer(N) ->\n   N."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\"Funs are a distinct type. The BIFs"}],0,false},
             {text,
              [21,42,101,114,108,97,110,103,58,102,117,110,95,105,110,102,111,
               47,49,44,50,42]},
             {sep,
              [{text,
                "<can be used to retrieve information about a fun, and the BIF"}],
              0,false},
             {text,
              [22,42,101,114,108,97,110,103,58,102,117,110,95,116,111,95,108,
               105,115,116,47,49,42]},
             {sep,
              [{text,".returns a textual representation of a fun. The"}],
              0,false},
             {text,
              [22,42,99,104,101,99,107,95,112,114,111,99,101,115,115,95,99,
               111,100,101,47,50,42]},
             {sep,[{text,"\vBIF returns"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                "Hif the process contains funs that depend on the old version of a module."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"!## Variable Bindings Within a Fun"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "@The scope rules for variables that occur in funs are as follows:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {text,
          "RAll variables that occur in the head of a fun are assumed to be \"fresh\" variables."}],
        0,false},
       {sep,
        [{text,[1,42]},
         {text,
          [148,86,97,114,105,97,98,108,101,115,32,116,104,97,116,32,97,114,
           101,32,100,101,102,105,110,101,100,32,98,101,102,111,114,101,32,
           116,104,101,32,102,117,110,44,32,97,110,100,32,116,104,97,116,32,
           111,99,99,117,114,32,105,110,32,102,117,110,99,116,105,111,110,32,
           99,97,108,108,115,32,111,114,32,103,117,97,114,100,32,116,101,115,
           116,115,32,119,105,116,104,105,110,32,116,104,101,32,102,117,110,
           44,32,104,97,118,101,32,116,104,101,32,118,97,108,117,101,115,32,
           116,104,101,121,32,104,97,100,32,111,117,116,115,105,100,101,32,
           116,104,101,32,102,117,110,46]}],
        0,false}},
      {sep,
       [{text,[1,42]},{text,"(Variables cannot be exported from a fun."}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,".The following examples illustrate these rules:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [156,10,112,114,105,110,116,95,108,105,115,116,40,70,105,108,101,
              44,32,76,105,115,116,41,32,45,62,10,32,32,32,32,123,111,107,44,
              32,83,116,114,101,97,109,125,32,61,32,102,105,108,101,58,111,
              112,101,110,40,70,105,108,101,44,32,119,114,105,116,101,41,44,
              10,32,32,32,32,102,111,114,101,97,99,104,40,102,117,110,40,88,
              41,32,45,62,32,105,111,58,102,111,114,109,97,116,40,83,116,114,
              101,97,109,44,34,126,112,126,110,34,44,91,88,93,41,32,101,110,
              100,44,32,76,105,115,116,41,44,10,32,32,32,32,102,105,108,101,
              58,99,108,111,115,101,40,83,116,114,101,97,109,41,46]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [18,72,101,114,101,44,32,116,104,101,32,118,97,114,105,97,98,
                108,101]}],
             0,false},
            {text,[3,42,88,42]},
            {sep,
             [{text,
               "A, defined in the head of the fun, is a new variable. The variable"}],
             0,false},
            {text,"\b*Stream*"},
            {sep,
             [{text,
               "7, which is used within the fun, gets its value from the"}],
             0,false},
            {text,"\v*file:open*"},
            {sep,[{text,[5,108,105,110,101,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "wAs any variable that occurs in the head of a fun is considered a new variable, it is equally valid to write as follows:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "Ã\nprint_list(File, List) ->\n    {ok, Stream} = file:open(File, write),\n    foreach(fun(File) -> \n                io:format(Stream,\"~p~n\",[File]) \n            end, List),\n    file:close(Stream)."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[5,72,101,114,101,44]}],0,false},
            {text,[6,42,70,105,108,101,42]},
            {sep,[{text,"&is used as the new variable instead of"}],0,false},
            {text,[3,42,88,42]},
            {sep,
             [{text,
               "O. This is not so wise because code in the fun body cannot refer to the variable"}],
             0,false},
            {text,[6,42,70,105,108,101,42]},
            {sep,
             [{text,
               "], which is defined outside of the fun. Compiling this example gives the following diagnostic:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "G\n./FileName.erl:Line: Warning: variable 'File' \n      shadowed in 'fun'"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text," This indicates that the variable"}],0,false},
            {text,[6,42,70,105,108,101,42]},
            {sep,
             [{text,
               "=, which is defined inside the fun, collides with the variable"}],
             0,false},
            {text,[6,42,70,105,108,101,42]},
            {sep,[{text,"#, which is defined outside the fun."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [270,84,104,101,32,114,117,108,101,115,32,102,111,114,32,105,
                109,112,111,114,116,105,110,103,32,118,97,114,105,97,98,108,
                101,115,32,105,110,116,111,32,97,32,102,117,110,32,104,97,115,
                32,116,104,101,32,99,111,110,115,101,113,117,101,110,99,101,
                32,116,104,97,116,32,99,101,114,116,97,105,110,32,112,97,116,
                116,101,114,110,32,109,97,116,99,104,105,110,103,32,111,112,
                101,114,97,116,105,111,110,115,32,109,117,115,116,32,98,101,
                32,109,111,118,101,100,32,105,110,116,111,32,103,117,97,114,
                100,32,101,120,112,114,101,115,115,105,111,110,115,32,97,110,
                100,32,99,97,110,110,111,116,32,98,101,32,119,114,105,116,116,
                101,110,32,105,110,32,116,104,101,32,104,101,97,100,32,111,
                102,32,116,104,101,32,102,117,110,46,32,70,111,114,32,101,120,
                97,109,112,108,101,44,32,121,111,117,32,109,105,103,104,116,
                32,119,114,105,116,101,32,116,104,101,32,102,111,108,108,111,
                119,105,110,103,32,99,111,100,101,32,105,102,32,121,111,117,
                32,105,110,116,101,110,100,32,116,104,101,32,102,105,114,115,
                116,32,99,108,97,117,115,101,32,111,102]}],
             0,false},
            {text,[3,42,70,42]},
            {sep,
             [{text,"1to be evaluated when the value of its argument is"}],
             0,false},
            {text,[3,42,89,42]},
            {sep,[{text,[1,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [128,10,102,40,46,46,46,41,32,45,62,10,32,32,32,32,89,32,61,32,
              46,46,46,10,32,32,32,32,109,97,112,40,102,117,110,40,88,41,32,
              119,104,101,110,32,88,32,61,61,32,89,32,45,62,10,32,32,32,32,32,
              32,32,32,32,32,32,32,32,59,10,32,32,32,32,32,32,32,32,32,32,32,
              40,95,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,46,
              46,46,10,32,32,32,32,32,32,32,32,101,110,100,44,32,46,46,46,41,
              10,32,32,32,32,46,46,46]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"&instead of writing the following code:"}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "t\nf(...) ->\n    Y = ...\n    map(fun(Y) ->\n             ;\n           (_) ->\n             ...\n        end, ...)\n    ..."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [24,35,35,32,70,117,110,115,32,97,110,100,32,77,111,100,117,108,101,
         32,76,105,115,116,115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [131,84,104,101,32,102,111,108,108,111,119,105,110,103,32,101,
               120,97,109,112,108,101,115,32,115,104,111,119,32,97,32,100,105,
               97,108,111,103,117,101,32,119,105,116,104,32,116,104,101,32,69,
               114,108,97,110,103,32,115,104,101,108,108,46,32,65,108,108,32,
               116,104,101,32,104,105,103,104,101,114,32,111,114,100,101,114,
               32,102,117,110,99,116,105,111,110,115,32,100,105,115,99,117,
               115,115,101,100,32,97,114,101,32,101,120,112,111,114,116,101,
               100,32,102,114,111,109,32,116,104,101,32,109,111,100,117,108,
               101]}],
            0,false},
           {text,[7,42,108,105,115,116,115,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,[6,35,35,32,109,97,112]},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[5,42,109,97,112,42]},
             {sep,
              [{text,
                "5takes a function of one argument and a list of terms:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "9\n\nmap(F, [H|T]) -> [F(H)|map(F, T)];\nmap(F, [])    -> []."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "TIt returns the list obtained by applying the function to every argument in the list."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "JWhen a new fun is defined in the shell, the value of the fun is printed as"}],
              0,false},
             {text,
              [16,42,70,117,110,35,60,101,114,108,95,101,118,97,108,62,42]},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,
              [29,68,111,117,98,108,101,32,61,32,102,117,110,40,88,41,32,45,
               62,32,50,32,42,32,88,32,101,110,100,46]},
             {text,[5,10,35,70,117,110]},
             {text,
              [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,48,
               51,49]},
             {text,[4,62,10,62,32]},
             {text,
              [31,108,105,115,116,115,58,109,97,112,40,68,111,117,98,108,101,
               44,32,91,49,44,50,44,51,44,52,44,53,93,41,46]},
             {text,"\r\n[2,4,6,8,10]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,[6,35,35,32,97,110,121]},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[5,42,97,110,121,42]},
             {sep,
              [{text,
                [17,116,97,107,101,115,32,97,32,112,114,101,100,105,99,97,116,
                 101]}],
              0,false},
             {text,[3,42,80,42]},
             {sep,[{text,"$of one argument and a list of terms:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [133,10,10,97,110,121,40,80,114,101,100,44,32,91,72,124,84,93,
               41,32,45,62,10,32,32,32,32,99,97,115,101,32,80,114,101,100,40,
               72,41,32,111,102,10,32,32,32,32,32,32,32,32,116,114,117,101,32,
               32,45,62,32,32,116,114,117,101,59,10,32,32,32,32,32,32,32,32,
               102,97,108,115,101,32,45,62,32,32,97,110,121,40,80,114,101,100,
               44,32,84,41,10,32,32,32,32,101,110,100,59,10,97,110,121,40,80,
               114,101,100,44,32,91,93,41,32,45,62,10,32,32,32,32,102,97,108,
               115,101,46]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"&A predicate is a function that returns"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[1,46]}],0,false},
             {text,[5,42,97,110,121,42]},
             {sep,[{text,[2,105,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                [18,105,102,32,116,104,101,114,101,32,105,115,32,97,32,116,
                 101,114,109]}],
              0,false},
             {text,[3,42,88,42]},
             {sep,
              [{text,
                [21,105,110,32,116,104,101,32,108,105,115,116,32,115,117,99,
                 104,32,116,104,97,116]}],
              0,false},
             {text,[6,42,80,40,88,41,42]},
             {sep,[{text,[2,105,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\vA predicate"}],0,false},
             {text,"\b*Big(X)*"},
             {sep,
              [{text,
                [20,105,115,32,100,101,102,105,110,101,100,44,32,119,104,105,
                 99,104,32,105,115]}],
              0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"#if its argument is greater that 10:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,
              ":Big =  fun(X) -> if X > 10 -> true; true -> false end end."},
             {text,[5,10,35,70,117,110]},
             {text,
              [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,48,
               51,49]},
             {text,[4,62,10,62,32]},
             {text,
              [26,108,105,115,116,115,58,97,110,121,40,66,105,103,44,32,91,49,
               44,50,44,51,44,52,93,41,46]},
             {text,"\t\nfalse\n> "},
             {text,
              [29,108,105,115,116,115,58,97,110,121,40,66,105,103,44,32,91,49,
               44,50,44,51,44,49,50,44,53,93,41,46]},
             {text,[5,10,116,114,117,101]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,[6,35,35,32,97,108,108]},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[5,42,97,108,108,42]},
             {sep,
              [{text,
                [25,104,97,115,32,116,104,101,32,115,97,109,101,32,97,114,103,
                 117,109,101,110,116,115,32,97,115]}],
              0,false},
             {text,[5,42,97,110,121,42]},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [133,10,10,97,108,108,40,80,114,101,100,44,32,91,72,124,84,93,
               41,32,45,62,10,32,32,32,32,99,97,115,101,32,80,114,101,100,40,
               72,41,32,111,102,10,32,32,32,32,32,32,32,32,116,114,117,101,32,
               32,45,62,32,32,97,108,108,40,80,114,101,100,44,32,84,41,59,10,
               32,32,32,32,32,32,32,32,102,97,108,115,101,32,45,62,32,32,102,
               97,108,115,101,10,32,32,32,32,101,110,100,59,10,97,108,108,40,
               80,114,101,100,44,32,91,93,41,32,45,62,10,32,32,32,32,116,114,
               117,101,46]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[5,73,116,32,105,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                "7if the predicate applied to all elements in the list is"}],
              0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,
              [31,108,105,115,116,115,58,97,108,108,40,66,105,103,44,32,91,49,
               44,50,44,51,44,52,44,49,50,44,54,93,41,46]},
             {text,"\f   \nfalse\n> "},
             {text,
              [30,108,105,115,116,115,58,97,108,108,40,66,105,103,44,32,91,49,
               50,44,49,51,44,49,52,44,49,53,93,41,46]},
             {text,"\f       \ntrue"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\n## foreach"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\t*foreach*"},
             {sep,
              [{text,
                "5takes a function of one argument and a list of terms:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "M\n\nforeach(F, [H|T]) ->\n    F(H),\n    foreach(F, T);\nforeach(F, []) ->\n    ok."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "5The function is applied to each argument in the list."}],
              0,false},
             {text,"\t*foreach*"},
             {sep,[{text,[7,114,101,116,117,114,110,115]}],0,false},
             {text,[4,42,111,107,42]},
             {sep,[{text,"&. It is only used for its side-effect:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,
              ">lists:foreach(fun(X) -> io:format(\"~w~n\",[X]) end, [1,2,3,4])."},
             {text,"\f \n1\n2\n3\n4\nok"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\b## foldl"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[7,42,102,111,108,100,108,42]},
             {sep,
              [{text,
                "=takes a function of two arguments, an accumulator and a list:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "[\n\nfoldl(F, Accu, [Hd|Tail]) ->\n    foldl(F, F(Hd, Accu), Tail);\nfoldl(F, Accu, []) -> Accu."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "Ã­The function is called with two arguments. The first argument is the successive elements in the list. The second argument is the accumulator. The function must return a new accumulator, which is used the next time the function is called."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\eIf you have a list of lists"}],0,false},
             {text,"\e*L = [\"I\",\"like\",\"Erlang\"]*"},
             {sep,
              [{text,"4, then you can sum the lengths of all the strings in"}],
              0,false},
             {text,[3,42,76,42]},
             {sep,[{text,"\vas follows:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,
              [26,76,32,61,32,91,34,73,34,44,34,108,105,107,101,34,44,34,69,
               114,108,97,110,103,34,93,46]},
             {text,"\e\n[\"I\",\"like\",\"Erlang\"]\n10> "},
             {text,"6lists:foldl(fun(X, Sum) -> length(X) + Sum end, 0, L)."},
             {text,
              [23,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               10,49,49]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[7,42,102,111,108,100,108,42]},
             {sep,[{text,"\fworks like a"}],0,false},
             {text,[7,42,119,104,105,108,101,42]},
             {sep,
              [{text,
                [31,108,111,111,112,32,105,110,32,97,110,32,105,109,112,101,
                 114,97,116,105,118,101,32,108,97,110,103,117,97,103,101,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "f\nL =  [\"I\",\"like\",\"Erlang\"],\nSum = 0,\nwhile( L != []){\n    Sum += length(head(L)),\n    L = tail(L)\nend"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\v## mapfoldl"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\n*mapfoldl*"},
             {sep,
              [{text,"*simultaneously maps and folds over a list:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "Â¥\n\nmapfoldl(F, Accu0, [Hd|Tail]) ->\n    {R,Accu1} = F(Hd, Accu0),\n    {Rs,Accu2} = mapfoldl(F, Accu1, Tail),\n    {[R|Rs], Accu2};\nmapfoldl(F, Accu, []) -> {[], Accu}."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "8The following example shows how to change all letters in"}],
              0,false},
             {text,[3,42,76,42]},
             {sep,[{text,"\"to upper case and then count them."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [31,70,105,114,115,116,32,116,104,101,32,99,104,97,110,103,101,
               32,116,111,32,117,112,112,101,114,32,99,97,115,101,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,"7Upcase =  fun(X) when $a =< X,  X =< $z -> X + $A - $a;"},
             {text,[1,10]},
             {text,"\b(X) -> X"},
             {text,[2,32,10]},
             {text,[4,101,110,100,46]},
             {text,[5,10,35,70,117,110]},
             {text,
              [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,48,
               51,49]},
             {text,[4,62,10,62,32]},
             {text,"\rUpcase_word ="},
             {text,[2,32,10]},
             {text,"\tfun(X) ->"},
             {text,[2,32,10]},
             {text,
              [20,108,105,115,116,115,58,109,97,112,40,85,112,99,97,115,101,
               44,32,88,41]},
             {text,[2,32,10]},
             {text,[4,101,110,100,46]},
             {text,[5,10,35,70,117,110]},
             {text,
              [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,48,
               51,49]},
             {text,[4,62,10,62,32]},
             {text,
              [22,85,112,99,97,115,101,95,119,111,114,100,40,34,69,114,108,97,
               110,103,34,41,46]},
             {text,"\f\n\"ERLANG\"\n> "},
             {text,
              [26,108,105,115,116,115,58,109,97,112,40,85,112,99,97,115,101,
               95,119,111,114,100,44,32,76,41,46]},
             {text,
              [22,10,91,34,73,34,44,34,76,73,75,69,34,44,34,69,82,76,65,78,71,
               34,93]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "7Now, the fold and the map can be done at the same time:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text," lists:mapfoldl(fun(Word, Sum) ->"},
             {text,[1,10]},
             {text,"'{Upcase_word(Word), Sum + length(Word)}"},
             {text,[1,10]},
             {text,"\vend, 0, L)."},
             {text,"\e\n{[\"I\",\"LIKE\",\"ERLANG\"],11}"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\t## filter"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\b*filter*"},
             {sep,
              [{text,
                "mtakes a predicate of one argument and a list and returns all elements in the list that satisfy the predicate:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [133,10,10,102,105,108,116,101,114,40,70,44,32,91,72,124,84,93,
               41,32,45,62,10,32,32,32,32,99,97,115,101,32,70,40,72,41,32,111,
               102,10,32,32,32,32,32,32,32,32,116,114,117,101,32,32,45,62,32,
               91,72,124,102,105,108,116,101,114,40,70,44,32,84,41,93,59,10,
               32,32,32,32,32,32,32,32,102,97,108,115,101,32,45,62,32,102,105,
               108,116,101,114,40,70,44,32,84,41,10,32,32,32,32,101,110,100,
               59,10,102,105,108,116,101,114,40,70,44,32,91,93,41,32,45,62,32,
               91,93,46]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,"%lists:filter(Big, [500,12,2,45,6,7])."},
             {text,"\f\n[500,12,45]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "rCombining maps and filters enables writing of very succinct code. For example, to define a set difference function"}],
              0,false},
             {text,[14,42,100,105,102,102,40,76,49,44,32,76,50,41,42]},
             {sep,[{text,"&to be the difference between the lists"}],0,false},
             {text,[4,42,76,49,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[4,42,76,50,42]},
             {sep,[{text,"%, the code can be written as follows:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "B\ndiff(L1, L2) -> \n    filter(fun(X) -> not member(X, L2) end, L1)."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "GThis gives the list of all elements in L1 that are not contained in L2."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text," The AND intersection of the list"}],0,false},
             {text,[4,42,76,49,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[4,42,76,50,42]},
             {sep,
              [{text,
                [23,105,115,32,97,108,115,111,32,101,97,115,105,108,121,32,
                 100,101,102,105,110,101,100,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "?\nintersection(L1,L2) -> filter(fun(X) -> member(X,L1) end, L2)."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\f## takewhile"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [17,42,116,97,107,101,119,104,105,108,101,40,80,44,32,76,41,42]},
             {sep,
              [{text,
                [14,116,97,107,101,115,32,101,108,101,109,101,110,116,115]}],
              0,false},
             {text,[3,42,88,42]},
             {sep,[{text,"\vfrom a list"}],0,false},
             {text,[3,42,76,42]},
             {sep,
              [{text,
                [24,97,115,32,108,111,110,103,32,97,115,32,116,104,101,32,112,
                 114,101,100,105,99,97,116,101]}],
              0,false},
             {text,[6,42,80,40,88,41,42]},
             {sep,[{text,"\bis true:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [148,10,10,116,97,107,101,119,104,105,108,101,40,80,114,101,100,
               44,32,91,72,124,84,93,41,32,45,62,10,32,32,32,32,99,97,115,101,
               32,80,114,101,100,40,72,41,32,111,102,10,32,32,32,32,32,32,32,
               32,116,114,117,101,32,32,45,62,32,91,72,124,116,97,107,101,119,
               104,105,108,101,40,80,114,101,100,44,32,84,41,93,59,10,32,32,
               32,32,32,32,32,32,102,97,108,115,101,32,45,62,32,91,93,10,32,
               32,32,32,101,110,100,59,10,116,97,107,101,119,104,105,108,101,
               40,80,114,101,100,44,32,91,93,41,32,45,62,10,32,32,32,32,91,93,
               46]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,",lists:takewhile(Big, [200,500,45,5,3,45,6])."},
             {text,[15,32,32,10,91,50,48,48,44,53,48,48,44,52,53,93]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\f## dropwhile"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\v*dropwhile*"},
             {sep,
              [{text,
                [20,105,115,32,116,104,101,32,99,111,109,112,108,101,109,101,
                 110,116,32,111,102]}],
              0,false},
             {text,"\v*takewhile*"},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [147,10,10,100,114,111,112,119,104,105,108,101,40,80,114,101,
               100,44,32,91,72,124,84,93,41,32,45,62,10,32,32,32,32,99,97,115,
               101,32,80,114,101,100,40,72,41,32,111,102,10,32,32,32,32,32,32,
               32,32,116,114,117,101,32,32,45,62,32,100,114,111,112,119,104,
               105,108,101,40,80,114,101,100,44,32,84,41,59,10,32,32,32,32,32,
               32,32,32,102,97,108,115,101,32,45,62,32,91,72,124,84,93,10,32,
               32,32,32,101,110,100,59,10,100,114,111,112,119,104,105,108,101,
               40,80,114,101,100,44,32,91,93,41,32,45,62,10,32,32,32,32,91,93,
               46]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,",lists:dropwhile(Big, [200,500,45,5,3,45,6])."},
             {text,"\v\n[5,3,45,6]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\f## splitwith"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [17,42,115,112,108,105,116,119,105,116,104,40,80,44,32,76,41,
               42]},
             {sep,
              [{text,
                [15,115,112,108,105,116,115,32,116,104,101,32,108,105,115,
                 116]}],
              0,false},
             {text,[3,42,76,42]},
             {sep,
              [{text,
                [21,105,110,116,111,32,116,104,101,32,116,119,111,32,115,117,
                 98,108,105,115,116,115]}],
              0,false},
             {text,"\n*{L1, L2}*"},
             {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
             {text,
              [21,42,76,32,61,32,116,97,107,101,119,104,105,108,101,40,80,44,
               32,76,41,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [22,42,76,50,32,61,32,100,114,111,112,119,104,105,108,101,40,80,
               44,32,76,41,42]},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "Ã°\n\nsplitwith(Pred, L) ->\n    splitwith(Pred, L, []).\n\nsplitwith(Pred, [H|T], L) ->\n    case Pred(H) of \n        true  -> splitwith(Pred, T, [H|L]);\n        false -> {reverse(L), [H|T]}\n    end;\nsplitwith(Pred, [], L) ->\n    {reverse(L), []}."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[3,10,62,32]},
             {text,",lists:splitwith(Big, [200,500,45,5,3,45,6])."},
             {text,
              [26,10,123,91,50,48,48,44,53,48,48,44,52,53,93,44,91,53,44,51,
               44,52,53,44,54,93,125]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [22,35,35,32,70,117,110,115,32,82,101,116,117,114,110,105,110,103,32,
        70,117,110,115]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "ÃSo far, only functions that take funs as arguments have been described. More powerful functions, that themselves return funs, can also be written. The following examples illustrate these type of functions."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text," ## Simple Higher Order Functions"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\n*Adder(X)*"},
            {sep,
             [{text,
               [24,105,115,32,97,32,102,117,110,99,116,105,111,110,32,116,104,
                97,116,32,103,105,118,101,110]}],
             0,false},
            {text,[3,42,88,42]},
            {sep,
             [{text,
               [24,44,32,114,101,116,117,114,110,115,32,97,32,110,101,119,32,
                102,117,110,99,116,105,111,110]}],
             0,false},
            {text,[3,42,71,42]},
            {sep,[{text,"\tsuch that"}],0,false},
            {text,[6,42,71,40,75,41,42]},
            {sep,[{text,[7,114,101,116,117,114,110,115]}],0,false},
            {text,[7,42,75,32,43,32,88,42]},
            {sep,[{text,[1,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[3,10,62,32]},
            {text,"*Adder = fun(X) -> fun(Y) -> X + Y end end."},
            {text,[5,10,35,70,117,110]},
            {text,
             [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,48,
              51,49]},
            {text,[4,62,10,62,32]},
            {text,[16,65,100,100,54,32,61,32,65,100,100,101,114,40,54,41,46]},
            {text,[5,10,35,70,117,110]},
            {text,
             [20,60,101,114,108,95,101,118,97,108,46,54,46,55,50,50,50,56,48,
              51,49]},
            {text,[4,62,10,62,32]},
            {text,"\tAdd6(10)."},
            {text,[3,10,49,54]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [17,35,35,32,73,110,102,105,110,105,116,101,32,76,105,115,116,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"$The idea is to write something like:"}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "l\n-module(lazy).\n-export([ints_from/1]).\nints_from(N) ->\n    fun() ->\n            [N|ints_from(N+1)]\n    end."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [24,84,104,101,110,32,112,114,111,99,101,101,100,32,97,115,32,
              102,111,108,108,111,119,115,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[3,10,62,32]},
            {text,
             [23,88,88,32,61,32,108,97,122,121,58,105,110,116,115,95,102,114,
              111,109,40,49,41,46]},
            {text,[5,10,35,70,117,110]},
            {text,[16,60,108,97,122,121,46,48,46,50,57,56,55,52,56,51,57]},
            {text,[4,62,10,62,32]},
            {text,[5,88,88,40,41,46]},
            {text,"\b\n[1|#Fun"},
            {text,[16,60,108,97,122,121,46,48,46,50,57,56,55,52,56,51,57]},
            {text,[5,62,93,10,62,32]},
            {text,"\thd(XX())."},
            {text,[5,10,49,10,62,32]},
            {text,"\rY = tl(XX())."},
            {text,[5,10,35,70,117,110]},
            {text,[16,60,108,97,122,121,46,48,46,50,57,56,55,52,56,51,57]},
            {text,[4,62,10,62,32]},
            {text,"\bhd(Y())."},
            {text,[2,10,50]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"2And so on. This is an example of \"lazy embedding\"."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\n## Parsing"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             ":The following examples show parsers of the following type:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,[{text,")\nParser(Toks) -> {ok, Tree, Toks1} | fail"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,[6,42,84,111,107,115,42]},
            {sep,
             [{text,
               ">is the list of tokens to be parsed. A successful parse returns"}],
             0,false},
            {text,
             [19,42,123,111,107,44,32,84,114,101,101,44,32,84,111,107,115,49,
              125,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[6,42,84,114,101,101,42]},
          {sep,
           [{text,
             [16,105,115,32,97,32,112,97,114,115,101,32,116,114,101,101,46]}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[7,42,84,111,107,115,49,42]},
          {sep,[{text,"\fis a tail of"}],0,false},
          {text,[6,42,84,114,101,101,42]},
          {sep,
           [{text,
             "Pthat contains symbols encountered after the structure that was correctly parsed."}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,65,110,32,117,110,115,117,99,99,101,115,115,102,117,108,32,
                112,97,114,115,101,32,114,101,116,117,114,110,115]}],
             0,false},
            {text,[6,42,102,97,105,108,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "VThe following example illustrates a simple, functional parser that parses the grammar:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [18,10,40,97,32,124,32,98,41,32,38,32,40,99,32,124,32,100,41]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"%The following code defines a function"}],0,false},
            {text,"\v*pconst(X)*"},
            {sep,[{text,"\rin the module"}],0,false},
            {text,"\n*funparse*"},
            {sep,
             [{text,"3, which returns a fun that parses a list of tokens:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [135,10,10,112,99,111,110,115,116,40,88,41,32,45,62,10,32,32,32,
              32,102,117,110,32,40,84,41,32,45,62,10,32,32,32,32,32,32,32,99,
              97,115,101,32,84,32,111,102,10,32,32,32,32,32,32,32,32,32,32,32,
              91,88,124,84,49,93,32,45,62,32,123,111,107,44,32,123,99,111,110,
              115,116,44,32,88,125,44,32,84,49,125,59,10,32,32,32,32,32,32,32,
              32,32,32,32,95,32,32,32,32,32,32,45,62,32,102,97,105,108,10,32,
              32,32,32,32,32,32,101,110,100,10,32,32,32,32,101,110,100,46]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"%This function can be used as follows:"}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[3,10,62,32]},
            {text,
             [24,80,49,32,61,32,102,117,110,112,97,114,115,101,58,112,99,111,
              110,115,116,40,97,41,46]},
            {text,[5,10,35,70,117,110]},
            {text,
             [20,60,102,117,110,112,97,114,115,101,46,48,46,50,50,54,55,52,48,
              55,53]},
            {text,[4,62,10,62,32]},
            {text,"\fP1([a,b,c])."},
            {text,
             [24,10,123,111,107,44,123,99,111,110,115,116,44,97,125,44,91,98,
              44,99,93,125,10,62,32]},
            {text,"\fP1([x,y,z])."},
            {text,"\n     \nfail"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"$Next, the two higher order functions"}],0,false},
            {text,[6,42,112,97,110,100,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[5,42,112,111,114,42]},
            {sep,
             [{text,
               "Lare defined. They combine primitive parsers to produce more complex parsers."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[5,70,105,114,115,116]}],0,false},
            {text,[6,42,112,97,110,100,42]},
            {sep,[{text,[1,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [336,10,10,112,97,110,100,40,80,49,44,32,80,50,41,32,45,62,10,32,
              32,32,32,102,117,110,32,40,84,41,32,45,62,10,32,32,32,32,32,32,
              32,32,99,97,115,101,32,80,49,40,84,41,32,111,102,10,32,32,32,32,
              32,32,32,32,32,32,32,32,123,111,107,44,32,82,49,44,32,84,49,125,
              32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,
              97,115,101,32,80,50,40,84,49,41,32,111,102,10,32,32,32,32,32,32,
              32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,111,107,44,32,82,
              50,44,32,84,50,125,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,32,32,32,32,32,32,32,123,111,107,44,32,123,39,
              97,110,100,39,44,32,82,49,44,32,82,50,125,125,59,10,32,32,32,32,
              32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,97,105,108,
              32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,32,102,97,105,108,10,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,32,32,101,110,100,59,10,32,32,32,32,32,32,32,
              32,32,32,32,32,102,97,105,108,32,45,62,10,32,32,32,32,32,32,32,
              32,32,32,32,32,32,32,32,32,102,97,105,108,10,32,32,32,32,32,32,
              32,32,101,110,100,10,32,32,32,32,101,110,100,46]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,[14,71,105,118,101,110,32,97,32,112,97,114,115,101,114]}],
             0,false},
            {text,[4,42,80,49,42]},
            {sep,[{text,"\vfor grammar"}],0,false},
            {text,[4,42,71,49,42]},
            {sep,
             [{text,[14,44,32,97,110,100,32,97,32,112,97,114,115,101,114]}],
             0,false},
            {text,[4,42,80,50,42]},
            {sep,[{text,"\vfor grammar"}],0,false},
            {text,[4,42,71,50,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,[14,42,112,97,110,100,40,80,49,44,32,80,50,41,42]},
            {sep,
             [{text,
               "Treturns a parser for the grammar, which consists of sequences of tokens that satisfy"}],
             0,false},
            {text,[4,42,71,49,42]},
            {sep,
             [{text,"., followed by sequences of tokens that satisfy"}],
             0,false},
            {text,[4,42,71,50,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\r*por(P1, P2)*"},
            {sep,
             [{text,
               ":returns a parser for the language described by the grammar"}],
             0,false},
            {text,[4,42,71,49,42]},
            {sep,[{text,[2,111,114]}],0,false},
            {text,[4,42,71,50,42]},
            {sep,[{text,[1,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [351,10,10,112,111,114,40,80,49,44,32,80,50,41,32,45,62,10,32,32,
              32,32,102,117,110,32,40,84,41,32,45,62,10,32,32,32,32,32,32,32,
              32,99,97,115,101,32,80,49,40,84,41,32,111,102,10,32,32,32,32,32,
              32,32,32,32,32,32,32,123,111,107,44,32,82,44,32,84,49,125,32,45,
              62,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,
              111,107,44,32,123,39,111,114,39,44,49,44,82,125,44,32,84,49,125,
              59,10,32,32,32,32,32,32,32,32,32,32,32,32,102,97,105,108,32,45,
              62,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,
              115,101,32,80,50,40,84,41,32,111,102,10,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,32,32,32,32,32,32,123,111,107,44,32,82,49,44,
              32,84,49,125,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,32,32,32,32,32,123,111,107,44,32,123,39,111,
              114,39,44,50,44,82,49,125,44,32,84,49,125,59,10,32,32,32,32,32,
              32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,97,105,108,32,
              45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,102,97,105,108,10,32,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,101,
              110,100,10,32,32,32,32,101,110,100,46]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"-The original problem was to parse the grammar"}],
             0,false},
            {text,
             [19,42,40,97,32,124,32,98,41,32,38,32,40,99,32,124,32,100,41,42]},
            {sep,
             [{text,",. The following code addresses this problem:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "a\n\ngrammar() ->\n    pand(\n         por(pconst(a), pconst(b)),\n         por(pconst(c), pconst(d)))."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             ":The following code adds a parser interface to the grammar:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,[{text,"'\n\nparse(List) ->\n    (grammar())(List)."}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"$The parser can be tested as follows:"}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[3,10,62,32]},
            {text,
             [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,91,
              97,44,99,93,41,46]},
            {text,"6\n{ok,{'and',{'or',1,{const,a}},{'or',1,{const,c}}}}\n> "},
            {text,
             [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,91,
              97,44,100,93,41,46]},
            {text,
             "7 \n{ok,{'and',{'or',1,{const,a}},{'or',2,{const,d}}}}\n> "},
            {text,
             [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,91,
              98,44,99,93,41,46]},
            {text,
             "9   \n{ok,{'and',{'or',2,{const,b}},{'or',1,{const,c}}}}\n> "},
            {text,
             [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,91,
              98,44,100,93,41,46]},
            {text,
             "7 \n{ok,{'and',{'or',2,{const,b}},{'or',2,{const,d}}}}\n> "},
            {text,
             [22,102,117,110,112,97,114,115,101,58,112,97,114,115,101,40,91,
              97,44,98,93,41,46]},
            {text,"\b   \nfail"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false}],
  0,false}}
