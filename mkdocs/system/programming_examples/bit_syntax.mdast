{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\f# Bit Syntax"},null},null}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,[15,35,35,32,73,110,116,114,111,100,117,99,116,105,111,110]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "<The complete specification for the bit syntax appears in the"}],
                 0,false},
                {text,
                 "B[Reference Manual](../doc/reference_manual/expressions#bit_syntax)"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "|In Erlang, a Bin is used for constructing binaries and matching binary patterns. A Bin is written with the following syntax:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [25,10,32,32,32,32,32,32,60,60,69,49,44,32,69,50,44,32,46,46,
                  46,32,69,110,62,62]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "kA Bin is a low-level sequence of bits or bytes. The purpose of a Bin is to enable construction of binaries:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [25,10,66,105,110,32,61,32,60,60,69,49,44,32,69,50,44,32,46,
                  46,46,32,69,110,62,62]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,".All elements must be bound. Or match a binary:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [26,10,60,60,69,49,44,32,69,50,44,32,46,46,46,32,69,110,62,
                  62,32,61,32,66,105,110,32]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[5,72,101,114,101,44]}],0,false},
                {text,[5,42,66,105,110,42]},
                {sep,
                 [{text,
                   "@is bound and the elements are bound or unbound, as in any match."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 ":A Bin does not need to consist of a whole number of bytes."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[1,65]}],0,false},
                {text,"\r**bitstring**"},
                {sep,
                 [{text,
                   "©is a sequence of zero or more bits, where the number of bits does not need to be divisible by 8. If the number of bits is divisible by 8, the bitstring is also a binary."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text," Each element specifies a certain"}],0,false},
                {text,"\v**segment**"},
                {sep,
                 [{text,
                   "Ûof the bitstring. A segment is a set of contiguous bits of the binary (not necessarily on a byte boundary). The first element specifies the initial segment, the second element specifies the following segment, and so on."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "uThe following examples illustrate how binaries are constructed, or matched, and how elements and tails are specified."}],
               0,false}],
             0,true},
            null},
           null}},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,{above,{text,"\v## Examples"},null},null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,[14,42,42,69,120,97,109,112,108,101,32,49,58,42,42]},
                  {sep,
                   [{text,
                     "HA binary can be constructed from a set of constants or a string literal:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,")\nBin11 = <<1, 17, 42>>,\nBin12 = <<\"abc\">>"}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "BThis gives two binaries of size 3, with the following evaluations:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [23,42,98,105,110,97,114,121,95,116,111,95,108,105,115,116,
                  40,66,105,110,49,49,41,42]},
                {sep,[{text,"\fevaluates to"}],0,false},
                {text,"\r*[1, 17, 42]*"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [23,42,98,105,110,97,114,121,95,116,111,95,108,105,115,116,
                  40,66,105,110,49,50,41,42]},
                {sep,[{text,"\fevaluates to"}],0,false},
                {text,[14,42,91,57,55,44,32,57,56,44,32,57,57,93,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,[14,42,42,69,120,97,109,112,108,101,32,50,58,42,42]},
                  {sep,
                   [{text,
                     "ESimilarly, a binary can be constructed from a set of bound variables:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,"-\nA = 1, B = 17, C = 42,\nBin2 = <<A, B, C:16>>"}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,"&This gives a binary of size 4. Here, a"}],
                   0,false},
                  {text,
                   [19,42,42,115,105,122,101,32,101,120,112,114,101,115,115,
                    105,111,110,42,42]},
                  {sep,
                   [{text,
                     [24,105,115,32,117,115,101,100,32,102,111,114,32,116,104,
                      101,32,118,97,114,105,97,98,108,101]}],
                   0,false},
                  {text,[3,42,67,42]},
                  {sep,
                   [{text,
                     [31,116,111,32,115,112,101,99,105,102,121,32,97,32,49,54,
                      45,98,105,116,115,32,115,101,103,109,101,110,116,32,111,
                      102]}],
                   0,false},
                  {text,[6,42,66,105,110,50,42]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [22,42,98,105,110,97,114,121,95,116,111,95,108,105,115,116,
                    40,66,105,110,50,41,42]},
                  {sep,[{text,"\fevaluates to"}],0,false},
                  {text,
                   [17,42,91,49,44,32,49,55,44,32,48,48,44,32,52,50,93,42]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,[14,42,42,69,120,97,109,112,108,101,32,51,58,42,42]},
                  {sep,
                   [{text,"$A Bin can also be used for matching."}],
                   0,false},
                  {text,[3,42,68,42]},
                  {sep,[{text,[1,44]}],0,false},
                  {text,[3,42,69,42]},
                  {sep,[{text,[5,44,32,97,110,100]}],0,false},
                  {text,[3,42,70,42]},
                  {sep,
                   [{text,
                     [26,97,114,101,32,117,110,98,111,117,110,100,32,118,97,
                      114,105,97,98,108,101,115,44,32,97,110,100]}],
                   0,false},
                  {text,[6,42,66,105,110,50,42]},
                  {sep,
                   [{text,
                     [26,105,115,32,98,111,117,110,100,44,32,97,115,32,105,
                      110,32,69,120,97,109,112,108,101,32,50,58]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   [29,10,60,60,68,58,49,54,44,32,69,44,32,70,47,98,105,110,
                    97,114,121,62,62,32,61,32,66,105,110,50]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\nThis gives"}],0,false},
                  {text,"\t*D = 273*"},
                  {sep,[{text,[1,44]}],0,false},
                  {text,"\b*E = 00*"},
                  {sep,
                   [{text,"$, and F binds to a binary of size 1:"}],
                   0,false},
                  {text,
                   [26,42,98,105,110,97,114,121,95,116,111,95,108,105,115,116,
                    40,70,41,32,61,32,91,52,50,93,42]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,[14,42,42,69,120,97,109,112,108,101,32,52,58,42,42]},
                  {sep,
                   [{text,
                     "<The following is a more elaborate example of matching. Here,"}],
                   0,false},
                  {text,[7,42,68,103,114,97,109,42]},
                  {sep,
                   [{text,
                     [145,105,115,32,98,111,117,110,100,32,116,111,32,116,104,
                      101,32,99,111,110,115,101,99,117,116,105,118,101,32,98,
                      121,116,101,115,32,111,102,32,97,110,32,73,80,32,100,97,
                      116,97,103,114,97,109,32,111,102,32,73,80,32,112,114,
                      111,116,111,99,111,108,32,118,101,114,115,105,111,110,
                      32,52,46,32,84,104,101,32,97,109,98,105,116,105,111,110,
                      32,105,115,32,116,111,32,101,120,116,114,97,99,116,32,
                      116,104,101,32,104,101,97,100,101,114,32,97,110,100,32,
                      116,104,101,32,100,97,116,97,32,111,102,32,116,104,101,
                      32,100,97,116,97,103,114,97,109,58]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   [423,10,45,100,101,102,105,110,101,40,73,80,95,86,69,82,83,
                    73,79,78,44,32,52,41,46,10,45,100,101,102,105,110,101,40,
                    73,80,95,77,73,78,95,72,68,82,95,76,69,78,44,32,53,41,46,
                    10,10,68,103,114,97,109,83,105,122,101,32,61,32,98,121,
                    116,101,95,115,105,122,101,40,68,103,114,97,109,41,44,10,
                    99,97,115,101,32,68,103,114,97,109,32,111,102,32,10,32,32,
                    32,32,60,60,63,73,80,95,86,69,82,83,73,79,78,58,52,44,32,
                    72,76,101,110,58,52,44,32,83,114,118,99,84,121,112,101,58,
                    56,44,32,84,111,116,76,101,110,58,49,54,44,32,10,32,32,32,
                    32,32,32,73,68,58,49,54,44,32,70,108,103,115,58,51,44,32,
                    70,114,97,103,79,102,102,58,49,51,44,10,32,32,32,32,32,32,
                    84,84,76,58,56,44,32,80,114,111,116,111,58,56,44,32,72,
                    100,114,67,104,107,83,117,109,58,49,54,44,10,32,32,32,32,
                    32,32,83,114,99,73,80,58,51,50,44,10,32,32,32,32,32,32,68,
                    101,115,116,73,80,58,51,50,44,32,82,101,115,116,68,103,
                    114,97,109,47,98,105,110,97,114,121,62,62,32,119,104,101,
                    110,32,72,76,101,110,62,61,53,44,32,52,42,72,76,101,110,
                    61,60,68,103,114,97,109,83,105,122,101,32,45,62,10,32,32,
                    32,32,32,32,32,32,79,112,116,115,76,101,110,32,61,32,52,
                    42,40,72,76,101,110,32,45,32,63,73,80,95,77,73,78,95,72,
                    68,82,95,76,69,78,41,44,10,32,32,32,32,32,32,32,32,60,60,
                    79,112,116,115,58,79,112,116,115,76,101,110,47,98,105,110,
                    97,114,121,44,68,97,116,97,47,98,105,110,97,114,121,62,62,
                    32,61,32,82,101,115,116,68,103,114,97,109,44,10,32,32,32,
                    32,46,46,46,10,101,110,100,46]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,"&Here, the segment corresponding to the"}],
                   0,false},
                  {text,[6,42,79,112,116,115,42]},
                  {sep,
                   [{text,
                     [14,118,97,114,105,97,98,108,101,32,104,97,115,32,97]}],
                   0,false},
                  {text,
                   [17,42,42,116,121,112,101,32,109,111,100,105,102,105,101,
                    114,42,42]},
                  {sep,
                   [{text,
                     [17,44,32,115,112,101,99,105,102,121,105,110,103,32,116,
                      104,97,116]}],
                   0,false},
                  {text,[6,42,79,112,116,115,42]},
                  {sep,
                   [{text,
                     "\\is to bind to a binary. All other variables have the default type equal to unsigned integer."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [143,65,110,32,73,80,32,100,97,116,97,103,114,97,109,32,
                      104,101,97,100,101,114,32,105,115,32,111,102,32,118,97,
                      114,105,97,98,108,101,32,108,101,110,103,116,104,46,32,
                      84,104,105,115,32,108,101,110,103,116,104,32,105,115,32,
                      109,101,97,115,117,114,101,100,32,105,110,32,116,104,
                      101,32,110,117,109,98,101,114,32,111,102,32,51,50,45,98,
                      105,116,32,119,111,114,100,115,32,97,110,100,32,105,115,
                      32,103,105,118,101,110,32,105,110,32,116,104,101,32,115,
                      101,103,109,101,110,116,32,99,111,114,114,101,115,112,
                      111,110,100,105,110,103,32,116,111]}],
                   0,false},
                  {text,[6,42,72,76,101,110,42]},
                  {sep,
                   [{text,
                     [22,46,32,84,104,101,32,109,105,110,105,109,117,109,32,
                      118,97,108,117,101,32,111,102]}],
                   0,false},
                  {text,[6,42,72,76,101,110,42]},
                  {sep,
                   [{text,"(is 5. It is the segment corresponding to"}],
                   0,false},
                  {text,[6,42,79,112,116,115,42]},
                  {sep,
                   [{text,
                     [23,116,104,97,116,32,105,115,32,118,97,114,105,97,98,
                      108,101,44,32,115,111,32,105,102]}],
                   0,false},
                  {text,[6,42,72,76,101,110,42]},
                  {sep,
                   [{text,
                     [14,105,115,32,101,113,117,97,108,32,116,111,32,53,44]}],
                   0,false},
                  {text,[6,42,79,112,116,115,42]},
                  {sep,
                   [{text,
                     [24,98,101,99,111,109,101,115,32,97,110,32,101,109,112,
                      116,121,32,98,105,110,97,114,121,46]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [18,84,104,101,32,116,97,105,108,32,118,97,114,105,97,98,
                      108,101,115]}],
                   0,false},
                  {text,"\v*RestDgram*"},
                  {sep,[{text,[3,97,110,100]}],0,false},
                  {text,[6,42,68,97,116,97,42]},
                  {sep,
                   [{text,
                     "Lbind to binaries, as all tail variables do. Both can bind to empty binaries."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\fThe match of"}],0,false},
                  {text,[7,42,68,103,114,97,109,42]},
                  {sep,
                   [{text,"%fails if one of the following occurs:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,"\eThe first 4-bits segment of"}],0,false},
                 {text,[7,42,68,103,114,97,109,42]},
                 {sep,
                  [{text,
                    [18,105,115,32,110,111,116,32,101,113,117,97,108,32,116,
                     111,32,52,46]}],
                  0,false}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,[6,42,72,76,101,110,42]},
                 {sep,
                  [{text,
                    [15,105,115,32,108,101,115,115,32,116,104,97,110,32,53,
                     46]}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\vThe size of"}],0,false},
                {text,[7,42,68,103,114,97,109,42]},
                {sep,[{text,"\fis less than"}],0,false},
                {text,"\b*4*HLen*"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false}}],
          0,false}],
        0,false}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,[15,35,35,32,76,101,120,105,99,97,108,32,78,111,116,101]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,"\rNotice that \""}],0,false},
               {text,"\t*B=<<1>>*"},
               {sep,
                [{text,
                  [26,34,32,119,105,108,108,32,98,101,32,105,110,116,101,114,
                   112,114,101,116,101,100,32,97,115,32,34]}],
                0,false},
               {text,"\v*B =< <1>>*"},
               {sep,
                [{text,
                  "G\", which is a syntax error. The correct way to write the expression is:"}],
                0,false},
               {text,"\v*B = <<1>>*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\v## Segments"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,".Each segment has the following general syntax:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [30,42,86,97,108,117,101,58,83,105,122,101,47,84,121,112,101,
                83,112,101,99,105,102,105,101,114,76,105,115,116,42]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,[6,42,83,105,122,101,42]},
              {sep,[{text,[6,111,114,32,116,104,101]}],0,false},
              {text,
               [15,42,84,121,112,101,83,112,101,99,105,102,105,101,114,42]},
              {sep,
               [{text,
                 "D, or both, can be omitted. Thus, the following variants are allowed:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {sep,[{text,[1,42]},{text,[7,42,86,97,108,117,101,42]}],0,false},
         {sep,[{text,[1,42]},{text,"\f*Value:Size*"}],0,false}},
        {sep,
         [{text,[1,42]},
          {text,
           [25,42,86,97,108,117,101,47,84,121,112,101,83,112,101,99,105,102,
            105,101,114,76,105,115,116,42]}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "\\Default values are used when specifications are missing. The default values are described in"}],
               0,false},
              {text,
               [21,91,68,101,102,97,117,108,116,115,93,40,35,68,101,102,97,
                117,108,116,115,41]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,[7,42,86,97,108,117,101,42]},
              {sep,
               [{text,
                 "Vpart is any expression, when used in binary construction. Used in binary matching, the"}],
               0,false},
              {text,[7,42,86,97,108,117,101,42]},
              {sep,
               [{text,
                 "Dpart must be a literal or a variable. For more information about the"}],
               0,false},
              {text,[7,42,86,97,108,117,101,42]},
              {sep,[{text,"\tpart, see"}],0,false},
              {text,
               "M[Constructing Binaries and Bitstrings](#Constructing Binaries and Bitstrings)"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"'[Matching Binaries](#Matching Binaries)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,[6,42,83,105,122,101,42]},
              {sep,
               [{text,"-part of the segment multiplied by the unit in"}],
               0,false},
              {text,
               [19,42,84,121,112,101,83,112,101,99,105,102,105,101,114,76,105,
                115,116,42]},
              {sep,
               [{text,
                 "L(described later) gives the number of bits for the segment. In construction,"}],
               0,false},
              {text,[6,42,83,105,122,101,42]},
              {sep,
               [{text,
                 "<is any expression that evaluates to an integer. In matching,"}],
               0,false},
              {text,[6,42,83,105,122,101,42]},
              {sep,
               [{text,",must be a constant expression or a variable."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,
               [19,42,84,121,112,101,83,112,101,99,105,102,105,101,114,76,105,
                115,116,42]},
              {sep,
               [{text,"2is a list of type specifiers separated by hyphens."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {text,[4,60,100,108,62]},
         {nest,4,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,116,62]},
                      {sep,[{text,[4,84,121,112,101]}],0,false},
                      {text,[5,60,47,100,116,62]}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {sep,
                       [{sep,
                         [{text," The most commonly used types are"}],
                         0,false},
                        {text,[7,105,110,116,101,103,101,114]},
                        {sep,[{text,[1,44]}],0,false},
                        {text,[5,102,108,111,97,116]},
                        {sep,[{text,[5,44,32,97,110,100]}],0,false},
                        {text,[6,98,105,110,97,114,121]},
                        {sep,[{text,[5,46,32,83,101,101]}],0,false},
                        {text,
                         ".Bit Syntax Expressions in the Reference Manual"},
                        {sep,
                         [{text,"\efor a complete description."}],
                         0,false}],
                       0,false},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,[{text,"\nSignedness"}],0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {sep,
                     [{sep,
                       [{text,"*The signedness specification can be either"}],
                       0,false},
                      {text,[6,115,105,103,110,101,100]},
                      {sep,[{text,[2,111,114]}],0,false},
                      {text,"\bunsigned"},
                      {sep,
                       [{text,
                         "3. Notice that signedness only matters for matching."}],
                       0,false}],
                     0,false},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,"\nEndianness"}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {sep,
                   [{sep,
                     [{text,"*The endianness specification can be either"}],
                     0,false},
                    {text,[3,98,105,103]},
                    {sep,[{text,[1,44]}],0,false},
                    {text,[6,108,105,116,116,108,101]},
                    {sep,[{text,[4,44,32,111,114]}],0,false},
                    {text,[6,110,97,116,105,118,101]},
                    {sep,
                     [{text,
                       "¶. Native-endian means that the endian is resolved at load time, to be either big-endian or little-endian, depending on what is \"native\" for the CPU that the Erlang machine is run on."}],
                     0,false}],
                   0,false},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[{text,[4,85,110,105,116]}],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {sep,
                 [{sep,
                   [{text,
                     [25,84,104,101,32,117,110,105,116,32,115,105,122,101,32,
                      105,115,32,103,105,118,101,110,32,97,115]}],
                   0,false},
                  {text,
                   [19,117,110,105,116,58,73,110,116,101,103,101,114,76,105,
                    116,101,114,97,108]},
                  {sep,
                   [{text,
                     "5. The allowed range is 1-256. It is multiplied by the"}],
                   0,false},
                  {text,[4,83,105,122,101]},
                  {sep,
                   [{text,
                     "|specifier to give the effective size of the segment. The unit size specifies the alignment for binary segments without size."}],
                   0,false}],
                 0,false},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}}}},
        {text,[5,60,47,100,108,62]}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"!\nX:4/little-signed-integer-unit:8"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "iThis element has a total size of 4\\*8 = 32 bits, and it contains a signed integer in little-endian order."}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\v## Defaults"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [31,60,97,32,110,97,109,101,61,34,68,101,102,97,117,108,116,115,
               34,62,68,101,102,97,117,108,116,115,60,47,97,62]},
             {sep,
              [{text,
                [154,84,104,101,32,100,101,102,97,117,108,116,32,116,121,112,
                 101,32,102,111,114,32,97,32,115,101,103,109,101,110,116,32,
                 105,115,32,105,110,116,101,103,101,114,46,32,84,104,101,32,
                 100,101,102,97,117,108,116,32,116,121,112,101,32,100,111,101,
                 115,32,110,111,116,32,100,101,112,101,110,100,32,111,110,32,
                 116,104,101,32,118,97,108,117,101,44,32,101,118,101,110,32,
                 105,102,32,116,104,101,32,118,97,108,117,101,32,105,115,32,
                 97,32,108,105,116,101,114,97,108,46,32,70,111,114,32,101,120,
                 97,109,112,108,101,44,32,116,104,101,32,100,101,102,97,117,
                 108,116,32,116,121,112,101,32,105,110]}],
              0,false},
             {text,"\n*<<3.14>>*"},
             {sep,
              [{text,
                [22,105,115,32,105,110,116,101,103,101,114,44,32,110,111,116,
                 32,102,108,111,97,116,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\vThe default"}],0,false},
             {text,[6,42,83,105,122,101,42]},
             {sep,
              [{text,
                "ëdepends on the type. For integer it is 8. For float it is 64. For binary it is all of the binary. In matching, this default value is only valid for the last element. All other binary elements in matching must have a size specification."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"-The default unit depends on the the type. For"}],
              0,false},
             {text,"\t*integer*"},
             {sep,[{text,[1,44]}],0,false},
             {text,[7,42,102,108,111,97,116,42]},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,"\v*bitstring*"},
             {sep,
              [{text,
                [28,105,116,32,105,115,32,49,46,32,70,111,114,32,98,105,110,
                 97,114,121,32,105,116,32,105,115,32,56,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [25,84,104,101,32,100,101,102,97,117,108,116,32,115,105,103,
                 110,101,100,110,101,115,115,32,105,115]}],
              0,false},
             {text,"\n*unsigned*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [25,84,104,101,32,100,101,102,97,117,108,116,32,101,110,100,
                 105,97,110,110,101,115,115,32,105,115]}],
              0,false},
             {text,[5,42,98,105,103,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,"'## Constructing Binaries and Bitstrings"},null},
       null}},
     {text,
      "W<a name=\"Constructing Binaries and Bitstrings\">Constructing Binaries and Bitstrings</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "§This section describes the rules for constructing binaries using the bit syntax. Unlike when constructing lists or tuples, the construction of a binary can fail with a"}],
             0,false},
            {text,"\b*badarg*"},
            {sep,[{text,"\nexception."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "PThere can be zero or more segments in a binary to be constructed. The expression"}],
             0,false},
            {text,[6,42,60,60,62,62,42]},
            {sep,[{text," constructs a zero length binary."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "wEach segment in a binary can consist of zero or more bits. There are no alignment rules for individual segments of type"}],
             0,false},
            {text,"\t*integer*"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[7,42,102,108,111,97,116,42]},
            {sep,
             [{text,
               "q. For binaries and bitstrings without size, the unit specifies the alignment. Since the default alignment for the"}],
             0,false},
            {text,"\b*binary*"},
            {sep,
             [{text,
               "`type is 8, the size of a binary segment must be a multiple of 8 bits, that is, only whole bytes."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,[{text,"#\n<<Bin/binary,Bitstring/bitstring>>"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\fThe variable"}],0,false},
            {text,[5,42,66,105,110,42]},
            {sep,
             [{text,"1must contain a whole number of bytes, because the"}],
             0,false},
            {text,"\b*binary*"},
            {sep,
             [{text,
               [16,116,121,112,101,32,100,101,102,97,117,108,116,115,32,116,
                111]}],
             0,false},
            {text,"\b*unit:8*"},
            {sep,[{text,[3,46,32,65]}],0,false},
            {text,"\b*badarg*"},
            {sep,
             [{text,
               [25,101,120,99,101,112,116,105,111,110,32,105,115,32,103,101,
                110,101,114,97,116,101,100,32,105,102]}],
             0,false},
            {text,[5,42,66,105,110,42]},
            {sep,[{text,"!consist of, for example, 17 bits."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,"\v*Bitstring*"},
            {sep,
             [{text,
               "tvariable can consist of any number of bits, for example, 0, 1, 8, 11, 17, 42, and so on. This is because the default"}],
             0,false},
            {text,[6,42,117,110,105,116,42]},
            {sep,
             [{text,
               [20,102,111,114,32,98,105,116,115,116,114,105,110,103,115,32,
                105,115,32,49,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "UFor clarity, it is recommended not to change the unit size for binaries. Instead, use"}],
             0,false},
            {text,"\b*binary*"},
            {sep,[{text," when you need byte alignment and"}],0,false},
            {text,"\v*bitstring*"},
            {sep,
             [{text,
               [28,119,104,101,110,32,121,111,117,32,110,101,101,100,32,98,
                105,116,32,97,108,105,103,110,109,101,110,116,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "oThe following example successfully constructs a bitstring of 7 bits, provided that all of X and Y are integers:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,{text,[3,96,96,96]},{sep,[{text,"\f\n<<X:1,Y:6>>"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "AAs mentioned earlier, segments have the following general syntax:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [30,42,86,97,108,117,101,58,83,105,122,101,47,84,121,112,101,83,
              112,101,99,105,102,105,101,114,76,105,115,116,42]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\eWhen constructing binaries,"}],0,false},
            {text,[7,42,86,97,108,117,101,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[6,42,83,105,122,101,42]},
            {sep,
             [{text,
               "Dcan be any Erlang expression. However, for syntactical reasons, both"}],
             0,false},
            {text,[7,42,86,97,108,117,101,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[6,42,83,105,122,101,42]},
            {sep,
             [{text,
               [157,109,117,115,116,32,98,101,32,101,110,99,108,111,115,101,
                100,32,105,110,32,112,97,114,101,110,116,104,101,115,105,115,
                32,105,102,32,116,104,101,32,101,120,112,114,101,115,115,105,
                111,110,32,99,111,110,115,105,115,116,115,32,111,102,32,97,
                110,121,116,104,105,110,103,32,109,111,114,101,32,116,104,97,
                110,32,97,32,115,105,110,103,108,101,32,108,105,116,101,114,
                97,108,32,111,114,32,97,32,118,97,114,105,97,98,108,101,46,32,
                84,104,101,32,102,111,108,108,111,119,105,110,103,32,103,105,
                118,101,115,32,97,32,99,111,109,112,105,108,101,114,32,115,
                121,110,116,97,120,32,101,114,114,111,114,58]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,{text,[3,96,96,96]},{sep,[{text,"\n\n<<X+1:8>>"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "UThis expression must be rewritten into the following, to be accepted by the compiler:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,{text,[3,96,96,96]},{sep,[{text,"\f\n<<(X+1):8>>"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [28,35,35,32,73,110,99,108,117,100,105,110,103,32,76,105,116,101,
            114,97,108,32,83,116,114,105,110,103,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "6A literal string can be written instead of an element:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"\f\n<<\"hello\">>"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"*This is syntactic sugar for the following:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [19,10,60,60,36,104,44,36,101,44,36,108,44,36,108,44,36,111,62,
                62]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [20,35,35,32,77,97,116,99,104,105,110,103,32,66,105,110,97,114,105,
         101,115]},
       null},
      null}},
    {text,"1<a name=\"Matching Binaries\">Matching Binaries</a>"},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "MThis section describes the rules for matching binaries, using the bit syntax."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "ÀThere can be zero or more segments in a binary pattern. A binary pattern can occur wherever patterns are allowed, including inside other patterns. Binary patterns cannot be nested. The pattern"}],
            0,false},
           {text,[6,42,60,60,62,62,42]},
           {sep,
            [{text,
              [29,109,97,116,99,104,101,115,32,97,32,122,101,114,111,32,108,
               101,110,103,116,104,32,98,105,110,97,114,121,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "LEach segment in a binary can consist of zero or more bits. A segment of type"}],
            0,false},
           {text,"\b*binary*"},
           {sep,
            [{text,
              "|must have a size evenly divisible by 8 (or divisible by the unit size, if the unit size has been changed). A segment of type"}],
            0,false},
           {text,"\v*bitstring*"},
           {sep,[{text," has no restrictions on the size."}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "AAs mentioned earlier, segments have the following general syntax:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [30,42,86,97,108,117,101,58,83,105,122,101,47,84,121,112,101,83,
             112,101,99,105,102,105,101,114,76,105,115,116,42]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\rWhen matching"}],0,false},
           {text,[7,42,86,97,108,117,101,42]},
           {sep,
            [{text,
              "j, value must be either a variable or an integer, or a floating point literal. Expressions are not allowed."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,[6,42,83,105,122,101,42]},
           {sep,
            [{text,
              "Ymust be an integer literal, or a previously bound variable. The following is not allowed:"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,[{text,"&\nfoo(N, <<X:N,T/binary>>) ->\n   {X,T}."}],0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [22,84,104,101,32,116,119,111,32,111,99,99,117,114,114,101,110,
               99,101,115,32,111,102]}],
            0,false},
           {text,[3,42,78,42]},
           {sep,
            [{text,"4are not related. The compiler will complain that the"}],
            0,false},
           {text,[3,42,78,42]},
           {sep,
            [{text,
              [29,105,110,32,116,104,101,32,115,105,122,101,32,102,105,101,
               108,100,32,105,115,32,117,110,98,111,117,110,100,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"4The correct way to write this example is as follows:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,"4\nfoo(N, Bin) ->\n   <<X:N,T/binary>> = Bin,\n   {X,T}."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,".## Getting the Rest of the Binary or Bitstring"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "GTo match out the rest of a binary, specify a binary field without size:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [28,10,102,111,111,40,60,60,65,58,56,44,82,101,115,116,47,98,
               105,110,97,114,121,62,62,41,32,45,62]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"3The size of the tail must be evenly divisible by 8."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "CTo match out the rest of a bitstring, specify a field without size:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [31,10,102,111,111,40,60,60,65,58,56,44,82,101,115,116,47,98,
               105,116,115,116,114,105,110,103,62,62,41,32,45,62]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "<There are no restrictions on the number of bits in the tail."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [24,35,35,32,65,112,112,101,110,100,105,110,103,32,116,111,32,97,32,66,
        105,110,97,114,121]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "AAppending to a binary in an efficient way can be done as follows:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "´\ntriples_to_bin(T) ->\n    triples_to_bin(T, <<>>).\n\ntriples_to_bin([{X,Y,Z} | T], Acc) ->\n    triples_to_bin(T, <<Acc/binary,X:32,Y:32,Z:32>>);\ntriples_to_bin([], Acc) -> \n    Acc."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}}],
  0,false}}
