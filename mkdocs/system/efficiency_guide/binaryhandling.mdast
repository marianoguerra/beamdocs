{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,{text,"$# Constructing and Matching Binaries"},null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "7Binaries can be efficiently built in the following way:"}],
                0,false}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
            null},
           null}}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[6,96,96,96,101,114,108]},
             {sep,
              [{text,
                "³\nmy_list_to_binary(List) ->\n    my_list_to_binary(List, <<>>).\n\nmy_list_to_binary([H|T], Acc) ->\n    my_list_to_binary(T, <<Acc/binary,H>>);\nmy_list_to_binary([], Acc) ->\n    Acc."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,".Binaries can be efficiently matched like this:"}],
             0,false}],
           0,true},
          null},
         null}}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
         null},
        null}}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,
           [{text,
             "b\nmy_binary_to_list(<<H,T/binary>>) ->\n    [H|my_binary_to_list(T)];\nmy_binary_to_list(<<>>) -> []."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [31,35,35,32,72,111,119,32,66,105,110,97,114,105,101,115,32,97,114,
           101,32,73,109,112,108,101,109,101,110,116,101,100]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "eInternally, binaries and bitstrings are implemented in the same way. In this section, they are called"}],
              0,false},
             {text,"\f**binaries**"},
             {sep,
              [{text,
                "Abecause that is what they are called in the emulator source code."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"6Four types of binary objects are available internally:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "2Two are containers for binary data and are called:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [17,42,42,82,101,102,99,32,98,105,110,97,114,105,101,115,42,
                  42]},
                {sep,[{text,"\n(short for"}],0,false},
                {text,
                 [30,42,42,114,101,102,101,114,101,110,99,101,45,99,111,117,
                  110,116,101,100,32,98,105,110,97,114,105,101,115,42,42]},
                {sep,[{text,[1,41]}],0,false}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {text,
               [17,42,42,72,101,97,112,32,98,105,110,97,114,105,101,115,42,
                42]}],
             0,false}}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "?Two are merely references to a part of a binary and are called:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {sep,
             [{text,[1,42]},
              {text,
               [16,42,42,115,117,98,32,98,105,110,97,114,105,101,115,42,42]}],
             0,false},
            {sep,
             [{text,[1,42]},
              {text,
               [18,42,42,109,97,116,99,104,32,99,111,110,116,101,120,116,115,
                42,42]}],
             0,false}}],
          0,false}],
        0,false}},
      {sep,
       [{text,"%<a name=\"refc_binary\">refc_binary</a>"},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,[16,35,35,32,82,101,102,99,32,66,105,110,97,114,105,101,115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,[{text,"#Refc binaries consist of two parts:"}],0,false}],
            0,true},
           null},
          null}},
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,
              [{text,".An object stored on the process heap, called a"}],
              0,false},
             {text,"\v**ProcBin**"}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {text,
            ":The binary object itself, stored outside all process heaps"}],
          0,false}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "ìThe binary object can be referenced by any number of ProcBins from any number of processes. The object contains a reference counter to keep track of the number of references, so that it can be removed when the last reference disappears."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "¾All ProcBin objects in a process are part of a linked list, so that the garbage collector can keep track of them and decrement the reference counters in the binary when a ProcBin disappears."}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{text,"%<a name=\"heap_binary\">heap_binary</a>"},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,[16,35,35,32,72,101,97,112,32,66,105,110,97,114,105,101,115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "üHeap binaries are small binaries, up to 64 bytes, and are stored directly on the process heap. They are copied when the process is garbage-collected and when they are sent as a message. They do not require any special handling by the garbage collector."}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,[15,35,35,32,83,117,98,32,66,105,110,97,114,105,101,115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [21,84,104,101,32,114,101,102,101,114,101,110,99,101,32,111,
                   98,106,101,99,116,115]}],
                0,false},
               {text,
                [16,42,42,115,117,98,32,98,105,110,97,114,105,101,115,42,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,
                [18,42,42,109,97,116,99,104,32,99,111,110,116,101,120,116,115,
                 42,42]},
               {sep,
                [{text,
                  "3can reference part of a refc binary or heap binary."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,"#<a name=\"sub_binary\">sub_binary</a>"},
               {sep,[{text,[1,65]}],0,false},
               {text,[14,42,42,115,117,98,32,98,105,110,97,114,121,42,42]},
               {sep,[{text,"\ris created by"}],0,false},
               {text,
                [16,42,115,112,108,105,116,95,98,105,110,97,114,121,47,50,42]},
               {sep,
                [{text,
                  [270,97,110,100,32,119,104,101,110,32,97,32,98,105,110,97,
                   114,121,32,105,115,32,109,97,116,99,104,101,100,32,111,117,
                   116,32,105,110,32,97,32,98,105,110,97,114,121,32,112,97,
                   116,116,101,114,110,46,32,65,32,115,117,98,32,98,105,110,
                   97,114,121,32,105,115,32,97,32,114,101,102,101,114,101,110,
                   99,101,32,105,110,116,111,32,97,32,112,97,114,116,32,111,
                   102,32,97,110,111,116,104,101,114,32,98,105,110,97,114,121,
                   32,40,114,101,102,99,32,111,114,32,104,101,97,112,32,98,
                   105,110,97,114,121,44,32,98,117,116,32,110,101,118,101,114,
                   32,105,110,116,111,32,97,110,111,116,104,101,114,32,115,
                   117,98,32,98,105,110,97,114,121,41,46,32,84,104,101,114,
                   101,102,111,114,101,44,32,109,97,116,99,104,105,110,103,32,
                   111,117,116,32,97,32,98,105,110,97,114,121,32,105,115,32,
                   114,101,108,97,116,105,118,101,108,121,32,99,104,101,97,
                   112,32,98,101,99,97,117,115,101,32,116,104,101,32,97,99,
                   116,117,97,108,32,98,105,110,97,114,121,32,100,97,116,97,
                   32,105,115,32,110,101,118,101,114,32,99,111,112,105,101,
                   100,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,[16,35,35,32,77,97,116,99,104,32,67,111,110,116,101,120,116]},
           null},
          null}},
        {text,")<a name=\"match_context\">match_context</a>"},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[1,65]}],0,false},
               {text,
                [17,42,42,109,97,116,99,104,32,99,111,110,116,101,120,116,42,
                 42]},
               {sep,
                [{text,
                  "áis similar to a sub binary, but is optimized for binary matching. For example, it contains a direct pointer to the binary data. For each field that is matched out of a binary, the position in the match context is incremented."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "ÕThe compiler tries to avoid generating code that creates a sub binary, only to shortly afterwards create a new match context and discard the sub binary. Instead of creating a sub binary, the match context is kept."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "ÐThe compiler can only do this optimization if it knows that the match context will not be shared. If it would be shared, the functional properties (also called referential transparency) of Erlang would break."}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [24,35,35,32,67,111,110,115,116,114,117,99,116,105,110,103,32,66,105,
          110,97,114,105,101,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "@Appending to a binary or bitstring is specially optimized by the"}],
             0,false},
            {text,
             [18,42,42,114,117,110,116,105,109,101,32,115,121,115,116,101,109,
              42,42]},
            {sep,[{text,[1,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,
           [{text,"1\n<<Binary/binary, ...>>\n<<Binary/bitstring, ...>>"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [147,65,115,32,116,104,101,32,114,117,110,116,105,109,101,32,115,
              121,115,116,101,109,32,104,97,110,100,108,101,115,32,116,104,
              101,32,111,112,116,105,109,105,122,97,116,105,111,110,32,40,105,
              110,115,116,101,97,100,32,111,102,32,116,104,101,32,99,111,109,
              112,105,108,101,114,41,44,32,116,104,101,114,101,32,97,114,101,
              32,118,101,114,121,32,102,101,119,32,99,105,114,99,117,109,115,
              116,97,110,99,101,115,32,105,110,32,119,104,105,99,104,32,116,
              104,101,32,111,112,116,105,109,105,122,97,116,105,111,110,32,
              100,111,101,115,32,110,111,116,32,119,111,114,107,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "HTo explain how it works, let us examine the following code line by line:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,
           [{text,
             "è\nBin0 = <<0>>,                    %% 1\nBin1 = <<Bin0/binary,1,2,3>>,    %% 2\nBin2 = <<Bin1/binary,4,5,6>>,    %% 3\nBin3 = <<Bin2/binary,7,8,9>>,    %% 4\nBin4 = <<Bin1/binary,17>>,       %% 5 !!!\n{Bin4,Bin3}                      %% 6"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,
              [{text,
                [23,76,105,110,101,32,49,32,40,109,97,114,107,101,100,32,119,
                 105,116,104,32,116,104,101]}],
              0,false},
             {text,[6,42,37,37,32,49,42]},
             {sep,
              [{text,
                [19,99,111,109,109,101,110,116,41,44,32,97,115,115,105,103,
                 110,115,32,97]}],
              0,false},
             {text,"\e[heap binary](#heap_binary)"},
             {sep,[{text,[6,116,111,32,116,104,101]}],0,false},
             {text,[6,42,66,105,110,48,42]},
             {sep,[{text,"\tvariable."}],0,false}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,[{text,"!Line 2 is an append operation. As"}],0,false},
             {text,[6,42,66,105,110,48,42]},
             {sep,
              [{text,"3has not been involved in an append operation, a new"}],
              0,false},
             {text,"\e[refc binary](#refc_binary)"},
             {sep,
              [{text,
                [30,105,115,32,99,114,101,97,116,101,100,32,97,110,100,32,116,
                 104,101,32,99,111,110,116,101,110,116,115,32,111,102]}],
              0,false},
             {text,[6,42,66,105,110,48,42]},
             {sep,
              [{text,
                [22,105,115,32,99,111,112,105,101,100,32,105,110,116,111,32,
                 105,116,46,32,84,104,101]}],
              0,false},
             {text,"\v**ProcBin**"},
             {sep,
              [{text,
                "Ãpart of the refc binary has its size set to the size of the data stored in the binary, while the binary object has extra space allocated. The size of the binary object is either twice the size of"}],
              0,false},
             {text,[6,42,66,105,110,49,42]},
             {sep,
              [{text,"4or 256, whichever is larger. In this case it is 256."}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,[{text,"\eLine 3 is more interesting."}],0,false},
            {text,[6,42,66,105,110,49,42]},
            {text,[7,42,42,104,97,115,42,42]},
            {sep,
             [{text,
               "ybeen used in an append operation, and it has 252 bytes of unused storage at the end, so the 3 new bytes are stored there."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {text,
          "hLine 4. The same applies here. There are 249 bytes left, so there is no problem storing another 3 bytes."}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{text,
             [23,76,105,110,101,32,53,46,32,72,101,114,101,44,32,115,111,109,
              101,116,104,105,110,103]}],
           0,false},
          {text,[15,42,42,105,110,116,101,114,101,115,116,105,110,103,42,42]},
          {sep,
           [{text,
             "Ihappens. Notice that the result is not appended to the previous result in"}],
           0,false},
          {text,[6,42,66,105,110,51,42]},
          {sep,[{text,"\b, but to"}],0,false},
          {text,[6,42,66,105,110,49,42]},
          {sep,
           [{text,
             [21,46,32,73,116,32,105,115,32,101,120,112,101,99,116,101,100,32,
              116,104,97,116]}],
           0,false},
          {text,[6,42,66,105,110,52,42]},
          {sep,
           [{text,
             [26,119,105,108,108,32,98,101,32,97,115,115,105,103,110,101,100,
              32,116,104,101,32,118,97,108,117,101]}],
           0,false},
          {text,[16,42,60,60,48,44,49,44,50,44,51,44,49,55,62,62,42]},
          {sep,
           [{text,
             [26,46,32,73,116,32,105,115,32,97,108,115,111,32,101,120,112,101,
              99,116,101,100,32,116,104,97,116]}],
           0,false},
          {text,[6,42,66,105,110,51,42]},
          {sep,
           [{text,
             [23,119,105,108,108,32,114,101,116,97,105,110,32,105,116,115,32,
              118,97,108,117,101,32,40]}],
           0,false},
          {text,
           [25,42,60,60,48,44,49,44,50,44,51,44,52,44,53,44,54,44,55,44,56,44,
            57,62,62,42]},
          {sep,
           [{text,"0). Clearly, the runtime system cannot write byte"}],
           0,false},
          {text,[4,42,49,55,42]},
          {sep,
           [{text,"7into the binary, because that would change the value of"}],
           0,false},
          {text,[6,42,66,105,110,51,42]},
          {sep,[{text,[2,116,111]}],0,false},
          {text,
           [26,42,60,60,48,44,49,44,50,44,51,44,52,44,49,55,44,54,44,55,44,56,
            44,57,62,62,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [28,84,104,101,32,114,117,110,116,105,109,101,32,115,121,115,
                116,101,109,32,115,101,101,115,32,116,104,97,116]}],
             0,false},
            {text,[6,42,66,105,110,49,42]},
            {sep,
             [{text,
               "\\is the result from a previous append operation (not from the latest append operation), so it"}],
             0,false},
            {text,"\n**copies**"},
            {sep,
             [{text,
               [15,116,104,101,32,99,111,110,116,101,110,116,115,32,111,102]}],
             0,false},
            {text,[6,42,66,105,110,49,42]},
            {sep,
             [{text,
               [142,116,111,32,97,32,110,101,119,32,98,105,110,97,114,121,44,
                32,114,101,115,101,114,118,101,32,101,120,116,114,97,32,115,
                116,111,114,97,103,101,44,32,97,110,100,32,115,111,32,111,110,
                46,32,40,72,101,114,101,32,105,115,32,110,111,116,32,101,120,
                112,108,97,105,110,101,100,32,104,111,119,32,116,104,101,32,
                114,117,110,116,105,109,101,32,115,121,115,116,101,109,32,99,
                97,110,32,107,110,111,119,32,116,104,97,116,32,105,116,32,105,
                115,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,
                32,119,114,105,116,101,32,105,110,116,111]}],
             0,false},
            {text,[6,42,66,105,110,49,42]},
            {sep,
             [{text,
               "y; it is left as an exercise to the curious reader to figure out how it is done by reading the emulator sources, primarily"}],
             0,false},
            {text,"\f*erl_bits.c*"},
            {sep,[{text,[2,46,41]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"### Circumstances That Force Copying"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "HThe optimization of the binary append operation requires that there is a"}],
               0,false},
              {text,"\n**single**"},
              {sep,[{text,"\rProcBin and a"}],0,false},
              {text,
               [20,42,42,115,105,110,103,108,101,32,114,101,102,101,114,101,
                110,99,101,42,42]},
              {sep,
               [{text,
                 [317,116,111,32,116,104,101,32,80,114,111,99,66,105,110,32,
                  102,111,114,32,116,104,101,32,98,105,110,97,114,121,46,32,
                  84,104,101,32,114,101,97,115,111,110,32,105,115,32,116,104,
                  97,116,32,116,104,101,32,98,105,110,97,114,121,32,111,98,
                  106,101,99,116,32,99,97,110,32,98,101,32,109,111,118,101,
                  100,32,40,114,101,97,108,108,111,99,97,116,101,100,41,32,
                  100,117,114,105,110,103,32,97,110,32,97,112,112,101,110,100,
                  32,111,112,101,114,97,116,105,111,110,44,32,97,110,100,32,
                  119,104,101,110,32,116,104,97,116,32,104,97,112,112,101,110,
                  115,44,32,116,104,101,32,112,111,105,110,116,101,114,32,105,
                  110,32,116,104,101,32,80,114,111,99,66,105,110,32,109,117,
                  115,116,32,98,101,32,117,112,100,97,116,101,100,46,32,73,
                  102,32,116,104,101,114,101,32,119,111,117,108,100,32,98,101,
                  32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,80,
                  114,111,99,66,105,110,32,112,111,105,110,116,105,110,103,32,
                  116,111,32,116,104,101,32,98,105,110,97,114,121,32,111,98,
                  106,101,99,116,44,32,105,116,32,119,111,117,108,100,32,110,
                  111,116,32,98,101,32,112,111,115,115,105,98,108,101,32,116,
                  111,32,102,105,110,100,32,97,110,100,32,117,112,100,97,116,
                  101,32,97,108,108,32,111,102,32,116,104,101,109,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "ëTherefore, certain operations on a binary mark it so that any future append operation will be forced to copy the binary. In most cases, the binary object will be shrunk at the same time to reclaim the extra space allocated for growing."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [142,87,104,101,110,32,97,112,112,101,110,100,105,110,103,32,
                116,111,32,97,32,98,105,110,97,114,121,32,97,115,32,102,111,
                108,108,111,119,115,44,32,111,110,108,121,32,116,104,101,32,
                98,105,110,97,114,121,32,114,101,116,117,114,110,101,100,32,
                102,114,111,109,32,116,104,101,32,108,97,116,101,115,116,32,
                97,112,112,101,110,100,32,111,112,101,114,97,116,105,111,110,
                32,119,105,108,108,32,115,117,112,112,111,114,116,32,102,117,
                114,116,104,101,114,32,99,104,101,97,112,32,97,112,112,101,
                110,100,32,111,112,101,114,97,116,105,111,110,115,58]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[6,96,96,96,101,114,108]},
            {sep,
             [{text,
               [19,10,66,105,110,32,61,32,60,60,66,105,110,48,44,46,46,46,62,
                62]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "CIn the code fragment in the beginning of this section, appending to"}],
               0,false},
              {text,[5,42,66,105,110,42]},
              {sep,[{text,"!will be cheap, while appending to"}],0,false},
              {text,[6,42,66,105,110,48,42]},
              {sep,
               [{text,
                 "Fwill force the creation of a new binary and copying of the contents of"}],
               0,false},
              {text,[6,42,66,105,110,48,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "ÊIf a binary is sent as a message to a process or port, the binary will be shrunk and any further append operation will copy the binary data into a new binary. For example, in the following code fragment"}],
               0,false},
              {text,[6,42,66,105,110,49,42]},
              {sep,[{text,"!will be copied in the third line:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[6,96,96,96,101,114,108]},
            {sep,
             [{text,
               "S\nBin1 = <<Bin0,...>>,\nPortOrPid ! Bin1,\nBin = <<Bin1,...>>  %% Bin1 will be COPIED\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "RThe same happens if you insert a binary into an Ets table, send it to a port using"}],
               0,false},
              {text,
               [23,42,101,114,108,97,110,103,58,112,111,114,116,95,99,111,109,
                109,97,110,100,47,50,42]},
              {sep,
               [{text,
                 [15,44,32,111,114,32,112,97,115,115,32,105,116,32,116,111]}],
               0,false},
              {text,
               ":[enif_inspect_binary](../erts/erl_nif#enif_inspect_binary)"},
              {sep,[{text,"\tin a NIF."}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "gMatching a binary will also cause it to shrink and the next append operation will copy the binary data:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[6,96,96,96,101,114,108]},
            {sep,
             [{text,
               "\\\nBin1 = <<Bin0,...>>,\n<<X,Y,Z,T/binary>> = Bin1,\nBin = <<Bin1,...>>  %% Bin1 will be COPIED\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [20,84,104,101,32,114,101,97,115,111,110,32,105,115,32,116,
                  104,97,116,32,97]}],
               0,false},
              {text,
               [31,91,109,97,116,99,104,32,99,111,110,116,101,120,116,93,40,
                35,109,97,116,99,104,95,99,111,110,116,101,120,116,41]},
              {sep,
               [{text,"-contains a direct pointer to the binary data."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [346,73,102,32,97,32,112,114,111,99,101,115,115,32,115,105,109,
                112,108,121,32,107,101,101,112,115,32,98,105,110,97,114,105,
                101,115,32,40,101,105,116,104,101,114,32,105,110,32,34,108,
                111,111,112,32,100,97,116,97,34,32,111,114,32,105,110,32,116,
                104,101,32,112,114,111,99,101,115,115,32,100,105,99,116,105,
                111,110,97,114,121,41,44,32,116,104,101,32,103,97,114,98,97,
                103,101,32,99,111,108,108,101,99,116,111,114,32,99,97,110,32,
                101,118,101,110,116,117,97,108,108,121,32,115,104,114,105,110,
                107,32,116,104,101,32,98,105,110,97,114,105,101,115,46,32,73,
                102,32,111,110,108,121,32,111,110,101,32,115,117,99,104,32,98,
                105,110,97,114,121,32,105,115,32,107,101,112,116,44,32,105,
                116,32,119,105,108,108,32,110,111,116,32,98,101,32,115,104,
                114,117,110,107,46,32,73,102,32,116,104,101,32,112,114,111,99,
                101,115,115,32,108,97,116,101,114,32,97,112,112,101,110,100,
                115,32,116,111,32,97,32,98,105,110,97,114,121,32,116,104,97,
                116,32,104,97,115,32,98,101,101,110,32,115,104,114,117,110,
                107,44,32,116,104,101,32,98,105,110,97,114,121,32,111,98,106,
                101,99,116,32,119,105,108,108,32,98,101,32,114,101,97,108,108,
                111,99,97,116,101,100,32,116,111,32,109,97,107,101,32,112,108,
                97,99,101,32,102,111,114,32,116,104,101,32,100,97,116,97,32,
                116,111,32,98,101,32,97,112,112,101,110,100,101,100,46]}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [20,35,35,32,77,97,116,99,104,105,110,103,32,66,105,110,97,114,105,
         101,115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "DLet us revisit the example in the beginning of the previous section:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[6,96,96,96,101,114,108]},
         {sep,
          [{text,
            "b\nmy_binary_to_list(<<H,T/binary>>) ->\n    [H|my_binary_to_list(T)];\nmy_binary_to_list(<<>>) -> []."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,[14,84,104,101,32,102,105,114,115,116,32,116,105,109,101]}],
            0,false},
           {text,
            [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,108,105,115,
             116,47,49,42]},
           {sep,[{text,"\fis called, a"}],0,false},
           {text,
            [31,91,109,97,116,99,104,32,99,111,110,116,101,120,116,93,40,35,
             109,97,116,99,104,95,99,111,110,116,101,120,116,41]},
           {sep,
            [{text,
              "§is created. The match context points to the first byte of the binary. 1 byte is matched out and the match context is updated to point to the second byte in the binary."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,"-At this point it would make sense to create a"}],
            0,false},
           {text,
            [25,91,115,117,98,32,98,105,110,97,114,121,93,40,35,115,117,98,95,
             98,105,110,97,114,121,41]},
           {sep,
            [{text,
              "q, but in this particular example the compiler sees that there will soon be a call to a function (in this case, to"}],
            0,false},
           {text,
            [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,108,105,115,
             116,47,49,42]},
           {sep,
            [{text,
              "Titself) that immediately will create a new match context and discard the sub binary."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\tTherefore"}],0,false},
           {text,
            [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,108,105,115,
             116,47,49,42]},
           {sep,
            [{text,
              "Õcalls itself with the match context instead of with a sub binary. The instruction that initializes the matching operation basically does nothing when it sees that it was passed a match context instead of a binary."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "ÄWhen the end of the binary is reached and the second clause matches, the match context will simply be discarded (removed in the next garbage collection, as there is no longer any reference to it)."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\rTo summarize,"}],0,false},
           {text,
            [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,108,105,115,
             116,47,49,42]},
           {sep,
            [{text,
              [20,111,110,108,121,32,110,101,101,100,115,32,116,111,32,99,114,
               101,97,116,101]}],
            0,false},
           {text,[7,42,42,111,110,101,42,42]},
           {sep,[{text,"\"match context and no sub binaries."}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text," Notice that the match context in"}],0,false},
           {text,
            [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,108,105,115,
             116,47,49,42]},
           {sep,
            [{text,
              "«was discarded when the entire binary had been traversed. What happens if the iteration stops before it has reached the end of the binary? Will the optimization still work?"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[6,96,96,96,101,114,108]},
         {sep,
          [{text,
            "w\nafter_zero(<<0,T/binary>>) ->\n    T;\nafter_zero(<<_,T/binary>>) ->\n    after_zero(T);\nafter_zero(<<>>) ->\n    <<>>.\n  "}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "[Yes, it will. The compiler will remove the building of the sub binary in the second clause:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[6,96,96,96,101,114,108]},
         {sep,
          [{text,
            "9\n...\nafter_zero(<<_,T/binary>>) ->\n    after_zero(T);\n..."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "GBut it will generate code that builds a sub binary in the first clause:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[6,96,96,96,101,114,108]},
         {sep,
          [{text,")\nafter_zero(<<0,T/binary>>) ->\n    T;\n..."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\nTherefore,"}],0,false},
           {text,[14,42,97,102,116,101,114,95,122,101,114,111,47,49,42]},
           {sep,
            [{text,
              "gbuilds one match context and one sub binary (assuming it is passed a binary that contains a zero byte)."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"/Code like the following will also be optimized:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[6,96,96,96,101,114,108]},
         {sep,
          [{text,
            [299,10,97,108,108,95,98,117,116,95,122,101,114,111,101,115,95,
             116,111,95,108,105,115,116,40,66,117,102,102,101,114,44,32,65,99,
             99,44,32,48,41,32,45,62,10,32,32,32,32,123,108,105,115,116,115,
             58,114,101,118,101,114,115,101,40,65,99,99,41,44,66,117,102,102,
             101,114,125,59,10,97,108,108,95,98,117,116,95,122,101,114,111,
             101,115,95,116,111,95,108,105,115,116,40,60,60,48,44,84,47,98,
             105,110,97,114,121,62,62,44,32,65,99,99,44,32,82,101,109,97,105,
             110,105,110,103,41,32,45,62,10,32,32,32,32,97,108,108,95,98,117,
             116,95,122,101,114,111,101,115,95,116,111,95,108,105,115,116,40,
             84,44,32,65,99,99,44,32,82,101,109,97,105,110,105,110,103,45,49,
             41,59,10,97,108,108,95,98,117,116,95,122,101,114,111,101,115,95,
             116,111,95,108,105,115,116,40,60,60,66,121,116,101,44,84,47,98,
             105,110,97,114,121,62,62,44,32,65,99,99,44,32,82,101,109,97,105,
             110,105,110,103,41,32,45,62,10,32,32,32,32,97,108,108,95,98,117,
             116,95,122,101,114,111,101,115,95,116,111,95,108,105,115,116,40,
             84,44,32,91,66,121,116,101,124,65,99,99,93,44,32,82,101,109,97,
             105,110,105,110,103,45,49,41,46]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [139,84,104,101,32,99,111,109,112,105,108,101,114,32,114,101,
               109,111,118,101,115,32,98,117,105,108,100,105,110,103,32,111,
               102,32,115,117,98,32,98,105,110,97,114,105,101,115,32,105,110,
               32,116,104,101,32,115,101,99,111,110,100,32,97,110,100,32,116,
               104,105,114,100,32,99,108,97,117,115,101,115,44,32,97,110,100,
               32,105,116,32,97,100,100,115,32,97,110,32,105,110,115,116,114,
               117,99,116,105,111,110,32,116,111,32,116,104,101,32,102,105,
               114,115,116,32,99,108,97,117,115,101,32,116,104,97,116,32,99,
               111,110,118,101,114,116,115]}],
            0,false},
           {text,"\b*Buffer*"},
           {sep,
            [{text,"6from a match context to a sub binary (or do nothing if"}],
            0,false},
           {text,"\b*Buffer*"},
           {sep,
            [{text,
              [21,105,115,32,97,32,98,105,110,97,114,121,32,97,108,114,101,97,
               100,121,41,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "ZBut in more complicated code, how can one know whether the optimization is applied or not?"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"'<a name=\"bin_opt_info\">bin_opt_info</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [22,35,35,32,79,112,116,105,111,110,32,98,105,110,95,111,112,116,95,
           105,110,102,111]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,85,115,101,32,116,104,101]}],0,false},
             {text,[14,42,98,105,110,95,111,112,116,95,105,110,102,111,42]},
             {sep,
              [{text,
                "|option to have the compiler print a lot of information about binary optimizations. It can be given either to the compiler or"}],
              0,false},
             {text,[6,42,101,114,108,99,42]},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,[{text,"\e\nerlc +bin_opt_info Mod.erl"}],0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"*or passed through an environment variable:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,")\nexport ERL_COMPILER_OPTIONS=bin_opt_info"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [15,78,111,116,105,99,101,32,116,104,97,116,32,116,104,101]}],
              0,false},
             {text,[14,42,98,105,110,95,111,112,116,95,105,110,102,111,42]},
             {sep,
              [{text,"3is not meant to be a permanent option added to your"}],
              0,false},
             {text,"\n*Makefile*"},
             {sep,
              [{text,
                "£s, because all messages that it generates cannot be eliminated. Therefore, passing the option through the environment is in most cases the most practical approach."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [29,84,104,101,32,119,97,114,110,105,110,103,115,32,108,111,111,
               107,32,97,115,32,102,111,108,108,111,119,115,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,
              [156,10,46,47,101,102,102,105,99,105,101,110,99,121,95,103,117,
               105,100,101,46,101,114,108,58,54,48,58,32,87,97,114,110,105,
               110,103,58,32,78,79,84,32,79,80,84,73,77,73,90,69,68,58,32,98,
               105,110,97,114,121,32,105,115,32,114,101,116,117,114,110,101,
               100,32,102,114,111,109,32,116,104,101,32,102,117,110,99,116,
               105,111,110,10,46,47,101,102,102,105,99,105,101,110,99,121,95,
               103,117,105,100,101,46,101,114,108,58,54,50,58,32,87,97,114,
               110,105,110,103,58,32,79,80,84,73,77,73,90,69,68,58,32,109,97,
               116,99,104,32,99,111,110,116,101,120,116,32,114,101,117,115,
               101,100]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "¨To make it clearer exactly what code the warnings refer to, the warnings in the following examples are inserted as comments after the clause they refer to, for example:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,
              "á\nafter_zero(<<0,T/binary>>) ->\n         %% BINARY CREATED: binary is returned from the function\n    T;\nafter_zero(<<_,T/binary>>) ->\n         %% OPTIMIZED: match context reused\n    after_zero(T);\nafter_zero(<<>>) ->\n    <<>>."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ËThe warning for the first clause says that the creation of a sub binary cannot be delayed, because it will be returned. The warning for the second clause says that a sub binary will not be created (yet)."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [19,35,35,32,85,110,117,115,101,100,32,86,97,114,105,97,98,108,101,
           115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "qThe compiler figures out if a variable is unused. The same code is generated for each of the following functions:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,
              "ü\ncount1(<<_,T/binary>>, Count) -> count1(T, Count+1);\ncount1(<<>>, Count) -> Count.\n\ncount2(<<H,T/binary>>, Count) -> count2(T, Count+1);\ncount2(<<>>, Count) -> Count.\n\ncount3(<<_H,T/binary>>, Count) -> count3(T, Count+1);\ncount3(<<>>, Count) -> Count."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "SIn each iteration, the first 8 bits in the binary will be skipped, not matched out."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [18,35,35,32,72,105,115,116,111,114,105,99,97,108,32,78,111,116,101]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "ðBinary handling was significantly improved in R12B. Because code that was efficient in R11B might not be efficient in R12B, and vice versa, earlier revisions of this Efficiency Guide contained some information about binary handling in R11B."}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
