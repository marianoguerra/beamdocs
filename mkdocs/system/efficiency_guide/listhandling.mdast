{above,
 {above,
  {above,
   {above,
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,[15,35,32,76,105,115,116,32,72,97,110,100,108,105,110,103]},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [18,35,35,32,67,114,101,97,116,105,110,103,32,97,32,76,105,115,116]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "lLists can only be built starting from the end and attaching list elements at the beginning. If you use the \""}],
              0,false},
             {text,[4,42,43,43,42]},
             {sep,
              [{text,
                "N\" operator as follows, a new list is created that is a copy of the elements in"}],
              0,false},
             {text,[7,42,76,105,115,116,49,42]},
             {sep,[{text,"\r, followed by"}],0,false},
             {text,[7,42,76,105,115,116,50,42]},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,[15,10,76,105,115,116,49,32,43,43,32,76,105,115,116,50]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [14,76,111,111,107,105,110,103,32,97,116,32,104,111,119]}],
              0,false},
             {text,
              [16,42,108,105,115,116,115,58,97,112,112,101,110,100,47,49,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,[4,42,43,43,42]},
             {sep,
              [{text,
                "Gwould be implemented in plain Erlang, clearly the first list is copied:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,
              "N\nappend([H|T], Tail) ->\n    [H|append(T, Tail)];\nappend([], Tail) ->\n    Tail."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [152,87,104,101,110,32,114,101,99,117,114,115,105,110,103,32,
                 97,110,100,32,98,117,105,108,100,105,110,103,32,97,32,108,
                 105,115,116,44,32,105,116,32,105,115,32,105,109,112,111,114,
                 116,97,110,116,32,116,111,32,101,110,115,117,114,101,32,116,
                 104,97,116,32,121,111,117,32,97,116,116,97,99,104,32,116,104,
                 101,32,110,101,119,32,101,108,101,109,101,110,116,115,32,116,
                 111,32,116,104,101,32,98,101,103,105,110,110,105,110,103,32,
                 111,102,32,116,104,101,32,108,105,115,116,46,32,73,110,32,
                 116,104,105,115,32,119,97,121,44,32,121,111,117,32,119,105,
                 108,108,32,98,117,105,108,100]}],
              0,false},
             {text,[7,42,42,111,110,101,42,42]},
             {sep,
              [{text,
                "Elist, not hundreds or thousands of copies of the growing result list."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"*Let us first see how it is not to be done:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,
              "¹\nbad_fib(N) ->\n    bad_fib(N, 0, 1, []).\n\nbad_fib(0, _Current, _Next, Fibs) ->\n    Fibs;\nbad_fib(N, Current, Next, Fibs) -> \n    bad_fib(N - 1, Next, Current + Next, Fibs ++ [Current])."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [133,72,101,114,101,32,109,111,114,101,32,116,104,97,110,32,111,
               110,101,32,108,105,115,116,32,105,115,32,98,117,105,108,116,46,
               32,73,110,32,101,97,99,104,32,105,116,101,114,97,116,105,111,
               110,32,115,116,101,112,32,97,32,110,101,119,32,108,105,115,116,
               32,105,115,32,99,114,101,97,116,101,100,32,116,104,97,116,32,
               105,115,32,111,110,101,32,101,108,101,109,101,110,116,32,108,
               111,110,103,101,114,32,116,104,97,110,32,116,104,101,32,110,
               101,119,32,112,114,101,118,105,111,117,115,32,108,105,115,116,
               46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "vTo avoid copying the result in each iteration, build the list in reverse order and reverse the list when you are done:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,
              "ü\ntail_recursive_fib(N) ->\n    tail_recursive_fib(N, 0, 1, []).\n\ntail_recursive_fib(0, _Current, _Next, Fibs) ->\n    lists:reverse(Fibs);\ntail_recursive_fib(N, Current, Next, Fibs) -> \n    tail_recursive_fib(N - 1, Next, Current + Next, [Current|Fibs])."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [22,35,35,32,76,105,115,116,32,67,111,109,112,114,101,104,101,110,
          115,105,111,110,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "{Lists comprehensions still have a reputation for being slow. They used to be implemented using funs, which used to be slow."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [21,65,32,108,105,115,116,32,99,111,109,112,114,101,104,101,110,
              115,105,111,110,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,
           [{text,
             [23,10,91,69,120,112,114,40,69,41,32,124,124,32,69,32,60,45,32,
              76,105,115,116,93]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,",is basically translated to a local function:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,
           [{text,
             "U\n'lc^0'([E|Tail], Expr) ->\n    [Expr(E)|'lc^0'(Tail, Expr)];\n'lc^0'([], _Expr) -> []."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,",If the result of the list comprehension will"}],
             0,false},
            {text,"\r**obviously**"},
            {sep,
             [{text,
               "Gnot be used, a list will not be constructed. For example, in this code:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,[{text,"$\n[io:put_chars(E) || E <- List],\nok."}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [16,111,114,32,105,110,32,116,104,105,115,32,99,111,100,101,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,
           [{text,
             "k\n...\ncase Var of\n    ... ->\n        [io:put_chars(E) || E <- List];\n    ... ->\nend,\nsome_function(...),\n..."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "Öthe value is not assigned to a variable, not passed to another function, and not returned. This means that there is no need to construct a list and the compiler will simplify the code for the list comprehension to:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,
           [{text,
             "X\n'lc^0'([E|Tail], Expr) ->\n    Expr(E),\n    'lc^0'(Tail, Expr);\n'lc^0'([], _Expr) -> []."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [156,84,104,101,32,99,111,109,112,105,108,101,114,32,97,108,115,
              111,32,117,110,100,101,114,115,116,97,110,100,115,32,116,104,97,
              116,32,97,115,115,105,103,110,105,110,103,32,116,111,32,39,95,
              39,32,109,101,97,110,115,32,116,104,97,116,32,116,104,101,32,
              118,97,108,117,101,32,119,105,108,108,32,110,111,116,32,117,115,
              101,100,46,32,84,104,101,114,101,102,111,114,101,44,32,116,104,
              101,32,99,111,100,101,32,105,110,32,116,104,101,32,102,111,108,
              108,111,119,105,110,103,32,101,120,97,109,112,108,101,32,119,
              105,108,108,32,97,108,115,111,32,98,101,32,111,112,116,105,109,
              105,122,101,100,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,[{text,"(\n_ = [io:put_chars(E) || E <- List],\nok."}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [22,35,35,32,68,101,101,112,32,97,110,100,32,70,108,97,116,32,76,105,
         115,116,115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",[lists:flatten/1](../stdlib/lists#flatten/1)"},
           {sep,
            [{text,
              "@builds an entirely new list. It is therefore expensive, and even"}],
            0,false},
           {text,"\b**more**"},
           {sep,
            [{text,
              [18,101,120,112,101,110,115,105,118,101,32,116,104,97,110,32,
               116,104,101]}],
            0,false},
           {text,[4,42,43,43,42]},
           {sep,
            [{text,
              "Foperator (which copies its left argument, but not its right argument)."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "9In the following situations, you can easily avoid calling"}],
            0,false},
           {text,
            [17,42,108,105,115,116,115,58,102,108,97,116,116,101,110,47,49,
             42]},
           {sep,[{text,[1,58]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {text,
         [129,87,104,101,110,32,115,101,110,100,105,110,103,32,100,97,116,97,
          32,116,111,32,97,32,112,111,114,116,46,32,80,111,114,116,115,32,117,
          110,100,101,114,115,116,97,110,100,32,100,101,101,112,32,108,105,
          115,116,115,32,115,111,32,116,104,101,114,101,32,105,115,32,110,111,
          32,114,101,97,115,111,110,32,116,111,32,102,108,97,116,116,101,110,
          32,116,104,101,32,108,105,115,116,32,98,101,102,111,114,101,32,115,
          101,110,100,105,110,103,32,105,116,32,116,111,32,116,104,101,32,112,
          111,114,116,46]}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{text,"1When calling BIFs that accept deep lists, such as"}],
           0,false},
          {text,"3[list_to_binary/1](../erts/erlang#list_to_binary/1)"},
          {sep,[{text,[2,111,114]}],0,false},
          {text,"7[iolist_to_binary/1](../erts/erlang#iolist_to_binary/1)"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{sep,
          [{text,
            "@When you know that your list is only one level deep, you can use"}],
          0,false},
         {text,"*[lists:append/1](../stdlib/lists#append/1)"},
         {sep,[{text,[1,46]}],0,false}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[15,35,35,32,80,111,114,116,32,69,120,97,109,112,108,101]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "7\n      ...\n      port_command(Port, DeepList)\n      ..."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "F\n      ...\n      port_command(Port, lists:flatten(DeepList))\n      ..."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "IA common way to send a zero-terminated string to a port is the following:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [131,10,32,32,32,32,32,32,46,46,46,10,32,32,32,32,32,32,84,101,
               114,109,105,110,97,116,101,100,83,116,114,32,61,32,83,116,114,
               105,110,103,32,43,43,32,91,48,93,44,32,37,32,83,116,114,105,
               110,103,61,34,102,111,111,34,32,61,62,32,91,36,102,44,32,36,
               111,44,32,36,111,44,32,48,93,10,32,32,32,32,32,32,112,111,114,
               116,95,99,111,109,109,97,110,100,40,80,111,114,116,44,32,84,
               101,114,109,105,110,97,116,101,100,83,116,114,41,10,32,32,32,
               32,32,32,46,46,46]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\bInstead:"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [132,10,32,32,32,32,32,32,46,46,46,10,32,32,32,32,32,32,84,101,
               114,109,105,110,97,116,101,100,83,116,114,32,61,32,91,83,116,
               114,105,110,103,44,32,48,93,44,32,37,32,83,116,114,105,110,103,
               61,34,102,111,111,34,32,61,62,32,91,91,36,102,44,32,36,111,44,
               32,36,111,93,44,32,48,93,10,32,32,32,32,32,32,112,111,114,116,
               95,99,111,109,109,97,110,100,40,80,111,114,116,44,32,84,101,
               114,109,105,110,97,116,101,100,83,116,114,41,32,10,32,32,32,32,
               32,32,46,46,46]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [17,35,35,32,65,112,112,101,110,100,32,69,120,97,109,112,108,101]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "=\n      > lists:append([[1], [2], [3]]).\n      [1,2,3]\n      >"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              ">\n      > lists:flatten([[1], [2], [3]]).\n      [1,2,3]\n      >"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\e## Recursive List Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,"7In section about myths, the following myth was exposed:"}],
           0,false},
          {text,
           "[[Tail-Recursive Functions are Much Faster Than Recursive Functions](./myths#tail_recursive)"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [302,84,104,101,114,101,32,105,115,32,117,115,117,97,108,108,121,
              32,110,111,116,32,109,117,99,104,32,100,105,102,102,101,114,101,
              110,99,101,32,98,101,116,119,101,101,110,32,97,32,98,111,100,
              121,45,114,101,99,117,114,115,105,118,101,32,108,105,115,116,32,
              102,117,110,99,116,105,111,110,32,97,110,100,32,116,97,105,108,
              45,114,101,99,117,114,115,105,118,101,32,102,117,110,99,116,105,
              111,110,32,116,104,97,116,32,114,101,118,101,114,115,101,115,32,
              116,104,101,32,108,105,115,116,32,97,116,32,116,104,101,32,101,
              110,100,46,32,84,104,101,114,101,102,111,114,101,44,32,99,111,
              110,99,101,110,116,114,97,116,101,32,111,110,32,119,114,105,116,
              105,110,103,32,98,101,97,117,116,105,102,117,108,32,99,111,100,
              101,32,97,110,100,32,102,111,114,103,101,116,32,97,98,111,117,
              116,32,116,104,101,32,112,101,114,102,111,114,109,97,110,99,101,
              32,111,102,32,121,111,117,114,32,108,105,115,116,32,102,117,110,
              99,116,105,111,110,115,46,32,73,110,32,116,104,101,32,116,105,
              109,101,45,99,114,105,116,105,99,97,108,32,112,97,114,116,115,
              32,111,102,32,121,111,117,114,32,99,111,100,101,32,40,97,110,
              100,32,111,110,108,121,32,116,104,101,114,101,41,44]}],
           0,false},
          {text,"\v**measure**"},
          {sep,[{text,"\ebefore rewriting your code."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
        {sep,
         [{text,[4,32,32,32,32]},
          {sep,
           [{sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,")This section is about list functions that"}],
                      0,false},
                     {text,"\r**construct**"},
                     {sep,
                      [{text,
                        "Àlists. A tail-recursive function that does not construct a list runs in constant space, while the corresponding body-recursive function uses stack space proportional to the length of the list."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false}],
           0,true}],
         0,false}},
       {text,[0]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "8For example, a function that sums a list of integers, is"}],
           0,false},
          {text,[7,42,42,110,111,116,42,42]},
          {sep,
           [{text,
             [25,116,111,32,98,101,32,119,114,105,116,116,101,110,32,97,115,
              32,102,111,108,108,111,119,115,58]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[6,96,96,96,101,114,108]},
        {sep,
         [{text,
           "G\nrecursive_sum([H|T]) -> H+recursive_sum(T);\nrecursive_sum([])    -> 0."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{sep,[{sep,[{text,"\bInstead:"}],0,false}],0,true},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[6,96,96,96,101,114,108]},
        {sep,
         [{text,
           "R\nsum(L) -> sum(L, 0).\n\nsum([H|T], Sum) -> sum(T, Sum + H);\nsum([], Sum)    -> Sum."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}}],
  0,false}}
