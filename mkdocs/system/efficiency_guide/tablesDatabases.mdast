{above,
 {above,
  {above,
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [22,35,32,84,97,98,108,101,115,32,97,110,100,32,68,97,116,97,98,97,115,
        101,115]},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [24,35,35,32,69,116,115,44,32,68,101,116,115,44,32,97,110,100,32,77,
          110,101,115,105,97]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "vEvery example using Ets has a corresponding example in Mnesia. In general, all Ets examples also apply to Dets tables."}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [26,35,35,32,83,101,108,101,99,116,47,77,97,116,99,104,32,79,112,
            101,114,97,116,105,111,110,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [296,83,101,108,101,99,116,47,109,97,116,99,104,32,111,112,
                  101,114,97,116,105,111,110,115,32,111,110,32,69,116,115,32,
                  97,110,100,32,77,110,101,115,105,97,32,116,97,98,108,101,
                  115,32,99,97,110,32,98,101,99,111,109,101,32,118,101,114,
                  121,32,101,120,112,101,110,115,105,118,101,32,111,112,101,
                  114,97,116,105,111,110,115,46,32,84,104,101,121,32,117,115,
                  117,97,108,108,121,32,110,101,101,100,32,116,111,32,115,99,
                  97,110,32,116,104,101,32,99,111,109,112,108,101,116,101,32,
                  116,97,98,108,101,46,32,84,114,121,32,116,111,32,115,116,
                  114,117,99,116,117,114,101,32,116,104,101,32,100,97,116,97,
                  32,116,111,32,109,105,110,105,109,105,122,101,32,116,104,
                  101,32,110,101,101,100,32,102,111,114,32,115,101,108,101,99,
                  116,47,109,97,116,99,104,32,111,112,101,114,97,116,105,111,
                  110,115,46,32,72,111,119,101,118,101,114,44,32,105,102,32,
                  121,111,117,32,114,101,113,117,105,114,101,32,97,32,115,101,
                  108,101,99,116,47,109,97,116,99,104,32,111,112,101,114,97,
                  116,105,111,110,44,32,105,116,32,105,115,32,115,116,105,108,
                  108,32,109,111,114,101,32,101,102,102,105,99,105,101,110,
                  116,32,116,104,97,110,32,117,115,105,110,103]}],
               0,false},
              {text,"\n*tab2list*"},
              {sep,
               [{text,
                 "i. Examples of this and of how to avoid select/match are provided in the following sections. The functions"}],
               0,false},
              {text,[14,42,101,116,115,58,115,101,108,101,99,116,47,50,42]},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,
               [17,42,109,110,101,115,105,97,58,115,101,108,101,99,116,47,51,
                42]},
              {sep,
               [{text,
                 [24,97,114,101,32,116,111,32,98,101,32,112,114,101,102,101,
                  114,114,101,100,32,111,118,101,114]}],
               0,false},
              {text,"\r*ets:match/2*"},
              {sep,[{text,[1,44]}],0,false},
              {text,
               [20,42,101,116,115,58,109,97,116,99,104,95,111,98,106,101,99,
                116,47,50,42]},
              {sep,[{text,[5,44,32,97,110,100]}],0,false},
              {text,
               [23,42,109,110,101,115,105,97,58,109,97,116,99,104,95,111,98,
                106,101,99,116,47,51,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [149,73,110,32,115,111,109,101,32,99,105,114,99,117,109,115,
                  116,97,110,99,101,115,44,32,116,104,101,32,115,101,108,101,
                  99,116,47,109,97,116,99,104,32,111,112,101,114,97,116,105,
                  111,110,115,32,100,111,32,110,111,116,32,110,101,101,100,32,
                  116,111,32,115,99,97,110,32,116,104,101,32,99,111,109,112,
                  108,101,116,101,32,116,97,98,108,101,46,32,70,111,114,32,
                  101,120,97,109,112,108,101,44,32,105,102,32,112,97,114,116,
                  32,111,102,32,116,104,101,32,107,101,121,32,105,115,32,98,
                  111,117,110,100,32,119,104,101,110,32,115,101,97,114,99,104,
                  105,110,103,32,97,110]}],
               0,false},
              {text,"\r*ordered_set*"},
              {sep,
               [{text,
                 [276,116,97,98,108,101,44,32,111,114,32,105,102,32,105,116,
                  32,105,115,32,97,32,77,110,101,115,105,97,32,116,97,98,108,
                  101,32,97,110,100,32,116,104,101,114,101,32,105,115,32,97,
                  32,115,101,99,111,110,100,97,114,121,32,105,110,100,101,120,
                  32,111,110,32,116,104,101,32,102,105,101,108,100,32,116,104,
                  97,116,32,105,115,32,115,101,108,101,99,116,101,100,47,109,
                  97,116,99,104,101,100,46,32,73,102,32,116,104,101,32,107,
                  101,121,32,105,115,32,102,117,108,108,121,32,98,111,117,110,
                  100,44,32,116,104,101,114,101,32,105,115,32,110,111,32,112,
                  111,105,110,116,32,105,110,32,100,111,105,110,103,32,97,32,
                  115,101,108,101,99,116,47,109,97,116,99,104,44,32,117,110,
                  108,101,115,115,32,121,111,117,32,104,97,118,101,32,97,32,
                  98,97,103,32,116,97,98,108,101,32,97,110,100,32,97,114,101,
                  32,111,110,108,121,32,105,110,116,101,114,101,115,116,101,
                  100,32,105,110,32,97,32,115,117,98,115,101,116,32,111,102,
                  32,116,104,101,32,101,108,101,109,101,110,116,115,32,119,
                  105,116,104,32,116,104,101,32,115,112,101,99,105,102,105,99,
                  32,107,101,121,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "§When creating a record to be used in a select/match operation, you want most of the fields to have the value \"_\". The easiest and fastest way to do that is as follows:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [29,10,35,112,101,114,115,111,110,123,97,103,101,32,61,32,52,
                50,44,32,95,32,61,32,39,95,39,125,46,32]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [22,35,35,32,68,101,108,101,116,105,110,103,32,97,110,32,69,108,
            101,109,101,110,116]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,"\b*delete*"},
              {sep,
               [{text,
                 "èoperation is considered successful if the element was not present in the table. Hence all attempts to check that the element is present in the Ets/Mnesia table before deletion are unnecessary. Here follows an example for Ets tables:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [30,10,46,46,46,10,101,116,115,58,100,101,108,101,116,101,40,
                84,97,98,44,32,75,101,121,41,44,10,46,46,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "j\n...\ncase ets:lookup(Tab, Key) of\n    [] ->\n        ok;\n    [_|_] ->\n        ets:delete(Tab, Key)\nend,\n..."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,[16,35,35,32,70,101,116,99,104,105,110,103,32,68,97,116,97]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"(Do not fetch data that you already have."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "CConsider that you have a module that handles the abstract data type"}],
               0,false},
              {text,"\b*Person*"},
              {sep,[{text,"#. You export the interface function"}],0,false},
              {text,
               [16,42,112,114,105,110,116,95,112,101,114,115,111,110,47,49,
                42]},
              {sep,[{text,"#, which uses the internal functions"}],0,false},
              {text,[14,42,112,114,105,110,116,95,110,97,109,101,47,49,42]},
              {sep,[{text,[1,44]}],0,false},
              {text,"\r*print_age/1*"},
              {sep,[{text,[5,44,32,97,110,100]}],0,false},
              {text,
               [20,42,112,114,105,110,116,95,111,99,99,117,112,97,116,105,111,
                110,47,49,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
            {sep,
             [{text,[4,32,32,32,32]},
              {sep,
               [{sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            [15,73,102,32,116,104,101,32,102,117,110,99,116,
                             105,111,110]}],
                          0,false},
                         {text,
                          [14,42,112,114,105,110,116,95,110,97,109,101,47,49,
                           42]},
                         {sep,
                          [{text,
                            "°, and so on, had been interface functions, the situation would have been different, as you do not want the user of the interface to know about the internal data representation."}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false}],
               0,true}],
             0,false}},
           {text,[0]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[6,96,96,96,101,114,108]},
            {sep,
             [{text,
               [641,10,37,37,37,32,73,110,116,101,114,102,97,99,101,32,102,
                117,110,99,116,105,111,110,10,112,114,105,110,116,95,112,101,
                114,115,111,110,40,80,101,114,115,111,110,73,100,41,32,45,62,
                10,32,32,32,32,37,37,32,76,111,111,107,32,117,112,32,116,104,
                101,32,112,101,114,115,111,110,32,105,110,32,116,104,101,32,
                110,97,109,101,100,32,116,97,98,108,101,32,112,101,114,115,
                111,110,44,10,32,32,32,32,99,97,115,101,32,101,116,115,58,108,
                111,111,107,117,112,40,112,101,114,115,111,110,44,32,80,101,
                114,115,111,110,73,100,41,32,111,102,10,32,32,32,32,32,32,32,
                32,91,80,101,114,115,111,110,93,32,45,62,10,32,32,32,32,32,32,
                32,32,32,32,32,32,112,114,105,110,116,95,110,97,109,101,40,80,
                101,114,115,111,110,41,44,10,32,32,32,32,32,32,32,32,32,32,32,
                32,112,114,105,110,116,95,97,103,101,40,80,101,114,115,111,
                110,41,44,10,32,32,32,32,32,32,32,32,32,32,32,32,112,114,105,
                110,116,95,111,99,99,117,112,97,116,105,111,110,40,80,101,114,
                115,111,110,41,59,10,32,32,32,32,32,32,32,32,91,93,32,45,62,
                10,32,32,32,32,32,32,32,32,32,32,32,32,105,111,58,102,111,114,
                109,97,116,40,34,78,111,32,112,101,114,115,111,110,32,119,105,
                116,104,32,73,68,32,61,32,126,112,126,110,34,44,32,91,80,101,
                114,115,111,110,73,68,93,41,10,32,32,32,32,101,110,100,46,10,
                10,37,37,37,32,73,110,116,101,114,110,97,108,32,102,117,110,
                99,116,105,111,110,115,10,112,114,105,110,116,95,110,97,109,
                101,40,80,101,114,115,111,110,41,32,45,62,32,10,32,32,32,32,
                105,111,58,102,111,114,109,97,116,40,34,78,111,32,112,101,114,
                115,111,110,32,126,112,126,110,34,44,32,91,80,101,114,115,111,
                110,35,112,101,114,115,111,110,46,110,97,109,101,93,41,46,10,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,10,112,114,105,110,116,95,97,103,101,40,80,101,114,115,
                111,110,41,32,45,62,32,10,32,32,32,32,105,111,58,102,111,114,
                109,97,116,40,34,78,111,32,112,101,114,115,111,110,32,126,112,
                126,110,34,44,32,91,80,101,114,115,111,110,35,112,101,114,115,
                111,110,46,97,103,101,93,41,46,10,10,112,114,105,110,116,95,
                111,99,99,117,112,97,116,105,111,110,40,80,101,114,115,111,
                110,41,32,45,62,32,10,32,32,32,32,105,111,58,102,111,114,109,
                97,116,40,34,78,111,32,112,101,114,115,111,110,32,126,112,126,
                110,34,44,32,91,80,101,114,115,111,110,35,112,101,114,115,111,
                110,46,111,99,99,117,112,97,116,105,111,110,93,41,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[6,96,96,96,101,114,108]},
            {sep,
             [{text,
               [767,10,37,37,37,32,73,110,116,101,114,102,97,99,101,32,102,
                117,110,99,116,105,111,110,10,112,114,105,110,116,95,112,101,
                114,115,111,110,40,80,101,114,115,111,110,73,100,41,32,45,62,
                10,32,32,32,32,37,37,32,76,111,111,107,32,117,112,32,116,104,
                101,32,112,101,114,115,111,110,32,105,110,32,116,104,101,32,
                110,97,109,101,100,32,116,97,98,108,101,32,112,101,114,115,
                111,110,44,10,32,32,32,32,99,97,115,101,32,101,116,115,58,108,
                111,111,107,117,112,40,112,101,114,115,111,110,44,32,80,101,
                114,115,111,110,73,100,41,32,111,102,10,32,32,32,32,32,32,32,
                32,91,80,101,114,115,111,110,93,32,45,62,10,32,32,32,32,32,32,
                32,32,32,32,32,32,112,114,105,110,116,95,110,97,109,101,40,80,
                101,114,115,111,110,73,68,41,44,10,32,32,32,32,32,32,32,32,32,
                32,32,32,112,114,105,110,116,95,97,103,101,40,80,101,114,115,
                111,110,73,68,41,44,10,32,32,32,32,32,32,32,32,32,32,32,32,
                112,114,105,110,116,95,111,99,99,117,112,97,116,105,111,110,
                40,80,101,114,115,111,110,73,68,41,59,10,32,32,32,32,32,32,32,
                32,91,93,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,105,
                111,58,102,111,114,109,97,116,40,34,78,111,32,112,101,114,115,
                111,110,32,119,105,116,104,32,73,68,32,61,32,126,112,126,110,
                34,44,32,91,80,101,114,115,111,110,73,68,93,41,10,32,32,32,32,
                101,110,100,46,10,10,37,37,37,32,73,110,116,101,114,110,97,
                108,32,102,117,110,99,116,105,111,110,115,115,10,112,114,105,
                110,116,95,110,97,109,101,40,80,101,114,115,111,110,73,68,41,
                32,45,62,32,10,32,32,32,32,91,80,101,114,115,111,110,93,32,61,
                32,101,116,115,58,108,111,111,107,117,112,40,112,101,114,115,
                111,110,44,32,80,101,114,115,111,110,73,100,41,44,10,32,32,32,
                32,105,111,58,102,111,114,109,97,116,40,34,78,111,32,112,101,
                114,115,111,110,32,126,112,126,110,34,44,32,91,80,101,114,115,
                111,110,35,112,101,114,115,111,110,46,110,97,109,101,93,41,46,
                10,10,112,114,105,110,116,95,97,103,101,40,80,101,114,115,111,
                110,73,68,41,32,45,62,32,10,32,32,32,32,91,80,101,114,115,111,
                110,93,32,61,32,101,116,115,58,108,111,111,107,117,112,40,112,
                101,114,115,111,110,44,32,80,101,114,115,111,110,73,100,41,44,
                10,32,32,32,32,105,111,58,102,111,114,109,97,116,40,34,78,111,
                32,112,101,114,115,111,110,32,126,112,126,110,34,44,32,91,80,
                101,114,115,111,110,35,112,101,114,115,111,110,46,97,103,101,
                93,41,46,10,10,112,114,105,110,116,95,111,99,99,117,112,97,
                116,105,111,110,40,80,101,114,115,111,110,73,68,41,32,45,62,
                32,10,32,32,32,32,91,80,101,114,115,111,110,93,32,61,32,101,
                116,115,58,108,111,111,107,117,112,40,112,101,114,115,111,110,
                44,32,80,101,114,115,111,110,73,100,41,44,10,32,32,32,32,105,
                111,58,102,111,114,109,97,116,40,34,78,111,32,112,101,114,115,
                111,110,32,126,112,126,110,34,44,32,91,80,101,114,115,111,110,
                35,112,101,114,115,111,110,46,111,99,99,117,112,97,116,105,
                111,110,93,41,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"\"## Non-Persistent Database Storage"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "BFor non-persistent database storage, prefer Ets tables over Mnesia"}],
               0,false},
              {text,
               [15,42,108,111,99,97,108,95,99,111,110,116,101,110,116,42]},
              {sep,
               [{text,
                 [23,116,97,98,108,101,115,46,32,69,118,101,110,32,116,104,
                  101,32,77,110,101,115,105,97]}],
               0,false},
              {text,"\r*dirty_write*"},
              {sep,
               [{text,
                 "¥operations carry a fixed overhead compared to Ets writes. Mnesia must check if the table is replicated or has indices, this involves at least one Ets lookup for each"}],
               0,false},
              {text,"\r*dirty_write*"},
              {sep,
               [{text,
                 "7. Thus, Ets writes is always faster than Mnesia writes."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\v## tab2list"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [31,65,115,115,117,109,105,110,103,32,97,110,32,69,116,115,
                  32,116,97,98,108,101,32,116,104,97,116,32,117,115,101,115]}],
               0,false},
              {text,[6,42,105,100,110,111,42]},
              {sep,[{text,"\"as key and contains the following:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [279,10,91,35,112,101,114,115,111,110,123,105,100,110,111,32,
                61,32,49,44,32,110,97,109,101,32,61,32,34,65,100,97,109,34,44,
                32,32,97,103,101,32,61,32,51,49,44,32,111,99,99,117,112,97,
                116,105,111,110,32,61,32,34,109,97,105,108,109,97,110,34,125,
                44,10,32,35,112,101,114,115,111,110,123,105,100,110,111,32,61,
                32,50,44,32,110,97,109,101,32,61,32,34,66,114,121,97,110,34,
                44,32,97,103,101,32,61,32,51,49,44,32,111,99,99,117,112,97,
                116,105,111,110,32,61,32,34,99,97,115,104,105,101,114,34,125,
                44,10,32,35,112,101,114,115,111,110,123,105,100,110,111,32,61,
                32,51,44,32,110,97,109,101,32,61,32,34,66,114,121,97,110,34,
                44,32,97,103,101,32,61,32,51,53,44,32,111,99,99,117,112,97,
                116,105,111,110,32,61,32,34,98,97,110,107,101,114,34,125,44,
                10,32,35,112,101,114,115,111,110,123,105,100,110,111,32,61,32,
                52,44,32,110,97,109,101,32,61,32,34,67,97,114,108,34,44,32,32,
                97,103,101,32,61,32,50,53,44,32,111,99,99,117,112,97,116,105,
                111,110,32,61,32,34,109,97,105,108,109,97,110,34,125,93]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[6,73,102,32,121,111,117]}],0,false},
              {text,"\b**must**"},
              {sep,
               [{text,
                 "4return all data stored in the Ets table, you can use"}],
               0,false},
              {text,
               [16,42,101,116,115,58,116,97,98,50,108,105,115,116,47,49,42]},
              {sep,
               [{text,
                 "W. However, usually you are only interested in a subset of the information in which case"}],
               0,false},
              {text,
               [16,42,101,116,115,58,116,97,98,50,108,105,115,116,47,49,42]},
              {sep,
               [{text,
                 "qis expensive. If you only want to extract one field from each record, for example, the age of every person, then:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Ó\n...\nets:select(Tab,[{ #person{idno='_', \n                          name='_', \n                          age='$1', \n                          occupation = '_'},\n                [],\n                ['$1']}]),\n..."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "U\n...\nTabList = ets:tab2list(Tab),\nlists:map(fun(X) -> X#person.age end, TabList),\n..."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "IIf you are only interested in the age of all persons named \"Bryan\", then:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "×\n...\nets:select(Tab,[{ #person{idno='_', \n                          name=\"Bryan\", \n                          age='$1', \n                          occupation = '_'},\n                [],\n                ['$1']}]),\n..."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [327,10,46,46,46,10,84,97,98,76,105,115,116,32,61,32,101,116,
                115,58,116,97,98,50,108,105,115,116,40,84,97,98,41,44,10,108,
                105,115,116,115,58,102,111,108,100,108,40,102,117,110,40,88,
                44,32,65,99,99,41,32,45,62,32,99,97,115,101,32,88,35,112,101,
                114,115,111,110,46,110,97,109,101,32,111,102,10,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,34,66,114,121,97,110,34,32,45,62,10,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,91,88,35,112,
                101,114,115,111,110,46,97,103,101,124,65,99,99,93,59,10,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,95,32,45,62,10,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,65,99,99,10,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,32,32,32,
                32,32,101,110,100,44,32,91,93,44,32,84,97,98,76,105,115,116,
                41,44,10,46,46,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,[17,42,42,82,69,65,76,76,89,32,68,79,32,78,79,84,42,42]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "»\n...\nTabList = ets:tab2list(Tab),\nBryanList = lists:filter(fun(X) -> X#person.name == \"Bryan\" end,\n                         TabList),\nlists:map(fun(X) -> X#person.age end, BryanList),\n..."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "VIf you need all information stored in the Ets table about persons named \"Bryan\", then:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "¶\n...\nets:select(Tab, [{#person{idno='_', \n                          name=\"Bryan\", \n                          age='_', \n                          occupation = '_'}, [], ['$_']}]),\n..."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "d\n...\nTabList = ets:tab2list(Tab),\nlists:filter(fun(X) -> X#person.name == \"Bryan\" end, TabList),\n..."}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [21,35,35,32,79,114,100,101,114,101,100,95,115,101,116,32,84,97,98,
            108,101,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "tIf the data in the table is to be accessed so that the order of the keys in the table is significant, the table type"}],
               0,false},
              {text,"\r*ordered_set*"},
              {sep,[{text,"%can be used instead of the more usual"}],0,false},
              {text,[5,42,115,101,116,42]},
              {sep,
               [{text,[14,116,97,98,108,101,32,116,121,112,101,46,32,65,110]}],
               0,false},
              {text,"\r*ordered_set*"},
              {sep,
               [{text,
                 "qis always traversed in Erlang term order regarding the key field so that the return values from functions such as"}],
               0,false},
              {text,"\b*select*"},
              {sep,[{text,[1,44]}],0,false},
              {text,[14,42,109,97,116,99,104,95,111,98,106,101,99,116,42]},
              {sep,[{text,[5,44,32,97,110,100]}],0,false},
              {text,[7,42,102,111,108,100,108,42]},
              {sep,
               [{text,",are ordered by the key values. Traversing an"}],
               0,false},
              {text,"\r*ordered_set*"},
              {sep,[{text,"\bwith the"}],0,false},
              {text,[7,42,102,105,114,115,116,42]},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,[6,42,110,101,120,116,42]},
              {sep,
               [{text,")operations also returns the keys ordered."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
            {sep,
             [{text,[4,32,32,32,32]},
              {sep,
               [{sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,[{text,[2,65,110]}],0,false},
                         {text,"\r*ordered_set*"},
                         {sep,
                          [{text,
                            "-only guarantees that objects are processed in"}],
                          0,false},
                         {text,[7,42,42,107,101,121,42,42]},
                         {sep,
                          [{text,"%order. Results from functions such as"}],
                          0,false},
                         {text,
                          [14,42,101,116,115,58,115,101,108,101,99,116,47,50,
                           42]},
                         {sep,[{text,"\tappear in"}],0,false},
                         {text,[7,42,42,107,101,121,42,42]},
                         {sep,
                          [{text,
                            "4order even if the key is not included in the result."}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false}],
               0,true}],
             0,false}},
           {text,[0]}},
          null},
         null}}],
      0,false}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,[15,35,35,32,69,116,115,45,83,112,101,99,105,102,105,99]},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [26,35,35,32,85,115,105,110,103,32,75,101,121,115,32,111,102,32,69,
           116,115,32,84,97,98,108,101]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ÍAn Ets table is a single-key table (either a hash table or a tree ordered by the key) and is to be used as one. In other words, use the key to look up things whenever possible. A lookup by a known key in a"}],
              0,false},
             {text,[5,42,115,101,116,42]},
             {sep,[{text," Ets table is constant and for an"}],0,false},
             {text,"\r*ordered_set*"},
             {sep,
              [{text,
                [145,69,116,115,32,116,97,98,108,101,32,105,116,32,105,115,32,
                 79,40,108,111,103,78,41,46,32,65,32,107,101,121,32,108,111,
                 111,107,117,112,32,105,115,32,97,108,119,97,121,115,32,112,
                 114,101,102,101,114,97,98,108,101,32,116,111,32,97,32,99,97,
                 108,108,32,119,104,101,114,101,32,116,104,101,32,119,104,111,
                 108,101,32,116,97,98,108,101,32,104,97,115,32,116,111,32,98,
                 101,32,115,99,97,110,110,101,100,46,32,73,110,32,116,104,101,
                 32,112,114,101,118,105,111,117,115,32,101,120,97,109,112,108,
                 101,115,44,32,116,104,101,32,102,105,101,108,100]}],
              0,false},
             {text,[6,42,105,100,110,111,42]},
             {sep,
              [{text,
                [147,105,115,32,116,104,101,32,107,101,121,32,111,102,32,116,
                 104,101,32,116,97,98,108,101,32,97,110,100,32,97,108,108,32,
                 108,111,111,107,117,112,115,32,119,104,101,114,101,32,111,
                 110,108,121,32,116,104,101,32,110,97,109,101,32,105,115,32,
                 107,110,111,119,110,32,114,101,115,117,108,116,32,105,110,32,
                 97,32,99,111,109,112,108,101,116,101,32,115,99,97,110,32,111,
                 102,32,116,104,101,32,40,112,111,115,115,105,98,108,121,32,
                 108,97,114,103,101,41,32,116,97,98,108,101,32,102,111,114,32,
                 97,32,109,97,116,99,104,105,110,103,32,114,101,115,117,108,
                 116,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"%A simple solution would be to use the"}],0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,
              [{text,
                [31,102,105,101,108,100,32,97,115,32,116,104,101,32,107,101,
                 121,32,105,110,115,116,101,97,100,32,111,102,32,116,104,
                 101]}],
              0,false},
             {text,[6,42,105,100,110,111,42]},
             {sep,
              [{text,
                [129,102,105,101,108,100,44,32,98,117,116,32,116,104,97,116,
                 32,119,111,117,108,100,32,99,97,117,115,101,32,112,114,111,
                 98,108,101,109,115,32,105,102,32,116,104,101,32,110,97,109,
                 101,115,32,119,101,114,101,32,110,111,116,32,117,110,105,113,
                 117,101,46,32,65,32,109,111,114,101,32,103,101,110,101,114,
                 97,108,32,115,111,108,117,116,105,111,110,32,119,111,117,108,
                 100,32,98,101,32,116,111,32,99,114,101,97,116,101,32,97,32,
                 115,101,99,111,110,100,32,116,97,98,108,101,32,119,105,116,
                 104]}],
              0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,[{text,"\nas key and"}],0,false},
             {text,[6,42,105,100,110,111,42]},
             {sep,
              [{text,
                ";as data, that is, to index (invert) the table regarding the"}],
              0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,
              [{text,
                "Ùfield. Clearly, the second table would have to be kept consistent with the master table. Mnesia can do this for you, but a home brew index table can be very efficient compared to the overhead involved in using Mnesia."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [151,65,110,32,105,110,100,101,120,32,116,97,98,108,101,32,102,
               111,114,32,116,104,101,32,116,97,98,108,101,32,105,110,32,116,
               104,101,32,112,114,101,118,105,111,117,115,32,101,120,97,109,
               112,108,101,115,32,119,111,117,108,100,32,104,97,118,101,32,
               116,111,32,98,101,32,97,32,98,97,103,32,40,97,115,32,107,101,
               121,115,32,119,111,117,108,100,32,97,112,112,101,97,114,32,109,
               111,114,101,32,116,104,97,110,32,111,110,99,101,41,32,97,110,
               100,32,99,97,110,32,104,97,118,101,32,116,104,101,32,102,111,
               108,108,111,119,105,110,103,32,99,111,110,116,101,110,116,115,
               58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [146,10,91,35,105,110,100,101,120,95,101,110,116,114,121,123,
               110,97,109,101,61,34,65,100,97,109,34,44,32,105,100,110,111,61,
               49,125,44,10,32,35,105,110,100,101,120,95,101,110,116,114,121,
               123,110,97,109,101,61,34,66,114,121,97,110,34,44,32,105,100,
               110,111,61,50,125,44,10,32,35,105,110,100,101,120,95,101,110,
               116,114,121,123,110,97,109,101,61,34,66,114,121,97,110,34,44,
               32,105,100,110,111,61,51,125,44,10,32,35,105,110,100,101,120,
               95,101,110,116,114,121,123,110,97,109,101,61,34,67,97,114,108,
               34,44,32,105,100,110,111,61,52,125,93]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"'Given this index table, a lookup of the"}],0,false},
             {text,[5,42,97,103,101,42]},
             {sep,
              [{text,
                "<fields for all persons named \"Bryan\" can be done as follows:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "á\n...\nMatchingIDs = ets:lookup(IndexTable,\"Bryan\"),\nlists:map(fun(#index_entry{idno = ID}) ->\n                 [#person{age = Age}] = ets:lookup(PersonTable, ID),\n                 Age\n          end,\n          MatchingIDs),\n..."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text," Notice that this code never uses"}],0,false},
             {text,"\r*ets:match/2*"},
             {sep,
              [{text,
                [20,98,117,116,32,105,110,115,116,101,97,100,32,117,115,101,
                 115,32,116,104,101]}],
              0,false},
             {text,[14,42,101,116,115,58,108,111,111,107,117,112,47,50,42]},
             {sep,[{text,"\tcall. The"}],0,false},
             {text,"\r*lists:map/2*"},
             {sep,[{text,"!call is only used to traverse the"}],0,false},
             {text,[6,42,105,100,110,111,42]},
             {sep,
              [{text,
                "fs matching the name \"Bryan\" in the table; thus the number of lookups in the master table is minimized."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [313,75,101,101,112,105,110,103,32,97,110,32,105,110,100,101,
               120,32,116,97,98,108,101,32,105,110,116,114,111,100,117,99,101,
               115,32,115,111,109,101,32,111,118,101,114,104,101,97,100,32,
               119,104,101,110,32,105,110,115,101,114,116,105,110,103,32,114,
               101,99,111,114,100,115,32,105,110,32,116,104,101,32,116,97,98,
               108,101,46,32,84,104,101,32,110,117,109,98,101,114,32,111,102,
               32,111,112,101,114,97,116,105,111,110,115,32,103,97,105,110,
               101,100,32,102,114,111,109,32,116,104,101,32,116,97,98,108,101,
               32,109,117,115,116,32,116,104,101,114,101,102,111,114,101,32,
               98,101,32,99,111,109,112,97,114,101,100,32,97,103,97,105,110,
               115,116,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,
               111,112,101,114,97,116,105,111,110,115,32,105,110,115,101,114,
               116,105,110,103,32,111,98,106,101,99,116,115,32,105,110,32,116,
               104,101,32,116,97,98,108,101,46,32,72,111,119,101,118,101,114,
               44,32,110,111,116,105,99,101,32,116,104,97,116,32,116,104,101,
               32,103,97,105,110,32,105,115,32,115,105,103,110,105,102,105,99,
               97,110,116,32,119,104,101,110,32,116,104,101,32,107,101,121,32,
               99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,108,111,
               111,107,117,112,32,101,108,101,109,101,110,116,115,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [18,35,35,32,77,110,101,115,105,97,45,83,112,101,99,105,102,105,99]},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [18,35,35,32,83,101,99,111,110,100,97,114,121,32,73,110,100,101,120]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [300,73,102,32,121,111,117,32,102,114,101,113,117,101,110,116,
              108,121,32,100,111,32,97,32,108,111,111,107,117,112,32,111,110,
              32,97,32,102,105,101,108,100,32,116,104,97,116,32,105,115,32,
              110,111,116,32,116,104,101,32,107,101,121,32,111,102,32,116,104,
              101,32,116,97,98,108,101,44,32,121,111,117,32,108,111,115,101,
              32,112,101,114,102,111,114,109,97,110,99,101,32,117,115,105,110,
              103,32,34,109,110,101,115,105,97,58,115,101,108,101,99,116,47,
              109,97,116,99,104,95,111,98,106,101,99,116,34,32,97,115,32,116,
              104,105,115,32,102,117,110,99,116,105,111,110,32,116,114,97,118,
              101,114,115,101,115,32,116,104,101,32,119,104,111,108,101,32,
              116,97,98,108,101,46,32,89,111,117,32,99,97,110,32,99,114,101,
              97,116,101,32,97,32,115,101,99,111,110,100,97,114,121,32,105,
              110,100,101,120,32,105,110,115,116,101,97,100,32,97,110,100,32,
              117,115,101,32,34,109,110,101,115,105,97,58,105,110,100,101,120,
              95,114,101,97,100,34,32,116,111,32,103,101,116,32,102,97,115,
              116,101,114,32,97,99,99,101,115,115,44,32,104,111,119,101,118,
              101,114,32,116,104,105,115,32,114,101,113,117,105,114,101,115,
              32,109,111,114,101,32,109,101,109,111,114,121,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\v**Example**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [371,10,45,114,101,99,111,114,100,40,112,101,114,115,111,110,44,
              32,123,105,100,110,111,44,32,110,97,109,101,44,32,97,103,101,44,
              32,111,99,99,117,112,97,116,105,111,110,125,41,46,10,32,32,32,
              32,32,32,32,32,46,46,46,10,123,97,116,111,109,105,99,44,32,111,
              107,125,32,61,32,10,109,110,101,115,105,97,58,99,114,101,97,116,
              101,95,116,97,98,108,101,40,112,101,114,115,111,110,44,32,91,
              123,105,110,100,101,120,44,91,35,112,101,114,115,111,110,46,97,
              103,101,93,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,97,116,116,
              114,105,98,117,116,101,115,44,10,32,32,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
              32,32,32,32,32,114,101,99,111,114,100,95,105,110,102,111,40,102,
              105,101,108,100,115,44,32,112,101,114,115,111,110,41,125,93,41,
              44,10,123,97,116,111,109,105,99,44,32,111,107,125,32,61,32,109,
              110,101,115,105,97,58,97,100,100,95,116,97,98,108,101,95,105,
              110,100,101,120,40,112,101,114,115,111,110,44,32,97,103,101,41,
              44,32,10,46,46,46,10,10,80,101,114,115,111,110,115,65,103,101,
              52,50,32,61,10,32,32,32,32,32,109,110,101,115,105,97,58,100,105,
              114,116,121,95,105,110,100,101,120,95,114,101,97,100,40,112,101,
              114,115,111,110,44,32,52,50,44,32,35,112,101,114,115,111,110,46,
              97,103,101,41,44,10,46,46,46]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[15,35,35,32,84,114,97,110,115,97,99,116,105,111,110,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "àUsing transactions is a way to guarantee that the distributed Mnesia database remains consistent, even when many different processes update it in parallel. However, if you have real-time requirements it is recommended to use"}],
             0,false},
            {text,[7,42,100,105,114,116,121,42]},
            {sep,
             [{text,".operations instead of transactions. When using"}],
             0,false},
            {text,[7,42,100,105,114,116,121,42]},
            {sep,
             [{text,
               "¯operations, you lose the consistency guarantee; this is usually solved by only letting one process update the table. Other processes must send update requests to that process."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\v**Example**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [326,10,46,46,46,10,37,32,85,115,105,110,103,32,116,114,97,110,
              115,97,99,116,105,111,110,10,10,70,117,110,32,61,32,102,117,110,
              40,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,91,109,110,101,
              115,105,97,58,114,101,97,100,40,123,84,97,98,108,101,44,32,75,
              101,121,125,41,44,10,32,32,32,32,32,32,32,32,32,32,32,109,110,
              101,115,105,97,58,114,101,97,100,40,123,84,97,98,108,101,50,44,
              32,75,101,121,50,125,41,93,10,32,32,32,32,32,32,101,110,100,44,
              32,10,10,123,97,116,111,109,105,99,44,32,91,82,101,115,117,108,
              116,49,44,32,82,101,115,117,108,116,50,93,125,32,32,61,32,109,
              110,101,115,105,97,58,116,114,97,110,115,97,99,116,105,111,110,
              40,70,117,110,41,44,10,46,46,46,10,10,37,32,83,97,109,101,32,
              116,104,105,110,103,32,117,115,105,110,103,32,100,105,114,116,
              121,32,111,112,101,114,97,116,105,111,110,115,10,46,46,46,10,10,
              82,101,115,117,108,116,49,32,61,32,109,110,101,115,105,97,58,
              100,105,114,116,121,95,114,101,97,100,40,123,84,97,98,108,101,
              44,32,75,101,121,125,41,44,10,82,101,115,117,108,116,50,32,61,
              32,109,110,101,115,105,97,58,100,105,114,116,121,95,114,101,97,
              100,40,123,84,97,98,108,101,50,44,32,75,101,121,50,125,41,44,10,
              46,46,46]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false}],
  0,false}}
