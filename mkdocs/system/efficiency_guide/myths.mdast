{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,{text,"'# The Seven Myths of Erlang Performance"},null},
            null}},
          {text,
           [25,60,97,32,110,97,109,101,61,34,109,121,116,104,115,34,62,109,
            121,116,104,115,60,47,97,62]}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "ãSome truths seem to live on well beyond their best-before date, perhaps because \"information\" spreads faster from person-to-person than a single release note that says, for example, that body-recursive calls have become faster."}],
               0,false}],
             0,true},
            null},
           null}}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "RThis section tries to kill the old truths (or semi-truths) that have become myths."}],
              0,false}],
            0,true},
           null},
          null}}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             "N## Myth: Tail-Recursive Functions are Much Faster\n    Than Recursive Functions"},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"+<a name=\"tail_recursive\">tail_recursive</a>"},
                {sep,
                 [{text,
                   "jAccording to the myth, using a tail-recursive function that builds a list in reverse followed by a call to"}],
                 0,false},
                {text,
                 [17,42,108,105,115,116,115,58,114,101,118,101,114,115,101,47,
                  49,42]},
                {sep,
                 [{text,
                   "­is faster than a body-recursive function that builds the list in correct order; the reason being that body-recursive functions use more memory than tail-recursive functions."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [411,84,104,97,116,32,119,97,115,32,116,114,117,101,32,116,
                  111,32,115,111,109,101,32,101,120,116,101,110,116,32,98,101,
                  102,111,114,101,32,82,49,50,66,46,32,73,116,32,119,97,115,
                  32,101,118,101,110,32,109,111,114,101,32,116,114,117,101,32,
                  98,101,102,111,114,101,32,82,55,66,46,32,84,111,100,97,121,
                  44,32,110,111,116,32,115,111,32,109,117,99,104,46,32,65,32,
                  98,111,100,121,45,114,101,99,117,114,115,105,118,101,32,102,
                  117,110,99,116,105,111,110,32,103,101,110,101,114,97,108,
                  108,121,32,117,115,101,115,32,116,104,101,32,115,97,109,101,
                  32,97,109,111,117,110,116,32,111,102,32,109,101,109,111,114,
                  121,32,97,115,32,97,32,116,97,105,108,45,114,101,99,117,114,
                  115,105,118,101,32,102,117,110,99,116,105,111,110,46,32,73,
                  116,32,105,115,32,103,101,110,101,114,97,108,108,121,32,110,
                  111,116,32,112,111,115,115,105,98,108,101,32,116,111,32,112,
                  114,101,100,105,99,116,32,119,104,101,116,104,101,114,32,
                  116,104,101,32,116,97,105,108,45,114,101,99,117,114,115,105,
                  118,101,32,111,114,32,116,104,101,32,98,111,100,121,45,114,
                  101,99,117,114,115,105,118,101,32,118,101,114,115,105,111,
                  110,32,119,105,108,108,32,98,101,32,102,97,115,116,101,114,
                  46,32,84,104,101,114,101,102,111,114,101,44,32,117,115,101,
                  32,116,104,101,32,118,101,114,115,105,111,110,32,116,104,97,
                  116,32,109,97,107,101,115,32,121,111,117,114,32,99,111,100,
                  101,32,99,108,101,97,110,101,114,32,40,104,105,110,116,58,
                  32,105,116,32,105,115,32,117,115,117,97,108,108,121,32,116,
                  104,101,32,98,111,100,121,45,114,101,99,117,114,115,105,118,
                  101,32,118,101,114,115,105,111,110,41,46]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "AFor a more thorough discussion about tail and body recursion, see"}],
                 0,false},
                {text,
                 "t[Erlang's Tail Recursion is Not a Silver Bullet](http://ferd.ca/erlang-s-tail-recursion-is-not-a-silver-bullet.html)"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
              {sep,
               [{text,[4,32,32,32,32]},
                {sep,
                 [{sep,
                   [{above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,
                            "øA tail-recursive function that does not need to reverse the list at the end is faster than a body-recursive function, as are tail-recursive functions that do not construct any terms at all (for example, a function that sums all integers in a list)."}],
                          0,false}],
                        0,true},
                       null},
                      null}}],
                   0,false}],
                 0,true}],
               0,false}},
             {text,[0]}},
            null},
           null}}],
        0,false}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,{text,"$## Myth: Operator \"++\" is Always Bad"},null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[3,84,104,101]}],0,false},
               {text,[4,42,43,43,42]},
               {sep,
                [{text,
                  "¶operator has, somewhat undeservedly, got a bad reputation. It probably has something to do with code like the following, which is the most inefficient way there is to reverse a list:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[6,96,96,96,101,114,108]},
             {sep,
              [{text,
                "P\nnaive_reverse([H|T]) ->\n    naive_reverse(T)++[H];\nnaive_reverse([]) ->\n    []."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[6,65,115,32,116,104,101]}],0,false},
               {text,[4,42,43,43,42]},
               {sep,
                [{text,
                  "coperator copies its left operand, the result is copied repeatedly, leading to quadratic complexity."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,"\tBut using"}],0,false},
               {text,[4,42,43,43,42]},
               {sep,
                [{text,
                  [22,97,115,32,102,111,108,108,111,119,115,32,105,115,32,110,
                   111,116,32,98,97,100,58]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,[{sep,[{text,[6,42,42,79,75,42,42]}],0,false}],0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[6,96,96,96,101,114,108]},
             {sep,
              [{text,
                "u\nnaive_but_ok_reverse([H|T], Acc) ->\n    naive_but_ok_reverse(T, [H]++Acc);\nnaive_but_ok_reverse([], Acc) ->\n    Acc."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "9Each list element is copied only once. The growing result"}],
                0,false},
               {text,[5,42,65,99,99,42]},
               {sep,
                [{text,
                  [28,105,115,32,116,104,101,32,114,105,103,104,116,32,111,
                   112,101,114,97,110,100,32,102,111,114,32,116,104,101]}],
                0,false},
               {text,[4,42,43,43,42]},
               {sep,
                [{text,
                  [19,111,112,101,114,97,116,111,114,44,32,97,110,100,32,105,
                   116,32,105,115]}],
                0,false},
               {text,[7,42,42,110,111,116,42,42]},
               {sep,[{text,[7,99,111,112,105,101,100,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "6Experienced Erlang programmers would write as follows:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[6,96,96,96,101,114,108]},
             {sep,
              [{text,
                "e\nvanilla_reverse([H|T], Acc) ->\n    vanilla_reverse(T, [H|Acc]);\nvanilla_reverse([], Acc) ->\n    Acc."}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "³This is slightly more efficient because here you do not build a list element only to copy it directly. (Or it would be more efficient if the compiler did not automatically rewrite"}],
                0,false},
               {text,"\n*[H]++Acc*"},
               {sep,[{text,[2,116,111]}],0,false},
               {text,"\t*[H|Acc]*"},
               {sep,[{text,[2,46,41]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [25,35,35,32,77,121,116,104,58,32,83,116,114,105,110,103,115,32,97,
            114,101,32,83,108,111,119]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "ËString handling can be slow if done improperly. In Erlang, you need to think a little more about how the strings are used and choose an appropriate representation. If you use regular expressions, use the"}],
               0,false},
              {text,"\n[re](./re)"},
              {sep,
               [{text,"(module in STDLIB instead of the obsolete"}],
               0,false},
              {text,"\b*regexp*"},
              {sep,[{text,[7,109,111,100,117,108,101,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,"+## Myth: Repairing a Dets File is Very Slow"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "°The repair time is still proportional to the number of records in the file, but Dets repairs used to be much slower in the past. Dets has been massively rewritten and improved."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         "Q## Myth: BEAM is a Stack-Based Byte-Code Virtual Machine\n    (and Therefore Slow)"},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ëBEAM is a register-based virtual machine. It has 1024 virtual registers that are used for holding temporary values and for passing arguments when calling functions. Variables that need to survive a function call are saved to the stack."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [143,66,69,65,77,32,105,115,32,97,32,116,104,114,101,97,100,101,
              100,45,99,111,100,101,32,105,110,116,101,114,112,114,101,116,
              101,114,46,32,69,97,99,104,32,105,110,115,116,114,117,99,116,
              105,111,110,32,105,115,32,119,111,114,100,32,112,111,105,110,
              116,105,110,103,32,100,105,114,101,99,116,108,121,32,116,111,32,
              101,120,101,99,117,116,97,98,108,101,32,67,45,99,111,100,101,44,
              32,109,97,107,105,110,103,32,105,110,115,116,114,117,99,116,105,
              111,110,32,100,105,115,112,97,116,99,104,105,110,103,32,118,101,
              114,121,32,102,97,115,116,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "I## Myth: Use \"_\" to Speed Up Your Program When a Variable\n    is Not Used"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "WThat was once true, but from R6B the BEAM compiler can see that a variable is not used."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "PSimilarly, trivial transformations on the source-code level such as converting a"}],
            0,false},
           {text,[6,42,99,97,115,101,42]},
           {sep,
            [{text,
              "hstatement to clauses at the top-level of the function seldom makes any difference to the generated code."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,",## Myth: A NIF Always Speeds Up Your Program"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "¤Rewriting Erlang code to a NIF to make it faster should be seen as a last resort. It is only guaranteed to be dangerous, but not guaranteed to speed up the program."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,")Doing too much work in each NIF call will"}],0,false},
          {text,
           ";[degrade responsiveness of the VM](../erts/erl_nif#WARNING)"},
          {sep,
           [{text,
             [157,46,32,68,111,105,110,103,32,116,111,111,32,108,105,116,116,
              108,101,32,119,111,114,107,32,109,97,121,32,109,101,97,110,32,
              116,104,97,116,32,116,104,101,32,103,97,105,110,32,111,102,32,
              116,104,101,32,102,97,115,116,101,114,32,112,114,111,99,101,115,
              115,105,110,103,32,105,110,32,116,104,101,32,78,73,70,32,105,
              115,32,101,97,116,101,110,32,117,112,32,98,121,32,116,104,101,
              32,111,118,101,114,104,101,97,100,32,111,102,32,99,97,108,108,
              105,110,103,32,116,104,101,32,78,73,70,32,97,110,100,32,99,104,
              101,99,107,105,110,103,32,116,104,101,32,97,114,103,117,109,101,
              110,116,115,46]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [21,66,101,32,115,117,114,101,32,116,111,32,114,101,97,100,32,97,
              98,111,117,116]}],
           0,false},
          {text,"1[Long-running NIFs](../erts/erl_nif#lengthy_work)"},
          {sep,
           [{text,
             [21,98,101,102,111,114,101,32,119,114,105,116,105,110,103,32,97,
              32,78,73,70,46]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
