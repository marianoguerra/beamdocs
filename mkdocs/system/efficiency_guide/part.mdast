{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [18,35,32,69,102,102,105,99,105,101,110,99,121,32,71,117,105,
                 100,101]},
               null},
              null}},
            {sep,
             [{sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,{above,{text,"\v### Purpose"},null},null}},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "=\"Premature optimization is the root of all evil\" (D.E. Knuth)"}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        [262,69,102,102,105,99,105,101,110,116,32,99,111,100,
                         101,32,99,97,110,32,98,101,32,119,101,108,108,45,115,
                         116,114,117,99,116,117,114,101,100,32,97,110,100,32,
                         99,108,101,97,110,44,32,98,97,115,101,100,32,111,110,
                         32,97,32,115,111,117,110,100,32,111,118,101,114,97,
                         108,108,32,97,114,99,104,105,116,101,99,116,117,114,
                         101,32,97,110,100,32,115,111,117,110,100,32,97,108,
                         103,111,114,105,116,104,109,115,46,32,69,102,102,105,
                         99,105,101,110,116,32,99,111,100,101,32,99,97,110,32,
                         98,101,32,104,105,103,104,108,121,32,105,109,112,108,
                         101,109,101,110,116,97,116,105,111,110,45,99,111,100,
                         101,32,116,104,97,116,32,98,121,112,97,115,115,101,
                         115,32,100,111,99,117,109,101,110,116,101,100,32,105,
                         110,116,101,114,102,97,99,101,115,32,97,110,100,32,
                         116,97,107,101,115,32,97,100,118,97,110,116,97,103,
                         101,32,111,102,32,111,98,115,99,117,114,101,32,113,
                         117,105,114,107,115,32,105,110,32,116,104,101,32,99,
                         117,114,114,101,110,116,32,105,109,112,108,101,109,
                         101,110,116,97,116,105,111,110,46]}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        "ûIdeally, your code only contains the first type of efficient code. If that turns out to be too slow, profile the application to find out where the performance bottlenecks are and optimize only the bottlenecks. Let other code stay as clean as possible."}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        [352,84,104,105,115,32,69,102,102,105,99,105,101,110,
                         99,121,32,71,117,105,100,101,32,99,97,110,110,111,
                         116,32,114,101,97,108,108,121,32,116,101,97,99,104,
                         32,121,111,117,32,104,111,119,32,116,111,32,119,114,
                         105,116,101,32,101,102,102,105,99,105,101,110,116,32,
                         99,111,100,101,46,32,73,116,32,99,97,110,32,103,105,
                         118,101,32,121,111,117,32,97,32,102,101,119,32,112,
                         111,105,110,116,101,114,115,32,97,98,111,117,116,32,
                         119,104,97,116,32,116,111,32,97,118,111,105,100,32,
                         97,110,100,32,119,104,97,116,32,116,111,32,117,115,
                         101,44,32,97,110,100,32,115,111,109,101,32,117,110,
                         100,101,114,115,116,97,110,100,105,110,103,32,111,
                         102,32,104,111,119,32,99,101,114,116,97,105,110,32,
                         108,97,110,103,117,97,103,101,32,102,101,97,116,117,
                         114,101,115,32,97,114,101,32,105,109,112,108,101,109,
                         101,110,116,101,100,46,32,84,104,105,115,32,103,117,
                         105,100,101,32,100,111,101,115,32,110,111,116,32,105,
                         110,99,108,117,100,101,32,103,101,110,101,114,97,108,
                         32,116,105,112,115,32,97,98,111,117,116,32,111,112,
                         116,105,109,105,122,97,116,105,111,110,32,116,104,97,
                         116,32,119,111,114,107,115,32,105,110,32,97,110,121,
                         32,108,97,110,103,117,97,103,101,44,32,115,117,99,
                         104,32,97,115,32,109,111,118,105,110,103,32,99,111,
                         109,109,111,110,32,99,97,108,99,117,108,97,116,105,
                         111,110,115,32,111,117,116,32,111,102,32,108,111,111,
                         112,115,46]}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false},
              {sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {text,
                    [17,35,35,35,32,80,114,101,114,101,113,117,105,115,105,
                     116,101,115]},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        "^It is assumed that you are familiar with the Erlang programming language and the OTP concepts."}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,false}},
           {sep,
            [{text,
              [25,60,97,32,110,97,109,101,61,34,109,121,116,104,115,34,62,109,
               121,116,104,115,60,47,97,62]},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "ãSome truths seem to live on well beyond their best-before date, perhaps because \"information\" spreads faster from person-to-person than a single release note that says, for example, that body-recursive calls have become faster."}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "RThis section tries to kill the old truths (or semi-truths) that have become myths."}],
                   0,false}],
                 0,true},
                null},
               null}},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   "O### Myth: Tail-Recursive Functions are Much Faster\n    Than Recursive Functions"},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,"+<a name=\"tail_recursive\">tail_recursive</a>"},
                      {sep,
                       [{text,
                         "jAccording to the myth, using a tail-recursive function that builds a list in reverse followed by a call to"}],
                       0,false},
                      {text,
                       [17,42,108,105,115,116,115,58,114,101,118,101,114,115,
                        101,47,49,42]},
                      {sep,
                       [{text,
                         "­is faster than a body-recursive function that builds the list in correct order; the reason being that body-recursive functions use more memory than tail-recursive functions."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [411,84,104,97,116,32,119,97,115,32,116,114,117,101,32,
                        116,111,32,115,111,109,101,32,101,120,116,101,110,116,
                        32,98,101,102,111,114,101,32,82,49,50,66,46,32,73,116,
                        32,119,97,115,32,101,118,101,110,32,109,111,114,101,
                        32,116,114,117,101,32,98,101,102,111,114,101,32,82,55,
                        66,46,32,84,111,100,97,121,44,32,110,111,116,32,115,
                        111,32,109,117,99,104,46,32,65,32,98,111,100,121,45,
                        114,101,99,117,114,115,105,118,101,32,102,117,110,99,
                        116,105,111,110,32,103,101,110,101,114,97,108,108,121,
                        32,117,115,101,115,32,116,104,101,32,115,97,109,101,
                        32,97,109,111,117,110,116,32,111,102,32,109,101,109,
                        111,114,121,32,97,115,32,97,32,116,97,105,108,45,114,
                        101,99,117,114,115,105,118,101,32,102,117,110,99,116,
                        105,111,110,46,32,73,116,32,105,115,32,103,101,110,
                        101,114,97,108,108,121,32,110,111,116,32,112,111,115,
                        115,105,98,108,101,32,116,111,32,112,114,101,100,105,
                        99,116,32,119,104,101,116,104,101,114,32,116,104,101,
                        32,116,97,105,108,45,114,101,99,117,114,115,105,118,
                        101,32,111,114,32,116,104,101,32,98,111,100,121,45,
                        114,101,99,117,114,115,105,118,101,32,118,101,114,115,
                        105,111,110,32,119,105,108,108,32,98,101,32,102,97,
                        115,116,101,114,46,32,84,104,101,114,101,102,111,114,
                        101,44,32,117,115,101,32,116,104,101,32,118,101,114,
                        115,105,111,110,32,116,104,97,116,32,109,97,107,101,
                        115,32,121,111,117,114,32,99,111,100,101,32,99,108,
                        101,97,110,101,114,32,40,104,105,110,116,58,32,105,
                        116,32,105,115,32,117,115,117,97,108,108,121,32,116,
                        104,101,32,98,111,100,121,45,114,101,99,117,114,115,
                        105,118,101,32,118,101,114,115,105,111,110,41,46]}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "AFor a more thorough discussion about tail and body recursion, see"}],
                       0,false},
                      {text,
                       "t[Erlang's Tail Recursion is Not a Silver Bullet](http://ferd.ca/erlang-s-tail-recursion-is-not-a-silver-bullet.html)"},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,
                     [15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
                    {sep,
                     [{text,[4,32,32,32,32]},
                      {sep,
                       [{sep,
                         [{above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  "øA tail-recursive function that does not need to reverse the list at the end is faster than a body-recursive function, as are tail-recursive functions that do not construct any terms at all (for example, a function that sums all integers in a list)."}],
                                0,false}],
                              0,true},
                             null},
                            null}}],
                         0,false}],
                       0,true}],
                     0,false}},
                   {text,[0]}},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,"%### Myth: Operator \"++\" is Always Bad"},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[3,84,104,101]}],0,false},
                      {text,[4,42,43,43,42]},
                      {sep,
                       [{text,
                         "¶operator has, somewhat undeservedly, got a bad reputation. It probably has something to do with code like the following, which is the most inefficient way there is to reverse a list:"}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,
                       "P\nnaive_reverse([H|T]) ->\n    naive_reverse(T)++[H];\nnaive_reverse([]) ->\n    []."}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[6,65,115,32,116,104,101]}],0,false},
                      {text,[4,42,43,43,42]},
                      {sep,
                       [{text,
                         "coperator copies its left operand, the result is copied repeatedly, leading to quadratic complexity."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,"\tBut using"}],0,false},
                      {text,[4,42,43,43,42]},
                      {sep,
                       [{text,
                         [22,97,115,32,102,111,108,108,111,119,115,32,105,115,
                          32,110,111,116,32,98,97,100,58]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,[{sep,[{text,[6,42,42,79,75,42,42]}],0,false}],0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,
                       "u\nnaive_but_ok_reverse([H|T], Acc) ->\n    naive_but_ok_reverse(T, [H]++Acc);\nnaive_but_ok_reverse([], Acc) ->\n    Acc."}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "9Each list element is copied only once. The growing result"}],
                       0,false},
                      {text,[5,42,65,99,99,42]},
                      {sep,
                       [{text,
                         [28,105,115,32,116,104,101,32,114,105,103,104,116,32,
                          111,112,101,114,97,110,100,32,102,111,114,32,116,
                          104,101]}],
                       0,false},
                      {text,[4,42,43,43,42]},
                      {sep,
                       [{text,
                         [19,111,112,101,114,97,116,111,114,44,32,97,110,100,
                          32,105,116,32,105,115]}],
                       0,false},
                      {text,[7,42,42,110,111,116,42,42]},
                      {sep,[{text,[7,99,111,112,105,101,100,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "6Experienced Erlang programmers would write as follows:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,
                       "e\nvanilla_reverse([H|T], Acc) ->\n    vanilla_reverse(T, [H|Acc]);\nvanilla_reverse([], Acc) ->\n    Acc."}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "³This is slightly more efficient because here you do not build a list element only to copy it directly. (Or it would be more efficient if the compiler did not automatically rewrite"}],
                       0,false},
                      {text,"\n*[H]++Acc*"},
                      {sep,[{text,[2,116,111]}],0,false},
                      {text,"\t*[H|Acc]*"},
                      {sep,[{text,[2,46,41]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [26,35,35,35,32,77,121,116,104,58,32,83,116,114,105,110,
                    103,115,32,97,114,101,32,83,108,111,119]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "ËString handling can be slow if done improperly. In Erlang, you need to think a little more about how the strings are used and choose an appropriate representation. If you use regular expressions, use the"}],
                       0,false},
                      {text,"\n[re](./re)"},
                      {sep,
                       [{text,"(module in STDLIB instead of the obsolete"}],
                       0,false},
                      {text,"\b*regexp*"},
                      {sep,[{text,[7,109,111,100,117,108,101,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,",### Myth: Repairing a Dets File is Very Slow"},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "°The repair time is still proportional to the number of records in the file, but Dets repairs used to be much slower in the past. Dets has been massively rewritten and improved."}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   "R### Myth: BEAM is a Stack-Based Byte-Code Virtual Machine\n    (and Therefore Slow)"},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "ëBEAM is a register-based virtual machine. It has 1024 virtual registers that are used for holding temporary values and for passing arguments when calling functions. Variables that need to survive a function call are saved to the stack."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [143,66,69,65,77,32,105,115,32,97,32,116,104,114,101,
                        97,100,101,100,45,99,111,100,101,32,105,110,116,101,
                        114,112,114,101,116,101,114,46,32,69,97,99,104,32,105,
                        110,115,116,114,117,99,116,105,111,110,32,105,115,32,
                        119,111,114,100,32,112,111,105,110,116,105,110,103,32,
                        100,105,114,101,99,116,108,121,32,116,111,32,101,120,
                        101,99,117,116,97,98,108,101,32,67,45,99,111,100,101,
                        44,32,109,97,107,105,110,103,32,105,110,115,116,114,
                        117,99,116,105,111,110,32,100,105,115,112,97,116,99,
                        104,105,110,103,32,118,101,114,121,32,102,97,115,116,
                        46]}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   "J### Myth: Use \"_\" to Speed Up Your Program When a Variable\n    is Not Used"},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "WThat was once true, but from R6B the BEAM compiler can see that a variable is not used."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "PSimilarly, trivial transformations on the source-code level such as converting a"}],
                       0,false},
                      {text,[6,42,99,97,115,101,42]},
                      {sep,
                       [{text,
                         "hstatement to clauses at the top-level of the function seldom makes any difference to the generated code."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,"-### Myth: A NIF Always Speeds Up Your Program"},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "¤Rewriting Erlang code to a NIF to make it faster should be seen as a last resort. It is only guaranteed to be dangerous, but not guaranteed to speed up the program."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,")Doing too much work in each NIF call will"}],
                       0,false},
                      {text,
                       ";[degrade responsiveness of the VM](../erts/erl_nif#WARNING)"},
                      {sep,
                       [{text,
                         [157,46,32,68,111,105,110,103,32,116,111,111,32,108,
                          105,116,116,108,101,32,119,111,114,107,32,109,97,
                          121,32,109,101,97,110,32,116,104,97,116,32,116,104,
                          101,32,103,97,105,110,32,111,102,32,116,104,101,32,
                          102,97,115,116,101,114,32,112,114,111,99,101,115,
                          115,105,110,103,32,105,110,32,116,104,101,32,78,73,
                          70,32,105,115,32,101,97,116,101,110,32,117,112,32,
                          98,121,32,116,104,101,32,111,118,101,114,104,101,97,
                          100,32,111,102,32,99,97,108,108,105,110,103,32,116,
                          104,101,32,78,73,70,32,97,110,100,32,99,104,101,99,
                          107,105,110,103,32,116,104,101,32,97,114,103,117,
                          109,101,110,116,115,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [21,66,101,32,115,117,114,101,32,116,111,32,114,101,
                          97,100,32,97,98,111,117,116]}],
                       0,false},
                      {text,
                       "1[Long-running NIFs](../erts/erl_nif#lengthy_work)"},
                      {sep,
                       [{text,
                         [21,98,101,102,111,114,101,32,119,114,105,116,105,
                          110,103,32,97,32,78,73,70,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,false}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "fThis section lists a few modules and BIFs to watch out for, not only from a performance point of view."}],
                  0,false}],
                0,true},
               null},
              null}},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {text,
                  [16,35,35,35,32,84,105,109,101,114,32,77,111,100,117,108,
                   101]},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [21,67,114,101,97,116,105,110,103,32,116,105,109,101,
                         114,115,32,117,115,105,110,103]}],
                      0,false},
                     {text,
                      "2[erlang:send_after/3](../erts/erlang#send_after/3)"},
                     {sep,[{text,[3,97,110,100]}],0,false},
                     {text,
                      "4[erlang:start_timer/3](../erts/erlang#start_timer/3)"},
                     {sep,
                      [{text,
                        ">, is much more efficient than using the timers provided by the"}],
                      0,false},
                     {text,
                      [16,91,116,105,109,101,114,93,40,46,47,116,105,109,101,
                       114,41]},
                     {sep,
                      [{text,
                        [21,109,111,100,117,108,101,32,105,110,32,83,84,68,76,
                         73,66,46,32,84,104,101]}],
                      0,false},
                     {text,[7,42,116,105,109,101,114,42]},
                     {sep,
                      [{text,
                        "¾module uses a separate process to manage the timers. That process can easily become overloaded if many processes create and cancel timers frequently (especially when using the SMP emulator)."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [20,84,104,101,32,102,117,110,99,116,105,111,110,115,
                         32,105,110,32,116,104,101]}],
                      0,false},
                     {text,[7,42,116,105,109,101,114,42]},
                     {sep,
                      [{text,")module that do not manage timers (such as"}],
                      0,false},
                     {text,"\f*timer:tc/3*"},
                     {sep,[{text,[2,111,114]}],0,false},
                     {text,
                      [15,42,116,105,109,101,114,58,115,108,101,101,112,47,49,
                       42]},
                     {sep,
                      [{text,
                        "C), do not call the timer-server process and are therefore harmless."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {text,
                  [18,35,35,35,32,108,105,115,116,95,116,111,95,97,116,111,
                   109,47,49]},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "®Atoms are not garbage-collected. Once an atom is created, it is never removed. The emulator terminates if the limit for the number of atoms (1,048,576 by default) is reached."}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        "¤Therefore, converting arbitrary input strings to atoms can be dangerous in a system that runs continuously. If only certain well-defined atoms are allowed as input,"}],
                      0,false},
                     {text,
                      "A[list_to_existing_atom/1](../erts/erlang#list_to_existing_atom/1)"},
                     {sep,
                      [{text,
                        "Æcan be used to to guard against a denial-of-service attack. (All atoms that are allowed must have been created earlier, for example, by simply using all of them in a module and loading that module.)"}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,[{text,[5,85,115,105,110,103]}],0,false},
                     {text,
                      [16,42,108,105,115,116,95,116,111,95,97,116,111,109,47,
                       49,42]},
                     {sep,
                      [{text,"&to construct an atom that is passed to"}],
                      0,false},
                     {text,"\t*apply/3*"},
                     {sep,
                      [{text,
                        "Ias follows, is quite expensive and not recommended in time-critical code:"}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[6,96,96,96,101,114,108]},
                   {sep,
                    [{text,
                      "3\napply(list_to_atom(\"some_prefix\"++Var), foo, Args)"}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}}],
             0,false},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,{above,{text,"\f### length/1"},null},null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        "fThe time for calculating the length of a list is proportional to the length of the list, as opposed to"}],
                      0,false},
                     {text,
                      [14,42,116,117,112,108,101,95,115,105,122,101,47,49,42]},
                     {sep,[{text,[1,44]}],0,false},
                     {text,"\r*byte_size/1*"},
                     {sep,[{text,[5,44,32,97,110,100]}],0,false},
                     {text,"\f*bit_size/1*"},
                     {sep,
                      [{text,"%, which all execute in constant time."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        "6Normally, there is no need to worry about the speed of"}],
                      0,false},
                     {text,"\n*length/1*"},
                     {sep,
                      [{text,
                        [145,44,32,98,101,99,97,117,115,101,32,105,116,32,105,
                         115,32,101,102,102,105,99,105,101,110,116,108,121,32,
                         105,109,112,108,101,109,101,110,116,101,100,32,105,
                         110,32,67,46,32,73,110,32,116,105,109,101,45,99,114,
                         105,116,105,99,97,108,32,99,111,100,101,44,32,121,
                         111,117,32,109,105,103,104,116,32,119,97,110,116,32,
                         116,111,32,97,118,111,105,100,32,105,116,32,105,102,
                         32,116,104,101,32,105,110,112,117,116,32,108,105,115,
                         116,32,99,111,117,108,100,32,112,111,116,101,110,116,
                         105,97,108,108,121,32,98,101,32,118,101,114,121,32,
                         108,111,110,103,46]}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,[{text,"\fSome uses of"}],0,false},
                     {text,"\n*length/1*"},
                     {sep,
                      [{text,
                        "=can be replaced by matching. For example, the following code:"}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[6,96,96,96,101,114,108]},
                   {sep,
                    [{text,"&\nfoo(L) when length(L) >= 3 ->\n    ..."}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      [20,99,97,110,32,98,101,32,114,101,119,114,105,116,116,
                       101,110,32,116,111,58]}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[6,96,96,96,101,114,108]},
                   {sep,[{text,"\e\nfoo([_,_,_|_]=L) ->\n   ..."}],0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [29,79,110,101,32,115,108,105,103,104,116,32,100,105,
                         102,102,101,114,101,110,99,101,32,105,115,32,116,104,
                         97,116]}],
                      0,false},
                     {text,"\v*length(L)*"},
                     {sep,[{text,"\bfails if"}],0,false},
                     {text,[3,42,76,42]},
                     {sep,
                      [{text,
                        "\\is an improper list, while the pattern in the second code fragment accepts an improper list."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {text,
                  [16,35,35,35,32,115,101,116,101,108,101,109,101,110,116,47,
                   51]},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,"+[setelement/3](../erts/erlang#setelement/3)"},
                     {sep,
                      [{text,
                        "Icopies the tuple it modifies. Therefore, updating a tuple in a loop using"}],
                      0,false},
                     {text,
                      [14,42,115,101,116,101,108,101,109,101,110,116,47,51,
                       42]},
                     {sep,
                      [{text,"+creates a new copy of the tuple every time."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        "ÅThere is one exception to the rule that the tuple is copied. If the compiler clearly can see that destructively updating the tuple would give the same result as if the tuple was copied, the call to"}],
                      0,false},
                     {text,
                      [14,42,115,101,116,101,108,101,109,101,110,116,47,51,
                       42]},
                     {sep,
                      [{text,"&is replaced with a special destructive"}],
                      0,false},
                     {text,"\f*setelement*"},
                     {sep,
                      [{text,
                        "6instruction. In the following code sequence, the first"}],
                      0,false},
                     {text,
                      [14,42,115,101,116,101,108,101,109,101,110,116,47,51,
                       42]},
                     {sep,
                      [{text,
                        "5call copies the tuple and modifies the ninth element:"}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[6,96,96,96,101,114,108]},
                   {sep,
                    [{text,
                      [130,10,109,117,108,116,105,112,108,101,95,115,101,116,
                       101,108,101,109,101,110,116,40,84,48,41,32,45,62,10,32,
                       32,32,32,84,49,32,61,32,115,101,116,101,108,101,109,
                       101,110,116,40,57,44,32,84,48,44,32,98,97,114,41,44,10,
                       32,32,32,32,84,50,32,61,32,115,101,116,101,108,101,109,
                       101,110,116,40,55,44,32,84,49,44,32,102,111,111,98,97,
                       114,41,44,10,32,32,32,32,115,101,116,101,108,101,109,
                       101,110,116,40,53,44,32,84,50,44,32,110,101,119,95,118,
                       97,108,117,101,41,46]}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [17,84,104,101,32,116,119,111,32,102,111,108,108,111,
                         119,105,110,103]}],
                      0,false},
                     {text,
                      [14,42,115,101,116,101,108,101,109,101,110,116,47,51,
                       42]},
                     {sep,
                      [{text," calls modify the tuple in place."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,"#For the optimization to be applied,"}],
                      0,false},
                     {text,[7,42,42,97,108,108,42,42]},
                     {sep,
                      [{text,"'the followings conditions must be true:"}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,
                {above,
                 {sep,
                  [{text,[1,42]},
                   {text,
                    "CThe indices must be integer literals, not variables or expressions."}],
                  0,false},
                 {sep,
                  [{text,[1,42]},
                   {text,".The indices must be given in descending order."}],
                  0,false}},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{sep,
                     [{text,
                       "BThere must be no calls to another function in between the calls to"}],
                     0,false},
                    {text,
                     [14,42,115,101,116,101,108,101,109,101,110,116,47,51,42]},
                    {sep,[{text,[1,46]}],0,false}],
                   0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{sep,[{text,"\eThe tuple returned from one"}],0,false},
                   {text,
                    [14,42,115,101,116,101,108,101,109,101,110,116,47,51,42]},
                   {sep,
                    [{text,
                      "0call must only be used in the subsequent call to"}],
                    0,false},
                   {text,
                    [14,42,115,101,116,101,108,101,109,101,110,116,47,51,42]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,false}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,"*If the code cannot be structured as in the"}],
                      0,false},
                     {text,
                      [23,42,109,117,108,116,105,112,108,101,95,115,101,116,
                       101,108,101,109,101,110,116,47,49,42]},
                     {sep,
                      [{text,
                        [150,101,120,97,109,112,108,101,44,32,116,104,101,32,
                         98,101,115,116,32,119,97,121,32,116,111,32,109,111,
                         100,105,102,121,32,109,117,108,116,105,112,108,101,
                         32,101,108,101,109,101,110,116,115,32,105,110,32,97,
                         32,108,97,114,103,101,32,116,117,112,108,101,32,105,
                         115,32,116,111,32,99,111,110,118,101,114,116,32,116,
                         104,101,32,116,117,112,108,101,32,116,111,32,97,32,
                         108,105,115,116,44,32,109,111,100,105,102,121,32,116,
                         104,101,32,108,105,115,116,44,32,97,110,100,32,99,
                         111,110,118,101,114,116,32,105,116,32,98,97,99,107,
                         32,116,111,32,97,32,116,117,112,108,101,46]}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,{above,{text,"\n### size/1"},null},null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,"\b*size/1*"},
                     {sep,
                      [{text,
                        ".returns the size for both tuples and binaries."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [14,85,115,105,110,103,32,116,104,101,32,66,73,70,
                         115]}],
                      0,false},
                     {text,
                      [14,42,116,117,112,108,101,95,115,105,122,101,47,49,42]},
                     {sep,[{text,[3,97,110,100]}],0,false},
                     {text,"\r*byte_size/1*"},
                     {sep,
                      [{text,
                        [150,103,105,118,101,115,32,116,104,101,32,99,111,109,
                         112,105,108,101,114,32,97,110,100,32,116,104,101,32,
                         114,117,110,116,105,109,101,32,115,121,115,116,101,
                         109,32,109,111,114,101,32,111,112,112,111,114,116,
                         117,110,105,116,105,101,115,32,102,111,114,32,111,
                         112,116,105,109,105,122,97,116,105,111,110,46,32,65,
                         110,111,116,104,101,114,32,97,100,118,97,110,116,97,
                         103,101,32,105,115,32,116,104,97,116,32,116,104,101,
                         32,66,73,70,115,32,103,105,118,101,32,68,105,97,108,
                         121,122,101,114,32,109,111,114,101,32,116,121,112,
                         101,32,105,110,102,111,114,109,97,116,105,111,110,
                         46]}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {text,
                  [18,35,35,35,32,115,112,108,105,116,95,98,105,110,97,114,
                   121,47,50]},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        "TIt is usually more efficient to split a binary using matching instead of calling the"}],
                      0,false},
                     {text,
                      [16,42,115,112,108,105,116,95,98,105,110,97,114,121,47,
                       50,42]},
                     {sep,
                      [{text,
                        "5function. Furthermore, mixing bit syntax matching and"}],
                      0,false},
                     {text,
                      [16,42,115,112,108,105,116,95,98,105,110,97,114,121,47,
                       50,42]},
                     {sep,
                      [{text,
                        "6can prevent some optimizations of bit syntax matching."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      "/\n        <<Bin1:Num/binary,Bin2/binary>> = Bin,"}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,"-\n        {Bin1,Bin2} = split_binary(Bin, Num)"}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}}],
             0,false}],
           0,false}},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "7Binaries can be efficiently built in the following way:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   "³\nmy_list_to_binary(List) ->\n    my_list_to_binary(List, <<>>).\n\nmy_list_to_binary([H|T], Acc) ->\n    my_list_to_binary(T, <<Acc/binary,H>>);\nmy_list_to_binary([], Acc) ->\n    Acc."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,".Binaries can be efficiently matched like this:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   "b\nmy_binary_to_list(<<H,T/binary>>) ->\n    [H|my_binary_to_list(T)];\nmy_binary_to_list(<<>>) -> []."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,{text," ### How Binaries are Implemented"},null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       "eInternally, binaries and bitstrings are implemented in the same way. In this section, they are called"}],
                     0,false},
                    {text,"\f**binaries**"},
                    {sep,
                     [{text,
                       "Abecause that is what they are called in the emulator source code."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "6Four types of binary objects are available internally:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {sep,
               [{text,[1,42]},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "2Two are containers for binary data and are called:"}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{text,
                        [17,42,42,82,101,102,99,32,98,105,110,97,114,105,101,
                         115,42,42]},
                       {sep,[{text,"\n(short for"}],0,false},
                       {text,
                        [30,42,42,114,101,102,101,114,101,110,99,101,45,99,
                         111,117,110,116,101,100,32,98,105,110,97,114,105,101,
                         115,42,42]},
                       {sep,[{text,[1,41]}],0,false}],
                      0,false}],
                    0,false},
                   {sep,
                    [{text,[1,42]},
                     {text,
                      [17,42,42,72,101,97,112,32,98,105,110,97,114,105,101,
                       115,42,42]}],
                    0,false}}],
                 0,false}],
               0,false},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "?Two are merely references to a part of a binary and are called:"}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {sep,
                    [{text,[1,42]},
                     {text,
                      [16,42,42,115,117,98,32,98,105,110,97,114,105,101,115,
                       42,42]}],
                    0,false},
                   {sep,
                    [{text,[1,42]},
                     {text,
                      [18,42,42,109,97,116,99,104,32,99,111,110,116,101,120,
                       116,115,42,42]}],
                    0,false}}],
                 0,false}],
               0,false}},
             {sep,
              [{text,"%<a name=\"refc_binary\">refc_binary</a>"},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [17,35,35,35,32,82,101,102,99,32,66,105,110,97,114,105,101,
                    115]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,"#Refc binaries consist of two parts:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{sep,
                     [{text,
                       ".An object stored on the process heap, called a"}],
                     0,false},
                    {text,"\v**ProcBin**"}],
                   0,false}],
                 0,false},
                {sep,
                 [{text,[1,42]},
                  {text,
                   ":The binary object itself, stored outside all process heaps"}],
                 0,false}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "ìThe binary object can be referenced by any number of ProcBins from any number of processes. The object contains a reference counter to keep track of the number of references, so that it can be removed when the last reference disappears."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "¾All ProcBin objects in a process are part of a linked list, so that the garbage collector can keep track of them and decrement the reference counters in the binary when a ProcBin disappears."}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{text,"%<a name=\"heap_binary\">heap_binary</a>"},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [17,35,35,35,32,72,101,97,112,32,66,105,110,97,114,105,101,
                    115]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "üHeap binaries are small binaries, up to 64 bytes, and are stored directly on the process heap. They are copied when the process is garbage-collected and when they are sent as a message. They do not require any special handling by the garbage collector."}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [16,35,35,35,32,83,117,98,32,66,105,110,97,114,105,101,
                    115]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [21,84,104,101,32,114,101,102,101,114,101,110,99,101,
                          32,111,98,106,101,99,116,115]}],
                       0,false},
                      {text,
                       [16,42,42,115,117,98,32,98,105,110,97,114,105,101,115,
                        42,42]},
                      {sep,[{text,[3,97,110,100]}],0,false},
                      {text,
                       [18,42,42,109,97,116,99,104,32,99,111,110,116,101,120,
                        116,115,42,42]},
                      {sep,
                       [{text,
                         "3can reference part of a refc binary or heap binary."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,"#<a name=\"sub_binary\">sub_binary</a>"},
                      {sep,[{text,[1,65]}],0,false},
                      {text,
                       [14,42,42,115,117,98,32,98,105,110,97,114,121,42,42]},
                      {sep,[{text,"\ris created by"}],0,false},
                      {text,
                       [16,42,115,112,108,105,116,95,98,105,110,97,114,121,47,
                        50,42]},
                      {sep,
                       [{text,
                         [270,97,110,100,32,119,104,101,110,32,97,32,98,105,
                          110,97,114,121,32,105,115,32,109,97,116,99,104,101,
                          100,32,111,117,116,32,105,110,32,97,32,98,105,110,
                          97,114,121,32,112,97,116,116,101,114,110,46,32,65,
                          32,115,117,98,32,98,105,110,97,114,121,32,105,115,
                          32,97,32,114,101,102,101,114,101,110,99,101,32,105,
                          110,116,111,32,97,32,112,97,114,116,32,111,102,32,
                          97,110,111,116,104,101,114,32,98,105,110,97,114,121,
                          32,40,114,101,102,99,32,111,114,32,104,101,97,112,
                          32,98,105,110,97,114,121,44,32,98,117,116,32,110,
                          101,118,101,114,32,105,110,116,111,32,97,110,111,
                          116,104,101,114,32,115,117,98,32,98,105,110,97,114,
                          121,41,46,32,84,104,101,114,101,102,111,114,101,44,
                          32,109,97,116,99,104,105,110,103,32,111,117,116,32,
                          97,32,98,105,110,97,114,121,32,105,115,32,114,101,
                          108,97,116,105,118,101,108,121,32,99,104,101,97,112,
                          32,98,101,99,97,117,115,101,32,116,104,101,32,97,99,
                          116,117,97,108,32,98,105,110,97,114,121,32,100,97,
                          116,97,32,105,115,32,110,101,118,101,114,32,99,111,
                          112,105,101,100,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [17,35,35,35,32,77,97,116,99,104,32,67,111,110,116,101,120,
                    116]},
                  null},
                 null}},
               {text,")<a name=\"match_context\">match_context</a>"},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[1,65]}],0,false},
                      {text,
                       [17,42,42,109,97,116,99,104,32,99,111,110,116,101,120,
                        116,42,42]},
                      {sep,
                       [{text,
                         "áis similar to a sub binary, but is optimized for binary matching. For example, it contains a direct pointer to the binary data. For each field that is matched out of a binary, the position in the match context is incremented."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "ÕThe compiler tries to avoid generating code that creates a sub binary, only to shortly afterwards create a new match context and discard the sub binary. Instead of creating a sub binary, the match context is kept."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "ÐThe compiler can only do this optimization if it knows that the match context will not be shared. If it would be shared, the functional properties (also called referential transparency) of Erlang would break."}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,false},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {text,
                 [25,35,35,35,32,67,111,110,115,116,114,117,99,116,105,110,
                  103,32,66,105,110,97,114,105,101,115]},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       "@Appending to a binary or bitstring is specially optimized by the"}],
                     0,false},
                    {text,
                     [18,42,42,114,117,110,116,105,109,101,32,115,121,115,116,
                      101,109,42,42]},
                    {sep,[{text,[1,58]}],0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,
                     "1\n<<Binary/binary, ...>>\n<<Binary/bitstring, ...>>"}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     [147,65,115,32,116,104,101,32,114,117,110,116,105,109,
                      101,32,115,121,115,116,101,109,32,104,97,110,100,108,
                      101,115,32,116,104,101,32,111,112,116,105,109,105,122,
                      97,116,105,111,110,32,40,105,110,115,116,101,97,100,32,
                      111,102,32,116,104,101,32,99,111,109,112,105,108,101,
                      114,41,44,32,116,104,101,114,101,32,97,114,101,32,118,
                      101,114,121,32,102,101,119,32,99,105,114,99,117,109,115,
                      116,97,110,99,101,115,32,105,110,32,119,104,105,99,104,
                      32,116,104,101,32,111,112,116,105,109,105,122,97,116,
                      105,111,110,32,100,111,101,115,32,110,111,116,32,119,
                      111,114,107,46]}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "HTo explain how it works, let us examine the following code line by line:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,
                     "è\nBin0 = <<0>>,                    %% 1\nBin1 = <<Bin0/binary,1,2,3>>,    %% 2\nBin2 = <<Bin1/binary,4,5,6>>,    %% 3\nBin3 = <<Bin2/binary,7,8,9>>,    %% 4\nBin4 = <<Bin1/binary,17>>,       %% 5 !!!\n{Bin4,Bin3}                      %% 6"}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,
               {above,
                {above,
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{sep,
                      [{text,
                        [23,76,105,110,101,32,49,32,40,109,97,114,107,101,100,
                         32,119,105,116,104,32,116,104,101]}],
                      0,false},
                     {text,[6,42,37,37,32,49,42]},
                     {sep,
                      [{text,
                        [19,99,111,109,109,101,110,116,41,44,32,97,115,115,
                         105,103,110,115,32,97]}],
                      0,false},
                     {text,"\e[heap binary](#heap_binary)"},
                     {sep,[{text,[6,116,111,32,116,104,101]}],0,false},
                     {text,[6,42,66,105,110,48,42]},
                     {sep,[{text,"\tvariable."}],0,false}],
                    0,false}],
                  0,false},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{sep,
                      [{text,"!Line 2 is an append operation. As"}],
                      0,false},
                     {text,[6,42,66,105,110,48,42]},
                     {sep,
                      [{text,
                        "3has not been involved in an append operation, a new"}],
                      0,false},
                     {text,"\e[refc binary](#refc_binary)"},
                     {sep,
                      [{text,
                        [30,105,115,32,99,114,101,97,116,101,100,32,97,110,
                         100,32,116,104,101,32,99,111,110,116,101,110,116,115,
                         32,111,102]}],
                      0,false},
                     {text,[6,42,66,105,110,48,42]},
                     {sep,
                      [{text,
                        [22,105,115,32,99,111,112,105,101,100,32,105,110,116,
                         111,32,105,116,46,32,84,104,101]}],
                      0,false},
                     {text,"\v**ProcBin**"},
                     {sep,
                      [{text,
                        "Ãpart of the refc binary has its size set to the size of the data stored in the binary, while the binary object has extra space allocated. The size of the binary object is either twice the size of"}],
                      0,false},
                     {text,[6,42,66,105,110,49,42]},
                     {sep,
                      [{text,
                        "4or 256, whichever is larger. In this case it is 256."}],
                      0,false}],
                    0,false}],
                  0,false}},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{sep,[{text,"\eLine 3 is more interesting."}],0,false},
                    {text,[6,42,66,105,110,49,42]},
                    {text,[7,42,42,104,97,115,42,42]},
                    {sep,
                     [{text,
                       "ybeen used in an append operation, and it has 252 bytes of unused storage at the end, so the 3 new bytes are stored there."}],
                     0,false}],
                   0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {text,
                  "hLine 4. The same applies here. There are 249 bytes left, so there is no problem storing another 3 bytes."}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,
                   [{text,
                     [23,76,105,110,101,32,53,46,32,72,101,114,101,44,32,115,
                      111,109,101,116,104,105,110,103]}],
                   0,false},
                  {text,
                   [15,42,42,105,110,116,101,114,101,115,116,105,110,103,42,
                    42]},
                  {sep,
                   [{text,
                     "Ihappens. Notice that the result is not appended to the previous result in"}],
                   0,false},
                  {text,[6,42,66,105,110,51,42]},
                  {sep,[{text,"\b, but to"}],0,false},
                  {text,[6,42,66,105,110,49,42]},
                  {sep,
                   [{text,
                     [21,46,32,73,116,32,105,115,32,101,120,112,101,99,116,
                      101,100,32,116,104,97,116]}],
                   0,false},
                  {text,[6,42,66,105,110,52,42]},
                  {sep,
                   [{text,
                     [26,119,105,108,108,32,98,101,32,97,115,115,105,103,110,
                      101,100,32,116,104,101,32,118,97,108,117,101]}],
                   0,false},
                  {text,[16,42,60,60,48,44,49,44,50,44,51,44,49,55,62,62,42]},
                  {sep,
                   [{text,
                     [26,46,32,73,116,32,105,115,32,97,108,115,111,32,101,120,
                      112,101,99,116,101,100,32,116,104,97,116]}],
                   0,false},
                  {text,[6,42,66,105,110,51,42]},
                  {sep,
                   [{text,
                     [23,119,105,108,108,32,114,101,116,97,105,110,32,105,116,
                      115,32,118,97,108,117,101,32,40]}],
                   0,false},
                  {text,
                   [25,42,60,60,48,44,49,44,50,44,51,44,52,44,53,44,54,44,55,
                    44,56,44,57,62,62,42]},
                  {sep,
                   [{text,
                     "0). Clearly, the runtime system cannot write byte"}],
                   0,false},
                  {text,[4,42,49,55,42]},
                  {sep,
                   [{text,
                     "7into the binary, because that would change the value of"}],
                   0,false},
                  {text,[6,42,66,105,110,51,42]},
                  {sep,[{text,[2,116,111]}],0,false},
                  {text,
                   [26,42,60,60,48,44,49,44,50,44,51,44,52,44,49,55,44,54,44,
                    55,44,56,44,57,62,62,42]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,false}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [28,84,104,101,32,114,117,110,116,105,109,101,32,115,
                        121,115,116,101,109,32,115,101,101,115,32,116,104,97,
                        116]}],
                     0,false},
                    {text,[6,42,66,105,110,49,42]},
                    {sep,
                     [{text,
                       "\\is the result from a previous append operation (not from the latest append operation), so it"}],
                     0,false},
                    {text,"\n**copies**"},
                    {sep,
                     [{text,
                       [15,116,104,101,32,99,111,110,116,101,110,116,115,32,
                        111,102]}],
                     0,false},
                    {text,[6,42,66,105,110,49,42]},
                    {sep,
                     [{text,
                       [142,116,111,32,97,32,110,101,119,32,98,105,110,97,114,
                        121,44,32,114,101,115,101,114,118,101,32,101,120,116,
                        114,97,32,115,116,111,114,97,103,101,44,32,97,110,100,
                        32,115,111,32,111,110,46,32,40,72,101,114,101,32,105,
                        115,32,110,111,116,32,101,120,112,108,97,105,110,101,
                        100,32,104,111,119,32,116,104,101,32,114,117,110,116,
                        105,109,101,32,115,121,115,116,101,109,32,99,97,110,
                        32,107,110,111,119,32,116,104,97,116,32,105,116,32,
                        105,115,32,110,111,116,32,97,108,108,111,119,101,100,
                        32,116,111,32,119,114,105,116,101,32,105,110,116,
                        111]}],
                     0,false},
                    {text,[6,42,66,105,110,49,42]},
                    {sep,
                     [{text,
                       "y; it is left as an exercise to the curious reader to figure out how it is done by reading the emulator sources, primarily"}],
                     0,false},
                    {text,"\f*erl_bits.c*"},
                    {sep,[{text,[2,46,41]}],0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,{text,"$### Circumstances That Force Copying"},null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "HThe optimization of the binary append operation requires that there is a"}],
                       0,false},
                      {text,"\n**single**"},
                      {sep,[{text,"\rProcBin and a"}],0,false},
                      {text,
                       [20,42,42,115,105,110,103,108,101,32,114,101,102,101,
                        114,101,110,99,101,42,42]},
                      {sep,
                       [{text,
                         [317,116,111,32,116,104,101,32,80,114,111,99,66,105,
                          110,32,102,111,114,32,116,104,101,32,98,105,110,97,
                          114,121,46,32,84,104,101,32,114,101,97,115,111,110,
                          32,105,115,32,116,104,97,116,32,116,104,101,32,98,
                          105,110,97,114,121,32,111,98,106,101,99,116,32,99,
                          97,110,32,98,101,32,109,111,118,101,100,32,40,114,
                          101,97,108,108,111,99,97,116,101,100,41,32,100,117,
                          114,105,110,103,32,97,110,32,97,112,112,101,110,100,
                          32,111,112,101,114,97,116,105,111,110,44,32,97,110,
                          100,32,119,104,101,110,32,116,104,97,116,32,104,97,
                          112,112,101,110,115,44,32,116,104,101,32,112,111,
                          105,110,116,101,114,32,105,110,32,116,104,101,32,80,
                          114,111,99,66,105,110,32,109,117,115,116,32,98,101,
                          32,117,112,100,97,116,101,100,46,32,73,102,32,116,
                          104,101,114,101,32,119,111,117,108,100,32,98,101,32,
                          109,111,114,101,32,116,104,97,110,32,111,110,101,32,
                          80,114,111,99,66,105,110,32,112,111,105,110,116,105,
                          110,103,32,116,111,32,116,104,101,32,98,105,110,97,
                          114,121,32,111,98,106,101,99,116,44,32,105,116,32,
                          119,111,117,108,100,32,110,111,116,32,98,101,32,112,
                          111,115,115,105,98,108,101,32,116,111,32,102,105,
                          110,100,32,97,110,100,32,117,112,100,97,116,101,32,
                          97,108,108,32,111,102,32,116,104,101,109,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "ëTherefore, certain operations on a binary mark it so that any future append operation will be forced to copy the binary. In most cases, the binary object will be shrunk at the same time to reclaim the extra space allocated for growing."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [142,87,104,101,110,32,97,112,112,101,110,100,105,110,
                        103,32,116,111,32,97,32,98,105,110,97,114,121,32,97,
                        115,32,102,111,108,108,111,119,115,44,32,111,110,108,
                        121,32,116,104,101,32,98,105,110,97,114,121,32,114,
                        101,116,117,114,110,101,100,32,102,114,111,109,32,116,
                        104,101,32,108,97,116,101,115,116,32,97,112,112,101,
                        110,100,32,111,112,101,114,97,116,105,111,110,32,119,
                        105,108,108,32,115,117,112,112,111,114,116,32,102,117,
                        114,116,104,101,114,32,99,104,101,97,112,32,97,112,
                        112,101,110,100,32,111,112,101,114,97,116,105,111,110,
                        115,58]}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,
                       [19,10,66,105,110,32,61,32,60,60,66,105,110,48,44,46,
                        46,46,62,62]}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "CIn the code fragment in the beginning of this section, appending to"}],
                       0,false},
                      {text,[5,42,66,105,110,42]},
                      {sep,
                       [{text,"!will be cheap, while appending to"}],
                       0,false},
                      {text,[6,42,66,105,110,48,42]},
                      {sep,
                       [{text,
                         "Fwill force the creation of a new binary and copying of the contents of"}],
                       0,false},
                      {text,[6,42,66,105,110,48,42]},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "ÊIf a binary is sent as a message to a process or port, the binary will be shrunk and any further append operation will copy the binary data into a new binary. For example, in the following code fragment"}],
                       0,false},
                      {text,[6,42,66,105,110,49,42]},
                      {sep,
                       [{text,"!will be copied in the third line:"}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,
                       "S\nBin1 = <<Bin0,...>>,\nPortOrPid ! Bin1,\nBin = <<Bin1,...>>  %% Bin1 will be COPIED\n"}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "RThe same happens if you insert a binary into an Ets table, send it to a port using"}],
                       0,false},
                      {text,
                       [23,42,101,114,108,97,110,103,58,112,111,114,116,95,99,
                        111,109,109,97,110,100,47,50,42]},
                      {sep,
                       [{text,
                         [15,44,32,111,114,32,112,97,115,115,32,105,116,32,
                          116,111]}],
                       0,false},
                      {text,
                       ":[enif_inspect_binary](../erts/erl_nif#enif_inspect_binary)"},
                      {sep,[{text,"\tin a NIF."}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "gMatching a binary will also cause it to shrink and the next append operation will copy the binary data:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,
                       "\\\nBin1 = <<Bin0,...>>,\n<<X,Y,Z,T/binary>> = Bin1,\nBin = <<Bin1,...>>  %% Bin1 will be COPIED\n"}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [20,84,104,101,32,114,101,97,115,111,110,32,105,115,
                          32,116,104,97,116,32,97]}],
                       0,false},
                      {text,
                       [31,91,109,97,116,99,104,32,99,111,110,116,101,120,116,
                        93,40,35,109,97,116,99,104,95,99,111,110,116,101,120,
                        116,41]},
                      {sep,
                       [{text,
                         "-contains a direct pointer to the binary data."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [346,73,102,32,97,32,112,114,111,99,101,115,115,32,115,
                        105,109,112,108,121,32,107,101,101,112,115,32,98,105,
                        110,97,114,105,101,115,32,40,101,105,116,104,101,114,
                        32,105,110,32,34,108,111,111,112,32,100,97,116,97,34,
                        32,111,114,32,105,110,32,116,104,101,32,112,114,111,
                        99,101,115,115,32,100,105,99,116,105,111,110,97,114,
                        121,41,44,32,116,104,101,32,103,97,114,98,97,103,101,
                        32,99,111,108,108,101,99,116,111,114,32,99,97,110,32,
                        101,118,101,110,116,117,97,108,108,121,32,115,104,114,
                        105,110,107,32,116,104,101,32,98,105,110,97,114,105,
                        101,115,46,32,73,102,32,111,110,108,121,32,111,110,
                        101,32,115,117,99,104,32,98,105,110,97,114,121,32,105,
                        115,32,107,101,112,116,44,32,105,116,32,119,105,108,
                        108,32,110,111,116,32,98,101,32,115,104,114,117,110,
                        107,46,32,73,102,32,116,104,101,32,112,114,111,99,101,
                        115,115,32,108,97,116,101,114,32,97,112,112,101,110,
                        100,115,32,116,111,32,97,32,98,105,110,97,114,121,32,
                        116,104,97,116,32,104,97,115,32,98,101,101,110,32,115,
                        104,114,117,110,107,44,32,116,104,101,32,98,105,110,
                        97,114,121,32,111,98,106,101,99,116,32,119,105,108,
                        108,32,98,101,32,114,101,97,108,108,111,99,97,116,101,
                        100,32,116,111,32,109,97,107,101,32,112,108,97,99,101,
                        32,102,111,114,32,116,104,101,32,100,97,116,97,32,116,
                        111,32,98,101,32,97,112,112,101,110,100,101,100,46]}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,false},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {text,
                 [21,35,35,35,32,77,97,116,99,104,105,110,103,32,66,105,110,
                  97,114,105,101,115]},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "DLet us revisit the example in the beginning of the previous section:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,
                     "b\nmy_binary_to_list(<<H,T/binary>>) ->\n    [H|my_binary_to_list(T)];\nmy_binary_to_list(<<>>) -> []."}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [14,84,104,101,32,102,105,114,115,116,32,116,105,109,
                        101]}],
                     0,false},
                    {text,
                     [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,
                      108,105,115,116,47,49,42]},
                    {sep,[{text,"\fis called, a"}],0,false},
                    {text,
                     [31,91,109,97,116,99,104,32,99,111,110,116,101,120,116,
                      93,40,35,109,97,116,99,104,95,99,111,110,116,101,120,
                      116,41]},
                    {sep,
                     [{text,
                       "§is created. The match context points to the first byte of the binary. 1 byte is matched out and the match context is updated to point to the second byte in the binary."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,"-At this point it would make sense to create a"}],
                     0,false},
                    {text,
                     [25,91,115,117,98,32,98,105,110,97,114,121,93,40,35,115,
                      117,98,95,98,105,110,97,114,121,41]},
                    {sep,
                     [{text,
                       "q, but in this particular example the compiler sees that there will soon be a call to a function (in this case, to"}],
                     0,false},
                    {text,
                     [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,
                      108,105,115,116,47,49,42]},
                    {sep,
                     [{text,
                       "Titself) that immediately will create a new match context and discard the sub binary."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,[{text,"\tTherefore"}],0,false},
                    {text,
                     [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,
                      108,105,115,116,47,49,42]},
                    {sep,
                     [{text,
                       "Õcalls itself with the match context instead of with a sub binary. The instruction that initializes the matching operation basically does nothing when it sees that it was passed a match context instead of a binary."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "ÄWhen the end of the binary is reached and the second clause matches, the match context will simply be discarded (removed in the next garbage collection, as there is no longer any reference to it)."}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,[{text,"\rTo summarize,"}],0,false},
                    {text,
                     [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,
                      108,105,115,116,47,49,42]},
                    {sep,
                     [{text,
                       [20,111,110,108,121,32,110,101,101,100,115,32,116,111,
                        32,99,114,101,97,116,101]}],
                     0,false},
                    {text,[7,42,42,111,110,101,42,42]},
                    {sep,
                     [{text,"\"match context and no sub binaries."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,[{text," Notice that the match context in"}],0,false},
                    {text,
                     [21,42,109,121,95,98,105,110,97,114,121,95,116,111,95,
                      108,105,115,116,47,49,42]},
                    {sep,
                     [{text,
                       "«was discarded when the entire binary had been traversed. What happens if the iteration stops before it has reached the end of the binary? Will the optimization still work?"}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,
                     "w\nafter_zero(<<0,T/binary>>) ->\n    T;\nafter_zero(<<_,T/binary>>) ->\n    after_zero(T);\nafter_zero(<<>>) ->\n    <<>>.\n  "}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "[Yes, it will. The compiler will remove the building of the sub binary in the second clause:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,
                     "9\n...\nafter_zero(<<_,T/binary>>) ->\n    after_zero(T);\n..."}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "GBut it will generate code that builds a sub binary in the first clause:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,")\nafter_zero(<<0,T/binary>>) ->\n    T;\n..."}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,[{text,"\nTherefore,"}],0,false},
                    {text,
                     [14,42,97,102,116,101,114,95,122,101,114,111,47,49,42]},
                    {sep,
                     [{text,
                       "gbuilds one match context and one sub binary (assuming it is passed a binary that contains a zero byte)."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,"/Code like the following will also be optimized:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,
                     [299,10,97,108,108,95,98,117,116,95,122,101,114,111,101,
                      115,95,116,111,95,108,105,115,116,40,66,117,102,102,101,
                      114,44,32,65,99,99,44,32,48,41,32,45,62,10,32,32,32,32,
                      123,108,105,115,116,115,58,114,101,118,101,114,115,101,
                      40,65,99,99,41,44,66,117,102,102,101,114,125,59,10,97,
                      108,108,95,98,117,116,95,122,101,114,111,101,115,95,116,
                      111,95,108,105,115,116,40,60,60,48,44,84,47,98,105,110,
                      97,114,121,62,62,44,32,65,99,99,44,32,82,101,109,97,105,
                      110,105,110,103,41,32,45,62,10,32,32,32,32,97,108,108,
                      95,98,117,116,95,122,101,114,111,101,115,95,116,111,95,
                      108,105,115,116,40,84,44,32,65,99,99,44,32,82,101,109,
                      97,105,110,105,110,103,45,49,41,59,10,97,108,108,95,98,
                      117,116,95,122,101,114,111,101,115,95,116,111,95,108,
                      105,115,116,40,60,60,66,121,116,101,44,84,47,98,105,110,
                      97,114,121,62,62,44,32,65,99,99,44,32,82,101,109,97,105,
                      110,105,110,103,41,32,45,62,10,32,32,32,32,97,108,108,
                      95,98,117,116,95,122,101,114,111,101,115,95,116,111,95,
                      108,105,115,116,40,84,44,32,91,66,121,116,101,124,65,99,
                      99,93,44,32,82,101,109,97,105,110,105,110,103,45,49,41,
                      46]}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [139,84,104,101,32,99,111,109,112,105,108,101,114,32,
                        114,101,109,111,118,101,115,32,98,117,105,108,100,105,
                        110,103,32,111,102,32,115,117,98,32,98,105,110,97,114,
                        105,101,115,32,105,110,32,116,104,101,32,115,101,99,
                        111,110,100,32,97,110,100,32,116,104,105,114,100,32,
                        99,108,97,117,115,101,115,44,32,97,110,100,32,105,116,
                        32,97,100,100,115,32,97,110,32,105,110,115,116,114,
                        117,99,116,105,111,110,32,116,111,32,116,104,101,32,
                        102,105,114,115,116,32,99,108,97,117,115,101,32,116,
                        104,97,116,32,99,111,110,118,101,114,116,115]}],
                     0,false},
                    {text,"\b*Buffer*"},
                    {sep,
                     [{text,
                       "6from a match context to a sub binary (or do nothing if"}],
                     0,false},
                    {text,"\b*Buffer*"},
                    {sep,
                     [{text,
                       [21,105,115,32,97,32,98,105,110,97,114,121,32,97,108,
                        114,101,97,100,121,41,46]}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "ZBut in more complicated code, how can one know whether the optimization is applied or not?"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {sep,
              [{text,"'<a name=\"bin_opt_info\">bin_opt_info</a>"},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [23,35,35,35,32,79,112,116,105,111,110,32,98,105,110,95,
                    111,112,116,95,105,110,102,111]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[7,85,115,101,32,116,104,101]}],0,false},
                      {text,
                       [14,42,98,105,110,95,111,112,116,95,105,110,102,111,
                        42]},
                      {sep,
                       [{text,
                         "|option to have the compiler print a lot of information about binary optimizations. It can be given either to the compiler or"}],
                       0,false},
                      {text,[6,42,101,114,108,99,42]},
                      {sep,[{text,[1,58]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,[{text,"\e\nerlc +bin_opt_info Mod.erl"}],0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,"*or passed through an environment variable:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,")\nexport ERL_COMPILER_OPTIONS=bin_opt_info"}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [15,78,111,116,105,99,101,32,116,104,97,116,32,116,
                          104,101]}],
                       0,false},
                      {text,
                       [14,42,98,105,110,95,111,112,116,95,105,110,102,111,
                        42]},
                      {sep,
                       [{text,
                         "3is not meant to be a permanent option added to your"}],
                       0,false},
                      {text,"\n*Makefile*"},
                      {sep,
                       [{text,
                         "£s, because all messages that it generates cannot be eliminated. Therefore, passing the option through the environment is in most cases the most practical approach."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [29,84,104,101,32,119,97,114,110,105,110,103,115,32,
                        108,111,111,107,32,97,115,32,102,111,108,108,111,119,
                        115,58]}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,
                       [156,10,46,47,101,102,102,105,99,105,101,110,99,121,95,
                        103,117,105,100,101,46,101,114,108,58,54,48,58,32,87,
                        97,114,110,105,110,103,58,32,78,79,84,32,79,80,84,73,
                        77,73,90,69,68,58,32,98,105,110,97,114,121,32,105,115,
                        32,114,101,116,117,114,110,101,100,32,102,114,111,109,
                        32,116,104,101,32,102,117,110,99,116,105,111,110,10,
                        46,47,101,102,102,105,99,105,101,110,99,121,95,103,
                        117,105,100,101,46,101,114,108,58,54,50,58,32,87,97,
                        114,110,105,110,103,58,32,79,80,84,73,77,73,90,69,68,
                        58,32,109,97,116,99,104,32,99,111,110,116,101,120,116,
                        32,114,101,117,115,101,100]}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "¨To make it clearer exactly what code the warnings refer to, the warnings in the following examples are inserted as comments after the clause they refer to, for example:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,
                       "á\nafter_zero(<<0,T/binary>>) ->\n         %% BINARY CREATED: binary is returned from the function\n    T;\nafter_zero(<<_,T/binary>>) ->\n         %% OPTIMIZED: match context reused\n    after_zero(T);\nafter_zero(<<>>) ->\n    <<>>."}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "ËThe warning for the first clause says that the creation of a sub binary cannot be delayed, because it will be returned. The warning for the second clause says that a sub binary will not be created (yet)."}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [20,35,35,35,32,85,110,117,115,101,100,32,86,97,114,105,97,
                    98,108,101,115]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "qThe compiler figures out if a variable is unused. The same code is generated for each of the following functions:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[6,96,96,96,101,114,108]},
                    {sep,
                     [{text,
                       "ü\ncount1(<<_,T/binary>>, Count) -> count1(T, Count+1);\ncount1(<<>>, Count) -> Count.\n\ncount2(<<H,T/binary>>, Count) -> count2(T, Count+1);\ncount2(<<>>, Count) -> Count.\n\ncount3(<<_H,T/binary>>, Count) -> count3(T, Count+1);\ncount3(<<>>, Count) -> Count."}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "SIn each iteration, the first 8 bits in the binary will be skipped, not matched out."}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,false},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {text,
                 [19,35,35,35,32,72,105,115,116,111,114,105,99,97,108,32,78,
                  111,116,101]},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "ðBinary handling was significantly improved in R12B. Because code that was efficient in R11B might not be efficient in R12B, and vice versa, earlier revisions of this Efficiency Guide contained some information about binary handling in R11B."}],
                   0,false}],
                 0,true},
                null},
               null}}],
            0,false}],
          0,false}},
        {sep,
         [{sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [19,35,35,35,32,67,114,101,97,116,105,110,103,32,97,32,76,105,
                 115,116]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "lLists can only be built starting from the end and attaching list elements at the beginning. If you use the \""}],
                    0,false},
                   {text,[4,42,43,43,42]},
                   {sep,
                    [{text,
                      "N\" operator as follows, a new list is created that is a copy of the elements in"}],
                    0,false},
                   {text,[7,42,76,105,115,116,49,42]},
                   {sep,[{text,"\r, followed by"}],0,false},
                   {text,[7,42,76,105,115,116,50,42]},
                   {sep,[{text,[1,58]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    [15,10,76,105,115,116,49,32,43,43,32,76,105,115,116,50]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [14,76,111,111,107,105,110,103,32,97,116,32,104,111,
                       119]}],
                    0,false},
                   {text,
                    [16,42,108,105,115,116,115,58,97,112,112,101,110,100,47,
                     49,42]},
                   {sep,[{text,[2,111,114]}],0,false},
                   {text,[4,42,43,43,42]},
                   {sep,
                    [{text,
                      "Gwould be implemented in plain Erlang, clearly the first list is copied:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    "N\nappend([H|T], Tail) ->\n    [H|append(T, Tail)];\nappend([], Tail) ->\n    Tail."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [152,87,104,101,110,32,114,101,99,117,114,115,105,110,
                       103,32,97,110,100,32,98,117,105,108,100,105,110,103,32,
                       97,32,108,105,115,116,44,32,105,116,32,105,115,32,105,
                       109,112,111,114,116,97,110,116,32,116,111,32,101,110,
                       115,117,114,101,32,116,104,97,116,32,121,111,117,32,97,
                       116,116,97,99,104,32,116,104,101,32,110,101,119,32,101,
                       108,101,109,101,110,116,115,32,116,111,32,116,104,101,
                       32,98,101,103,105,110,110,105,110,103,32,111,102,32,
                       116,104,101,32,108,105,115,116,46,32,73,110,32,116,104,
                       105,115,32,119,97,121,44,32,121,111,117,32,119,105,108,
                       108,32,98,117,105,108,100]}],
                    0,false},
                   {text,[7,42,42,111,110,101,42,42]},
                   {sep,
                    [{text,
                      "Elist, not hundreds or thousands of copies of the growing result list."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,"*Let us first see how it is not to be done:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    "¹\nbad_fib(N) ->\n    bad_fib(N, 0, 1, []).\n\nbad_fib(0, _Current, _Next, Fibs) ->\n    Fibs;\nbad_fib(N, Current, Next, Fibs) -> \n    bad_fib(N - 1, Next, Current + Next, Fibs ++ [Current])."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [133,72,101,114,101,32,109,111,114,101,32,116,104,97,110,
                     32,111,110,101,32,108,105,115,116,32,105,115,32,98,117,
                     105,108,116,46,32,73,110,32,101,97,99,104,32,105,116,101,
                     114,97,116,105,111,110,32,115,116,101,112,32,97,32,110,
                     101,119,32,108,105,115,116,32,105,115,32,99,114,101,97,
                     116,101,100,32,116,104,97,116,32,105,115,32,111,110,101,
                     32,101,108,101,109,101,110,116,32,108,111,110,103,101,
                     114,32,116,104,97,110,32,116,104,101,32,110,101,119,32,
                     112,114,101,118,105,111,117,115,32,108,105,115,116,46]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "vTo avoid copying the result in each iteration, build the list in reverse order and reverse the list when you are done:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    "ü\ntail_recursive_fib(N) ->\n    tail_recursive_fib(N, 0, 1, []).\n\ntail_recursive_fib(0, _Current, _Next, Fibs) ->\n    lists:reverse(Fibs);\ntail_recursive_fib(N, Current, Next, Fibs) -> \n    tail_recursive_fib(N - 1, Next, Current + Next, [Current|Fibs])."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [23,35,35,35,32,76,105,115,116,32,67,111,109,112,114,101,104,
                 101,110,115,105,111,110,115]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "{Lists comprehensions still have a reputation for being slow. They used to be implemented using funs, which used to be slow."}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [21,65,32,108,105,115,116,32,99,111,109,112,114,101,104,
                     101,110,115,105,111,110,58]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    [23,10,91,69,120,112,114,40,69,41,32,124,124,32,69,32,60,
                     45,32,76,105,115,116,93]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,",is basically translated to a local function:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    "U\n'lc^0'([E|Tail], Expr) ->\n    [Expr(E)|'lc^0'(Tail, Expr)];\n'lc^0'([], _Expr) -> []."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,",If the result of the list comprehension will"}],
                    0,false},
                   {text,"\r**obviously**"},
                   {sep,
                    [{text,
                      "Gnot be used, a list will not be constructed. For example, in this code:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,"$\n[io:put_chars(E) || E <- List],\nok."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [16,111,114,32,105,110,32,116,104,105,115,32,99,111,100,
                     101,58]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    "k\n...\ncase Var of\n    ... ->\n        [io:put_chars(E) || E <- List];\n    ... ->\nend,\nsome_function(...),\n..."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "Öthe value is not assigned to a variable, not passed to another function, and not returned. This means that there is no need to construct a list and the compiler will simplify the code for the list comprehension to:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    "X\n'lc^0'([E|Tail], Expr) ->\n    Expr(E),\n    'lc^0'(Tail, Expr);\n'lc^0'([], _Expr) -> []."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [156,84,104,101,32,99,111,109,112,105,108,101,114,32,97,
                     108,115,111,32,117,110,100,101,114,115,116,97,110,100,
                     115,32,116,104,97,116,32,97,115,115,105,103,110,105,110,
                     103,32,116,111,32,39,95,39,32,109,101,97,110,115,32,116,
                     104,97,116,32,116,104,101,32,118,97,108,117,101,32,119,
                     105,108,108,32,110,111,116,32,117,115,101,100,46,32,84,
                     104,101,114,101,102,111,114,101,44,32,116,104,101,32,99,
                     111,100,101,32,105,110,32,116,104,101,32,102,111,108,108,
                     111,119,105,110,103,32,101,120,97,109,112,108,101,32,119,
                     105,108,108,32,97,108,115,111,32,98,101,32,111,112,116,
                     105,109,105,122,101,100,58]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,"(\n_ = [io:put_chars(E) || E <- List],\nok."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [23,35,35,35,32,68,101,101,112,32,97,110,100,32,70,108,97,116,
                 32,76,105,115,116,115]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,",[lists:flatten/1](../stdlib/lists#flatten/1)"},
                   {sep,
                    [{text,
                      "@builds an entirely new list. It is therefore expensive, and even"}],
                    0,false},
                   {text,"\b**more**"},
                   {sep,
                    [{text,
                      [18,101,120,112,101,110,115,105,118,101,32,116,104,97,
                       110,32,116,104,101]}],
                    0,false},
                   {text,[4,42,43,43,42]},
                   {sep,
                    [{text,
                      "Foperator (which copies its left argument, but not its right argument)."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "9In the following situations, you can easily avoid calling"}],
                    0,false},
                   {text,
                    [17,42,108,105,115,116,115,58,102,108,97,116,116,101,110,
                     47,49,42]},
                   {sep,[{text,[1,58]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,
              {sep,
               [{text,[1,42]},
                {text,
                 [129,87,104,101,110,32,115,101,110,100,105,110,103,32,100,97,
                  116,97,32,116,111,32,97,32,112,111,114,116,46,32,80,111,114,
                  116,115,32,117,110,100,101,114,115,116,97,110,100,32,100,
                  101,101,112,32,108,105,115,116,115,32,115,111,32,116,104,
                  101,114,101,32,105,115,32,110,111,32,114,101,97,115,111,110,
                  32,116,111,32,102,108,97,116,116,101,110,32,116,104,101,32,
                  108,105,115,116,32,98,101,102,111,114,101,32,115,101,110,
                  100,105,110,103,32,105,116,32,116,111,32,116,104,101,32,112,
                  111,114,116,46]}],
               0,false},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,
                   [{text,
                     "1When calling BIFs that accept deep lists, such as"}],
                   0,false},
                  {text,
                   "3[list_to_binary/1](../erts/erlang#list_to_binary/1)"},
                  {sep,[{text,[2,111,114]}],0,false},
                  {text,
                   "7[iolist_to_binary/1](../erts/erlang#iolist_to_binary/1)"},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    "@When you know that your list is only one level deep, you can use"}],
                  0,false},
                 {text,"*[lists:append/1](../stdlib/lists#append/1)"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,false}},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {text,
                  [16,35,35,35,32,80,111,114,116,32,69,120,97,109,112,108,
                   101]},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      "7\n      ...\n      port_command(Port, DeepList)\n      ..."}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      "F\n      ...\n      port_command(Port, lists:flatten(DeepList))\n      ..."}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "IA common way to send a zero-terminated string to a port is the following:"}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      [131,10,32,32,32,32,32,32,46,46,46,10,32,32,32,32,32,32,
                       84,101,114,109,105,110,97,116,101,100,83,116,114,32,61,
                       32,83,116,114,105,110,103,32,43,43,32,91,48,93,44,32,
                       37,32,83,116,114,105,110,103,61,34,102,111,111,34,32,
                       61,62,32,91,36,102,44,32,36,111,44,32,36,111,44,32,48,
                       93,10,32,32,32,32,32,32,112,111,114,116,95,99,111,109,
                       109,97,110,100,40,80,111,114,116,44,32,84,101,114,109,
                       105,110,97,116,101,100,83,116,114,41,10,32,32,32,32,32,
                       32,46,46,46]}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,"\bInstead:"}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      [132,10,32,32,32,32,32,32,46,46,46,10,32,32,32,32,32,32,
                       84,101,114,109,105,110,97,116,101,100,83,116,114,32,61,
                       32,91,83,116,114,105,110,103,44,32,48,93,44,32,37,32,
                       83,116,114,105,110,103,61,34,102,111,111,34,32,61,62,
                       32,91,91,36,102,44,32,36,111,44,32,36,111,93,44,32,48,
                       93,10,32,32,32,32,32,32,112,111,114,116,95,99,111,109,
                       109,97,110,100,40,80,111,114,116,44,32,84,101,114,109,
                       105,110,97,116,101,100,83,116,114,41,32,10,32,32,32,32,
                       32,32,46,46,46]}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}}],
             0,false},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {text,
                  [18,35,35,35,32,65,112,112,101,110,100,32,69,120,97,109,112,
                   108,101]},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      "=\n      > lists:append([[1], [2], [3]]).\n      [1,2,3]\n      >"}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      ">\n      > lists:flatten([[1], [2], [3]]).\n      [1,2,3]\n      >"}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}}],
             0,false}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [28,35,35,35,32,82,101,99,117,114,115,105,118,101,32,76,105,
                 115,116,32,70,117,110,99,116,105,111,110,115]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "7In section about myths, the following myth was exposed:"}],
                    0,false},
                   {text,
                    "[[Tail-Recursive Functions are Much Faster Than Recursive Functions](./myths#tail_recursive)"},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [302,84,104,101,114,101,32,105,115,32,117,115,117,97,
                       108,108,121,32,110,111,116,32,109,117,99,104,32,100,
                       105,102,102,101,114,101,110,99,101,32,98,101,116,119,
                       101,101,110,32,97,32,98,111,100,121,45,114,101,99,117,
                       114,115,105,118,101,32,108,105,115,116,32,102,117,110,
                       99,116,105,111,110,32,97,110,100,32,116,97,105,108,45,
                       114,101,99,117,114,115,105,118,101,32,102,117,110,99,
                       116,105,111,110,32,116,104,97,116,32,114,101,118,101,
                       114,115,101,115,32,116,104,101,32,108,105,115,116,32,
                       97,116,32,116,104,101,32,101,110,100,46,32,84,104,101,
                       114,101,102,111,114,101,44,32,99,111,110,99,101,110,
                       116,114,97,116,101,32,111,110,32,119,114,105,116,105,
                       110,103,32,98,101,97,117,116,105,102,117,108,32,99,111,
                       100,101,32,97,110,100,32,102,111,114,103,101,116,32,97,
                       98,111,117,116,32,116,104,101,32,112,101,114,102,111,
                       114,109,97,110,99,101,32,111,102,32,121,111,117,114,32,
                       108,105,115,116,32,102,117,110,99,116,105,111,110,115,
                       46,32,73,110,32,116,104,101,32,116,105,109,101,45,99,
                       114,105,116,105,99,97,108,32,112,97,114,116,115,32,111,
                       102,32,121,111,117,114,32,99,111,100,101,32,40,97,110,
                       100,32,111,110,108,121,32,116,104,101,114,101,41,44]}],
                    0,false},
                   {text,"\v**measure**"},
                   {sep,[{text,"\ebefore rewriting your code."}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,
                  [15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
                 {sep,
                  [{text,[4,32,32,32,32]},
                   {sep,
                    [{sep,
                      [{above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 ")This section is about list functions that"}],
                               0,false},
                              {text,"\r**construct**"},
                              {sep,
                               [{text,
                                 "Àlists. A tail-recursive function that does not construct a list runs in constant space, while the corresponding body-recursive function uses stack space proportional to the length of the list."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}}],
                      0,false}],
                    0,true}],
                  0,false}},
                {text,[0]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "8For example, a function that sums a list of integers, is"}],
                    0,false},
                   {text,[7,42,42,110,111,116,42,42]},
                   {sep,
                    [{text,
                      [25,116,111,32,98,101,32,119,114,105,116,116,101,110,32,
                       97,115,32,102,111,108,108,111,119,115,58]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    "G\nrecursive_sum([H|T]) -> H+recursive_sum(T);\nrecursive_sum([])    -> 0."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,{sep,[{sep,[{text,"\bInstead:"}],0,false}],0,true},null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    "R\nsum(L) -> sum(L, 0).\n\nsum([H|T], Sum) -> sum(T, Sum + H);\nsum([], Sum)    -> Sum."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}}],
           0,false}],
         0,false}},
       {sep,
        [{sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,
               [20,35,35,35,32,80,97,116,116,101,114,110,32,77,97,116,99,104,
                105,110,103]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,"/Pattern matching in function head as well as in"}],
                   0,false},
                  {text,[6,42,99,97,115,101,42]},
                  {sep,[{text,[3,97,110,100]}],0,false},
                  {text,"\t*receive*"},
                  {sep,
                   [{text,
                     "nclauses are optimized by the compiler. With a few exceptions, there is nothing to gain by rearranging clauses."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "¤One exception is pattern matching of binaries. The compiler does not rearrange clauses that match binaries. Placing the clause that matches against the empty binary"}],
                   0,false},
                  {text,"\b**last**"},
                  {sep,
                   [{text,"*is usually slightly faster than placing it"}],
                   0,false},
                  {text,"\t**first**"},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "FThe following is a rather unnatural example to show another exception:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   "®\natom_map1(one) -> 1;\natom_map1(two) -> 2;\natom_map1(three) -> 3;\natom_map1(Int) when is_integer(Int) -> Int;\natom_map1(four) -> 4;\natom_map1(five) -> 5;\natom_map1(six) -> 6."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,"+The problem is the clause with the variable"}],
                   0,false},
                  {text,[5,42,73,110,116,42]},
                  {sep,
                   [{text,
                     "7. As a variable can match anything, including the atoms"}],
                   0,false},
                  {text,[6,42,102,111,117,114,42]},
                  {sep,[{text,[1,44]}],0,false},
                  {text,[6,42,102,105,118,101,42]},
                  {sep,[{text,[5,44,32,97,110,100]}],0,false},
                  {text,[5,42,115,105,120,42]},
                  {sep,
                   [{text,
                     "n, which the following clauses also match, the compiler must generate suboptimal code that executes as follows:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,
             {above,
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,
                   [{text,"%First, the input value is compared to"}],
                   0,false},
                  {text,[5,42,111,110,101,42]},
                  {sep,[{text,[1,44]}],0,false},
                  {text,[5,42,116,119,111,42]},
                  {sep,[{text,[5,44,32,97,110,100]}],0,false},
                  {text,[7,42,116,104,114,101,101,42]},
                  {sep,
                   [{text,
                     "¯(using a single instruction that does a binary search; thus, quite efficient even if there are many values) to select which one of the first three clauses to execute (if any)."}],
                   0,false}],
                 0,false}],
               0,false},
              {sep,
               [{text,[1,42]},
                {text,
                 "_If none of the first three clauses match, the fourth clause match as a variable always matches."}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    [17,73,102,32,116,104,101,32,103,117,97,114,100,32,116,
                     101,115,116]}],
                  0,false},
                 {text,
                  [17,42,105,115,95,105,110,116,101,103,101,114,40,73,110,116,
                   41,42]},
                 {sep,
                  [{text,"(succeeds, the fourth clause is executed."}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   "7If the guard test fails, the input value is compared to"}],
                 0,false},
                {text,[6,42,102,111,117,114,42]},
                {sep,[{text,[1,44]}],0,false},
                {text,[6,42,102,105,118,101,42]},
                {sep,[{text,[5,44,32,97,110,100]}],0,false},
                {text,[5,42,115,105,120,42]},
                {sep,
                 [{text,
                   "5, and the appropriate clause is selected. (There is a"}],
                 0,false},
                {text,
                 [17,42,102,117,110,99,116,105,111,110,95,99,108,97,117,115,
                  101,42]},
                {sep,
                 [{text,")exception if none of the values matched.)"}],
                 0,false}],
               0,false}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [20,82,101,119,114,105,116,105,110,103,32,116,111,32,101,
                    105,116,104,101,114,58]}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   "®\natom_map2(one) -> 1;\natom_map2(two) -> 2;\natom_map2(three) -> 3;\natom_map2(four) -> 4;\natom_map2(five) -> 5;\natom_map2(six) -> 6;\natom_map2(Int) when is_integer(Int) -> Int."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,{sep,[{sep,[{text,[3,111,114,58]}],0,false}],0,true},null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   "®\natom_map3(Int) when is_integer(Int) -> Int;\natom_map3(one) -> 1;\natom_map3(two) -> 2;\natom_map3(three) -> 3;\natom_map3(four) -> 4;\natom_map3(five) -> 5;\natom_map3(six) -> 6."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,",gives slightly more efficient matching code."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [16,65,110,111,116,104,101,114,32,101,120,97,109,112,108,
                    101,58]}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   [149,10,109,97,112,95,112,97,105,114,115,49,40,95,77,97,
                    112,44,32,91,93,44,32,89,115,41,32,45,62,10,32,32,32,32,
                    89,115,59,10,109,97,112,95,112,97,105,114,115,49,40,95,77,
                    97,112,44,32,88,115,44,32,91,93,32,41,32,45,62,10,32,32,
                    32,32,88,115,59,10,109,97,112,95,112,97,105,114,115,49,40,
                    77,97,112,44,32,91,88,124,88,115,93,44,32,91,89,124,89,
                    115,93,41,32,45,62,10,32,32,32,32,91,77,97,112,40,88,44,
                    32,89,41,124,109,97,112,95,112,97,105,114,115,49,40,77,97,
                    112,44,32,88,115,44,32,89,115,41,93,46]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [21,84,104,101,32,102,105,114,115,116,32,97,114,103,117,
                      109,101,110,116,32,105,115]}],
                   0,false},
                  {text,[7,42,42,110,111,116,42,42]},
                  {sep,
                   [{text,
                     "sa problem. It is variable, but it is a variable in all clauses. The problem is the variable in the second argument,"}],
                   0,false},
                  {text,[4,42,88,115,42]},
                  {sep,
                   [{text,
                     "µ, in the middle clause. Because the variable can match anything, the compiler is not allowed to rearrange the clauses, but must generate code that matches them in the order written."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "WIf the function is rewritten as follows, the compiler is free to rearrange the clauses:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   [155,10,109,97,112,95,112,97,105,114,115,50,40,95,77,97,
                    112,44,32,91,93,44,32,89,115,41,32,45,62,10,32,32,32,32,
                    89,115,59,10,109,97,112,95,112,97,105,114,115,50,40,95,77,
                    97,112,44,32,91,95,124,95,93,61,88,115,44,32,91,93,32,41,
                    32,45,62,10,32,32,32,32,88,115,59,10,109,97,112,95,112,97,
                    105,114,115,50,40,77,97,112,44,32,91,88,124,88,115,93,44,
                    32,91,89,124,89,115,93,41,32,45,62,10,32,32,32,32,91,77,
                    97,112,40,88,44,32,89,41,124,109,97,112,95,112,97,105,114,
                    115,50,40,77,97,112,44,32,88,115,44,32,89,115,41,93,46]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"0The compiler will generate code similar to this:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,")**DO NOT (already done by the compiler)**"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   [264,10,101,120,112,108,105,99,105,116,95,109,97,112,95,
                    112,97,105,114,115,40,77,97,112,44,32,88,115,48,44,32,89,
                    115,48,41,32,45,62,10,32,32,32,32,99,97,115,101,32,88,115,
                    48,32,111,102,10,9,91,88,124,88,115,93,32,45,62,10,9,32,
                    32,32,32,99,97,115,101,32,89,115,48,32,111,102,10,9,9,91,
                    89,124,89,115,93,32,45,62,10,9,9,32,32,32,32,91,77,97,112,
                    40,88,44,32,89,41,124,101,120,112,108,105,99,105,116,95,
                    109,97,112,95,112,97,105,114,115,40,77,97,112,44,32,88,
                    115,44,32,89,115,41,93,59,10,9,9,91,93,32,45,62,10,9,9,32,
                    32,32,32,88,115,48,10,9,32,32,32,32,101,110,100,59,10,9,
                    91,93,32,45,62,10,9,32,32,32,32,89,115,48,10,32,32,32,32,
                    101,110,100,46]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "°This is slightly faster for probably the most common case that the input lists are not empty or very short. (Another advantage is that Dialyzer can deduce a better type for the"}],
                   0,false},
                  {text,[4,42,88,115,42]},
                  {sep,[{text,"\nvariable.)"}],0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,
               [18,35,35,35,32,70,117,110,99,116,105,111,110,32,67,97,108,108,
                115]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [133,84,104,105,115,32,105,115,32,97,110,32,105,110,116,
                    101,110,116,105,111,110,97,108,108,121,32,114,111,117,103,
                    104,32,103,117,105,100,101,32,116,111,32,116,104,101,32,
                    114,101,108,97,116,105,118,101,32,99,111,115,116,115,32,
                    111,102,32,100,105,102,102,101,114,101,110,116,32,99,97,
                    108,108,115,46,32,73,116,32,105,115,32,98,97,115,101,100,
                    32,111,110,32,98,101,110,99,104,109,97,114,107,32,102,105,
                    103,117,114,101,115,32,114,117,110,32,111,110,32,83,111,
                    108,97,114,105,115,47,83,112,97,114,99,58]}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,"&Calls to local or external functions ("}],
                  0,false},
                 {text,[7,42,102,111,111,40,41,42]},
                 {sep,[{text,[1,44]}],0,false},
                 {text,"\t*m:foo()*"},
                 {sep,
                  [{text,
                    [24,41,32,97,114,101,32,116,104,101,32,102,97,115,116,101,
                     115,116,32,99,97,108,108,115,46]}],
                  0,false}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,"\eCalling or applying a fun ("}],0,false},
                 {text,[7,42,70,117,110,40,41,42]},
                 {sep,[{text,[1,44]}],0,false},
                 {text,
                  [16,42,97,112,112,108,121,40,70,117,110,44,32,91,93,41,42]},
                 {sep,[{text,"\n) is about"}],0,false},
                 {text,
                  [15,42,42,116,104,114,101,101,32,116,105,109,101,115,42,42]},
                 {sep,
                  [{text,")as expensive as calling a local function."}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,
                 [{text,
                   [31,65,112,112,108,121,105,110,103,32,97,110,32,101,120,
                    112,111,114,116,101,100,32,102,117,110,99,116,105,111,110,
                    32,40]}],
                 0,false},
                {text,"\f*Mod:Name()*"},
                {sep,[{text,[1,44]}],0,false},
                {text,
                 [22,42,97,112,112,108,121,40,77,111,100,44,32,78,97,109,101,
                  44,32,91,93,41,42]},
                {sep,
                 [{text,
                   "7) is about twice as expensive as calling a fun or about"}],
                 0,false},
                {text,"\r**six times**"},
                {sep,
                 [{text,")as expensive as calling a local function."}],
                 0,false}],
               0,false}],
             0,false}},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,{text,"$### Notes and Implementation Details"},null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     [144,67,97,108,108,105,110,103,32,97,110,100,32,97,112,
                      112,108,121,105,110,103,32,97,32,102,117,110,32,100,111,
                      101,115,32,110,111,116,32,105,110,118,111,108,118,101,
                      32,97,110,121,32,104,97,115,104,45,116,97,98,108,101,32,
                      108,111,111,107,117,112,46,32,65,32,102,117,110,32,99,
                      111,110,116,97,105,110,115,32,97,110,32,40,105,110,100,
                      105,114,101,99,116,41,32,112,111,105,110,116,101,114,32,
                      116,111,32,116,104,101,32,102,117,110,99,116,105,111,
                      110,32,116,104,97,116,32,105,109,112,108,101,109,101,
                      110,116,115,32,116,104,101,32,102,117,110,46]}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,"\t*apply/3*"},
                    {sep,
                     [{text,
                       [130,109,117,115,116,32,108,111,111,107,32,117,112,32,
                        116,104,101,32,99,111,100,101,32,102,111,114,32,116,
                        104,101,32,102,117,110,99,116,105,111,110,32,116,111,
                        32,101,120,101,99,117,116,101,32,105,110,32,97,32,104,
                        97,115,104,32,116,97,98,108,101,46,32,73,116,32,105,
                        115,32,116,104,101,114,101,102,111,114,101,32,97,108,
                        119,97,121,115,32,115,108,111,119,101,114,32,116,104,
                        97,110,32,97,32,100,105,114,101,99,116,32,99,97,108,
                        108,32,111,114,32,97,32,102,117,110,32,99,97,108,108,
                        46]}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "JIt no longer matters (from a performance point of view) whether you write:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,
                     [28,10,77,111,100,117,108,101,58,70,117,110,99,116,105,
                      111,110,40,65,114,103,49,44,32,65,114,103,50,41]}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,[{sep,[{text,[3,111,114,58]}],0,false}],0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,"%\napply(Module, Function, [Arg1,Arg2])"}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "AThe compiler internally rewrites the latter code into the former."}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "lThe following code is slightly slower because the shape of the list of arguments is unknown at compile time."}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[6,96,96,96,101,114,108]},
                  {sep,
                   [{text,"#\napply(Module, Function, Arguments)"}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}}],
            0,false}],
          0,false},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,
               [29,35,35,35,32,77,101,109,111,114,121,32,85,115,97,103,101,32,
                105,110,32,82,101,99,117,114,115,105,111,110]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [129,87,104,101,110,32,119,114,105,116,105,110,103,32,114,
                    101,99,117,114,115,105,118,101,32,102,117,110,99,116,105,
                    111,110,115,44,32,105,116,32,105,115,32,112,114,101,102,
                    101,114,97,98,108,101,32,116,111,32,109,97,107,101,32,116,
                    104,101,109,32,116,97,105,108,45,114,101,99,117,114,115,
                    105,118,101,32,115,111,32,116,104,97,116,32,116,104,101,
                    121,32,99,97,110,32,101,120,101,99,117,116,101,32,105,110,
                    32,99,111,110,115,116,97,110,116,32,109,101,109,111,114,
                    121,32,115,112,97,99,101,58]}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "º\nlist_length(List) ->\n    list_length(List, 0).\n\nlist_length([], AccLen) -> \n    AccLen; % Base case\n\nlist_length([_|Tail], AccLen) ->\n    list_length(Tail, AccLen + 1). % Tail-recursive"}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "q\nlist_length([]) ->\n    0. % Base case\nlist_length([_ | Tail]) ->\n    list_length(Tail) + 1. % Not tail-recursive"}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}}],
          0,false}],
        0,false}},
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [25,35,35,35,32,69,116,115,44,32,68,101,116,115,44,32,97,110,
               100,32,77,110,101,115,105,97]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "vEvery example using Ets has a corresponding example in Mnesia. In general, all Ets examples also apply to Dets tables."}],
                0,false}],
              0,true},
             null},
            null}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,{above,{text,"\e### Select/Match Operations"},null},null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [296,83,101,108,101,99,116,47,109,97,116,99,104,32,111,
                       112,101,114,97,116,105,111,110,115,32,111,110,32,69,
                       116,115,32,97,110,100,32,77,110,101,115,105,97,32,116,
                       97,98,108,101,115,32,99,97,110,32,98,101,99,111,109,
                       101,32,118,101,114,121,32,101,120,112,101,110,115,105,
                       118,101,32,111,112,101,114,97,116,105,111,110,115,46,
                       32,84,104,101,121,32,117,115,117,97,108,108,121,32,110,
                       101,101,100,32,116,111,32,115,99,97,110,32,116,104,101,
                       32,99,111,109,112,108,101,116,101,32,116,97,98,108,101,
                       46,32,84,114,121,32,116,111,32,115,116,114,117,99,116,
                       117,114,101,32,116,104,101,32,100,97,116,97,32,116,111,
                       32,109,105,110,105,109,105,122,101,32,116,104,101,32,
                       110,101,101,100,32,102,111,114,32,115,101,108,101,99,
                       116,47,109,97,116,99,104,32,111,112,101,114,97,116,105,
                       111,110,115,46,32,72,111,119,101,118,101,114,44,32,105,
                       102,32,121,111,117,32,114,101,113,117,105,114,101,32,
                       97,32,115,101,108,101,99,116,47,109,97,116,99,104,32,
                       111,112,101,114,97,116,105,111,110,44,32,105,116,32,
                       105,115,32,115,116,105,108,108,32,109,111,114,101,32,
                       101,102,102,105,99,105,101,110,116,32,116,104,97,110,
                       32,117,115,105,110,103]}],
                    0,false},
                   {text,"\n*tab2list*"},
                   {sep,
                    [{text,
                      "i. Examples of this and of how to avoid select/match are provided in the following sections. The functions"}],
                    0,false},
                   {text,
                    [14,42,101,116,115,58,115,101,108,101,99,116,47,50,42]},
                   {sep,[{text,[3,97,110,100]}],0,false},
                   {text,
                    [17,42,109,110,101,115,105,97,58,115,101,108,101,99,116,
                     47,51,42]},
                   {sep,
                    [{text,
                      [24,97,114,101,32,116,111,32,98,101,32,112,114,101,102,
                       101,114,114,101,100,32,111,118,101,114]}],
                    0,false},
                   {text,"\r*ets:match/2*"},
                   {sep,[{text,[1,44]}],0,false},
                   {text,
                    [20,42,101,116,115,58,109,97,116,99,104,95,111,98,106,101,
                     99,116,47,50,42]},
                   {sep,[{text,[5,44,32,97,110,100]}],0,false},
                   {text,
                    [23,42,109,110,101,115,105,97,58,109,97,116,99,104,95,111,
                     98,106,101,99,116,47,51,42]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [149,73,110,32,115,111,109,101,32,99,105,114,99,117,109,
                       115,116,97,110,99,101,115,44,32,116,104,101,32,115,101,
                       108,101,99,116,47,109,97,116,99,104,32,111,112,101,114,
                       97,116,105,111,110,115,32,100,111,32,110,111,116,32,
                       110,101,101,100,32,116,111,32,115,99,97,110,32,116,104,
                       101,32,99,111,109,112,108,101,116,101,32,116,97,98,108,
                       101,46,32,70,111,114,32,101,120,97,109,112,108,101,44,
                       32,105,102,32,112,97,114,116,32,111,102,32,116,104,101,
                       32,107,101,121,32,105,115,32,98,111,117,110,100,32,119,
                       104,101,110,32,115,101,97,114,99,104,105,110,103,32,97,
                       110]}],
                    0,false},
                   {text,"\r*ordered_set*"},
                   {sep,
                    [{text,
                      [276,116,97,98,108,101,44,32,111,114,32,105,102,32,105,
                       116,32,105,115,32,97,32,77,110,101,115,105,97,32,116,
                       97,98,108,101,32,97,110,100,32,116,104,101,114,101,32,
                       105,115,32,97,32,115,101,99,111,110,100,97,114,121,32,
                       105,110,100,101,120,32,111,110,32,116,104,101,32,102,
                       105,101,108,100,32,116,104,97,116,32,105,115,32,115,
                       101,108,101,99,116,101,100,47,109,97,116,99,104,101,
                       100,46,32,73,102,32,116,104,101,32,107,101,121,32,105,
                       115,32,102,117,108,108,121,32,98,111,117,110,100,44,32,
                       116,104,101,114,101,32,105,115,32,110,111,32,112,111,
                       105,110,116,32,105,110,32,100,111,105,110,103,32,97,32,
                       115,101,108,101,99,116,47,109,97,116,99,104,44,32,117,
                       110,108,101,115,115,32,121,111,117,32,104,97,118,101,
                       32,97,32,98,97,103,32,116,97,98,108,101,32,97,110,100,
                       32,97,114,101,32,111,110,108,121,32,105,110,116,101,
                       114,101,115,116,101,100,32,105,110,32,97,32,115,117,98,
                       115,101,116,32,111,102,32,116,104,101,32,101,108,101,
                       109,101,110,116,115,32,119,105,116,104,32,116,104,101,
                       32,115,112,101,99,105,102,105,99,32,107,101,121,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "§When creating a record to be used in a select/match operation, you want most of the fields to have the value \"_\". The easiest and fastest way to do that is as follows:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [29,10,35,112,101,114,115,111,110,123,97,103,101,32,61,32,
                     52,50,44,32,95,32,61,32,39,95,39,125,46,32]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [23,35,35,35,32,68,101,108,101,116,105,110,103,32,97,110,32,
                 69,108,101,109,101,110,116]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[3,84,104,101]}],0,false},
                   {text,"\b*delete*"},
                   {sep,
                    [{text,
                      "èoperation is considered successful if the element was not present in the table. Hence all attempts to check that the element is present in the Ets/Mnesia table before deletion are unnecessary. Here follows an example for Ets tables:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [30,10,46,46,46,10,101,116,115,58,100,101,108,101,116,101,
                     40,84,97,98,44,32,75,101,121,41,44,10,46,46,46]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "j\n...\ncase ets:lookup(Tab, Key) of\n    [] ->\n        ok;\n    [_|_] ->\n        ets:delete(Tab, Key)\nend,\n..."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [17,35,35,35,32,70,101,116,99,104,105,110,103,32,68,97,116,
                 97]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,"(Do not fetch data that you already have."}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "CConsider that you have a module that handles the abstract data type"}],
                    0,false},
                   {text,"\b*Person*"},
                   {sep,
                    [{text,"#. You export the interface function"}],
                    0,false},
                   {text,
                    [16,42,112,114,105,110,116,95,112,101,114,115,111,110,47,
                     49,42]},
                   {sep,
                    [{text,"#, which uses the internal functions"}],
                    0,false},
                   {text,
                    [14,42,112,114,105,110,116,95,110,97,109,101,47,49,42]},
                   {sep,[{text,[1,44]}],0,false},
                   {text,"\r*print_age/1*"},
                   {sep,[{text,[5,44,32,97,110,100]}],0,false},
                   {text,
                    [20,42,112,114,105,110,116,95,111,99,99,117,112,97,116,
                     105,111,110,47,49,42]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,
                  [15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
                 {sep,
                  [{text,[4,32,32,32,32]},
                   {sep,
                    [{sep,
                      [{above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 [15,73,102,32,116,104,101,32,102,117,110,99,
                                  116,105,111,110]}],
                               0,false},
                              {text,
                               [14,42,112,114,105,110,116,95,110,97,109,101,
                                47,49,42]},
                              {sep,
                               [{text,
                                 "°, and so on, had been interface functions, the situation would have been different, as you do not want the user of the interface to know about the internal data representation."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}}],
                      0,false}],
                    0,true}],
                  0,false}},
                {text,[0]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    [641,10,37,37,37,32,73,110,116,101,114,102,97,99,101,32,
                     102,117,110,99,116,105,111,110,10,112,114,105,110,116,95,
                     112,101,114,115,111,110,40,80,101,114,115,111,110,73,100,
                     41,32,45,62,10,32,32,32,32,37,37,32,76,111,111,107,32,
                     117,112,32,116,104,101,32,112,101,114,115,111,110,32,105,
                     110,32,116,104,101,32,110,97,109,101,100,32,116,97,98,
                     108,101,32,112,101,114,115,111,110,44,10,32,32,32,32,99,
                     97,115,101,32,101,116,115,58,108,111,111,107,117,112,40,
                     112,101,114,115,111,110,44,32,80,101,114,115,111,110,73,
                     100,41,32,111,102,10,32,32,32,32,32,32,32,32,91,80,101,
                     114,115,111,110,93,32,45,62,10,32,32,32,32,32,32,32,32,
                     32,32,32,32,112,114,105,110,116,95,110,97,109,101,40,80,
                     101,114,115,111,110,41,44,10,32,32,32,32,32,32,32,32,32,
                     32,32,32,112,114,105,110,116,95,97,103,101,40,80,101,114,
                     115,111,110,41,44,10,32,32,32,32,32,32,32,32,32,32,32,32,
                     112,114,105,110,116,95,111,99,99,117,112,97,116,105,111,
                     110,40,80,101,114,115,111,110,41,59,10,32,32,32,32,32,32,
                     32,32,91,93,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,
                     32,105,111,58,102,111,114,109,97,116,40,34,78,111,32,112,
                     101,114,115,111,110,32,119,105,116,104,32,73,68,32,61,32,
                     126,112,126,110,34,44,32,91,80,101,114,115,111,110,73,68,
                     93,41,10,32,32,32,32,101,110,100,46,10,10,37,37,37,32,73,
                     110,116,101,114,110,97,108,32,102,117,110,99,116,105,111,
                     110,115,10,112,114,105,110,116,95,110,97,109,101,40,80,
                     101,114,115,111,110,41,32,45,62,32,10,32,32,32,32,105,
                     111,58,102,111,114,109,97,116,40,34,78,111,32,112,101,
                     114,115,111,110,32,126,112,126,110,34,44,32,91,80,101,
                     114,115,111,110,35,112,101,114,115,111,110,46,110,97,109,
                     101,93,41,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,10,112,114,105,110,116,95,97,
                     103,101,40,80,101,114,115,111,110,41,32,45,62,32,10,32,
                     32,32,32,105,111,58,102,111,114,109,97,116,40,34,78,111,
                     32,112,101,114,115,111,110,32,126,112,126,110,34,44,32,
                     91,80,101,114,115,111,110,35,112,101,114,115,111,110,46,
                     97,103,101,93,41,46,10,10,112,114,105,110,116,95,111,99,
                     99,117,112,97,116,105,111,110,40,80,101,114,115,111,110,
                     41,32,45,62,32,10,32,32,32,32,105,111,58,102,111,114,109,
                     97,116,40,34,78,111,32,112,101,114,115,111,110,32,126,
                     112,126,110,34,44,32,91,80,101,114,115,111,110,35,112,
                     101,114,115,111,110,46,111,99,99,117,112,97,116,105,111,
                     110,93,41,46]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[6,96,96,96,101,114,108]},
                 {sep,
                  [{text,
                    [767,10,37,37,37,32,73,110,116,101,114,102,97,99,101,32,
                     102,117,110,99,116,105,111,110,10,112,114,105,110,116,95,
                     112,101,114,115,111,110,40,80,101,114,115,111,110,73,100,
                     41,32,45,62,10,32,32,32,32,37,37,32,76,111,111,107,32,
                     117,112,32,116,104,101,32,112,101,114,115,111,110,32,105,
                     110,32,116,104,101,32,110,97,109,101,100,32,116,97,98,
                     108,101,32,112,101,114,115,111,110,44,10,32,32,32,32,99,
                     97,115,101,32,101,116,115,58,108,111,111,107,117,112,40,
                     112,101,114,115,111,110,44,32,80,101,114,115,111,110,73,
                     100,41,32,111,102,10,32,32,32,32,32,32,32,32,91,80,101,
                     114,115,111,110,93,32,45,62,10,32,32,32,32,32,32,32,32,
                     32,32,32,32,112,114,105,110,116,95,110,97,109,101,40,80,
                     101,114,115,111,110,73,68,41,44,10,32,32,32,32,32,32,32,
                     32,32,32,32,32,112,114,105,110,116,95,97,103,101,40,80,
                     101,114,115,111,110,73,68,41,44,10,32,32,32,32,32,32,32,
                     32,32,32,32,32,112,114,105,110,116,95,111,99,99,117,112,
                     97,116,105,111,110,40,80,101,114,115,111,110,73,68,41,59,
                     10,32,32,32,32,32,32,32,32,91,93,32,45,62,10,32,32,32,32,
                     32,32,32,32,32,32,32,32,105,111,58,102,111,114,109,97,
                     116,40,34,78,111,32,112,101,114,115,111,110,32,119,105,
                     116,104,32,73,68,32,61,32,126,112,126,110,34,44,32,91,80,
                     101,114,115,111,110,73,68,93,41,10,32,32,32,32,101,110,
                     100,46,10,10,37,37,37,32,73,110,116,101,114,110,97,108,
                     32,102,117,110,99,116,105,111,110,115,115,10,112,114,105,
                     110,116,95,110,97,109,101,40,80,101,114,115,111,110,73,
                     68,41,32,45,62,32,10,32,32,32,32,91,80,101,114,115,111,
                     110,93,32,61,32,101,116,115,58,108,111,111,107,117,112,
                     40,112,101,114,115,111,110,44,32,80,101,114,115,111,110,
                     73,100,41,44,10,32,32,32,32,105,111,58,102,111,114,109,
                     97,116,40,34,78,111,32,112,101,114,115,111,110,32,126,
                     112,126,110,34,44,32,91,80,101,114,115,111,110,35,112,
                     101,114,115,111,110,46,110,97,109,101,93,41,46,10,10,112,
                     114,105,110,116,95,97,103,101,40,80,101,114,115,111,110,
                     73,68,41,32,45,62,32,10,32,32,32,32,91,80,101,114,115,
                     111,110,93,32,61,32,101,116,115,58,108,111,111,107,117,
                     112,40,112,101,114,115,111,110,44,32,80,101,114,115,111,
                     110,73,100,41,44,10,32,32,32,32,105,111,58,102,111,114,
                     109,97,116,40,34,78,111,32,112,101,114,115,111,110,32,
                     126,112,126,110,34,44,32,91,80,101,114,115,111,110,35,
                     112,101,114,115,111,110,46,97,103,101,93,41,46,10,10,112,
                     114,105,110,116,95,111,99,99,117,112,97,116,105,111,110,
                     40,80,101,114,115,111,110,73,68,41,32,45,62,32,10,32,32,
                     32,32,91,80,101,114,115,111,110,93,32,61,32,101,116,115,
                     58,108,111,111,107,117,112,40,112,101,114,115,111,110,44,
                     32,80,101,114,115,111,110,73,100,41,44,10,32,32,32,32,
                     105,111,58,102,111,114,109,97,116,40,34,78,111,32,112,
                     101,114,115,111,110,32,126,112,126,110,34,44,32,91,80,
                     101,114,115,111,110,35,112,101,114,115,111,110,46,111,99,
                     99,117,112,97,116,105,111,110,93,41,46]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,{text,"#### Non-Persistent Database Storage"},null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "BFor non-persistent database storage, prefer Ets tables over Mnesia"}],
                    0,false},
                   {text,
                    [15,42,108,111,99,97,108,95,99,111,110,116,101,110,116,
                     42]},
                   {sep,
                    [{text,
                      [23,116,97,98,108,101,115,46,32,69,118,101,110,32,116,
                       104,101,32,77,110,101,115,105,97]}],
                    0,false},
                   {text,"\r*dirty_write*"},
                   {sep,
                    [{text,
                      "¥operations carry a fixed overhead compared to Ets writes. Mnesia must check if the table is replicated or has indices, this involves at least one Ets lookup for each"}],
                    0,false},
                   {text,"\r*dirty_write*"},
                   {sep,
                    [{text,
                      "7. Thus, Ets writes is always faster than Mnesia writes."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,{above,{text,"\f### tab2list"},null},null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [31,65,115,115,117,109,105,110,103,32,97,110,32,69,116,
                       115,32,116,97,98,108,101,32,116,104,97,116,32,117,115,
                       101,115]}],
                    0,false},
                   {text,[6,42,105,100,110,111,42]},
                   {sep,
                    [{text,"\"as key and contains the following:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [279,10,91,35,112,101,114,115,111,110,123,105,100,110,111,
                     32,61,32,49,44,32,110,97,109,101,32,61,32,34,65,100,97,
                     109,34,44,32,32,97,103,101,32,61,32,51,49,44,32,111,99,
                     99,117,112,97,116,105,111,110,32,61,32,34,109,97,105,108,
                     109,97,110,34,125,44,10,32,35,112,101,114,115,111,110,
                     123,105,100,110,111,32,61,32,50,44,32,110,97,109,101,32,
                     61,32,34,66,114,121,97,110,34,44,32,97,103,101,32,61,32,
                     51,49,44,32,111,99,99,117,112,97,116,105,111,110,32,61,
                     32,34,99,97,115,104,105,101,114,34,125,44,10,32,35,112,
                     101,114,115,111,110,123,105,100,110,111,32,61,32,51,44,
                     32,110,97,109,101,32,61,32,34,66,114,121,97,110,34,44,32,
                     97,103,101,32,61,32,51,53,44,32,111,99,99,117,112,97,116,
                     105,111,110,32,61,32,34,98,97,110,107,101,114,34,125,44,
                     10,32,35,112,101,114,115,111,110,123,105,100,110,111,32,
                     61,32,52,44,32,110,97,109,101,32,61,32,34,67,97,114,108,
                     34,44,32,32,97,103,101,32,61,32,50,53,44,32,111,99,99,
                     117,112,97,116,105,111,110,32,61,32,34,109,97,105,108,
                     109,97,110,34,125,93]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[6,73,102,32,121,111,117]}],0,false},
                   {text,"\b**must**"},
                   {sep,
                    [{text,
                      "4return all data stored in the Ets table, you can use"}],
                    0,false},
                   {text,
                    [16,42,101,116,115,58,116,97,98,50,108,105,115,116,47,49,
                     42]},
                   {sep,
                    [{text,
                      "W. However, usually you are only interested in a subset of the information in which case"}],
                    0,false},
                   {text,
                    [16,42,101,116,115,58,116,97,98,50,108,105,115,116,47,49,
                     42]},
                   {sep,
                    [{text,
                      "qis expensive. If you only want to extract one field from each record, for example, the age of every person, then:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "Ó\n...\nets:select(Tab,[{ #person{idno='_', \n                          name='_', \n                          age='$1', \n                          occupation = '_'},\n                [],\n                ['$1']}]),\n..."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "U\n...\nTabList = ets:tab2list(Tab),\nlists:map(fun(X) -> X#person.age end, TabList),\n..."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "IIf you are only interested in the age of all persons named \"Bryan\", then:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "×\n...\nets:select(Tab,[{ #person{idno='_', \n                          name=\"Bryan\", \n                          age='$1', \n                          occupation = '_'},\n                [],\n                ['$1']}]),\n..."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [327,10,46,46,46,10,84,97,98,76,105,115,116,32,61,32,101,
                     116,115,58,116,97,98,50,108,105,115,116,40,84,97,98,41,
                     44,10,108,105,115,116,115,58,102,111,108,100,108,40,102,
                     117,110,40,88,44,32,65,99,99,41,32,45,62,32,99,97,115,
                     101,32,88,35,112,101,114,115,111,110,46,110,97,109,101,
                     32,111,102,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,
                     66,114,121,97,110,34,32,45,62,10,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,91,88,35,112,101,114,115,111,
                     110,46,97,103,101,124,65,99,99,93,59,10,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,95,32,45,62,10,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,65,99,99,10,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,101,110,100,10,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,101,110,100,44,32,91,93,44,32,84,97,98,76,
                     105,115,116,41,44,10,46,46,46]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [17,42,42,82,69,65,76,76,89,32,68,79,32,78,79,84,42,42]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "»\n...\nTabList = ets:tab2list(Tab),\nBryanList = lists:filter(fun(X) -> X#person.name == \"Bryan\" end,\n                         TabList),\nlists:map(fun(X) -> X#person.age end, BryanList),\n..."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "VIf you need all information stored in the Ets table about persons named \"Bryan\", then:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "¶\n...\nets:select(Tab, [{#person{idno='_', \n                          name=\"Bryan\", \n                          age='_', \n                          occupation = '_'}, [], ['$_']}]),\n..."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "d\n...\nTabList = ets:tab2list(Tab),\nlists:filter(fun(X) -> X#person.name == \"Bryan\" end, TabList),\n..."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [22,35,35,35,32,79,114,100,101,114,101,100,95,115,101,116,32,
                 84,97,98,108,101,115]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "tIf the data in the table is to be accessed so that the order of the keys in the table is significant, the table type"}],
                    0,false},
                   {text,"\r*ordered_set*"},
                   {sep,
                    [{text,"%can be used instead of the more usual"}],
                    0,false},
                   {text,[5,42,115,101,116,42]},
                   {sep,
                    [{text,
                      [14,116,97,98,108,101,32,116,121,112,101,46,32,65,110]}],
                    0,false},
                   {text,"\r*ordered_set*"},
                   {sep,
                    [{text,
                      "qis always traversed in Erlang term order regarding the key field so that the return values from functions such as"}],
                    0,false},
                   {text,"\b*select*"},
                   {sep,[{text,[1,44]}],0,false},
                   {text,
                    [14,42,109,97,116,99,104,95,111,98,106,101,99,116,42]},
                   {sep,[{text,[5,44,32,97,110,100]}],0,false},
                   {text,[7,42,102,111,108,100,108,42]},
                   {sep,
                    [{text,",are ordered by the key values. Traversing an"}],
                    0,false},
                   {text,"\r*ordered_set*"},
                   {sep,[{text,"\bwith the"}],0,false},
                   {text,[7,42,102,105,114,115,116,42]},
                   {sep,[{text,[3,97,110,100]}],0,false},
                   {text,[6,42,110,101,120,116,42]},
                   {sep,
                    [{text,")operations also returns the keys ordered."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,
                  [15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
                 {sep,
                  [{text,[4,32,32,32,32]},
                   {sep,
                    [{sep,
                      [{above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,[{text,[2,65,110]}],0,false},
                              {text,"\r*ordered_set*"},
                              {sep,
                               [{text,
                                 "-only guarantees that objects are processed in"}],
                               0,false},
                              {text,[7,42,42,107,101,121,42,42]},
                              {sep,
                               [{text,
                                 "%order. Results from functions such as"}],
                               0,false},
                              {text,
                               [14,42,101,116,115,58,115,101,108,101,99,116,
                                47,50,42]},
                              {sep,[{text,"\tappear in"}],0,false},
                              {text,[7,42,42,107,101,121,42,42]},
                              {sep,
                               [{text,
                                 "4order even if the key is not included in the result."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}}],
                      0,false}],
                    0,true}],
                  0,false}},
                {text,[0]}},
               null},
              null}}],
           0,false}],
         0,false},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [16,35,35,35,32,69,116,115,45,83,112,101,99,105,102,105,99]},
             null},
            null}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,{above,{text,"\e### Using Keys of Ets Table"},null},null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "ÍAn Ets table is a single-key table (either a hash table or a tree ordered by the key) and is to be used as one. In other words, use the key to look up things whenever possible. A lookup by a known key in a"}],
                    0,false},
                   {text,[5,42,115,101,116,42]},
                   {sep,[{text," Ets table is constant and for an"}],0,false},
                   {text,"\r*ordered_set*"},
                   {sep,
                    [{text,
                      [145,69,116,115,32,116,97,98,108,101,32,105,116,32,105,
                       115,32,79,40,108,111,103,78,41,46,32,65,32,107,101,121,
                       32,108,111,111,107,117,112,32,105,115,32,97,108,119,97,
                       121,115,32,112,114,101,102,101,114,97,98,108,101,32,
                       116,111,32,97,32,99,97,108,108,32,119,104,101,114,101,
                       32,116,104,101,32,119,104,111,108,101,32,116,97,98,108,
                       101,32,104,97,115,32,116,111,32,98,101,32,115,99,97,
                       110,110,101,100,46,32,73,110,32,116,104,101,32,112,114,
                       101,118,105,111,117,115,32,101,120,97,109,112,108,101,
                       115,44,32,116,104,101,32,102,105,101,108,100]}],
                    0,false},
                   {text,[6,42,105,100,110,111,42]},
                   {sep,
                    [{text,
                      [147,105,115,32,116,104,101,32,107,101,121,32,111,102,
                       32,116,104,101,32,116,97,98,108,101,32,97,110,100,32,
                       97,108,108,32,108,111,111,107,117,112,115,32,119,104,
                       101,114,101,32,111,110,108,121,32,116,104,101,32,110,
                       97,109,101,32,105,115,32,107,110,111,119,110,32,114,
                       101,115,117,108,116,32,105,110,32,97,32,99,111,109,112,
                       108,101,116,101,32,115,99,97,110,32,111,102,32,116,104,
                       101,32,40,112,111,115,115,105,98,108,121,32,108,97,114,
                       103,101,41,32,116,97,98,108,101,32,102,111,114,32,97,
                       32,109,97,116,99,104,105,110,103,32,114,101,115,117,
                       108,116,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,"%A simple solution would be to use the"}],
                    0,false},
                   {text,[6,42,110,97,109,101,42]},
                   {sep,
                    [{text,
                      [31,102,105,101,108,100,32,97,115,32,116,104,101,32,107,
                       101,121,32,105,110,115,116,101,97,100,32,111,102,32,
                       116,104,101]}],
                    0,false},
                   {text,[6,42,105,100,110,111,42]},
                   {sep,
                    [{text,
                      [129,102,105,101,108,100,44,32,98,117,116,32,116,104,97,
                       116,32,119,111,117,108,100,32,99,97,117,115,101,32,112,
                       114,111,98,108,101,109,115,32,105,102,32,116,104,101,
                       32,110,97,109,101,115,32,119,101,114,101,32,110,111,
                       116,32,117,110,105,113,117,101,46,32,65,32,109,111,114,
                       101,32,103,101,110,101,114,97,108,32,115,111,108,117,
                       116,105,111,110,32,119,111,117,108,100,32,98,101,32,
                       116,111,32,99,114,101,97,116,101,32,97,32,115,101,99,
                       111,110,100,32,116,97,98,108,101,32,119,105,116,104]}],
                    0,false},
                   {text,[6,42,110,97,109,101,42]},
                   {sep,[{text,"\nas key and"}],0,false},
                   {text,[6,42,105,100,110,111,42]},
                   {sep,
                    [{text,
                      ";as data, that is, to index (invert) the table regarding the"}],
                    0,false},
                   {text,[6,42,110,97,109,101,42]},
                   {sep,
                    [{text,
                      "Ùfield. Clearly, the second table would have to be kept consistent with the master table. Mnesia can do this for you, but a home brew index table can be very efficient compared to the overhead involved in using Mnesia."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [151,65,110,32,105,110,100,101,120,32,116,97,98,108,101,
                     32,102,111,114,32,116,104,101,32,116,97,98,108,101,32,
                     105,110,32,116,104,101,32,112,114,101,118,105,111,117,
                     115,32,101,120,97,109,112,108,101,115,32,119,111,117,108,
                     100,32,104,97,118,101,32,116,111,32,98,101,32,97,32,98,
                     97,103,32,40,97,115,32,107,101,121,115,32,119,111,117,
                     108,100,32,97,112,112,101,97,114,32,109,111,114,101,32,
                     116,104,97,110,32,111,110,99,101,41,32,97,110,100,32,99,
                     97,110,32,104,97,118,101,32,116,104,101,32,102,111,108,
                     108,111,119,105,110,103,32,99,111,110,116,101,110,116,
                     115,58]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [146,10,91,35,105,110,100,101,120,95,101,110,116,114,121,
                     123,110,97,109,101,61,34,65,100,97,109,34,44,32,105,100,
                     110,111,61,49,125,44,10,32,35,105,110,100,101,120,95,101,
                     110,116,114,121,123,110,97,109,101,61,34,66,114,121,97,
                     110,34,44,32,105,100,110,111,61,50,125,44,10,32,35,105,
                     110,100,101,120,95,101,110,116,114,121,123,110,97,109,
                     101,61,34,66,114,121,97,110,34,44,32,105,100,110,111,61,
                     51,125,44,10,32,35,105,110,100,101,120,95,101,110,116,
                     114,121,123,110,97,109,101,61,34,67,97,114,108,34,44,32,
                     105,100,110,111,61,52,125,93]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,"'Given this index table, a lookup of the"}],
                    0,false},
                   {text,[5,42,97,103,101,42]},
                   {sep,
                    [{text,
                      "<fields for all persons named \"Bryan\" can be done as follows:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "á\n...\nMatchingIDs = ets:lookup(IndexTable,\"Bryan\"),\nlists:map(fun(#index_entry{idno = ID}) ->\n                 [#person{age = Age}] = ets:lookup(PersonTable, ID),\n                 Age\n          end,\n          MatchingIDs),\n..."}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text," Notice that this code never uses"}],0,false},
                   {text,"\r*ets:match/2*"},
                   {sep,
                    [{text,
                      [20,98,117,116,32,105,110,115,116,101,97,100,32,117,115,
                       101,115,32,116,104,101]}],
                    0,false},
                   {text,
                    [14,42,101,116,115,58,108,111,111,107,117,112,47,50,42]},
                   {sep,[{text,"\tcall. The"}],0,false},
                   {text,"\r*lists:map/2*"},
                   {sep,[{text,"!call is only used to traverse the"}],0,false},
                   {text,[6,42,105,100,110,111,42]},
                   {sep,
                    [{text,
                      "fs matching the name \"Bryan\" in the table; thus the number of lookups in the master table is minimized."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [313,75,101,101,112,105,110,103,32,97,110,32,105,110,100,
                     101,120,32,116,97,98,108,101,32,105,110,116,114,111,100,
                     117,99,101,115,32,115,111,109,101,32,111,118,101,114,104,
                     101,97,100,32,119,104,101,110,32,105,110,115,101,114,116,
                     105,110,103,32,114,101,99,111,114,100,115,32,105,110,32,
                     116,104,101,32,116,97,98,108,101,46,32,84,104,101,32,110,
                     117,109,98,101,114,32,111,102,32,111,112,101,114,97,116,
                     105,111,110,115,32,103,97,105,110,101,100,32,102,114,111,
                     109,32,116,104,101,32,116,97,98,108,101,32,109,117,115,
                     116,32,116,104,101,114,101,102,111,114,101,32,98,101,32,
                     99,111,109,112,97,114,101,100,32,97,103,97,105,110,115,
                     116,32,116,104,101,32,110,117,109,98,101,114,32,111,102,
                     32,111,112,101,114,97,116,105,111,110,115,32,105,110,115,
                     101,114,116,105,110,103,32,111,98,106,101,99,116,115,32,
                     105,110,32,116,104,101,32,116,97,98,108,101,46,32,72,111,
                     119,101,118,101,114,44,32,110,111,116,105,99,101,32,116,
                     104,97,116,32,116,104,101,32,103,97,105,110,32,105,115,
                     32,115,105,103,110,105,102,105,99,97,110,116,32,119,104,
                     101,110,32,116,104,101,32,107,101,121,32,99,97,110,32,98,
                     101,32,117,115,101,100,32,116,111,32,108,111,111,107,117,
                     112,32,101,108,101,109,101,110,116,115,46]}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}],
         0,false},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [19,35,35,35,32,77,110,101,115,105,97,45,83,112,101,99,105,102,
               105,99]},
             null},
            null}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [19,35,35,35,32,83,101,99,111,110,100,97,114,121,32,73,110,
                 100,101,120]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [300,73,102,32,121,111,117,32,102,114,101,113,117,101,110,
                     116,108,121,32,100,111,32,97,32,108,111,111,107,117,112,
                     32,111,110,32,97,32,102,105,101,108,100,32,116,104,97,
                     116,32,105,115,32,110,111,116,32,116,104,101,32,107,101,
                     121,32,111,102,32,116,104,101,32,116,97,98,108,101,44,32,
                     121,111,117,32,108,111,115,101,32,112,101,114,102,111,
                     114,109,97,110,99,101,32,117,115,105,110,103,32,34,109,
                     110,101,115,105,97,58,115,101,108,101,99,116,47,109,97,
                     116,99,104,95,111,98,106,101,99,116,34,32,97,115,32,116,
                     104,105,115,32,102,117,110,99,116,105,111,110,32,116,114,
                     97,118,101,114,115,101,115,32,116,104,101,32,119,104,111,
                     108,101,32,116,97,98,108,101,46,32,89,111,117,32,99,97,
                     110,32,99,114,101,97,116,101,32,97,32,115,101,99,111,110,
                     100,97,114,121,32,105,110,100,101,120,32,105,110,115,116,
                     101,97,100,32,97,110,100,32,117,115,101,32,34,109,110,
                     101,115,105,97,58,105,110,100,101,120,95,114,101,97,100,
                     34,32,116,111,32,103,101,116,32,102,97,115,116,101,114,
                     32,97,99,99,101,115,115,44,32,104,111,119,101,118,101,
                     114,32,116,104,105,115,32,114,101,113,117,105,114,101,
                     115,32,109,111,114,101,32,109,101,109,111,114,121,46]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\v**Example**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [371,10,45,114,101,99,111,114,100,40,112,101,114,115,111,
                     110,44,32,123,105,100,110,111,44,32,110,97,109,101,44,32,
                     97,103,101,44,32,111,99,99,117,112,97,116,105,111,110,
                     125,41,46,10,32,32,32,32,32,32,32,32,46,46,46,10,123,97,
                     116,111,109,105,99,44,32,111,107,125,32,61,32,10,109,110,
                     101,115,105,97,58,99,114,101,97,116,101,95,116,97,98,108,
                     101,40,112,101,114,115,111,110,44,32,91,123,105,110,100,
                     101,120,44,91,35,112,101,114,115,111,110,46,97,103,101,
                     93,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,97,
                     116,116,114,105,98,117,116,101,115,44,10,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,32,32,32,32,114,101,99,111,114,
                     100,95,105,110,102,111,40,102,105,101,108,100,115,44,32,
                     112,101,114,115,111,110,41,125,93,41,44,10,123,97,116,
                     111,109,105,99,44,32,111,107,125,32,61,32,109,110,101,
                     115,105,97,58,97,100,100,95,116,97,98,108,101,95,105,110,
                     100,101,120,40,112,101,114,115,111,110,44,32,97,103,101,
                     41,44,32,10,46,46,46,10,10,80,101,114,115,111,110,115,65,
                     103,101,52,50,32,61,10,32,32,32,32,32,109,110,101,115,
                     105,97,58,100,105,114,116,121,95,105,110,100,101,120,95,
                     114,101,97,100,40,112,101,114,115,111,110,44,32,52,50,44,
                     32,35,112,101,114,115,111,110,46,97,103,101,41,44,10,46,
                     46,46]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [16,35,35,35,32,84,114,97,110,115,97,99,116,105,111,110,115]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "àUsing transactions is a way to guarantee that the distributed Mnesia database remains consistent, even when many different processes update it in parallel. However, if you have real-time requirements it is recommended to use"}],
                    0,false},
                   {text,[7,42,100,105,114,116,121,42]},
                   {sep,
                    [{text,".operations instead of transactions. When using"}],
                    0,false},
                   {text,[7,42,100,105,114,116,121,42]},
                   {sep,
                    [{text,
                      "¯operations, you lose the consistency guarantee; this is usually solved by only letting one process update the table. Other processes must send update requests to that process."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\v**Example**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [326,10,46,46,46,10,37,32,85,115,105,110,103,32,116,114,
                     97,110,115,97,99,116,105,111,110,10,10,70,117,110,32,61,
                     32,102,117,110,40,41,32,45,62,10,32,32,32,32,32,32,32,32,
                     32,32,91,109,110,101,115,105,97,58,114,101,97,100,40,123,
                     84,97,98,108,101,44,32,75,101,121,125,41,44,10,32,32,32,
                     32,32,32,32,32,32,32,32,109,110,101,115,105,97,58,114,
                     101,97,100,40,123,84,97,98,108,101,50,44,32,75,101,121,
                     50,125,41,93,10,32,32,32,32,32,32,101,110,100,44,32,10,
                     10,123,97,116,111,109,105,99,44,32,91,82,101,115,117,108,
                     116,49,44,32,82,101,115,117,108,116,50,93,125,32,32,61,
                     32,109,110,101,115,105,97,58,116,114,97,110,115,97,99,
                     116,105,111,110,40,70,117,110,41,44,10,46,46,46,10,10,37,
                     32,83,97,109,101,32,116,104,105,110,103,32,117,115,105,
                     110,103,32,100,105,114,116,121,32,111,112,101,114,97,116,
                     105,111,110,115,10,46,46,46,10,10,82,101,115,117,108,116,
                     49,32,61,32,109,110,101,115,105,97,58,100,105,114,116,
                     121,95,114,101,97,100,40,123,84,97,98,108,101,44,32,75,
                     101,121,125,41,44,10,82,101,115,117,108,116,50,32,61,32,
                     109,110,101,115,105,97,58,100,105,114,116,121,95,114,101,
                     97,100,40,123,84,97,98,108,101,50,44,32,75,101,121,50,
                     125,41,44,10,46,46,46]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}}],
           0,false}],
         0,false}],
       0,false}},
     {sep,
      [{sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [30,35,35,35,32,67,114,101,97,116,105,110,103,32,97,110,32,69,
              114,108,97,110,103,32,80,114,111,99,101,115,115]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "XAn Erlang process is lightweight compared to threads and processes in operating systems."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "½A newly spawned Erlang process uses 309 words of memory in the non-SMP emulator without HiPE support. (SMP support and HiPE support both add to this size.) The size can be found as follows:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "k\nErlang (BEAM) emulator version 5.6 [async-threads:0] [kernel-poll:false]\n\nEshell V5.6  (abort with ^G)\n1> "},
                {text,"4Fun = fun() -> receive after infinity -> ok end end."},
                {text,[5,10,35,70,117,110]},
                {text,"\t<...>\n2> "},
                {text,"-{_,Bytes} = process_info(spawn(Fun), memory)."},
                {text,
                 [18,10,123,109,101,109,111,114,121,44,49,50,51,50,125,10,51,
                  62,32]},
                {text,"'Bytes div erlang:system_info(wordsize)."},
                {text,[4,10,51,48,57]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "}The size includes 233 words for the heap area (which includes the stack). The garbage collector increases the heap as needed."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"#The main (outer) loop for a process"}],0,false},
                {text,"\b**must**"},
                {sep,
                 [{text,
                   "Kbe tail-recursive. Otherwise, the stack grows until the process terminates."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[6,96,96,96,101,114,108]},
              {sep,
               [{text,
                 "é\nloop() -> \n  receive\n     {sys, Msg} ->\n         handle_sys_msg(Msg),\n         loop();\n     {From, Msg} ->\n          Reply = handle_msg(Msg),\n          From ! Reply,\n          loop()\n  end,\n  io:format(\"Message is processed~n\", [])."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\vThe call to"}],0,false},
                {text,"\r*io:format/2*"},
                {sep,
                 [{text,
                   "Xwill never be executed, but a return address will still be pushed to the stack each time"}],
                 0,false},
                {text,"\b*loop/0*"},
                {sep,
                 [{text,
                   "[is called recursively. The correct tail-recursive version of the function looks as follows:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[6,96,96,96,101,114,108]},
              {sep,
               [{text,
                 "Û\n   loop() -> \n      receive\n         {sys, Msg} ->\n            handle_sys_msg(Msg),\n            loop();\n         {From, Msg} ->\n            Reply = handle_msg(Msg),\n            From ! Reply,\n            loop()\n    end."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,
               [21,35,35,35,32,73,110,105,116,105,97,108,32,72,101,97,112,32,
                83,105,122,101]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "ÐThe default initial heap size of 233 words is quite conservative to support Erlang systems with hundreds of thousands or even millions of processes. The garbage collector grows and shrinks the heap as needed."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "=In a system that use comparatively few processes, performance"}],
                   0,false},
                  {text,"\t**might**"},
                  {sep,
                   [{text,
                     "@be improved by increasing the minimum heap size using either the"}],
                   0,false},
                  {text,[4,42,43,104,42]},
                  {sep,[{text,"\noption for"}],0,false},
                  {text,"\f[erl](./erl)"},
                  {sep,
                   [{text,"+or on a process-per-process basis using the"}],
                   0,false},
                  {text,
                   [15,42,109,105,110,95,104,101,97,112,95,115,105,122,101,
                    42]},
                  {sep,[{text,"\noption for"}],0,false},
                  {text,")[spawn_opt/4](../erts/erlang#spawn_opt/4)"},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   [20,84,104,101,32,103,97,105,110,32,105,115,32,116,119,111,
                    102,111,108,100,58]}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {sep,
             [{text,[1,42]},
              {text,
               "£Although the garbage collector grows the heap, it grows it step-by-step, which is more costly than directly establishing a larger heap when the process is spawned."}],
             0,false},
            {sep,
             [{text,[1,42]},
              {text,
               [150,84,104,101,32,103,97,114,98,97,103,101,32,99,111,108,108,
                101,99,116,111,114,32,99,97,110,32,97,108,115,111,32,115,104,
                114,105,110,107,32,116,104,101,32,104,101,97,112,32,105,102,
                32,105,116,32,105,115,32,109,117,99,104,32,108,97,114,103,101,
                114,32,116,104,97,110,32,116,104,101,32,97,109,111,117,110,
                116,32,111,102,32,100,97,116,97,32,115,116,111,114,101,100,32,
                111,110,32,105,116,59,32,115,101,116,116,105,110,103,32,116,
                104,101,32,109,105,110,105,109,117,109,32,104,101,97,112,32,
                115,105,122,101,32,112,114,101,118,101,110,116,115,32,116,104,
                97,116,46]}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,
                 [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,114,
                  110,105,110,103,34]},
                {sep,
                 [{text,[4,32,32,32,32]},
                  {sep,
                   [{sep,
                     [{above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{text,
                              [133,84,104,101,32,101,109,117,108,97,116,111,
                               114,32,112,114,111,98,97,98,108,121,32,117,115,
                               101,115,32,109,111,114,101,32,109,101,109,111,
                               114,121,44,32,97,110,100,32,98,101,99,97,117,
                               115,101,32,103,97,114,98,97,103,101,32,99,111,
                               108,108,101,99,116,105,111,110,115,32,111,99,
                               99,117,114,32,108,101,115,115,32,102,114,101,
                               113,117,101,110,116,108,121,44,32,104,117,103,
                               101,32,98,105,110,97,114,105,101,115,32,99,97,
                               110,32,98,101,32,107,101,112,116,32,109,117,99,
                               104,32,108,111,110,103,101,114,46]}],
                            0,false}],
                          0,true},
                         null},
                        null}}],
                     0,false}],
                   0,true}],
                 0,false}},
               {text,[0]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [360,73,110,32,115,121,115,116,101,109,115,32,119,105,
                      116,104,32,109,97,110,121,32,112,114,111,99,101,115,115,
                      101,115,44,32,99,111,109,112,117,116,97,116,105,111,110,
                      32,116,97,115,107,115,32,116,104,97,116,32,114,117,110,
                      32,102,111,114,32,97,32,115,104,111,114,116,32,116,105,
                      109,101,32,99,97,110,32,98,101,32,115,112,97,119,110,
                      101,100,32,111,102,102,32,105,110,116,111,32,97,32,110,
                      101,119,32,112,114,111,99,101,115,115,32,119,105,116,
                      104,32,97,32,104,105,103,104,101,114,32,109,105,110,105,
                      109,117,109,32,104,101,97,112,32,115,105,122,101,46,32,
                      87,104,101,110,32,116,104,101,32,112,114,111,99,101,115,
                      115,32,105,115,32,100,111,110,101,44,32,105,116,32,115,
                      101,110,100,115,32,116,104,101,32,114,101,115,117,108,
                      116,32,111,102,32,116,104,101,32,99,111,109,112,117,116,
                      97,116,105,111,110,32,116,111,32,97,110,111,116,104,101,
                      114,32,112,114,111,99,101,115,115,32,97,110,100,32,116,
                      101,114,109,105,110,97,116,101,115,46,32,73,102,32,116,
                      104,101,32,109,105,110,105,109,117,109,32,104,101,97,
                      112,32,115,105,122,101,32,105,115,32,99,97,108,99,117,
                      108,97,116,101,100,32,112,114,111,112,101,114,108,121,
                      44,32,116,104,101,32,112,114,111,99,101,115,115,32,109,
                      105,103,104,116,32,110,111,116,32,104,97,118,101,32,116,
                      111,32,100,111,32,97,110,121,32,103,97,114,98,97,103,
                      101,32,99,111,108,108,101,99,116,105,111,110,115,32,97,
                      116,32,97,108,108,46]}],
                   0,false},
                  {text,
                   "I**This optimization is not to be attempted without proper measurements.**"}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [20,35,35,35,32,80,114,111,99,101,115,115,32,77,101,115,115,97,
              103,101,115]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "CAll data in messages between Erlang processes is copied, except for"}],
                 0,false},
                {text,"-[refc binaries](./binaryhandling#refc_binary)"},
                {sep,
                 [{text,
                   [24,111,110,32,116,104,101,32,115,97,109,101,32,69,114,108,
                    97,110,103,32,110,111,100,101,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "ñWhen a message is sent to a process on another Erlang node, it is first encoded to the Erlang External Format before being sent through a TCP/IP socket. The receiving Erlang node decodes the message and distributes it to the correct process."}],
               0,false}],
             0,true},
            null},
           null}},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,
               [17,35,35,35,32,67,111,110,115,116,97,110,116,32,80,111,111,
                108]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,"\"Constant Erlang terms (also called"}],
                   0,false},
                  {text,"\f**literals**"},
                  {sep,
                   [{text,
                     [267,41,32,97,114,101,32,107,101,112,116,32,105,110,32,
                      99,111,110,115,116,97,110,116,32,112,111,111,108,115,59,
                      32,101,97,99,104,32,108,111,97,100,101,100,32,109,111,
                      100,117,108,101,32,104,97,115,32,105,116,115,32,111,119,
                      110,32,112,111,111,108,46,32,84,104,101,32,102,111,108,
                      108,111,119,105,110,103,32,102,117,110,99,116,105,111,
                      110,32,100,111,101,115,32,110,111,116,32,98,117,105,108,
                      100,32,116,104,101,32,116,117,112,108,101,32,101,118,
                      101,114,121,32,116,105,109,101,32,105,116,32,105,115,32,
                      99,97,108,108,101,100,32,40,111,110,108,121,32,116,111,
                      32,104,97,118,101,32,105,116,32,100,105,115,99,97,114,
                      100,101,100,32,116,104,101,32,110,101,120,116,32,116,
                      105,109,101,32,116,104,101,32,103,97,114,98,97,103,101,
                      32,99,111,108,108,101,99,116,111,114,32,119,97,115,32,
                      114,117,110,41,44,32,98,117,116,32,116,104,101,32,116,
                      117,112,108,101,32,105,115,32,108,111,99,97,116,101,100,
                      32,105,110,32,116,104,101,32,109,111,100,117,108,101,39,
                      115,32,99,111,110,115,116,97,110,116,32,112,111,111,108,
                      58]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   "K\ndays_in_month(M) ->\n    element(M, {31,28,31,30,31,30,31,31,30,31,30,31})."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "OBut if a constant is sent to another process (or stored in an Ets table), it is"}],
                   0,false},
                  {text,"\n**copied**"},
                  {sep,
                   [{text,
                     [323,46,32,84,104,101,32,114,101,97,115,111,110,32,105,
                      115,32,116,104,97,116,32,116,104,101,32,114,117,110,116,
                      105,109,101,32,115,121,115,116,101,109,32,109,117,115,
                      116,32,98,101,32,97,98,108,101,32,116,111,32,107,101,
                      101,112,32,116,114,97,99,107,32,111,102,32,97,108,108,
                      32,114,101,102,101,114,101,110,99,101,115,32,116,111,32,
                      99,111,110,115,116,97,110,116,115,32,116,111,32,117,110,
                      108,111,97,100,32,99,111,100,101,32,99,111,110,116,97,
                      105,110,105,110,103,32,99,111,110,115,116,97,110,116,
                      115,32,112,114,111,112,101,114,108,121,46,32,40,87,104,
                      101,110,32,116,104,101,32,99,111,100,101,32,105,115,32,
                      117,110,108,111,97,100,101,100,44,32,116,104,101,32,99,
                      111,110,115,116,97,110,116,115,32,97,114,101,32,99,111,
                      112,105,101,100,32,116,111,32,116,104,101,32,104,101,97,
                      112,32,111,102,32,116,104,101,32,112,114,111,99,101,115,
                      115,101,115,32,116,104,97,116,32,114,101,102,101,114,32,
                      116,111,32,116,104,101,109,46,41,32,84,104,101,32,99,
                      111,112,121,105,110,103,32,111,102,32,99,111,110,115,
                      116,97,110,116,115,32,109,105,103,104,116,32,98,101,32,
                      101,108,105,109,105,110,97,116,101,100,32,105,110,32,97,
                      32,102,117,116,117,114,101,32,69,114,108,97,110,103,47,
                      79,84,80,32,114,101,108,101,97,115,101,46]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,
               [19,35,35,35,32,76,111,115,115,32,111,102,32,83,104,97,114,105,
                110,103]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [19,83,104,97,114,101,100,32,115,117,98,116,101,114,109,
                      115,32,97,114,101]}],
                   0,false},
                  {text,[7,42,42,110,111,116,42,42]},
                  {sep,[{text,"!preserved in the following cases:"}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,
             {sep,
              [{text,[1,42]},{text,"&When a term is sent to another process"}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    "=When a term is passed as the initial process arguments in the"}],
                  0,false},
                 {text,[7,42,115,112,97,119,110,42]},
                 {sep,[{text,[4,99,97,108,108]}],0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},{text,"%When a term is stored in an Ets table"}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "UThat is an optimization. Most applications do not send messages with shared subterms."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "@The following example shows how a shared subterm can be created:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[6,96,96,96,101,114,108]},
                {sep,
                 [{text,
                   "{\nkilo_byte() ->\n    kilo_byte(10, [42]).\n\nkilo_byte(0, Acc) ->\n    Acc;\nkilo_byte(N, Acc) ->\n    kilo_byte(N-1, [Acc|Acc])."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"\r*kilo_byte/1*"},
                  {sep,
                   [{text,
                     [23,99,114,101,97,116,101,115,32,97,32,100,101,101,112,
                      32,108,105,115,116,46,32,73,102]}],
                   0,false},
                  {text,
                   [18,42,108,105,115,116,95,116,111,95,98,105,110,97,114,121,
                    47,49,42]},
                  {sep,
                   [{text,
                     "Dis called, the deep list can be converted to a binary of 1024 bytes:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,[4,10,49,62,32]},
                  {text,
                   "8byte_size(list_to_binary(efficiency_guide:kilo_byte()))."},
                  {text,[5,10,49,48,50,52]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\tUsing the"}],0,false},
                  {text,
                   [19,42,101,114,116,115,95,100,101,98,117,103,58,115,105,
                    122,101,47,49,42]},
                  {sep,
                   [{text,
                     "LBIF, it can be seen that the deep list only requires 22 words of heap space:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,[4,10,50,62,32]},
                  {text,".erts_debug:size(efficiency_guide:kilo_byte())."},
                  {text,[3,10,50,50]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\tUsing the"}],0,false},
                  {text,
                   [24,42,101,114,116,115,95,100,101,98,117,103,58,102,108,97,
                    116,95,115,105,122,101,47,49,42]},
                  {sep,
                   [{text,
                     "«BIF, the size of the deep list can be calculated if sharing is ignored. It becomes the size of the list when it has been sent to another process or stored in an Ets table:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,[4,10,51,62,32]},
                  {text,
                   "3erts_debug:flat_size(efficiency_guide:kilo_byte())."},
                  {text,[5,10,52,48,57,52]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "WIt can be verified that sharing will be lost if the data is inserted into an Ets table:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,[4,10,52,62,32]},
                  {text,
                   [21,84,32,61,32,101,116,115,58,110,101,119,40,116,97,98,44,
                    32,91,93,41,46]},
                  {text,[5,10,35,82,101,102]},
                  {text,"$<0.1662103692.2407923716.214181>\n5> "},
                  {text,"2ets:insert(T, {key,efficiency_guide:kilo_byte()})."},
                  {text,"\t\ntrue\n6> "},
                  {text,
                   "4erts_debug:size(element(2, hd(ets:lookup(T, key))))."},
                  {text,"\t\n4094\n7> "},
                  {text,
                   "9erts_debug:flat_size(element(2, hd(ets:lookup(T, key))))."},
                  {text,[5,10,52,48,57,52]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,".When the data has passed through an Ets table,"}],
                   0,false},
                  {text,
                   [19,42,101,114,116,115,95,100,101,98,117,103,58,115,105,
                    122,101,47,49,42]},
                  {sep,[{text,[3,97,110,100]}],0,false},
                  {text,
                   [24,42,101,114,116,115,95,100,101,98,117,103,58,102,108,97,
                    116,95,115,105,122,101,47,49,42]},
                  {sep,
                   [{text,"-return the same value. Sharing has been lost."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "_In a future Erlang/OTP release, it might be implemented a way to (optionally) preserve sharing."}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,[16,35,35,35,32,83,77,80,32,69,109,117,108,97,116,111,114]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [295,84,104,101,32,83,77,80,32,101,109,117,108,97,116,111,
                  114,32,40,105,110,116,114,111,100,117,99,101,100,32,105,110,
                  32,82,49,49,66,41,32,116,97,107,101,115,32,97,100,118,97,
                  110,116,97,103,101,32,111,102,32,97,32,109,117,108,116,105,
                  45,99,111,114,101,32,111,114,32,109,117,108,116,105,45,67,
                  80,85,32,99,111,109,112,117,116,101,114,32,98,121,32,114,
                  117,110,110,105,110,103,32,115,101,118,101,114,97,108,32,69,
                  114,108,97,110,103,32,115,99,104,101,100,117,108,101,114,32,
                  116,104,114,101,97,100,115,32,40,116,121,112,105,99,97,108,
                  108,121,44,32,116,104,101,32,115,97,109,101,32,97,115,32,
                  116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,111,
                  114,101,115,41,46,32,69,97,99,104,32,115,99,104,101,100,117,
                  108,101,114,32,116,104,114,101,97,100,32,115,99,104,101,100,
                  117,108,101,115,32,69,114,108,97,110,103,32,112,114,111,99,
                  101,115,115,101,115,32,105,110,32,116,104,101,32,115,97,109,
                  101,32,119,97,121,32,97,115,32,116,104,101,32,69,114,108,97,
                  110,103,32,115,99,104,101,100,117,108,101,114,32,105,110,32,
                  116,104,101,32,110,111,110,45,83,77,80,32,101,109,117,108,
                  97,116,111,114,46]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "?To gain performance by using the SMP emulator, your application"}],
                 0,false},
                {text,"3**must have more than one runnable Erlang process**"},
                {sep,
                 [{text,
                   [261,109,111,115,116,32,111,102,32,116,104,101,32,116,105,
                    109,101,46,32,79,116,104,101,114,119,105,115,101,44,32,
                    116,104,101,32,69,114,108,97,110,103,32,101,109,117,108,
                    97,116,111,114,32,99,97,110,32,115,116,105,108,108,32,111,
                    110,108,121,32,114,117,110,32,111,110,101,32,69,114,108,
                    97,110,103,32,112,114,111,99,101,115,115,32,97,116,32,116,
                    104,101,32,116,105,109,101,44,32,98,117,116,32,121,111,
                    117,32,109,117,115,116,32,115,116,105,108,108,32,112,97,
                    121,32,116,104,101,32,111,118,101,114,104,101,97,100,32,
                    102,111,114,32,108,111,99,107,105,110,103,46,32,65,108,
                    116,104,111,117,103,104,32,69,114,108,97,110,103,47,79,84,
                    80,32,116,114,105,101,115,32,116,111,32,114,101,100,117,
                    99,101,32,116,104,101,32,108,111,99,107,105,110,103,32,
                    111,118,101,114,104,101,97,100,32,97,115,32,109,117,99,
                    104,32,97,115,32,112,111,115,115,105,98,108,101,44,32,105,
                    116,32,119,105,108,108,32,110,101,118,101,114,32,98,101,
                    99,111,109,101,32,101,120,97,99,116,108,121,32,122,101,
                    114,111,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "ðBenchmarks that appear to be concurrent are often sequential. The estone benchmark, for example, is entirely sequential. So is the most common implementation of the \"ring benchmark\"; usually one process is active, while the others wait in a"}],
                 0,false},
                {text,"\t*receive*"},
                {sep,[{text,"\nstatement."}],0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "IThis section provides a brief overview on how to write efficient drivers."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "<It is assumed that you have a good understanding of drivers."}],
            0,false}],
          0,true},
         null},
        null}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,"\e### Drivers and Concurrency"},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "KThe runtime system always takes a lock before running any code in a driver."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "¤By default, that lock is at the driver level, that is, if several ports have been opened to the same driver, only code for one port at the same time can be running."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "BA driver can be configured to have one lock for each port instead."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                [263,73,102,32,97,32,100,114,105,118,101,114,32,105,115,32,
                 117,115,101,100,32,105,110,32,97,32,102,117,110,99,116,105,
                 111,110,97,108,32,119,97,121,32,40,116,104,97,116,32,105,115,
                 44,32,104,111,108,100,115,32,110,111,32,115,116,97,116,101,
                 44,32,98,117,116,32,111,110,108,121,32,100,111,101,115,32,
                 115,111,109,101,32,104,101,97,118,121,32,99,97,108,99,117,
                 108,97,116,105,111,110,32,97,110,100,32,114,101,116,117,114,
                 110,115,32,97,32,114,101,115,117,108,116,41,44,32,115,101,
                 118,101,114,97,108,32,112,111,114,116,115,32,119,105,116,104,
                 32,114,101,103,105,115,116,101,114,101,100,32,110,97,109,101,
                 115,32,99,97,110,32,98,101,32,111,112,101,110,101,100,32,98,
                 101,102,111,114,101,104,97,110,100,44,32,97,110,100,32,116,
                 104,101,32,112,111,114,116,32,116,111,32,98,101,32,117,115,
                 101,100,32,99,97,110,32,98,101,32,99,104,111,115,101,110,32,
                 98,97,115,101,100,32,111,110,32,116,104,101,32,115,99,104,
                 101,100,117,108,101,114,32,73,68,32,97,115,32,102,111,108,
                 108,111,119,115,58]}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [427,10,45,100,101,102,105,110,101,40,80,79,82,84,95,78,65,77,
                 69,83,40,41,44,10,9,123,115,111,109,101,95,100,114,105,118,
                 101,114,95,48,49,44,32,115,111,109,101,95,100,114,105,118,
                 101,114,95,48,50,44,32,115,111,109,101,95,100,114,105,118,
                 101,114,95,48,51,44,32,115,111,109,101,95,100,114,105,118,
                 101,114,95,48,52,44,10,9,32,115,111,109,101,95,100,114,105,
                 118,101,114,95,48,53,44,32,115,111,109,101,95,100,114,105,
                 118,101,114,95,48,54,44,32,115,111,109,101,95,100,114,105,
                 118,101,114,95,48,55,44,32,115,111,109,101,95,100,114,105,
                 118,101,114,95,48,56,44,10,9,32,115,111,109,101,95,100,114,
                 105,118,101,114,95,48,57,44,32,115,111,109,101,95,100,114,
                 105,118,101,114,95,49,48,44,32,115,111,109,101,95,100,114,
                 105,118,101,114,95,49,49,44,32,115,111,109,101,95,100,114,
                 105,118,101,114,95,49,50,44,10,9,32,115,111,109,101,95,100,
                 114,105,118,101,114,95,49,51,44,32,115,111,109,101,95,100,
                 114,105,118,101,114,95,49,52,44,32,115,111,109,101,95,100,
                 114,105,118,101,114,95,49,53,44,32,115,111,109,101,95,100,
                 114,105,118,101,114,95,49,54,125,41,46,10,10,99,108,105,101,
                 110,116,95,112,111,114,116,40,41,32,45,62,10,32,32,32,32,101,
                 108,101,109,101,110,116,40,101,114,108,97,110,103,58,115,121,
                 115,116,101,109,95,105,110,102,111,40,115,99,104,101,100,117,
                 108,101,114,95,105,100,41,32,114,101,109,32,116,117,112,108,
                 101,95,115,105,122,101,40,63,80,79,82,84,95,78,65,77,69,83,
                 40,41,41,32,43,32,49,44,10,9,32,32,32,32,63,80,79,82,84,95,
                 78,65,77,69,83,40,41,41,46]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "yAs long as there are no more than 16 schedulers, there will never be any lock contention on the port lock for the driver."}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,"3### Avoiding Copying Binaries When Calling a Driver"},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "PThere are basically two ways to avoid copying a binary that is sent to a driver:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,[{text,[6,73,102,32,116,104,101]}],0,false},
                    {text,[6,42,68,97,116,97,42]},
                    {sep,[{text,"\fargument for"}],0,false},
                    {text,"/[port_control/3](../erts/erlang#port_control/3)"},
                    {sep,
                     [{text,
                       "xis a binary, the driver will be passed a pointer to the contents of the binary and the binary will not be copied. If the"}],
                     0,false},
                    {text,[6,42,68,97,116,97,42]},
                    {sep,
                     [{text,
                       "^argument is an iolist (list of binaries and lists), all binaries in the iolist will be copied."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [131,84,104,101,114,101,102,111,114,101,44,32,105,102,
                        32,121,111,117,32,119,97,110,116,32,116,111,32,115,
                        101,110,100,32,98,111,116,104,32,97,32,112,114,101,45,
                        101,120,105,115,116,105,110,103,32,98,105,110,97,114,
                        121,32,97,110,100,32,115,111,109,101,32,101,120,116,
                        114,97,32,100,97,116,97,32,116,111,32,97,32,100,114,
                        105,118,101,114,32,119,105,116,104,111,117,116,32,99,
                        111,112,121,105,110,103,32,116,104,101,32,98,105,110,
                        97,114,121,44,32,121,111,117,32,109,117,115,116,32,99,
                        97,108,108]}],
                     0,false},
                    {text,
                     [16,42,112,111,114,116,95,99,111,110,116,114,111,108,47,
                      51,42]},
                    {sep,
                     [{text,
                       "Ýtwice; once with the binary and once with the extra data. However, that will only work if there is only one process communicating with the port (because otherwise another process can call the driver in-between the calls)."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,[{text,"\fImplement an"}],0,false},
             {text,"\t*outputv*"},
             {sep,
              [{text,
                [23,99,97,108,108,98,97,99,107,32,40,105,110,115,116,101,97,
                 100,32,111,102,32,97,110]}],
              0,false},
             {text,"\b*output*"},
             {sep,
              [{text,"+callback) in the driver. If a driver has an"}],
              0,false},
             {text,"\t*outputv*"},
             {sep,
              [{text,"2callback, refc binaries passed in an iolist in the"}],
              0,false},
             {text,[6,42,68,97,116,97,42]},
             {sep,[{text,"\fargument for"}],0,false},
             {text,"/[port_command/2](../erts/erlang#port_command/2)"},
             {sep,
              [{text,"+will be passed as references to the driver."}],
              0,false}],
            0,false}],
          0,false}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,{text,"*### Returning Small Binaries from a Driver"},null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "àThe runtime system can represent binaries up to 64 bytes as heap binaries. They are always copied when sent in messages, but they require less memory if they are not sent to another process and garbage collection is cheaper."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [155,73,102,32,121,111,117,32,107,110,111,119,32,116,104,97,
                   116,32,116,104,101,32,98,105,110,97,114,105,101,115,32,121,
                   111,117,32,114,101,116,117,114,110,32,97,114,101,32,97,108,
                   119,97,121,115,32,115,109,97,108,108,44,32,121,111,117,32,
                   97,114,101,32,97,100,118,105,115,101,100,32,116,111,32,117,
                   115,101,32,100,114,105,118,101,114,32,65,80,73,32,99,97,
                   108,108,115,32,116,104,97,116,32,100,111,32,110,111,116,32,
                   114,101,113,117,105,114,101,32,97,32,112,114,101,45,97,108,
                   108,111,99,97,116,101,100,32,98,105,110,97,114,121,44,32,
                   102,111,114,32,101,120,97,109,112,108,101,44]}],
                0,false},
               {text,"3[driver_output()](../erts/erl_driver#driver_output)"},
               {sep,[{text,[2,111,114]}],0,false},
               {text,
                "?[erl_drv_output_term()](../erts/erl_driver#erl_drv_output_term)"},
               {sep,[{text,"\v, using the"}],0,false},
               {text,
                [20,42,69,82,76,95,68,82,86,95,66,85,70,50,66,73,78,65,82,89,
                 42]},
               {sep,
                [{text,
                  "8format, to allow the runtime to construct a heap binary."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            ":### Returning Large Binaries without Copying from a Driver"},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "ÀTo avoid copying data when a large binary is sent or returned from the driver to an Erlang process, the driver must first allocate the binary and then send it to an Erlang process in some way."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[3,85,115,101]}],0,false},
               {text,
                "?[driver_alloc_binary()](../erts/erl_driver#driver_alloc_binary)"},
               {sep,
                [{text,
                  [21,116,111,32,97,108,108,111,99,97,116,101,32,97,32,98,105,
                   110,97,114,121,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "4There are several ways to send a binary created with"}],
                0,false},
               {text,
                [23,42,100,114,105,118,101,114,95,97,108,108,111,99,95,98,105,
                 110,97,114,121,40,41,42]},
               {sep,[{text,[1,58]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{sep,[{text,"\bFrom the"}],0,false},
              {text,"\t*control*"},
              {sep,[{text,"%callback, a binary can be returned if"}],0,false},
              {text,
               "E[set_port_control_flags()](../erts/erl_driver#set_port_control_flags)"},
              {sep,[{text,"#has been called with the flag value"}],0,false},
              {text,
               [26,42,80,79,82,84,95,67,79,78,84,82,79,76,95,70,76,65,71,95,
                66,73,78,65,82,89,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{sep,[{text," A single binary can be sent with"}],0,false},
              {text,
               "A[driver_output_binary()](../erts/erl_driver#driver_output_binary)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,[{text,[5,85,115,105,110,103]}],0,false},
             {text,
              "?[erl_drv_output_term()](../erts/erl_driver#erl_drv_output_term)"},
             {sep,[{text,[2,111,114]}],0,false},
             {text,
              ";[erl_drv_send_term()](../erts/erl_driver#erl_drv_send_term)"},
             {sep,
              [{text,"-, a binary can be included in an Erlang term."}],
              0,false}],
            0,false}],
          0,false}}],
       0,false}],
     0,false}},
   {sep,
    [{sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\n### Memory"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [258,65,32,103,111,111,100,32,115,116,97,114,116,32,119,104,
                  101,110,32,112,114,111,103,114,97,109,109,105,110,103,32,
                  101,102,102,105,99,105,101,110,116,108,121,32,105,115,32,
                  116,111,32,107,110,111,119,32,104,111,119,32,109,117,99,104,
                  32,109,101,109,111,114,121,32,100,105,102,102,101,114,101,
                  110,116,32,100,97,116,97,32,116,121,112,101,115,32,97,110,
                  100,32,111,112,101,114,97,116,105,111,110,115,32,114,101,
                  113,117,105,114,101,46,32,73,116,32,105,115,32,105,109,112,
                  108,101,109,101,110,116,97,116,105,111,110,45,100,101,112,
                  101,110,100,101,110,116,32,104,111,119,32,109,117,99,104,32,
                  109,101,109,111,114,121,32,116,104,101,32,69,114,108,97,110,
                  103,32,100,97,116,97,32,116,121,112,101,115,32,97,110,100,
                  32,111,116,104,101,114,32,105,116,101,109,115,32,99,111,110,
                  115,117,109,101,44,32,98,117,116,32,116,104,101,32,102,111,
                  108,108,111,119,105,110,103,32,116,97,98,108,101,32,115,104,
                  111,119,115,32,115,111,109,101,32,102,105,103,117,114,101,
                  115,32,102,111,114,32,116,104,101]}],
               0,false},
              {text,"\n*erts-8.0*"},
              {sep,
               [{text,
                 [19,115,121,115,116,101,109,32,105,110,32,79,84,80,32,49,57,
                  46,48,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [150,84,104,101,32,117,110,105,116,32,111,102,32,109,101,97,
                115,117,114,101,109,101,110,116,32,105,115,32,109,101,109,111,
                114,121,32,119,111,114,100,115,46,32,84,104,101,114,101,32,
                101,120,105,115,116,115,32,98,111,116,104,32,97,32,51,50,45,
                98,105,116,32,97,110,100,32,97,32,54,52,45,98,105,116,32,105,
                109,112,108,101,109,101,110,116,97,116,105,111,110,46,32,65,
                32,119,111,114,100,32,105,115,32,116,104,101,114,101,102,111,
                114,101,32,52,32,98,121,116,101,115,32,111,114,32,56,32,98,
                121,116,101,115,44,32,114,101,115,112,101,99,116,105,118,101,
                108,121,46]}],
             0,false}],
           0,true},
          null},
         null}},
       {text,"\vTODO: TABLE"}],
      0,false},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [17,35,35,35,32,83,121,115,116,101,109,32,76,105,109,105,116,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [264,84,104,101,32,69,114,108,97,110,103,32,108,97,110,103,117,
                97,103,101,32,115,112,101,99,105,102,105,99,97,116,105,111,
                110,32,112,117,116,115,32,110,111,32,108,105,109,105,116,115,
                32,111,110,32,116,104,101,32,110,117,109,98,101,114,32,111,
                102,32,112,114,111,99,101,115,115,101,115,44,32,108,101,110,
                103,116,104,32,111,102,32,97,116,111,109,115,44,32,97,110,100,
                32,115,111,32,111,110,46,32,72,111,119,101,118,101,114,44,32,
                102,111,114,32,112,101,114,102,111,114,109,97,110,99,101,32,
                97,110,100,32,109,101,109,111,114,121,32,115,97,118,105,110,
                103,32,114,101,97,115,111,110,115,44,32,116,104,101,114,101,
                32,119,105,108,108,32,97,108,119,97,121,115,32,98,101,32,108,
                105,109,105,116,115,32,105,110,32,97,32,112,114,97,99,116,105,
                99,97,108,32,105,109,112,108,101,109,101,110,116,97,116,105,
                111,110,32,111,102,32,116,104,101,32,69,114,108,97,110,103,32,
                108,97,110,103,117,97,103,101,32,97,110,100,32,101,120,101,99,
                117,116,105,111,110,32,101,110,118,105,114,111,110,109,101,
                110,116,46]}],
             0,false}],
           0,true},
          null},
         null}},
       {text,"\vTODO: TABLE"}],
      0,false}],
    0,false}},
  {sep,
   [{sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,",### Do Not Guess About Performance - Profile"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "æEven experienced software developers often guess wrong about where the performance bottlenecks are in their programs. Therefore, profile your program to see where the performance bottlenecks are and concentrate on optimizing them."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              ">Erlang/OTP contains several tools to help finding bottlenecks:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [22,91,116,111,111,108,115,47,102,112,114,111,102,93,40,46,47,
                102,112,114,111,102,41]},
              {sep,
               [{text,
                 [134,112,114,111,118,105,100,101,115,32,116,104,101,32,109,
                  111,115,116,32,100,101,116,97,105,108,101,100,32,105,110,
                  102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,32,
                  119,104,101,114,101,32,116,104,101,32,112,114,111,103,114,
                  97,109,32,116,105,109,101,32,105,115,32,115,112,101,110,116,
                  44,32,98,117,116,32,105,116,32,115,105,103,110,105,102,105,
                  99,97,110,116,108,121,32,115,108,111,119,115,32,100,111,119,
                  110,32,116,104,101,32,112,114,111,103,114,97,109,32,105,116,
                  32,112,114,111,102,105,108,101,115,46]}],
               0,false}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      [22,91,116,111,111,108,115,47,101,112,114,111,102,93,40,
                       46,47,101,112,114,111,102,41]},
                     {sep,
                      [{text,
                        "^provides time information of each function used in the program. No call graph is produced, but"}],
                      0,false},
                     {text,[7,42,101,112,114,111,102,42]},
                     {sep,
                      [{text,
                        "8has considerable less impact on the program it profiles."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        "-If the program is too large to be profiled by"}],
                      0,false},
                     {text,[7,42,102,112,114,111,102,42]},
                     {sep,[{text,[2,111,114]}],0,false},
                     {text,[7,42,101,112,114,111,102,42]},
                     {sep,[{text,[1,44]}],0,false},
                     {text,[7,42,99,112,114,111,102,42]},
                     {sep,
                      [{text,
                        "Ncan be used to locate code parts that are to be more thoroughly profiled using"}],
                      0,false},
                     {text,[7,42,102,112,114,111,102,42]},
                     {sep,[{text,[2,111,114]}],0,false},
                     {text,[7,42,101,112,114,111,102,42]},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [22,91,116,111,111,108,115,47,99,112,114,111,102,93,40,46,47,99,
               112,114,111,102,41]},
             {sep,
              [{text,
                "}is the most lightweight tool, but it only provides execution counts on a function basis (for all processes, not per process)."}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [26,91,114,117,110,116,105,109,101,95,116,111,111,108,115,47,100,
              98,103,93,40,46,47,100,98,103,41]},
            {sep,
             [{text,"4is the generic erlang tracing frontend. By using the"}],
             0,false},
            {text,"\v*timestamp*"},
            {sep,[{text,[2,111,114]}],0,false},
            {text,[15,42,99,112,117,95,116,105,109,101,115,116,97,109,112,42]},
            {sep,
             [{text,
               "Moptions it can be used to time how long function calls in a live system take."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [20,91,116,111,111,108,115,47,108,99,110,116,93,40,46,47,108,99,
             110,116,41]},
           {sep,
            [{text,
              "éis used to find contention points in the Erlang Run-Time System's internal locking mechanisms. It is useful when looking for bottlenecks in interaction between process, port, ets tables and other entities that can be run in parallel."}],
            0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\"The tools are further described in"}],0,false},
             {text,
              [25,91,84,111,111,108,115,93,40,35,112,114,111,102,105,108,105,
               110,103,95,116,111,111,108,115,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "tThere are also several open source tools outside of Erlang/OTP that can be used to help profiling. Some of them are:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"2[erlgrind](https://github.com/isacssouza/erlgrind)"},
            {sep,
             [{text,"3can be used to visualize fprof data in kcachegrind."}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"*[eflame](https://github.com/proger/eflame)"},
            {sep,
             [{text,
               "Nis an alternative to fprof that displays the profiling output as a flamegraph."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"0[recon](https://ferd.github.io/recon/index.html)"},
           {sep,
            [{text,
              "kis a collection of Erlang profiling and debugging tools. This tool comes with an accompanying E-book called"}],
            0,false},
           {text,"3[Erlang in Anger](https://www.erlang-in-anger.com/)"},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,false}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [20,35,35,35,32,77,101,109,111,114,121,32,112,114,111,102,105,108,
           105,110,103]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "Ieheap_alloc: Cannot allocate 1234567890 bytes of memory (of type \"heap\")."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [289,84,104,101,32,97,98,111,118,101,32,115,108,111,103,97,
                 110,32,105,115,32,111,110,101,32,111,102,32,116,104,101,32,
                 109,111,114,101,32,99,111,109,109,111,110,32,114,101,97,115,
                 111,110,115,32,102,111,114,32,69,114,108,97,110,103,32,116,
                 111,32,116,101,114,109,105,110,97,116,101,46,32,70,111,114,
                 32,117,110,107,110,111,119,110,32,114,101,97,115,111,110,115,
                 32,116,104,101,32,69,114,108,97,110,103,32,82,117,110,45,84,
                 105,109,101,32,83,121,115,116,101,109,32,102,97,105,108,101,
                 100,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,
                 109,111,114,121,32,116,111,32,117,115,101,46,32,87,104,101,
                 110,32,116,104,105,115,32,104,97,112,112,101,110,115,32,97,
                 32,99,114,97,115,104,32,100,117,109,112,32,105,115,32,103,
                 101,110,101,114,97,116,101,100,32,116,104,97,116,32,99,111,
                 110,116,97,105,110,115,32,105,110,102,111,114,109,97,116,105,
                 111,110,32,97,98,111,117,116,32,116,104,101,32,115,116,97,
                 116,101,32,111,102,32,116,104,101,32,115,121,115,116,101,109,
                 32,97,115,32,105,116,32,114,97,110,32,111,117,116,32,111,102,
                 32,109,101,109,111,114,121,46,32,85,115,101,32,116,104,101]}],
              0,false},
             {text,
              [21,91,111,98,115,101,114,118,101,114,47,99,100,118,93,40,46,47,
               99,100,118,41]},
             {sep,
              [{text,
                "wto get a view of the memory is being used. Look for processes with large heaps or many messages, large ets tables, etc."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "cWhen looking at memory usage in a running system the most basic function to get information from is"}],
              0,false},
             {text,"/[erts/erlang#memory/0](../erts/erlang#memory/0)"},
             {sep,
              [{text,"4. It returns the current memory usage of the system."}],
              0,false},
             {text," [tools/instrument](./instrument)"},
             {sep,
              [{text,
                "Ecan be used to get a more detailed breakdown of where memory is used."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "bProcesses, ports and ets tables can then be inspecting using their respective info functions, i.e."}],
              0,false},
             {text,
              "E[erts/erlang#process_info_memory](../erts/erlang#process_info_memory)"},
             {sep,[{text,[1,44]}],0,false},
             {text,
              "?[erts/erlang#port_info_memory](../erts/erlang#port_info_memory)"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,")[stdlib/ets#info/1](../stdlib/ets#info/1)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ESometimes the system can enter a state where the reported memory from"}],
              0,false},
             {text,
              [22,42,101,114,108,97,110,103,58,109,101,109,111,114,121,40,116,
               111,116,97,108,41,42]},
             {sep,
              [{text,
                "Àis very different from the memory reported by the OS. This can be because of internal fragmentation within the Erlang Run-Time System. Data about how memory is allocated can be retrieved using"}],
              0,false},
             {text,
              "I[erts/erlang#system_info_allocator](../erts/erlang#system_info_allocator)"},
             {sep,
              [{text,
                "O. The data you get from that function is very raw and not very plesant to read."}],
              0,false},
             {text,
              ";[recon_alloc](http://ferd.github.io/recon/recon_alloc.html)"},
             {sep,
              [{text,
                "Ocan be used to extract useful information from system_info statistics counters."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [17,35,35,35,32,76,97,114,103,101,32,83,121,115,116,101,109,115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [353,70,111,114,32,97,32,108,97,114,103,101,32,115,121,115,116,
               101,109,44,32,105,116,32,99,97,110,32,98,101,32,105,110,116,
               101,114,101,115,116,105,110,103,32,116,111,32,114,117,110,32,
               112,114,111,102,105,108,105,110,103,32,111,110,32,97,32,115,
               105,109,117,108,97,116,101,100,32,97,110,100,32,108,105,109,
               105,116,101,100,32,115,99,101,110,97,114,105,111,32,116,111,32,
               115,116,97,114,116,32,119,105,116,104,46,32,66,117,116,32,98,
               111,116,116,108,101,110,101,99,107,115,32,104,97,118,101,32,97,
               32,116,101,110,100,101,110,99,121,32,116,111,32,97,112,112,101,
               97,114,32,111,114,32,99,97,117,115,101,32,112,114,111,98,108,
               101,109,115,32,111,110,108,121,32,119,104,101,110,32,109,97,
               110,121,32,116,104,105,110,103,115,32,97,114,101,32,103,111,
               105,110,103,32,111,110,32,97,116,32,116,104,101,32,115,97,109,
               101,32,116,105,109,101,44,32,97,110,100,32,119,104,101,110,32,
               109,97,110,121,32,110,111,100,101,115,32,97,114,101,32,105,110,
               118,111,108,118,101,100,46,32,84,104,101,114,101,102,111,114,
               101,44,32,105,116,32,105,115,32,97,108,115,111,32,100,101,115,
               105,114,97,98,108,101,32,116,111,32,114,117,110,32,112,114,111,
               102,105,108,105,110,103,32,105,110,32,97,32,115,121,115,116,
               101,109,32,116,101,115,116,32,112,108,97,110,116,32,111,110,32,
               97,32,114,101,97,108,32,116,97,114,103,101,116,32,115,121,115,
               116,101,109,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÇFor a large system, you do not want to run the profiling tools on the whole system. Instead you want to concentrate on central processes and modules, which contribute for a big part of the execution."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "hThere are also some tools that can be used to get a view of the whole system with more or less overhead."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [31,91,111,98,115,101,114,118,101,114,47,111,98,115,101,114,118,
              101,114,93,40,46,47,111,98,115,101,114,118,101,114,41]},
            {sep,
             [{text,
               "mis a GUI tool that can connect to remote nodes and display a variety of information about the running system."}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [23,91,111,98,115,101,114,118,101,114,47,101,116,111,112,93,40,
              46,47,101,116,111,112,41]},
            {sep,
             [{text,
               "xis a command line tool that can connect to remote nodes and display information similar to what the UNIX tool top shows."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [30,91,114,117,110,116,105,109,101,95,116,111,111,108,115,47,109,
             115,97,99,99,93,40,46,47,109,115,97,99,99,41]},
           {sep,
            [{text,
              "îallows the user to get a view of what the Erlang Run-Time system is spending its time doing. Has a very low overhead, which makes it useful to run in heavily loaded systems to get some idea of where to start doing more granular profiling."}],
            0,false}],
          0,false}],
        0,false}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [20,35,35,35,32,87,104,97,116,32,116,111,32,76,111,111,107,32,70,
           111,114]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [438,87,104,101,110,32,97,110,97,108,121,122,105,110,103,32,116,
               104,101,32,114,101,115,117,108,116,32,102,105,108,101,32,102,
               114,111,109,32,116,104,101,32,112,114,111,102,105,108,105,110,
               103,32,97,99,116,105,118,105,116,121,44,32,108,111,111,107,32,
               102,111,114,32,102,117,110,99,116,105,111,110,115,32,116,104,
               97,116,32,97,114,101,32,99,97,108,108,101,100,32,109,97,110,
               121,32,116,105,109,101,115,32,97,110,100,32,104,97,118,101,32,
               97,32,108,111,110,103,32,34,111,119,110,34,32,101,120,101,99,
               117,116,105,111,110,32,116,105,109,101,32,40,116,105,109,101,
               32,101,120,99,108,117,100,105,110,103,32,99,97,108,108,115,32,
               116,111,32,111,116,104,101,114,32,102,117,110,99,116,105,111,
               110,115,41,46,32,70,117,110,99,116,105,111,110,115,32,116,104,
               97,116,32,97,114,101,32,99,97,108,108,101,100,32,97,32,108,111,
               116,32,111,102,32,116,105,109,101,115,32,99,97,110,32,97,108,
               115,111,32,98,101,32,105,110,116,101,114,101,115,116,105,110,
               103,44,32,97,115,32,101,118,101,110,32,115,109,97,108,108,32,
               116,104,105,110,103,115,32,99,97,110,32,97,100,100,32,117,112,
               32,116,111,32,113,117,105,116,101,32,97,32,98,105,116,32,105,
               102,32,114,101,112,101,97,116,101,100,32,111,102,116,101,110,
               46,32,65,108,115,111,32,97,115,107,32,121,111,117,114,115,101,
               108,102,32,119,104,97,116,32,121,111,117,32,99,97,110,32,100,
               111,32,116,111,32,114,101,100,117,99,101,32,116,104,105,115,32,
               116,105,109,101,46,32,84,104,101,32,102,111,108,108,111,119,
               105,110,103,32,97,114,101,32,97,112,112,114,111,112,114,105,97,
               116,101,32,116,121,112,101,115,32,111,102,32,113,117,101,115,
               116,105,111,110,115,32,116,111,32,97,115,107,32,121,111,117,
               114,115,101,108,102,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {text,
              "DIs it possible to reduce the number of times the function is called?"}],
            0,false},
           {sep,
            [{text,[1,42]},
             {text,
              "@Can any test be run less often if the order of tests is changed?"}],
            0,false}},
          {sep,
           [{text,[1,42]},{text,"#Can any redundant tests be removed?"}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {text,
            ">Does any calculated expression give the same result each time?"}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {text,
           "GAre there other ways to do this that are equivalent and more efficient?"}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {text,
          "OCan another internal data representation be used to make things more efficient?"}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "´These questions are not always trivial to answer. Some benchmarks might be needed to back up your theory and to avoid making things slower if your theory is wrong. For details, see"}],
              0,false},
             {text,
              [26,91,66,101,110,99,104,109,97,114,107,105,110,103,93,40,35,98,
               101,110,99,104,109,97,114,107,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\t### Tools"},null},null}},
      {text,"-<a name=\"profiling_tools\">profiling_tools</a>"},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,"\t### fprof"},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,[7,42,102,112,114,111,102,42]},
               {sep,
                [{text,
                  [291,109,101,97,115,117,114,101,115,32,116,104,101,32,101,
                   120,101,99,117,116,105,111,110,32,116,105,109,101,32,102,
                   111,114,32,101,97,99,104,32,102,117,110,99,116,105,111,110,
                   44,32,98,111,116,104,32,111,119,110,32,116,105,109,101,44,
                   32,116,104,97,116,32,105,115,44,32,104,111,119,32,109,117,
                   99,104,32,116,105,109,101,32,97,32,102,117,110,99,116,105,
                   111,110,32,104,97,115,32,117,115,101,100,32,102,111,114,32,
                   105,116,115,32,111,119,110,32,101,120,101,99,117,116,105,
                   111,110,44,32,97,110,100,32,97,99,99,117,109,117,108,97,
                   116,101,100,32,116,105,109,101,44,32,116,104,97,116,32,105,
                   115,44,32,105,110,99,108,117,100,105,110,103,32,99,97,108,
                   108,101,100,32,102,117,110,99,116,105,111,110,115,46,32,84,
                   104,101,32,118,97,108,117,101,115,32,97,114,101,32,100,105,
                   115,112,108,97,121,101,100,32,112,101,114,32,112,114,111,
                   99,101,115,115,46,32,89,111,117,32,97,108,115,111,32,103,
                   101,116,32,116,111,32,107,110,111,119,32,104,111,119,32,
                   109,97,110,121,32,116,105,109,101,115,32,101,97,99,104,32,
                   102,117,110,99,116,105,111,110,32,104,97,115,32,98,101,101,
                   110,32,99,97,108,108,101,100,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,[7,42,102,112,114,111,102,42]},
               {sep,
                [{text,
                  "Gis based on trace to file to minimize runtime performance impact. Using"}],
                0,false},
               {text,[7,42,102,112,114,111,102,42]},
               {sep,
                [{text,
                  "<is just a matter of calling a few library functions, see the"}],
                0,false},
               {text,
                [16,91,102,112,114,111,102,93,40,46,47,102,112,114,111,102,
                 41]},
               {sep,
                [{text,
                  [21,109,97,110,117,97,108,32,112,97,103,101,32,105,110,32,
                   84,111,111,108,115,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,"\t### eprof"},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,[7,42,101,112,114,111,102,42]},
               {sep,
                [{text,
                  [22,105,115,32,98,97,115,101,100,32,111,110,32,116,104,101,
                   32,69,114,108,97,110,103]}],
                0,false},
               {text,"\f*trace_info*"},
               {sep,[{text,[5,66,73,70,115,46]}],0,false},
               {text,[7,42,101,112,114,111,102,42]},
               {sep,
                [{text,
                  "Ãshows how much time has been used by each process, and in which function calls this time has been spent. Time is shown as percentage of total time and absolute time. For more information, see the"}],
                0,false},
               {text,
                [16,91,101,112,114,111,102,93,40,46,47,101,112,114,111,102,
                 41]},
               {sep,
                [{text,
                  [21,109,97,110,117,97,108,32,112,97,103,101,32,105,110,32,
                   84,111,111,108,115,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,"\t### cprof"},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,[7,42,99,112,114,111,102,42]},
               {sep,
                [{text,
                  [23,105,115,32,115,111,109,101,116,104,105,110,103,32,105,
                   110,32,98,101,116,119,101,101,110]}],
                0,false},
               {text,[7,42,102,112,114,111,102,42]},
               {sep,[{text,[3,97,110,100]}],0,false},
               {text,[7,42,99,111,118,101,114,42]},
               {sep,
                [{text,
                  "tregarding features. It counts how many times each function is called when the program is run, on a per module basis."}],
                0,false},
               {text,[7,42,99,112,114,111,102,42]},
               {sep,
                [{text,
                  "7has a low performance degradation effect (compared with"}],
                0,false},
               {text,[7,42,102,112,114,111,102,42]},
               {sep,
                [{text,
                  "F) and does not need to recompile any modules to profile (compared with"}],
                0,false},
               {text,[7,42,99,111,118,101,114,42]},
               {sep,[{text," ). For more information, see the"}],0,false},
               {text,
                [16,91,99,112,114,111,102,93,40,46,47,99,112,114,111,102,41]},
               {sep,
                [{text,
                  [21,109,97,110,117,97,108,32,112,97,103,101,32,105,110,32,
                   84,111,111,108,115,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,[16,35,35,35,32,84,111,111,108,32,83,117,109,109,97,114,121]},
           null},
          null}},
        {text,"\vTODO: TABLE"}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,[7,35,35,35,32,100,98,103]},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,[5,42,100,98,103,42]},
               {sep,
                [{text,",is a generic Erlang trace tool. By using the"}],
                0,false},
               {text,"\v*timestamp*"},
               {sep,[{text,[2,111,114]}],0,false},
               {text,
                [15,42,99,112,117,95,116,105,109,101,115,116,97,109,112,42]},
               {sep,
                [{text,
                  [321,111,112,116,105,111,110,115,32,105,116,32,99,97,110,32,
                   98,101,32,117,115,101,100,32,97,115,32,97,32,112,114,101,
                   99,105,115,105,111,110,32,105,110,115,116,114,117,109,101,
                   110,116,32,116,111,32,112,114,111,102,105,108,101,32,104,
                   111,119,32,108,111,110,103,32,116,105,109,101,32,97,32,102,
                   117,110,99,116,105,111,110,32,99,97,108,108,32,116,97,107,
                   101,115,32,102,111,114,32,97,32,115,112,101,99,105,102,105,
                   99,32,112,114,111,99,101,115,115,46,32,84,104,105,115,32,
                   99,97,110,32,98,101,32,118,101,114,121,32,117,115,101,102,
                   117,108,32,119,104,101,110,32,116,114,121,105,110,103,32,
                   116,111,32,117,110,100,101,114,115,116,97,110,100,32,119,
                   104,101,114,101,32,116,105,109,101,32,105,115,32,115,112,
                   101,110,116,32,105,110,32,97,32,104,101,97,118,105,108,121,
                   32,108,111,97,100,101,100,32,115,121,115,116,101,109,32,97,
                   115,32,105,116,32,105,115,32,112,111,115,115,105,98,108,
                   101,32,116,111,32,108,105,109,105,116,32,116,104,101,32,
                   115,99,111,112,101,32,111,102,32,119,104,97,116,32,105,115,
                   32,112,114,111,102,105,108,101,100,32,116,111,32,98,101,32,
                   118,101,114,121,32,115,109,97,108,108,46,32,70,111,114,32,
                   109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,
                   110,44,32,115,101,101,32,116,104,101]}],
                0,false},
               {text,"\f[dbg](./dbg)"},
               {sep,
                [{text,
                  [29,109,97,110,117,97,108,32,112,97,103,101,32,105,110,32,
                   82,117,110,116,105,109,101,32,84,111,111,108,115,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,"\b### lcnt"},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,[6,42,108,99,110,116,42]},
               {sep,
                [{text,
                  "×is used to profile interactions inbetween entities that run in parallel. For example if you have a process that all other processes in the system needs to interact with (maybe it has some global configuration), then"}],
                0,false},
               {text,[6,42,108,99,110,116,42]},
               {sep,
                [{text,
                  "Lcan be used to figure out if the interaction with that process is a problem."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "mIn the Erlang Run-time System entities are only run in parallel when there are multiple schedulers. Therefore"}],
                0,false},
               {text,[6,42,108,99,110,116,42]},
               {sep,
                [{text,
                  "jwill show more contention points (and thus be more useful) on systems using many schedulers on many cores."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [29,70,111,114,32,109,111,114,101,32,105,110,102,111,114,
                   109,97,116,105,111,110,44,32,115,101,101,32,116,104,101]}],
                0,false},
               {text,[14,91,108,99,110,116,93,40,46,47,108,99,110,116,41]},
               {sep,
                [{text,
                  [21,109,97,110,117,97,108,32,112,97,103,101,32,105,110,32,
                   84,111,111,108,115,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{text,"!<a name=\"benchmark\">benchmark</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[16,35,35,35,32,66,101,110,99,104,109,97,114,107,105,110,103]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [453,84,104,101,32,109,97,105,110,32,112,117,114,112,111,115,
               101,32,111,102,32,98,101,110,99,104,109,97,114,107,105,110,103,
               32,105,115,32,116,111,32,102,105,110,100,32,111,117,116,32,119,
               104,105,99,104,32,105,109,112,108,101,109,101,110,116,97,116,
               105,111,110,32,111,102,32,97,32,103,105,118,101,110,32,97,108,
               103,111,114,105,116,104,109,32,111,114,32,102,117,110,99,116,
               105,111,110,32,105,115,32,116,104,101,32,102,97,115,116,101,
               115,116,46,32,66,101,110,99,104,109,97,114,107,105,110,103,32,
               105,115,32,102,97,114,32,102,114,111,109,32,97,110,32,101,120,
               97,99,116,32,115,99,105,101,110,99,101,46,32,84,111,100,97,121,
               39,115,32,111,112,101,114,97,116,105,110,103,32,115,121,115,
               116,101,109,115,32,103,101,110,101,114,97,108,108,121,32,114,
               117,110,32,98,97,99,107,103,114,111,117,110,100,32,116,97,115,
               107,115,32,116,104,97,116,32,97,114,101,32,100,105,102,102,105,
               99,117,108,116,32,116,111,32,116,117,114,110,32,111,102,102,46,
               32,67,97,99,104,101,115,32,97,110,100,32,109,117,108,116,105,
               112,108,101,32,67,80,85,32,99,111,114,101,115,32,100,111,101,
               115,32,110,111,116,32,102,97,99,105,108,105,116,97,116,101,32,
               98,101,110,99,104,109,97,114,107,105,110,103,46,32,73,116,32,
               119,111,117,108,100,32,98,101,32,98,101,115,116,32,116,111,32,
               114,117,110,32,85,78,73,88,32,99,111,109,112,117,116,101,114,
               115,32,105,110,32,115,105,110,103,108,101,45,117,115,101,114,
               32,109,111,100,101,32,119,104,101,110,32,98,101,110,99,104,109,
               97,114,107,105,110,103,44,32,98,117,116,32,116,104,97,116,32,
               105,115,32,105,110,99,111,110,118,101,110,105,101,110,116,32,
               116,111,32,115,97,121,32,116,104,101,32,108,101,97,115,116,32,
               102,111,114,32,99,97,115,117,97,108,32,116,101,115,116,105,110,
               103,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"3Benchmarks can measure wall-clock time or CPU time."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"\"[timer:tc/3](../stdlib/timer#tc/3)"},
           {sep,
            [{text,
              [398,109,101,97,115,117,114,101,115,32,119,97,108,108,45,99,108,
               111,99,107,32,116,105,109,101,46,32,84,104,101,32,97,100,118,
               97,110,116,97,103,101,32,119,105,116,104,32,119,97,108,108,45,
               99,108,111,99,107,32,116,105,109,101,32,105,115,32,116,104,97,
               116,32,73,47,79,44,32,115,119,97,112,112,105,110,103,44,32,97,
               110,100,32,111,116,104,101,114,32,97,99,116,105,118,105,116,
               105,101,115,32,105,110,32,116,104,101,32,111,112,101,114,97,
               116,105,110,103,32,115,121,115,116,101,109,32,107,101,114,110,
               101,108,32,97,114,101,32,105,110,99,108,117,100,101,100,32,105,
               110,32,116,104,101,32,109,101,97,115,117,114,101,109,101,110,
               116,115,46,32,84,104,101,32,100,105,115,97,100,118,97,110,116,
               97,103,101,32,105,115,32,116,104,97,116,32,116,104,101,32,109,
               101,97,115,117,114,101,109,101,110,116,115,32,118,97,114,121,
               32,97,32,108,111,116,46,32,85,115,117,97,108,108,121,32,105,
               116,32,105,115,32,98,101,115,116,32,116,111,32,114,117,110,32,
               116,104,101,32,98,101,110,99,104,109,97,114,107,32,115,101,118,
               101,114,97,108,32,116,105,109,101,115,32,97,110,100,32,110,111,
               116,101,32,116,104,101,32,115,104,111,114,116,101,115,116,32,
               116,105,109,101,44,32,119,104,105,99,104,32,105,115,32,116,111,
               32,98,101,32,116,104,101,32,109,105,110,105,109,117,109,32,116,
               105,109,101,32,116,104,97,116,32,105,115,32,112,111,115,115,
               105,98,108,101,32,116,111,32,97,99,104,105,101,118,101,32,117,
               110,100,101,114,32,116,104,101,32,98,101,115,116,32,111,102,32,
               99,105,114,99,117,109,115,116,97,110,99,101,115,46]}],
            0,false}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"+[statistics/1](../erts/erlang#statistics/1)"},
           {sep,[{text,"\rwith argument"}],0,false},
           {text,"\t*runtime*"},
           {sep,
            [{text,
              [339,109,101,97,115,117,114,101,115,32,67,80,85,32,116,105,109,
               101,32,115,112,101,110,116,32,105,110,32,116,104,101,32,69,114,
               108,97,110,103,32,118,105,114,116,117,97,108,32,109,97,99,104,
               105,110,101,46,32,84,104,101,32,97,100,118,97,110,116,97,103,
               101,32,119,105,116,104,32,67,80,85,32,116,105,109,101,32,105,
               115,32,116,104,97,116,32,116,104,101,32,114,101,115,117,108,
               116,115,32,97,114,101,32,109,111,114,101,32,99,111,110,115,105,
               115,116,101,110,116,32,102,114,111,109,32,114,117,110,32,116,
               111,32,114,117,110,46,32,84,104,101,32,100,105,115,97,100,118,
               97,110,116,97,103,101,32,105,115,32,116,104,97,116,32,116,104,
               101,32,116,105,109,101,32,115,112,101,110,116,32,105,110,32,
               116,104,101,32,111,112,101,114,97,116,105,110,103,32,115,121,
               115,116,101,109,32,107,101,114,110,101,108,32,40,115,117,99,
               104,32,97,115,32,115,119,97,112,112,105,110,103,32,97,110,100,
               32,73,47,79,41,32,105,115,32,110,111,116,32,105,110,99,108,117,
               100,101,100,46,32,84,104,101,114,101,102,111,114,101,44,32,109,
               101,97,115,117,114,105,110,103,32,67,80,85,32,116,105,109,101,
               32,105,115,32,109,105,115,108,101,97,100,105,110,103,32,105,
               102,32,97,110,121,32,73,47,79,32,40,102,105,108,101,32,111,114,
               32,115,111,99,107,101,116,41,32,105,115,32,105,110,118,111,108,
               118,101,100,46]}],
            0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "XIt is probably a good idea to do both wall-clock measurements and CPU time measurements."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [18,83,111,109,101,32,102,105,110,97,108,32,97,100,118,105,99,
               101,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {text,
           [141,84,104,101,32,103,114,97,110,117,108,97,114,105,116,121,32,
            111,102,32,98,111,116,104,32,109,101,97,115,117,114,101,109,101,
            110,116,32,116,121,112,101,115,32,99,97,110,32,98,101,32,104,105,
            103,104,46,32,84,104,101,114,101,102,111,114,101,44,32,101,110,
            115,117,114,101,32,116,104,97,116,32,101,97,99,104,32,105,110,100,
            105,118,105,100,117,97,108,32,109,101,97,115,117,114,101,109,101,
            110,116,32,108,97,115,116,115,32,102,111,114,32,97,116,32,108,101,
            97,115,116,32,115,101,118,101,114,97,108,32,115,101,99,111,110,
            100,115,46]}],
         0,false},
        {sep,
         [{text,[1,42]},
          {text,
           [307,84,111,32,109,97,107,101,32,116,104,101,32,116,101,115,116,32,
            102,97,105,114,44,32,101,97,99,104,32,110,101,119,32,116,101,115,
            116,32,114,117,110,32,105,115,32,116,111,32,114,117,110,32,105,
            110,32,105,116,115,32,111,119,110,44,32,110,101,119,108,121,32,99,
            114,101,97,116,101,100,32,69,114,108,97,110,103,32,112,114,111,99,
            101,115,115,46,32,79,116,104,101,114,119,105,115,101,44,32,105,
            102,32,97,108,108,32,116,101,115,116,115,32,114,117,110,32,105,
            110,32,116,104,101,32,115,97,109,101,32,112,114,111,99,101,115,
            115,44,32,116,104,101,32,108,97,116,101,114,32,116,101,115,116,
            115,32,115,116,97,114,116,32,111,117,116,32,119,105,116,104,32,
            108,97,114,103,101,114,32,104,101,97,112,32,115,105,122,101,115,
            32,97,110,100,32,116,104,101,114,101,102,111,114,101,32,112,114,
            111,98,97,98,108,121,32,100,111,32,102,101,119,101,114,32,103,97,
            114,98,97,103,101,32,99,111,108,108,101,99,116,105,111,110,115,46,
            32,65,108,115,111,32,99,111,110,115,105,100,101,114,32,114,101,
            115,116,97,114,116,105,110,103,32,116,104,101,32,69,114,108,97,
            110,103,32,101,109,117,108,97,116,111,114,32,98,101,116,119,101,
            101,110,32,101,97,99,104,32,116,101,115,116,46]}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {text,
          [141,68,111,32,110,111,116,32,97,115,115,117,109,101,32,116,104,97,
           116,32,116,104,101,32,102,97,115,116,101,115,116,32,105,109,112,
           108,101,109,101,110,116,97,116,105,111,110,32,111,102,32,97,32,103,
           105,118,101,110,32,97,108,103,111,114,105,116,104,109,32,111,110,
           32,99,111,109,112,117,116,101,114,32,97,114,99,104,105,116,101,99,
           116,117,114,101,32,88,32,105,115,32,97,108,115,111,32,116,104,101,
           32,102,97,115,116,101,115,116,32,111,110,32,99,111,109,112,117,116,
           101,114,32,97,114,99,104,105,116,101,99,116,117,114,101,32,89,46]}],
        0,false}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "NWe belive that the truth finally has caught with the following, retired myths."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,")<a name=\"retired_myths\">retired_myths</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [23,35,35,35,32,77,121,116,104,58,32,70,117,110,115,32,97,114,101,32,
          83,108,111,119]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"&Funs used to be very slow, slower than"}],0,false},
            {text,"\t*apply/3*"},
            {sep,
             [{text,
               "_. Originally, funs were implemented using nothing more than compiler trickery, ordinary tuples,"}],
             0,false},
            {text,"\t*apply/3*"},
            {sep,[{text," , and a great deal of ingenuity."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "¼But that is history. Funs was given its own data type in R6B and was further optimized in R7B. Now the cost for a fun call falls roughly between the cost for a call to a local function and"}],
             0,false},
            {text,"\t*apply/3*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,"&### Myth: List Comprehensions are Slow"},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "aList comprehensions used to be implemented using funs, and in the old days funs were indeed slow."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [280,78,111,119,97,100,97,121,115,44,32,116,104,101,32,99,111,
              109,112,105,108,101,114,32,114,101,119,114,105,116,101,115,32,
              108,105,115,116,32,99,111,109,112,114,101,104,101,110,115,105,
              111,110,115,32,105,110,116,111,32,97,110,32,111,114,100,105,110,
              97,114,121,32,114,101,99,117,114,115,105,118,101,32,102,117,110,
              99,116,105,111,110,46,32,85,115,105,110,103,32,97,32,116,97,105,
              108,45,114,101,99,117,114,115,105,118,101,32,102,117,110,99,116,
              105,111,110,32,119,105,116,104,32,97,32,114,101,118,101,114,115,
              101,32,97,116,32,116,104,101,32,101,110,100,32,119,111,117,108,
              100,32,98,101,32,115,116,105,108,108,32,102,97,115,116,101,114,
              46,32,79,114,32,119,111,117,108,100,32,105,116,63,32,84,104,97,
              116,32,108,101,97,100,115,32,117,115,32,116,111,32,116,104,101,
              32,109,121,116,104,32,116,104,97,116,32,116,97,105,108,45,114,
              101,99,117,114,115,105,118,101,32,102,117,110,99,116,105,111,
              110,115,32,97,114,101,32,102,97,115,116,101,114,32,116,104,97,
              110,32,98,111,100,121,45,114,101,99,117,114,115,105,118,101,32,
              102,117,110,99,116,105,111,110,115,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,"2### Myth: List subtraction (\"--\" operator) is slow"},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¢List subtraction used to have a run-time complexity proportional to the product of the length of its operands, so it was extremely slow when both lists were long."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [269,65,115,32,111,102,32,79,84,80,32,50,50,32,116,104,101,32,
                114,117,110,45,116,105,109,101,32,99,111,109,112,108,101,120,
                105,116,121,32,105,115,32,34,110,32,108,111,103,32,110,34,32,
                97,110,100,32,116,104,101,32,111,112,101,114,97,116,105,111,
                110,32,119,105,108,108,32,99,111,109,112,108,101,116,101,32,
                113,117,105,99,107,108,121,32,101,118,101,110,32,119,104,101,
                110,32,98,111,116,104,32,108,105,115,116,115,32,97,114,101,32,
                118,101,114,121,32,108,111,110,103,46,32,73,110,32,102,97,99,
                116,44,32,105,116,32,105,115,32,102,97,115,116,101,114,32,97,
                110,100,32,117,115,101,115,32,108,101,115,115,32,109,101,109,
                111,114,121,32,116,104,97,110,32,116,104,101,32,99,111,109,
                109,111,110,108,121,32,117,115,101,100,32,119,111,114,107,97,
                114,111,117,110,100,32,116,111,32,99,111,110,118,101,114,116,
                32,98,111,116,104,32,108,105,115,116,115,32,116,111,32,111,
                114,100,101,114,101,100,32,115,101,116,115,32,98,101,102,111,
                114,101,32,115,117,98,116,114,97,99,116,105,110,103,32,116,
                104,101,109,32,119,105,116,104]}],
             0,false},
            {text,
             [20,42,111,114,100,115,101,116,115,58,115,117,98,116,114,97,99,
              116,47,50,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
