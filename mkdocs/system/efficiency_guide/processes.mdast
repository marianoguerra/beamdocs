{above,
 {above,
  {above,
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Processes"},null},null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [29,35,35,32,67,114,101,97,116,105,110,103,32,97,110,32,69,114,108,
          97,110,103,32,80,114,111,99,101,115,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "XAn Erlang process is lightweight compared to threads and processes in operating systems."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "½A newly spawned Erlang process uses 309 words of memory in the non-SMP emulator without HiPE support. (SMP support and HiPE support both add to this size.) The size can be found as follows:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "k\nErlang (BEAM) emulator version 5.6 [async-threads:0] [kernel-poll:false]\n\nEshell V5.6  (abort with ^G)\n1> "},
            {text,"4Fun = fun() -> receive after infinity -> ok end end."},
            {text,[5,10,35,70,117,110]},
            {text,"\t<...>\n2> "},
            {text,"-{_,Bytes} = process_info(spawn(Fun), memory)."},
            {text,
             [18,10,123,109,101,109,111,114,121,44,49,50,51,50,125,10,51,62,
              32]},
            {text,"'Bytes div erlang:system_info(wordsize)."},
            {text,[4,10,51,48,57]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "}The size includes 233 words for the heap area (which includes the stack). The garbage collector increases the heap as needed."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"#The main (outer) loop for a process"}],0,false},
            {text,"\b**must**"},
            {sep,
             [{text,
               "Kbe tail-recursive. Otherwise, the stack grows until the process terminates."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\n**DO NOT**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,
           [{text,
             "é\nloop() -> \n  receive\n     {sys, Msg} ->\n         handle_sys_msg(Msg),\n         loop();\n     {From, Msg} ->\n          Reply = handle_msg(Msg),\n          From ! Reply,\n          loop()\n  end,\n  io:format(\"Message is processed~n\", [])."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\vThe call to"}],0,false},
            {text,"\r*io:format/2*"},
            {sep,
             [{text,
               "Xwill never be executed, but a return address will still be pushed to the stack each time"}],
             0,false},
            {text,"\b*loop/0*"},
            {sep,
             [{text,
               "[is called recursively. The correct tail-recursive version of the function looks as follows:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[6,96,96,96,101,114,108]},
          {sep,
           [{text,
             "Û\n   loop() -> \n      receive\n         {sys, Msg} ->\n            handle_sys_msg(Msg),\n            loop();\n         {From, Msg} ->\n            Reply = handle_msg(Msg),\n            From ! Reply,\n            loop()\n    end."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [20,35,35,32,73,110,105,116,105,97,108,32,72,101,97,112,32,83,105,
            122,101]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "ÐThe default initial heap size of 233 words is quite conservative to support Erlang systems with hundreds of thousands or even millions of processes. The garbage collector grows and shrinks the heap as needed."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "=In a system that use comparatively few processes, performance"}],
               0,false},
              {text,"\t**might**"},
              {sep,
               [{text,
                 "@be improved by increasing the minimum heap size using either the"}],
               0,false},
              {text,[4,42,43,104,42]},
              {sep,[{text,"\noption for"}],0,false},
              {text,"\f[erl](./erl)"},
              {sep,
               [{text,"+or on a process-per-process basis using the"}],
               0,false},
              {text,
               [15,42,109,105,110,95,104,101,97,112,95,115,105,122,101,42]},
              {sep,[{text,"\noption for"}],0,false},
              {text,")[spawn_opt/4](../erts/erlang#spawn_opt/4)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [20,84,104,101,32,103,97,105,110,32,105,115,32,116,119,111,102,
                111,108,100,58]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {sep,
         [{text,[1,42]},
          {text,
           "£Although the garbage collector grows the heap, it grows it step-by-step, which is more costly than directly establishing a larger heap when the process is spawned."}],
         0,false},
        {sep,
         [{text,[1,42]},
          {text,
           [150,84,104,101,32,103,97,114,98,97,103,101,32,99,111,108,108,101,
            99,116,111,114,32,99,97,110,32,97,108,115,111,32,115,104,114,105,
            110,107,32,116,104,101,32,104,101,97,112,32,105,102,32,105,116,32,
            105,115,32,109,117,99,104,32,108,97,114,103,101,114,32,116,104,97,
            110,32,116,104,101,32,97,109,111,117,110,116,32,111,102,32,100,97,
            116,97,32,115,116,111,114,101,100,32,111,110,32,105,116,59,32,115,
            101,116,116,105,110,103,32,116,104,101,32,109,105,110,105,109,117,
            109,32,104,101,97,112,32,115,105,122,101,32,112,114,101,118,101,
            110,116,115,32,116,104,97,116,46]}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,
             [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,114,110,
              105,110,103,34]},
            {sep,
             [{text,[4,32,32,32,32]},
              {sep,
               [{sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          [133,84,104,101,32,101,109,117,108,97,116,111,114,
                           32,112,114,111,98,97,98,108,121,32,117,115,101,115,
                           32,109,111,114,101,32,109,101,109,111,114,121,44,
                           32,97,110,100,32,98,101,99,97,117,115,101,32,103,
                           97,114,98,97,103,101,32,99,111,108,108,101,99,116,
                           105,111,110,115,32,111,99,99,117,114,32,108,101,
                           115,115,32,102,114,101,113,117,101,110,116,108,121,
                           44,32,104,117,103,101,32,98,105,110,97,114,105,101,
                           115,32,99,97,110,32,98,101,32,107,101,112,116,32,
                           109,117,99,104,32,108,111,110,103,101,114,46]}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false}],
               0,true}],
             0,false}},
           {text,[0]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [360,73,110,32,115,121,115,116,101,109,115,32,119,105,116,
                  104,32,109,97,110,121,32,112,114,111,99,101,115,115,101,115,
                  44,32,99,111,109,112,117,116,97,116,105,111,110,32,116,97,
                  115,107,115,32,116,104,97,116,32,114,117,110,32,102,111,114,
                  32,97,32,115,104,111,114,116,32,116,105,109,101,32,99,97,
                  110,32,98,101,32,115,112,97,119,110,101,100,32,111,102,102,
                  32,105,110,116,111,32,97,32,110,101,119,32,112,114,111,99,
                  101,115,115,32,119,105,116,104,32,97,32,104,105,103,104,101,
                  114,32,109,105,110,105,109,117,109,32,104,101,97,112,32,115,
                  105,122,101,46,32,87,104,101,110,32,116,104,101,32,112,114,
                  111,99,101,115,115,32,105,115,32,100,111,110,101,44,32,105,
                  116,32,115,101,110,100,115,32,116,104,101,32,114,101,115,
                  117,108,116,32,111,102,32,116,104,101,32,99,111,109,112,117,
                  116,97,116,105,111,110,32,116,111,32,97,110,111,116,104,101,
                  114,32,112,114,111,99,101,115,115,32,97,110,100,32,116,101,
                  114,109,105,110,97,116,101,115,46,32,73,102,32,116,104,101,
                  32,109,105,110,105,109,117,109,32,104,101,97,112,32,115,105,
                  122,101,32,105,115,32,99,97,108,99,117,108,97,116,101,100,
                  32,112,114,111,112,101,114,108,121,44,32,116,104,101,32,112,
                  114,111,99,101,115,115,32,109,105,103,104,116,32,110,111,
                  116,32,104,97,118,101,32,116,111,32,100,111,32,97,110,121,
                  32,103,97,114,98,97,103,101,32,99,111,108,108,101,99,116,
                  105,111,110,115,32,97,116,32,97,108,108,46]}],
               0,false},
              {text,
               "I**This optimization is not to be attempted without proper measurements.**"}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [19,35,35,32,80,114,111,99,101,115,115,32,77,101,115,115,97,103,101,
         115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "CAll data in messages between Erlang processes is copied, except for"}],
            0,false},
           {text,"-[refc binaries](./binaryhandling#refc_binary)"},
           {sep,
            [{text,
              [24,111,110,32,116,104,101,32,115,97,109,101,32,69,114,108,97,
               110,103,32,110,111,100,101,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "ñWhen a message is sent to a process on another Erlang node, it is first encoded to the Erlang External Format before being sent through a TCP/IP socket. The receiving Erlang node decodes the message and distributes it to the correct process."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[16,35,35,32,67,111,110,115,116,97,110,116,32,80,111,111,108]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\"Constant Erlang terms (also called"}],0,false},
             {text,"\f**literals**"},
             {sep,
              [{text,
                [267,41,32,97,114,101,32,107,101,112,116,32,105,110,32,99,111,
                 110,115,116,97,110,116,32,112,111,111,108,115,59,32,101,97,
                 99,104,32,108,111,97,100,101,100,32,109,111,100,117,108,101,
                 32,104,97,115,32,105,116,115,32,111,119,110,32,112,111,111,
                 108,46,32,84,104,101,32,102,111,108,108,111,119,105,110,103,
                 32,102,117,110,99,116,105,111,110,32,100,111,101,115,32,110,
                 111,116,32,98,117,105,108,100,32,116,104,101,32,116,117,112,
                 108,101,32,101,118,101,114,121,32,116,105,109,101,32,105,116,
                 32,105,115,32,99,97,108,108,101,100,32,40,111,110,108,121,32,
                 116,111,32,104,97,118,101,32,105,116,32,100,105,115,99,97,
                 114,100,101,100,32,116,104,101,32,110,101,120,116,32,116,105,
                 109,101,32,116,104,101,32,103,97,114,98,97,103,101,32,99,111,
                 108,108,101,99,116,111,114,32,119,97,115,32,114,117,110,41,
                 44,32,98,117,116,32,116,104,101,32,116,117,112,108,101,32,
                 105,115,32,108,111,99,97,116,101,100,32,105,110,32,116,104,
                 101,32,109,111,100,117,108,101,39,115,32,99,111,110,115,116,
                 97,110,116,32,112,111,111,108,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,[{sep,[{text,[6,42,42,68,79,42,42]}],0,false}],0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,
              "K\ndays_in_month(M) ->\n    element(M, {31,28,31,30,31,30,31,31,30,31,30,31})."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "OBut if a constant is sent to another process (or stored in an Ets table), it is"}],
              0,false},
             {text,"\n**copied**"},
             {sep,
              [{text,
                [323,46,32,84,104,101,32,114,101,97,115,111,110,32,105,115,32,
                 116,104,97,116,32,116,104,101,32,114,117,110,116,105,109,101,
                 32,115,121,115,116,101,109,32,109,117,115,116,32,98,101,32,
                 97,98,108,101,32,116,111,32,107,101,101,112,32,116,114,97,99,
                 107,32,111,102,32,97,108,108,32,114,101,102,101,114,101,110,
                 99,101,115,32,116,111,32,99,111,110,115,116,97,110,116,115,
                 32,116,111,32,117,110,108,111,97,100,32,99,111,100,101,32,99,
                 111,110,116,97,105,110,105,110,103,32,99,111,110,115,116,97,
                 110,116,115,32,112,114,111,112,101,114,108,121,46,32,40,87,
                 104,101,110,32,116,104,101,32,99,111,100,101,32,105,115,32,
                 117,110,108,111,97,100,101,100,44,32,116,104,101,32,99,111,
                 110,115,116,97,110,116,115,32,97,114,101,32,99,111,112,105,
                 101,100,32,116,111,32,116,104,101,32,104,101,97,112,32,111,
                 102,32,116,104,101,32,112,114,111,99,101,115,115,101,115,32,
                 116,104,97,116,32,114,101,102,101,114,32,116,111,32,116,104,
                 101,109,46,41,32,84,104,101,32,99,111,112,121,105,110,103,32,
                 111,102,32,99,111,110,115,116,97,110,116,115,32,109,105,103,
                 104,116,32,98,101,32,101,108,105,109,105,110,97,116,101,100,
                 32,105,110,32,97,32,102,117,116,117,114,101,32,69,114,108,97,
                 110,103,47,79,84,80,32,114,101,108,101,97,115,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [18,35,35,32,76,111,115,115,32,111,102,32,83,104,97,114,105,110,
           103]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,83,104,97,114,101,100,32,115,117,98,116,101,114,109,115,
                 32,97,114,101]}],
              0,false},
             {text,[7,42,42,110,111,116,42,42]},
             {sep,[{text,"!preserved in the following cases:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},{text,"&When a term is sent to another process"}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{text,
               "=When a term is passed as the initial process arguments in the"}],
             0,false},
            {text,[7,42,115,112,97,119,110,42]},
            {sep,[{text,[4,99,97,108,108]}],0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},{text,"%When a term is stored in an Ets table"}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "UThat is an optimization. Most applications do not send messages with shared subterms."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "@The following example shows how a shared subterm can be created:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[6,96,96,96,101,114,108]},
           {sep,
            [{text,
              "{\nkilo_byte() ->\n    kilo_byte(10, [42]).\n\nkilo_byte(0, Acc) ->\n    Acc;\nkilo_byte(N, Acc) ->\n    kilo_byte(N-1, [Acc|Acc])."}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\r*kilo_byte/1*"},
             {sep,
              [{text,
                [23,99,114,101,97,116,101,115,32,97,32,100,101,101,112,32,108,
                 105,115,116,46,32,73,102]}],
              0,false},
             {text,
              [18,42,108,105,115,116,95,116,111,95,98,105,110,97,114,121,47,
               49,42]},
             {sep,
              [{text,
                "Dis called, the deep list can be converted to a binary of 1024 bytes:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,
              "8byte_size(list_to_binary(efficiency_guide:kilo_byte()))."},
             {text,[5,10,49,48,50,52]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\tUsing the"}],0,false},
             {text,
              [19,42,101,114,116,115,95,100,101,98,117,103,58,115,105,122,101,
               47,49,42]},
             {sep,
              [{text,
                "LBIF, it can be seen that the deep list only requires 22 words of heap space:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,50,62,32]},
             {text,".erts_debug:size(efficiency_guide:kilo_byte())."},
             {text,[3,10,50,50]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\tUsing the"}],0,false},
             {text,
              [24,42,101,114,116,115,95,100,101,98,117,103,58,102,108,97,116,
               95,115,105,122,101,47,49,42]},
             {sep,
              [{text,
                "«BIF, the size of the deep list can be calculated if sharing is ignored. It becomes the size of the list when it has been sent to another process or stored in an Ets table:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,51,62,32]},
             {text,"3erts_debug:flat_size(efficiency_guide:kilo_byte())."},
             {text,[5,10,52,48,57,52]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "WIt can be verified that sharing will be lost if the data is inserted into an Ets table:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,52,62,32]},
             {text,
              [21,84,32,61,32,101,116,115,58,110,101,119,40,116,97,98,44,32,
               91,93,41,46]},
             {text,[5,10,35,82,101,102]},
             {text,"$<0.1662103692.2407923716.214181>\n5> "},
             {text,"2ets:insert(T, {key,efficiency_guide:kilo_byte()})."},
             {text,"\t\ntrue\n6> "},
             {text,"4erts_debug:size(element(2, hd(ets:lookup(T, key))))."},
             {text,"\t\n4094\n7> "},
             {text,
              "9erts_debug:flat_size(element(2, hd(ets:lookup(T, key))))."},
             {text,[5,10,52,48,57,52]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,".When the data has passed through an Ets table,"}],
              0,false},
             {text,
              [19,42,101,114,116,115,95,100,101,98,117,103,58,115,105,122,101,
               47,49,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [24,42,101,114,116,115,95,100,101,98,117,103,58,102,108,97,116,
               95,115,105,122,101,47,49,42]},
             {sep,
              [{text,"-return the same value. Sharing has been lost."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "_In a future Erlang/OTP release, it might be implemented a way to (optionally) preserve sharing."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[15,35,35,32,83,77,80,32,69,109,117,108,97,116,111,114]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [295,84,104,101,32,83,77,80,32,101,109,117,108,97,116,111,114,32,
            40,105,110,116,114,111,100,117,99,101,100,32,105,110,32,82,49,49,
            66,41,32,116,97,107,101,115,32,97,100,118,97,110,116,97,103,101,
            32,111,102,32,97,32,109,117,108,116,105,45,99,111,114,101,32,111,
            114,32,109,117,108,116,105,45,67,80,85,32,99,111,109,112,117,116,
            101,114,32,98,121,32,114,117,110,110,105,110,103,32,115,101,118,
            101,114,97,108,32,69,114,108,97,110,103,32,115,99,104,101,100,117,
            108,101,114,32,116,104,114,101,97,100,115,32,40,116,121,112,105,
            99,97,108,108,121,44,32,116,104,101,32,115,97,109,101,32,97,115,
            32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,111,114,
            101,115,41,46,32,69,97,99,104,32,115,99,104,101,100,117,108,101,
            114,32,116,104,114,101,97,100,32,115,99,104,101,100,117,108,101,
            115,32,69,114,108,97,110,103,32,112,114,111,99,101,115,115,101,
            115,32,105,110,32,116,104,101,32,115,97,109,101,32,119,97,121,32,
            97,115,32,116,104,101,32,69,114,108,97,110,103,32,115,99,104,101,
            100,117,108,101,114,32,105,110,32,116,104,101,32,110,111,110,45,
            83,77,80,32,101,109,117,108,97,116,111,114,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "?To gain performance by using the SMP emulator, your application"}],
           0,false},
          {text,"3**must have more than one runnable Erlang process**"},
          {sep,
           [{text,
             [261,109,111,115,116,32,111,102,32,116,104,101,32,116,105,109,
              101,46,32,79,116,104,101,114,119,105,115,101,44,32,116,104,101,
              32,69,114,108,97,110,103,32,101,109,117,108,97,116,111,114,32,
              99,97,110,32,115,116,105,108,108,32,111,110,108,121,32,114,117,
              110,32,111,110,101,32,69,114,108,97,110,103,32,112,114,111,99,
              101,115,115,32,97,116,32,116,104,101,32,116,105,109,101,44,32,
              98,117,116,32,121,111,117,32,109,117,115,116,32,115,116,105,108,
              108,32,112,97,121,32,116,104,101,32,111,118,101,114,104,101,97,
              100,32,102,111,114,32,108,111,99,107,105,110,103,46,32,65,108,
              116,104,111,117,103,104,32,69,114,108,97,110,103,47,79,84,80,32,
              116,114,105,101,115,32,116,111,32,114,101,100,117,99,101,32,116,
              104,101,32,108,111,99,107,105,110,103,32,111,118,101,114,104,
              101,97,100,32,97,115,32,109,117,99,104,32,97,115,32,112,111,115,
              115,105,98,108,101,44,32,105,116,32,119,105,108,108,32,110,101,
              118,101,114,32,98,101,99,111,109,101,32,101,120,97,99,116,108,
              121,32,122,101,114,111,46]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "ðBenchmarks that appear to be concurrent are often sequential. The estone benchmark, for example, is entirely sequential. So is the most common implementation of the \"ring benchmark\"; usually one process is active, while the others wait in a"}],
           0,false},
          {text,"\t*receive*"},
          {sep,[{text,"\nstatement."}],0,false}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
