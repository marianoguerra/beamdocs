{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"## Types and Function Specifications"},null},null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\e## The Erlang Type Language"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "ÃŽErlang is a dynamically typed language. Still, it comes with a notation for declaring sets of Erlang terms to form a particular type. This effectively forms specific subtypes of the set of all Erlang terms."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "|Subsequently, these types can be used to specify types of record fields and also the argument and return types of functions."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"/Type information can be used for the following:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {text,
            [31,84,111,32,100,111,99,117,109,101,110,116,32,102,117,110,99,
             116,105,111,110,32,105,110,116,101,114,102,97,99,101,115]}],
          0,false},
         {sep,
          [{text,[1,42]},
           {text,
            "ETo provide more information for bug detection tools, such as Dialyzer"}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {text,
           "kTo be exploited by documentation tools, such as EDoc, for generating program documentation of various forms"}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "pIt is expected that the type language described in this section supersedes and replaces the purely comment-based"}],
               0,false},
              {text,[7,42,64,116,121,112,101,42]},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,[7,42,64,115,112,101,99,42]},
              {sep,
               [{text,
                 [26,100,101,99,108,97,114,97,116,105,111,110,115,32,117,115,
                  101,100,32,98,121,32,69,68,111,99,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}},
    {sep,
     [{text,"\e<a name=\"syntax\">syntax</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [25,35,35,32,84,121,112,101,115,32,97,110,100,32,116,104,101,105,
           114,32,83,121,110,116,97,120]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "rTypes describe sets of Erlang terms. Types consist of, and are built from, a set of predefined types, for example,"}],
              0,false},
             {text,"\v*integer()*"},
             {sep,[{text,[1,44]}],0,false},
             {text,"\b*atom()*"},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,[7,42,112,105,100,40,41,42]},
             {sep,
              [{text,
                "u. Predefined types represent a typically infinite set of Erlang terms that belong to this type. For example, the type"}],
              0,false},
             {text,"\b*atom()*"},
             {sep,[{text,"$denotes the set of all Erlang atoms."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "TFor integers and atoms, it is allowed for singleton types; for example, the integers"}],
              0,false},
             {text,[4,42,45,49,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[4,42,52,50,42]},
             {sep,
              [{text,[14,44,32,111,114,32,116,104,101,32,97,116,111,109,115]}],
              0,false},
             {text,[7,42,39,102,111,111,39,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[7,42,39,98,97,114,39,42]},
             {sep,
              [{text,
                [300,46,32,65,108,108,32,111,116,104,101,114,32,116,121,112,
                 101,115,32,97,114,101,32,98,117,105,108,116,32,117,115,105,
                 110,103,32,117,110,105,111,110,115,32,111,102,32,101,105,116,
                 104,101,114,32,112,114,101,100,101,102,105,110,101,100,32,
                 116,121,112,101,115,32,111,114,32,115,105,110,103,108,101,
                 116,111,110,32,116,121,112,101,115,46,32,73,110,32,97,32,116,
                 121,112,101,32,117,110,105,111,110,32,98,101,116,119,101,101,
                 110,32,97,32,116,121,112,101,32,97,110,100,32,111,110,101,32,
                 111,102,32,105,116,115,32,115,117,98,116,121,112,101,115,44,
                 32,116,104,101,32,115,117,98,116,121,112,101,32,105,115,32,
                 97,98,115,111,114,98,101,100,32,98,121,32,116,104,101,32,115,
                 117,112,101,114,116,121,112,101,46,32,84,104,117,115,44,32,
                 116,104,101,32,117,110,105,111,110,32,105,115,32,116,104,101,
                 110,32,116,114,101,97,116,101,100,32,97,115,32,105,102,32,
                 116,104,101,32,115,117,98,116,121,112,101,32,119,97,115,32,
                 110,111,116,32,97,32,99,111,110,115,116,105,116,117,101,110,
                 116,32,111,102,32,116,104,101,32,117,110,105,111,110,46,32,
                 70,111,114,32,101,120,97,109,112,108,101,44,32,116,104,101,
                 32,116,121,112,101,32,117,110,105,111,110,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,[{text,"!  atom() | 'bar' | integer() | 42"}],0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"2describes the same set of terms as the type union:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [20,32,32,97,116,111,109,40,41,32,124,32,105,110,116,101,103,
               101,114,40,41]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "gBecause of subtype relations that exist between types, types form a lattice where the top-most element,"}],
              0,false},
             {text,[7,42,97,110,121,40,41,42]},
             {sep,
              [{text,
                "B, denotes the set of all Erlang terms and the bottom-most element,"}],
              0,false},
             {text,"\b*none()*"},
             {sep,[{text,"!, denotes the empty set of terms."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "=The set of predefined types and the syntax for types follows:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [2350,10,32,32,84,121,112,101,32,58,58,32,97,110,121,40,41,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,37,32,84,
               104,101,32,116,111,112,32,116,121,112,101,44,32,116,104,101,32,
               115,101,116,32,111,102,32,97,108,108,32,69,114,108,97,110,103,
               32,116,101,114,109,115,10,32,32,32,32,32,32,32,32,124,32,110,
               111,110,101,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,37,37,32,84,104,101,32,98,111,116,116,111,109,32,116,121,
               112,101,44,32,99,111,110,116,97,105,110,115,32,110,111,32,116,
               101,114,109,115,10,32,32,32,32,32,32,32,32,124,32,112,105,100,
               40,41,10,32,32,32,32,32,32,32,32,124,32,112,111,114,116,40,41,
               10,32,32,32,32,32,32,32,32,124,32,114,101,102,101,114,101,110,
               99,101,40,41,10,32,32,32,32,32,32,32,32,124,32,91,93,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,37,32,
               110,105,108,10,32,32,32,32,32,32,32,32,124,32,65,116,111,109,
               10,32,32,32,32,32,32,32,32,124,32,66,105,116,115,116,114,105,
               110,103,10,32,32,32,32,32,32,32,32,124,32,102,108,111,97,116,
               40,41,10,32,32,32,32,32,32,32,32,124,32,70,117,110,10,32,32,32,
               32,32,32,32,32,124,32,73,110,116,101,103,101,114,10,32,32,32,
               32,32,32,32,32,124,32,76,105,115,116,10,32,32,32,32,32,32,32,
               32,124,32,77,97,112,10,32,32,32,32,32,32,32,32,124,32,84,117,
               112,108,101,10,32,32,32,32,32,32,32,32,124,32,85,110,105,111,
               110,10,32,32,32,32,32,32,32,32,124,32,85,115,101,114,68,101,
               102,105,110,101,100,32,32,32,32,32,32,32,32,32,32,32,37,37,32,
               100,101,115,99,114,105,98,101,100,32,105,110,32,84,121,112,101,
               32,68,101,99,108,97,114,97,116,105,111,110,115,32,111,102,32,
               85,115,101,114,45,68,101,102,105,110,101,100,32,84,121,112,101,
               115,10,10,32,32,65,116,111,109,32,58,58,32,97,116,111,109,40,
               41,10,32,32,32,32,32,32,32,32,124,32,69,114,108,97,110,103,95,
               65,116,111,109,32,32,32,32,32,32,32,32,32,32,32,37,37,32,39,
               102,111,111,39,44,32,39,98,97,114,39,44,32,46,46,46,10,10,32,
               32,66,105,116,115,116,114,105,110,103,32,58,58,32,60,60,62,62,
               10,32,32,32,32,32,32,32,32,32,32,32,32,32,124,32,60,60,95,58,
               77,62,62,32,32,32,32,32,32,32,32,32,32,37,37,32,77,32,105,115,
               32,97,110,32,73,110,116,101,103,101,114,95,86,97,108,117,101,
               32,116,104,97,116,32,101,118,97,108,117,97,116,101,115,32,116,
               111,32,97,32,112,111,115,105,116,105,118,101,32,105,110,116,
               101,103,101,114,10,32,32,32,32,32,32,32,32,32,32,32,32,32,124,
               32,60,60,95,58,95,42,78,62,62,32,32,32,32,32,32,32,32,37,37,32,
               78,32,105,115,32,97,110,32,73,110,116,101,103,101,114,95,86,97,
               108,117,101,32,116,104,97,116,32,101,118,97,108,117,97,116,101,
               115,32,116,111,32,97,32,112,111,115,105,116,105,118,101,32,105,
               110,116,101,103,101,114,10,32,32,32,32,32,32,32,32,32,32,32,32,
               32,124,32,60,60,95,58,77,44,32,95,58,95,42,78,62,62,10,10,32,
               32,70,117,110,32,58,58,32,102,117,110,40,41,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,37,37,32,97,110,121,32,102,
               117,110,99,116,105,111,110,10,32,32,32,32,32,32,32,124,32,102,
               117,110,40,40,46,46,46,41,32,45,62,32,84,121,112,101,41,32,32,
               32,32,32,37,37,32,97,110,121,32,97,114,105,116,121,44,32,114,
               101,116,117,114,110,105,110,103,32,84,121,112,101,10,32,32,32,
               32,32,32,32,124,32,102,117,110,40,40,41,32,45,62,32,84,121,112,
               101,41,10,32,32,32,32,32,32,32,124,32,102,117,110,40,40,84,76,
               105,115,116,41,32,45,62,32,84,121,112,101,41,10,10,32,32,73,
               110,116,101,103,101,114,32,58,58,32,105,110,116,101,103,101,
               114,40,41,10,32,32,32,32,32,32,32,32,32,32,32,124,32,73,110,
               116,101,103,101,114,95,86,97,108,117,101,10,32,32,32,32,32,32,
               32,32,32,32,32,124,32,73,110,116,101,103,101,114,95,86,97,108,
               117,101,46,46,73,110,116,101,103,101,114,95,86,97,108,117,101,
               32,32,32,32,32,32,37,37,32,115,112,101,99,105,102,105,101,115,
               32,97,110,32,105,110,116,101,103,101,114,32,114,97,110,103,101,
               10,10,32,32,73,110,116,101,103,101,114,95,86,97,108,117,101,32,
               58,58,32,69,114,108,97,110,103,95,73,110,116,101,103,101,114,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,37,32,46,46,46,44,
               32,45,49,44,32,48,44,32,49,44,32,46,46,46,32,52,50,32,46,46,46,
               10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,124,32,
               69,114,108,97,110,103,95,67,104,97,114,97,99,116,101,114,32,32,
               32,32,32,32,32,32,32,32,32,32,37,37,32,36,97,44,32,36,98,32,46,
               46,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               124,32,73,110,116,101,103,101,114,95,86,97,108,117,101,32,66,
               105,110,97,114,121,79,112,32,73,110,116,101,103,101,114,95,86,
               97,108,117,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,124,32,85,110,97,114,121,79,112,32,73,110,116,101,103,
               101,114,95,86,97,108,117,101,10,10,32,32,66,105,110,97,114,121,
               79,112,32,58,58,32,39,42,39,32,124,32,39,100,105,118,39,32,124,
               32,39,114,101,109,39,32,124,32,39,98,97,110,100,39,32,124,32,
               39,43,39,32,124,32,39,45,39,32,124,32,39,98,111,114,39,32,124,
               32,39,98,120,111,114,39,32,124,32,39,98,115,108,39,32,124,32,
               39,98,115,114,39,10,10,32,32,85,110,97,114,121,79,112,32,58,58,
               32,39,43,39,32,124,32,39,45,39,32,124,32,39,98,110,111,116,39,
               10,10,32,32,76,105,115,116,32,58,58,32,108,105,115,116,40,84,
               121,112,101,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,37,37,32,80,114,111,112,101,
               114,32,108,105,115,116,32,40,91,93,45,116,101,114,109,105,110,
               97,116,101,100,41,10,32,32,32,32,32,32,32,32,124,32,109,97,121,
               98,101,95,105,109,112,114,111,112,101,114,95,108,105,115,116,
               40,84,121,112,101,49,44,32,84,121,112,101,50,41,32,32,32,32,37,
               37,32,84,121,112,101,49,61,99,111,110,116,101,110,116,115,44,
               32,84,121,112,101,50,61,116,101,114,109,105,110,97,116,105,111,
               110,10,32,32,32,32,32,32,32,32,124,32,110,111,110,101,109,112,
               116,121,95,105,109,112,114,111,112,101,114,95,108,105,115,116,
               40,84,121,112,101,49,44,32,84,121,112,101,50,41,32,37,37,32,84,
               121,112,101,49,32,97,110,100,32,84,121,112,101,50,32,97,115,32,
               97,98,111,118,101,10,32,32,32,32,32,32,32,32,124,32,110,111,
               110,101,109,112,116,121,95,108,105,115,116,40,84,121,112,101,
               41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,37,
               32,80,114,111,112,101,114,32,110,111,110,45,101,109,112,116,
               121,32,108,105,115,116,10,10,32,32,77,97,112,32,58,58,32,109,
               97,112,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,37,32,
               100,101,110,111,116,101,115,32,97,32,109,97,112,32,111,102,32,
               97,110,121,32,115,105,122,101,10,32,32,32,32,32,32,32,124,32,
               35,123,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,37,32,
               100,101,110,111,116,101,115,32,116,104,101,32,101,109,112,116,
               121,32,109,97,112,10,32,32,32,32,32,32,32,124,32,35,123,65,115,
               115,111,99,105,97,116,105,111,110,76,105,115,116,125,10,10,32,
               32,84,117,112,108,101,32,58,58,32,116,117,112,108,101,40,41,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,37,37,32,100,101,110,111,116,101,115,32,
               97,32,116,117,112,108,101,32,111,102,32,97,110,121,32,115,105,
               122,101,10,32,32,32,32,32,32,32,32,32,124,32,123,125,10,32,32,
               32,32,32,32,32,32,32,124,32,123,84,76,105,115,116,125,10,10,32,
               32,65,115,115,111,99,105,97,116,105,111,110,76,105,115,116,32,
               58,58,32,65,115,115,111,99,105,97,116,105,111,110,10,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,124,32,65,115,
               115,111,99,105,97,116,105,111,110,44,32,65,115,115,111,99,105,
               97,116,105,111,110,76,105,115,116,10,10,32,32,65,115,115,111,
               99,105,97,116,105,111,110,32,58,58,32,84,121,112,101,32,58,61,
               32,84,121,112,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,37,37,32,100,101,110,111,116,101,115,32,97,32,109,97,
               110,100,97,116,111,114,121,32,97,115,115,111,99,105,97,116,105,
               111,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,124,32,
               84,121,112,101,32,61,62,32,84,121,112,101,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,37,37,32,100,101,110,111,116,
               101,115,32,97,110,32,111,112,116,105,111,110,97,108,32,97,115,
               115,111,99,105,97,116,105,111,110,10,10,32,32,84,76,105,115,
               116,32,58,58,32,84,121,112,101,10,32,32,32,32,32,32,32,32,32,
               124,32,84,121,112,101,44,32,84,76,105,115,116,10,10,32,32,85,
               110,105,111,110,32,58,58,32,84,121,112,101,49,32,124,32,84,121,
               112,101,50,10]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÃšInteger values are either integer or character literals or expressions consisting of possibily nested unary or binary operations that evaluate to an integer. Such expressions can also be used in bit strings and ranges."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\"The general form of bit strings is"}],0,false},
             {text,[16,42,60,60,95,58,77,44,32,95,58,95,42,78,62,62,42]},
             {sep,[{text,[7,44,32,119,104,101,114,101]}],0,false},
             {text,[3,42,77,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[3,42,78,42]},
             {sep,
              [{text,
                "Cmust evaluate to positive integers. It denotes a bit string that is"}],
              0,false},
             {text,"\v*M + (k*N)*"},
             {sep,
              [{text,"1bits long (that is, a bit string that starts with"}],
              0,false},
             {text,[3,42,77,42]},
             {sep,
              [{text,
                [23,98,105,116,115,32,97,110,100,32,99,111,110,116,105,110,
                 117,101,115,32,119,105,116,104]}],
              0,false},
             {text,[3,42,107,42]},
             {sep,[{text,"\vsegments of"}],0,false},
             {text,[3,42,78,42]},
             {sep,
              [{text,
                [16,98,105,116,115,32,101,97,99,104,44,32,119,104,101,114,
                 101]}],
              0,false},
             {text,[3,42,107,42]},
             {sep,
              [{text,"*is also a positive integer). The notations"}],
              0,false},
             {text,"\v*<<_:_*N>>*"},
             {sep,[{text,[1,44]}],0,false},
             {text,"\t*<<_:M>>*"},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,[6,42,60,60,62,62,42]},
             {sep,
              [{text,",are convenient shorthands for the cases that"}],
              0,false},
             {text,[3,42,77,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,[3,42,78,42]},
             {sep,
              [{text,
                [20,44,32,111,114,32,98,111,116,104,44,32,97,114,101,32,122,
                 101,114,111,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "NBecause lists are commonly used, they have shorthand type notations. The types"}],
              0,false},
             {text,"\t*list(T)*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [18,42,110,111,110,101,109,112,116,121,95,108,105,115,116,40,84,
               41,42]},
             {sep,
              [{text,
                [19,104,97,118,101,32,116,104,101,32,115,104,111,114,116,104,
                 97,110,100,115]}],
              0,false},
             {text,[5,42,91,84,93,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\t*[T,...]*"},
             {sep,
              [{text,
                "F, respectively. The only difference between the two shorthands is that"}],
              0,false},
             {text,[5,42,91,84,93,42]},
             {sep,
              [{text,
                [24,99,97,110,32,98,101,32,97,110,32,101,109,112,116,121,32,
                 108,105,115,116,32,98,117,116]}],
              0,false},
             {text,"\t*[T,...]*"},
             {sep,[{text,[7,99,97,110,110,111,116,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [29,78,111,116,105,99,101,32,116,104,97,116,32,116,104,101,32,
                 115,104,111,114,116,104,97,110,100,32,102,111,114]}],
              0,false},
             {text,"\b*list()*"},
             {sep,
              [{text,"3, that is, the list of elements of unknown type, is"}],
              0,false},
             {text,[5,42,91,95,93,42]},
             {sep,[{text,[3,40,111,114]}],0,false},
             {text,"\t*[any()]*"},
             {sep,[{text,[6,41,44,32,110,111,116]}],0,false},
             {text,[4,42,91,93,42]},
             {sep,
              [{text,[14,46,32,84,104,101,32,110,111,116,97,116,105,111,110]}],
              0,false},
             {text,[4,42,91,93,42]},
             {sep,
              [{text,"0specifies the singleton type for the empty list."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text," The general form of map types is"}],0,false},
             {text,
              [20,42,35,123,65,115,115,111,99,105,97,116,105,111,110,76,105,
               115,116,125,42]},
             {sep,
              [{text,
                [18,46,32,84,104,101,32,107,101,121,32,116,121,112,101,115,32,
                 105,110]}],
              0,false},
             {text,
              [17,42,65,115,115,111,99,105,97,116,105,111,110,76,105,115,116,
               42]},
             {sep,
              [{text,
                "qare allowed to overlap, and if they do, the leftmost association takes precedence. A map association has a key in"}],
              0,false},
             {text,
              [17,42,65,115,115,111,99,105,97,116,105,111,110,76,105,115,116,
               42]},
             {sep,[{text,"\eif it belongs to this type."}],0,false},
             {text,
              [17,42,65,115,115,111,99,105,97,116,105,111,110,76,105,115,116,
               42]},
             {sep,
              [{text,
                "Ã®can contain both mandatory and optional association types. If an association type is mandatory, an association with that type is to be present. In the case of an optional association type it is not required for the key type to be present."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"+Notice that the syntactic representation of"}],
              0,false},
             {text,[7,42,109,97,112,40,41,42]},
             {sep,[{text,[2,105,115]}],0,false},
             {text,
              [19,42,35,123,97,110,121,40,41,32,61,62,32,97,110,121,40,41,125,
               42]},
             {sep,[{text,[3,40,111,114]}],0,false},
             {text,"\v*#{_ => _}*"},
             {sep,[{text,[6,41,44,32,110,111,116]}],0,false},
             {text,[5,42,35,123,125,42]},
             {sep,
              [{text,[14,46,32,84,104,101,32,110,111,116,97,116,105,111,110]}],
              0,false},
             {text,[5,42,35,123,125,42]},
             {sep,
              [{text,"/specifies the singleton type for the empty map."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [142,70,111,114,32,99,111,110,118,101,110,105,101,110,99,101,44,
               32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,116,
               121,112,101,115,32,97,114,101,32,97,108,115,111,32,98,117,105,
               108,116,45,105,110,46,32,84,104,101,121,32,99,97,110,32,98,101,
               32,116,104,111,117,103,104,116,32,97,115,32,112,114,101,100,
               101,102,105,110,101,100,32,97,108,105,97,115,101,115,32,102,
               111,114,32,116,104,101,32,116,121,112,101,32,117,110,105,111,
               110,115,32,97,108,115,111,32,115,104,111,119,110,32,105,110,32,
               116,104,101,32,116,97,98,108,101,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"\vTODO: TABLE"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "Ã„In addition, the following three built-in types exist and can be thought as defined below, though strictly their \"type definition\" is not valid syntax according to the type language defined above."}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"\vTODO: TABLE"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "Â¯Users are not allowed to define types with the same names as the predefined or built-in ones. This is checked by the compiler and its violation results in a compilation error."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         "sThe following built-in list types also exist, but they are expected to be rarely used. Hence, they have long names:"}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "Â£\n  nonempty_maybe_improper_list() :: nonempty_maybe_improper_list(any(), any())\n  nonempty_improper_list(Type1, Type2)\n  nonempty_maybe_improper_list(Type1, Type2)"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "Iwhere the last two types define the set of Erlang terms one would expect."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "qAlso for convenience, record notation is allowed to be used. Records are shorthands for the corresponding tuples:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "<\n  Record :: #Erlang_Atom{}\n          | #Erlang_Atom{Fields}"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ORecords are extended to possibly contain type information. This is described in"}],
              0,false},
             {text,
              "9[Type Information in Record Declarations](#typeinrecords)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,"*## Type Declarations of User-Defined Types"},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "kAs seen, the basic syntax of a type is an atom followed by closed parentheses. New types are declared using"}],
             0,false},
            {text,[7,42,45,116,121,112,101,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,"\t*-opaque*"},
            {sep,
             [{text,
               [31,97,116,116,114,105,98,117,116,101,115,32,97,115,32,105,110,
                32,116,104,101,32,102,111,108,108,111,119,105,110,103,58]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "D\n  -type my_struct_type() :: Type.\n  -opaque my_opaq_type() :: Type."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [25,84,104,101,32,116,121,112,101,32,110,97,109,101,32,105,115,
                32,116,104,101,32,97,116,111,109]}],
             0,false},
            {text,
             [16,42,109,121,95,115,116,114,117,99,116,95,116,121,112,101,42]},
            {sep,
             [{text,
               [26,44,32,102,111,108,108,111,119,101,100,32,98,121,32,112,97,
                114,101,110,116,104,101,115,101,115,46]}],
             0,false},
            {text,[6,42,84,121,112,101,42]},
            {sep,
             [{text,
               "Kis a type as defined in the previous section. A current restriction is that"}],
             0,false},
            {text,[6,42,84,121,112,101,42]},
            {sep,
             [{text,
               "[can contain only predefined types, or user-defined types which are either of the following:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {text,
         "WModule-local type, that is, with a definition that is present in the code of the module"}],
       0,false},
      {sep,
       [{text,[1,42]},
        {text,
         "\\Remote type, that is, type defined in, and exported by, other modules; more about this soon."}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÃˆFor module-local types, the restriction that their definition exists in the module is enforced by the compiler and results in a compilation error. (A similar restriction currently exists for records.)"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [311,84,121,112,101,32,100,101,99,108,97,114,97,116,105,111,110,
              115,32,99,97,110,32,97,108,115,111,32,98,101,32,112,97,114,97,
              109,101,116,101,114,105,122,101,100,32,98,121,32,105,110,99,108,
              117,100,105,110,103,32,116,121,112,101,32,118,97,114,105,97,98,
              108,101,115,32,98,101,116,119,101,101,110,32,116,104,101,32,112,
              97,114,101,110,116,104,101,115,101,115,46,32,84,104,101,32,115,
              121,110,116,97,120,32,111,102,32,116,121,112,101,32,118,97,114,
              105,97,98,108,101,115,32,105,115,32,116,104,101,32,115,97,109,
              101,32,97,115,32,69,114,108,97,110,103,32,118,97,114,105,97,98,
              108,101,115,44,32,116,104,97,116,32,105,115,44,32,115,116,97,
              114,116,115,32,119,105,116,104,32,97,110,32,117,112,112,101,114,
              45,99,97,115,101,32,108,101,116,116,101,114,46,32,78,97,116,117,
              114,97,108,108,121,44,32,116,104,101,115,101,32,118,97,114,105,
              97,98,108,101,115,32,99,97,110,32,45,32,97,110,100,32,105,115,
              32,116,111,32,45,32,97,112,112,101,97,114,32,111,110,32,116,104,
              101,32,82,72,83,32,111,102,32,116,104,101,32,100,101,102,105,
              110,105,116,105,111,110,46,32,65,32,99,111,110,99,114,101,116,
              101,32,101,120,97,109,112,108,101,32,102,111,108,108,111,119,
              115,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,"+\n  -type orddict(Key, Val) :: [{Key, Val}]."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "\\A module can export some types to declare that other modules are allowed to refer to them as"}],
             0,false},
            {text,
             [16,42,42,114,101,109,111,116,101,32,116,121,112,101,115,42,42]},
            {sep,
             [{text,"*. This declaration has the following form:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,[{text,"%\n  -export_type([T1/A1, ..., Tk/Ak])."}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "OHere the Ti's are atoms (the name of the type) and the Ai's are their arguments"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,"/\n  -export_type([my_struct_type/0, orddict/2])."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"2Assuming that these types are exported from module"}],
             0,false},
            {text,[7,42,39,109,111,100,39,42]},
            {sep,
             [{text,
               "\\, you can refer to them from other modules using remote type expressions like the following:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,"5\n  mod:my_struct_type()\n  mod:orddict(atom(), term())"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "FIt is not allowed to refer to types that are not declared as exported."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [17,84,121,112,101,115,32,100,101,99,108,97,114,101,100,32,97,
                115]}],
             0,false},
            {text,"\b*opaque*"},
            {sep,
             [{text,
               [353,114,101,112,114,101,115,101,110,116,32,115,101,116,115,32,
                111,102,32,116,101,114,109,115,32,119,104,111,115,101,32,115,
                116,114,117,99,116,117,114,101,32,105,115,32,110,111,116,32,
                115,117,112,112,111,115,101,100,32,116,111,32,98,101,32,118,
                105,115,105,98,108,101,32,102,114,111,109,32,111,117,116,115,
                105,100,101,32,111,102,32,116,104,101,105,114,32,100,101,102,
                105,110,105,110,103,32,109,111,100,117,108,101,46,32,84,104,
                97,116,32,105,115,44,32,111,110,108,121,32,116,104,101,32,109,
                111,100,117,108,101,32,100,101,102,105,110,105,110,103,32,116,
                104,101,109,32,105,115,32,97,108,108,111,119,101,100,32,116,
                111,32,100,101,112,101,110,100,32,111,110,32,116,104,101,105,
                114,32,116,101,114,109,32,115,116,114,117,99,116,117,114,101,
                46,32,67,111,110,115,101,113,117,101,110,116,108,121,44,32,
                115,117,99,104,32,116,121,112,101,115,32,100,111,32,110,111,
                116,32,109,97,107,101,32,109,117,99,104,32,115,101,110,115,
                101,32,97,115,32,109,111,100,117,108,101,32,108,111,99,97,108,
                32,45,32,109,111,100,117,108,101,32,108,111,99,97,108,32,116,
                121,112,101,115,32,97,114,101,32,110,111,116,32,97,99,99,101,
                115,115,105,98,108,101,32,98,121,32,111,116,104,101,114,32,
                109,111,100,117,108,101,115,32,97,110,121,119,97,121,32,45,32,
                97,110,100,32,105,115,32,97,108,119,97,121,115,32,116,111,32,
                98,101,32,101,120,112,111,114,116,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}},
  {sep,
   [{text,")<a name=\"typeinrecords\">typeinrecords</a>"},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## Type Information in Record Declarations"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "pThe types of record fields can be specified in the declaration of the record. The syntax for this is as follows:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "<\n  -record(rec, {field1 :: Type1, field2, field3 :: Type3})."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [130,70,111,114,32,102,105,101,108,100,115,32,119,105,116,104,111,
             117,116,32,116,121,112,101,32,97,110,110,111,116,97,116,105,111,
             110,115,44,32,116,104,101,105,114,32,116,121,112,101,32,100,101,
             102,97,117,108,116,115,32,116,111,32,97,110,121,40,41,46,32,84,
             104,97,116,32,105,115,44,32,116,104,101,32,112,114,101,118,105,
             111,117,115,32,101,120,97,109,112,108,101,32,105,115,32,97,32,
             115,104,111,114,116,104,97,110,100,32,102,111,114,32,116,104,101,
             32,102,111,108,108,111,119,105,110,103,58]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "E\n  -record(rec, {field1 :: Type1, field2 :: any(), field3 :: Type3})."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "mIn the presence of initial values for fields, the type must be declared after the initialization, as follows:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "F\n  -record(rec, {field1 = [] :: Type1, field2, field3 = 42 :: Type3})."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "Ã†The initial values for fields are to be compatible with (that is, a member of) the corresponding types. This is checked by the compiler and results in a compilation error if a violation is detected."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
         {sep,
          [{text,[4,32,32,32,32]},
           {sep,
            [{sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "KBefore Erlang/OTP 19, for fields without initial values, the singleton type"}],
                       0,false},
                      {text,"\r*'undefined'*"},
                      {sep,
                       [{text,
                         "mwas added to all declared types. In other words, the following two record declarations had identical effects:"}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,
                       [257,10,32,32,45,114,101,99,111,114,100,40,114,101,99,
                        44,32,123,102,49,32,61,32,52,50,32,58,58,32,105,110,
                        116,101,103,101,114,40,41,44,10,32,32,32,32,32,32,32,
                        32,32,32,32,32,32,32,32,32,102,50,32,32,32,32,32,32,
                        58,58,32,102,108,111,97,116,40,41,44,10,32,32,32,32,
                        32,32,32,32,32,32,32,32,32,32,32,32,102,51,32,32,32,
                        32,32,32,58,58,32,39,97,39,32,124,32,39,98,39,125,41,
                        46,10,10,32,32,45,114,101,99,111,114,100,40,114,101,
                        99,44,32,123,102,49,32,61,32,52,50,32,58,58,32,105,
                        110,116,101,103,101,114,40,41,44,10,32,32,32,32,32,32,
                        32,32,32,32,32,32,32,32,32,32,102,50,32,32,32,32,32,
                        32,58,58,32,39,117,110,100,101,102,105,110,101,100,39,
                        32,124,32,102,108,111,97,116,40,41,44,10,32,32,32,32,
                        32,32,32,32,32,32,32,32,32,32,32,32,102,51,32,32,32,
                        32,32,32,58,58,32,39,117,110,100,101,102,105,110,101,
                        100,39,32,124,32,39,97,39,32,124,32,39,98,39,125,41,
                        46]}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,"*This is no longer the case. If you require"}],
                       0,false},
                      {text,"\r*'undefined'*"},
                      {sep,
                       [{text,
                         "]in your record field type, you must explicitly add it to the typespec, as in the 2nd example."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,true}],
          0,false}},
        {text,[0]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "oAny record, containing type information or not, once defined, can be used as a type using the following syntax:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,{text,[3,96,96,96]},{sep,[{text,"\b  #rec{}"}],0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [135,73,110,32,97,100,100,105,116,105,111,110,44,32,116,104,101,
             32,114,101,99,111,114,100,32,102,105,101,108,100,115,32,99,97,
             110,32,98,101,32,102,117,114,116,104,101,114,32,115,112,101,99,
             105,102,105,101,100,32,119,104,101,110,32,117,115,105,110,103,32,
             97,32,114,101,99,111,114,100,32,116,121,112,101,32,98,121,32,97,
             100,100,105,110,103,32,116,121,112,101,32,105,110,102,111,114,
             109,97,116,105,111,110,32,97,98,111,117,116,32,116,104,101,32,
             102,105,101,108,100,32,97,115,32,102,111,108,108,111,119,115,
             58]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [26,32,32,35,114,101,99,123,115,111,109,101,95,102,105,101,108,
             100,32,58,58,32,84,121,112,101,125]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "WAny unspecified fields are assumed to have the type in the original record declaration."}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [31,35,35,32,83,112,101,99,105,102,105,99,97,116,105,111,110,115,32,
        102,111,114,32,70,117,110,99,116,105,111,110,115]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "?A specification (or contract) for a function is given using the"}],
           0,false},
          {text,[7,42,45,115,112,101,99,42]},
          {sep,
           [{text,",attribute. The general format is as follows:"}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "@\n  -spec Module:Function(ArgType1, ..., ArgTypeN) -> ReturnType."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "^The arity of the function must match the number of arguments, else a compilation error occurs."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "ÃŽThis form can also be used in header files (.hrl) to declare type information for exported functions. Then these header files can be included in files that (implicitly or explicitly) import these functions."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "FWithin a given module, the following shorthand suffices in most cases:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "9\n  -spec Function(ArgType1, ..., ArgTypeN) -> ReturnType."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           ">Also, for documentation purposes, argument names can be given:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "C\n  -spec Function(ArgName1 :: Type1, ..., ArgNameN :: TypeN) -> RT."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "jA function specification can be overloaded. That is, it can have several types, separated by a semicolon ("}],
           0,false},
          {text,[3,42,59,42]},
          {sep,[{text,[2,41,58]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,"5\n  -spec foo(T1, T2) -> T3\n         ; (T4, T5) -> T6."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "Ã”A current restriction, which currently results in a warning (not an error) by the compiler, is that the domains of the argument types cannot overlap. For example, the following specification results in a warning:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "Q\n  -spec foo(pos_integer()) -> pos_integer()\n         ; (integer()) -> integer()."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "Ã‘Type variables can be used in specifications to specify relations for the input and output arguments of a function. For example, the following specification defines the type of a polymorphic identity function:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [20,10,32,32,45,115,112,101,99,32,105,100,40,88,41,32,45,62,32,88,
            46]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "Ã€Notice that the above specification does not restrict the input and output type in any way. These types can be constrained by guard-like subtype constraints and provide bounded quantification:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,[{text,"%  -spec id(X) -> X when X :: tuple()."}],0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,[14,67,117,114,114,101,110,116,108,121,44,32,116,104,101]}],
           0,false},
          {text,[4,42,58,58,42]},
          {sep,
           [{text,
             [19,99,111,110,115,116,114,97,105,110,116,32,40,114,101,97,100,
              32,97,115]}],
           0,false},
          {sep,
           [{text,
             [17,194,171,105,115,32,97,32,115,117,98,116,121,112,101,32,111,
              102]}],
           0,false},
          {sep,
           [{text,
             "8Ã‚Â») is the only guard constraint that can be used in the"}],
           0,false},
          {text,[6,42,119,104,101,110,42]},
          {sep,[{text,"\tpart of a"}],0,false},
          {text,[7,42,45,115,112,101,99,42]},
          {sep,[{text,"\nattribute."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
        {sep,
         [{text,[4,32,32,32,32]},
          {sep,
           [{sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "ÃŠThe above function specification uses multiple occurrences of the same type variable. That provides more type information than the following function specification, where the type variables are missing:"}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      [31,32,32,45,115,112,101,99,32,105,100,40,116,117,112,
                       108,101,40,41,41,32,45,62,32,116,117,112,108,101,40,41,
                       46]}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        "sThe latter specification says that the function takes some tuple and returns some tuple. The specification with the"}],
                      0,false},
                     {text,[3,42,88,42]},
                     {sep,
                      [{text,
                        "Ctype variable specifies that the function takes a tuple and returns"}],
                      0,false},
                     {text,"\f**the same**"},
                     {sep,[{text,[6,116,117,112,108,101,46]}],0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      [132,72,111,119,101,118,101,114,44,32,105,116,32,105,
                       115,32,117,112,32,116,111,32,116,104,101,32,116,111,
                       111,108,115,32,116,104,97,116,32,112,114,111,99,101,
                       115,115,32,116,104,101,32,115,112,101,99,105,102,105,
                       99,97,116,105,111,110,115,32,116,111,32,99,104,111,111,
                       115,101,32,119,104,101,116,104,101,114,32,116,111,32,
                       116,97,107,101,32,116,104,105,115,32,101,120,116,114,
                       97,32,105,110,102,111,114,109,97,116,105,111,110,32,
                       105,110,116,111,32,97,99,99,111,117,110,116,32,111,114,
                       32,110,111,116,46]}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false}],
           0,true}],
         0,false}},
       {text,[0]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,[14,84,104,101,32,115,99,111,112,101,32,111,102,32,97]}],
           0,false},
          {text,[4,42,58,58,42]},
          {sep,
           [{text,
             [17,99,111,110,115,116,114,97,105,110,116,32,105,115,32,116,104,
              101]}],
           0,false},
          {text,
           [18,42,40,46,46,46,41,32,45,62,32,82,101,116,84,121,112,101,42]},
          {sep,
           [{text,
             "Ãƒspecification after which it appears. To avoid confusion, it is suggested that different variables are used in different constituents of an overloaded contract, as shown in the following example:"}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           "\\\n  -spec foo({X, integer()}) -> X when X :: atom()\n         ; ([Y]) -> Y when Y :: number()."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "Â Some functions in Erlang are not meant to return; either because they define servers or because they are used to throw exceptions, as in the following function:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,".  my_error(Err) -> erlang:throw({error, Err})."}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "8For such functions, it is recommended to use the special"}],
           0,false},
          {text,"\r*no_return()*"},
          {sep,
           [{text,
             "Btype for their \"return\", through a contract of the following form:"}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,[{text,"(  -spec my_error(term()) -> no_return()."}],0,true}},
       {text,[3,96,96,96]}},
      null},
     null}}],
  0,false}}
