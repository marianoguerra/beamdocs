{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,{text,"\r# Expressions"},null},
                              null}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,
                                  [{text,
                                    [318,73,110,32,116,104,105,115,32,115,101,
                                     99,116,105,111,110,44,32,97,108,108,32,
                                     118,97,108,105,100,32,69,114,108,97,110,
                                     103,32,101,120,112,114,101,115,115,105,
                                     111,110,115,32,97,114,101,32,108,105,115,
                                     116,101,100,46,32,87,104,101,110,32,119,
                                     114,105,116,105,110,103,32,69,114,108,97,
                                     110,103,32,112,114,111,103,114,97,109,
                                     115,44,32,105,116,32,105,115,32,97,108,
                                     115,111,32,97,108,108,111,119,101,100,32,
                                     116,111,32,117,115,101,32,109,97,99,114,
                                     111,45,32,97,110,100,32,114,101,99,111,
                                     114,100,32,101,120,112,114,101,115,115,
                                     105,111,110,115,46,32,72,111,119,101,118,
                                     101,114,44,32,116,104,101,115,101,32,101,
                                     120,112,114,101,115,115,105,111,110,115,
                                     32,97,114,101,32,101,120,112,97,110,100,
                                     101,100,32,100,117,114,105,110,103,32,99,
                                     111,109,112,105,108,97,116,105,111,110,
                                     32,97,110,100,32,97,114,101,32,105,110,
                                     32,116,104,97,116,32,115,101,110,115,101,
                                     32,110,111,116,32,116,114,117,101,32,69,
                                     114,108,97,110,103,32,101,120,112,114,
                                     101,115,115,105,111,110,115,46,32,77,97,
                                     99,114,111,45,32,97,110,100,32,114,101,
                                     99,111,114,100,32,101,120,112,114,101,
                                     115,115,105,111,110,115,32,97,114,101,32,
                                     99,111,118,101,114,101,100,32,105,110,32,
                                     115,101,112,97,114,97,116,101,32,115,101,
                                     99,116,105,111,110,115,58]}],
                                  0,false}],
                                0,true},
                               null},
                              null}}},
                           {above,
                            {sep,
                             [{text,[1,42]},
                              {sep,
                               [{text,
                                 [22,91,80,114,101,112,114,111,99,101,115,115,
                                  111,114,93,40,109,97,99,114,111,115,41]}],
                               0,false}],
                             0,false},
                            {sep,
                             [{text,[1,42]},
                              {sep,
                               [{text,
                                 [18,91,82,101,99,111,114,100,115,93,40,114,
                                  101,99,111,114,100,115,41]}],
                               0,false}],
                             0,false}}},
                          {sep,
                           [{above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {text,
                                [24,35,35,32,69,120,112,114,101,115,115,105,
                                 111,110,32,69,118,97,108,117,97,116,105,111,
                                 110]},
                               null},
                              null}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,
                                  [{text,
                                    [148,65,108,108,32,115,117,98,101,120,112,
                                     114,101,115,115,105,111,110,115,32,97,
                                     114,101,32,101,118,97,108,117,97,116,101,
                                     100,32,98,101,102,111,114,101,32,97,110,
                                     32,101,120,112,114,101,115,115,105,111,
                                     110,32,105,116,115,101,108,102,32,105,
                                     115,32,101,118,97,108,117,97,116,101,100,
                                     44,32,117,110,108,101,115,115,32,101,120,
                                     112,108,105,99,105,116,108,121,32,115,
                                     116,97,116,101,100,32,111,116,104,101,
                                     114,119,105,115,101,46,32,70,111,114,32,
                                     101,120,97,109,112,108,101,44,32,99,111,
                                     110,115,105,100,101,114,32,116,104,101,
                                     32,101,120,112,114,101,115,115,105,111,
                                     110,58]}],
                                  0,false}],
                                0,true},
                               null},
                              null}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {above,
                                {above,
                                 {text,[3,96,96,96]},
                                 {sep,
                                  [{text,
                                    [14,10,69,120,112,114,49,32,43,32,69,120,
                                     112,114,50]}],
                                  0,true}},
                                {text,[3,96,96,96]}},
                               null},
                              null}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,
                                  [{text,[7,42,69,120,112,114,49,42]},
                                   {sep,[{text,[3,97,110,100]}],0,false},
                                   {text,[7,42,69,120,112,114,50,42]},
                                   {sep,
                                    [{text,
                                      "d, which are also expressions, are evaluated first - in any order - before the addition is performed."}],
                                    0,false}],
                                  0,false}],
                                0,true},
                               null},
                              null}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,
                                  [{sep,
                                    [{text,
                                      "Â²Many of the operators can only be applied to arguments of a certain type. For example, arithmetic operators can only be applied to numbers. An argument of the wrong type causes a"}],
                                    0,false},
                                   {text,"\b*badarg*"},
                                   {sep,
                                    [{text,
                                      [14,114,117,110,116,105,109,101,32,101,
                                       114,114,111,114,46]}],
                                    0,false}],
                                  0,false}],
                                0,true},
                               null},
                              null}}],
                           0,false}},
                         {sep,
                          [{text,
                            [23,60,97,32,110,97,109,101,61,34,116,101,114,109,
                             34,62,116,101,114,109,60,47,97,62]},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,{above,{text,"\b## Terms"},null},null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,
                                 [{text,
                                   [141,84,104,101,32,115,105,109,112,108,101,
                                    115,116,32,102,111,114,109,32,111,102,32,
                                    101,120,112,114,101,115,115,105,111,110,
                                    32,105,115,32,97,32,116,101,114,109,44,32,
                                    116,104,97,116,32,105,115,32,97,110,32,
                                    105,110,116,101,103,101,114,44,32,102,108,
                                    111,97,116,44,32,97,116,111,109,44,32,115,
                                    116,114,105,110,103,44,32,108,105,115,116,
                                    44,32,109,97,112,44,32,111,114,32,116,117,
                                    112,108,101,46,32,84,104,101,32,114,101,
                                    116,117,114,110,32,118,97,108,117,101,32,
                                    105,115,32,116,104,101,32,116,101,114,109,
                                    32,105,116,115,101,108,102,46]}],
                                 0,false}],
                               0,true},
                              null},
                             null}}],
                          0,false}},
                        {sep,
                         [{above,
                           {above,{above,{text,[0]},null},null},
                           {above,{above,{text,"\f## Variables"},null},null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  [143,65,32,118,97,114,105,97,98,108,101,32,
                                   105,115,32,97,110,32,101,120,112,114,101,
                                   115,115,105,111,110,46,32,73,102,32,97,32,
                                   118,97,114,105,97,98,108,101,32,105,115,32,
                                   98,111,117,110,100,32,116,111,32,97,32,118,
                                   97,108,117,101,44,32,116,104,101,32,114,
                                   101,116,117,114,110,32,118,97,108,117,101,
                                   32,105,115,32,116,104,105,115,32,118,97,
                                   108,117,101,46,32,85,110,98,111,117,110,
                                   100,32,118,97,114,105,97,98,108,101,115,32,
                                   97,114,101,32,111,110,108,121,32,97,108,
                                   108,111,119,101,100,32,105,110,32,112,97,
                                   116,116,101,114,110,115,46]}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    "yVariables start with an uppercase letter or underscore (_). Variables can contain alphanumeric characters, underscore and"}],
                                  0,false},
                                 {text,[3,42,64,42]},
                                 {sep,[{text,[1,46]}],0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,[{text,"\r**Examples:**"}],0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {above,
                              {above,
                               {text,[3,96,96,96]},
                               {sep,
                                [{text,
                                  "+\nX\nName1\nPhoneNumber\nPhone_number\n_\n_Height"}],
                                0,true}},
                              {text,[3,96,96,96]}},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    "#Variables are bound to values using"}],
                                  0,false},
                                 {text,
                                  [28,91,112,97,116,116,101,114,110,32,109,97,
                                   116,99,104,105,110,103,93,40,112,97,116,
                                   116,101,114,110,115,41]},
                                 {sep,[{text,"\r. Erlang uses"}],0,false},
                                 {text,
                                  [21,42,42,115,105,110,103,108,101,32,97,115,
                                   115,105,103,110,109,101,110,116,42,42]},
                                 {sep,
                                  [{text,
                                    "-, that is, a variable can only be bound once."}],
                                  0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,[{text,[3,84,104,101]}],0,false},
                                 {text,
                                  [22,42,42,97,110,111,110,121,109,111,117,
                                   115,32,118,97,114,105,97,98,108,101,42,42]},
                                 {sep,
                                  [{text,
                                    "fis denoted by underscore (_) and can be used when a variable is required but its value can be ignored."}],
                                  0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,[{text,"\f**Example:**"}],0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {above,
                              {above,
                               {text,[3,96,96,96]},
                               {sep,
                                [{text,
                                  [16,10,91,72,124,95,93,32,61,32,91,49,44,50,
                                   44,51,93]}],
                                0,true}},
                              {text,[3,96,96,96]}},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    "4Variables starting with underscore (_), for example,"}],
                                  0,false},
                                 {text,"\t*_Height*"},
                                 {sep,
                                  [{text,
                                    [153,44,32,97,114,101,32,110,111,114,109,
                                     97,108,32,118,97,114,105,97,98,108,101,
                                     115,44,32,110,111,116,32,97,110,111,110,
                                     121,109,111,117,115,46,32,84,104,101,121,
                                     32,97,114,101,32,104,111,119,101,118,101,
                                     114,32,105,103,110,111,114,101,100,32,98,
                                     121,32,116,104,101,32,99,111,109,112,105,
                                     108,101,114,32,105,110,32,116,104,101,32,
                                     115,101,110,115,101,32,116,104,97,116,32,
                                     116,104,101,121,32,100,111,32,110,111,
                                     116,32,103,101,110,101,114,97,116,101,32,
                                     97,110,121,32,119,97,114,110,105,110,103,
                                     115,32,102,111,114,32,117,110,117,115,
                                     101,100,32,118,97,114,105,97,98,108,101,
                                     115,46]}],
                                  0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,[{text,"\f**Example:**"}],0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  [19,84,104,101,32,102,111,108,108,111,119,
                                   105,110,103,32,99,111,100,101,58]}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {above,
                              {above,
                               {text,[3,96,96,96]},
                               {sep,
                                [{text,
                                  [25,10,109,101,109,98,101,114,40,95,44,32,
                                   91,93,41,32,45,62,10,32,32,32,32,91,93,
                                   46]}],
                                0,true}},
                              {text,[3,96,96,96]}},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  "%can be rewritten to be more readable:"}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {above,
                              {above,
                               {text,[3,96,96,96]},
                               {sep,
                                [{text,
                                  [28,10,109,101,109,98,101,114,40,69,108,101,
                                   109,44,32,91,93,41,32,45,62,10,32,32,32,32,
                                   91,93,46]}],
                                0,true}},
                              {text,[3,96,96,96]}},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    "-This causes a warning for an unused variable,"}],
                                  0,false},
                                 {text,[6,42,69,108,101,109,42]},
                                 {sep,
                                  [{text,
                                    "', if the code is compiled with the flag"}],
                                  0,false},
                                 {text,
                                  [18,42,119,97,114,110,95,117,110,117,115,
                                   101,100,95,118,97,114,115,42]},
                                 {sep,
                                  [{text,
                                    "+set. Instead, the code can be rewritten to:"}],
                                  0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {above,
                              {above,
                               {text,[3,96,96,96]},
                               {sep,
                                [{text,
                                  [29,10,109,101,109,98,101,114,40,95,69,108,
                                   101,109,44,32,91,93,41,32,45,62,10,32,32,
                                   32,32,91,93,46]}],
                                0,true}},
                              {text,[3,96,96,96]}},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  "XNotice that since variables starting with an underscore are not anonymous, this matches:"}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {above,
                              {above,
                               {text,[3,96,96,96]},
                               {sep,
                                [{text,
                                  [14,10,123,95,44,95,125,32,61,32,123,49,44,
                                   50,125]}],
                                0,true}},
                              {text,[3,96,96,96]}},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  [15,66,117,116,32,116,104,105,115,32,102,97,
                                   105,108,115,58]}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {above,
                              {above,
                               {text,[3,96,96,96]},
                               {sep,
                                [{text,
                                  [16,10,123,95,78,44,95,78,125,32,61,32,123,
                                   49,44,50,125]}],
                                0,true}},
                              {text,[3,96,96,96]}},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    "RThe scope for a variable is its function clause. Variables bound in a branch of an"}],
                                  0,false},
                                 {text,[4,42,105,102,42]},
                                 {sep,[{text,[1,44]}],0,false},
                                 {text,[6,42,99,97,115,101,42]},
                                 {sep,[{text,[4,44,32,111,114]}],0,false},
                                 {text,"\t*receive*"},
                                 {sep,
                                  [{text,
                                    [144,101,120,112,114,101,115,115,105,111,
                                     110,32,109,117,115,116,32,98,101,32,98,
                                     111,117,110,100,32,105,110,32,97,108,108,
                                     32,98,114,97,110,99,104,101,115,32,116,
                                     111,32,104,97,118,101,32,97,32,118,97,
                                     108,117,101,32,111,117,116,115,105,100,
                                     101,32,116,104,101,32,101,120,112,114,
                                     101,115,115,105,111,110,46,32,79,116,104,
                                     101,114,119,105,115,101,32,116,104,101,
                                     121,32,97,114,101,32,114,101,103,97,114,
                                     100,101,100,32,97,115,32,39,117,110,115,
                                     97,102,101,39,32,111,117,116,115,105,100,
                                     101,32,116,104,101,32,101,120,112,114,
                                     101,115,115,105,111,110,46]}],
                                  0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,[7,70,111,114,32,116,104,101]}],
                                  0,false},
                                 {text,[5,42,116,114,121,42]},
                                 {sep,
                                  [{text,
                                    "|expression variable scoping is limited so that variables bound in the expression are always 'unsafe' outside the expression."}],
                                  0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}}],
                         0,false}},
                       {sep,
                        [{text,
                          [29,60,97,32,110,97,109,101,61,34,112,97,116,116,
                           101,114,110,34,62,112,97,116,116,101,114,110,60,47,
                           97,62]},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,{above,{text,"\v## Patterns"},null},null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{text,
                                 "MA pattern has the same structure as a term but can contain unbound variables."}],
                               0,false}],
                             0,true},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,[{text,"\f**Example:**"}],0,false}],
                             0,true},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {above,
                             {above,
                              {text,[3,96,96,96]},
                              {sep,
                               [{text,"\e\nName1\n[H|T]\n{error,Reason}"}],
                               0,true}},
                             {text,[3,96,96,96]}},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{sep,
                                 [{text,
                                   "%Patterns are allowed in clause heads,"}],
                                 0,false},
                                {text,[6,42,99,97,115,101,42]},
                                {sep,[{text,[3,97,110,100]}],0,false},
                                {text,"\t*receive*"},
                                {sep,
                                 [{text,
                                   "#expressions, and match expressions."}],
                                 0,false}],
                               0,false}],
                             0,true},
                            null},
                           null}},
                         {sep,
                          [{above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {text,
                               [31,35,35,32,77,97,116,99,104,32,79,112,101,
                                114,97,116,111,114,32,61,32,105,110,32,80,97,
                                116,116,101,114,110,115]},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,
                                 [{sep,[{text,[2,73,102]}],0,false},
                                  {text,"\n*Pattern1*"},
                                  {sep,[{text,[3,97,110,100]}],0,false},
                                  {text,"\n*Pattern2*"},
                                  {sep,
                                   [{text,
                                     ":are valid patterns, the following is also a valid pattern:"}],
                                   0,false}],
                                 0,false}],
                               0,true},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {above,
                               {above,
                                {text,[3,96,96,96]},
                                {sep,
                                 [{text,
                                   [20,10,80,97,116,116,101,114,110,49,32,61,
                                    32,80,97,116,116,101,114,110,50]}],
                                 0,true}},
                               {text,[3,96,96,96]}},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,
                                 [{sep,
                                   [{text,
                                     "!When matched against a term, both"}],
                                   0,false},
                                  {text,"\n*Pattern1*"},
                                  {sep,[{text,[3,97,110,100]}],0,false},
                                  {text,"\n*Pattern2*"},
                                  {sep,
                                   [{text,
                                     "_are matched against the term. The idea behind this feature is to avoid reconstruction of terms."}],
                                   0,false}],
                                 0,false}],
                               0,true},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,[{text,"\f**Example:**"}],0,false}],
                               0,true},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {above,
                               {above,
                                {text,[3,96,96,96]},
                                {sep,
                                 [{text,
                                   [128,10,102,40,123,99,111,110,110,101,99,
                                    116,44,70,114,111,109,44,84,111,44,78,117,
                                    109,98,101,114,44,79,112,116,105,111,110,
                                    115,125,44,32,84,111,41,32,45,62,10,32,32,
                                    32,32,83,105,103,110,97,108,32,61,32,123,
                                    99,111,110,110,101,99,116,44,70,114,111,
                                    109,44,84,111,44,78,117,109,98,101,114,44,
                                    79,112,116,105,111,110,115,125,44,10,32,
                                    32,32,32,46,46,46,59,10,102,40,83,105,103,
                                    110,97,108,44,32,84,111,41,32,45,62,10,32,
                                    32,32,32,105,103,110,111,114,101,46]}],
                                 0,true}},
                               {text,[3,96,96,96]}},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,
                                 [{text,
                                   [25,99,97,110,32,105,110,115,116,101,97,
                                    100,32,98,101,32,119,114,105,116,116,101,
                                    110,32,97,115]}],
                                 0,false}],
                               0,true},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {above,
                               {above,
                                {text,[3,96,96,96]},
                                {sep,
                                 [{text,
                                   "L\nf({connect,_,To,_,_} = Signal, To) ->\n    ...;\nf(Signal, To) ->\n    ignore."}],
                                 0,true}},
                               {text,[3,96,96,96]}},
                              null},
                             null}}],
                          0,false},
                         {sep,
                          [{above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {text,
                               [28,35,35,32,83,116,114,105,110,103,32,80,114,
                                101,102,105,120,32,105,110,32,80,97,116,116,
                                101,114,110,115]},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,
                                 [{text,
                                   "8When matching strings, the following is a valid pattern:"}],
                                 0,false}],
                               0,true},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {above,
                               {above,
                                {text,[3,96,96,96]},
                                {sep,
                                 [{text,
                                   [26,10,102,40,34,112,114,101,102,105,120,
                                    34,32,43,43,32,83,116,114,41,32,45,62,32,
                                    46,46,46]}],
                                 0,true}},
                               {text,[3,96,96,96]}},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,
                                 [{text,
                                   "?This is syntactic sugar for the equivalent, but harder to read:"}],
                                 0,false}],
                               0,true},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {above,
                               {above,
                                {text,[3,96,96,96]},
                                {sep,
                                 [{text,
                                   "$\nf([$p,$r,$e,$f,$i,$x | Str]) -> ..."}],
                                 0,true}},
                               {text,[3,96,96,96]}},
                              null},
                             null}}],
                          0,false},
                         {sep,
                          [{above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {text,
                               [26,35,35,32,69,120,112,114,101,115,115,105,
                                111,110,115,32,105,110,32,80,97,116,116,101,
                                114,110,115]},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,
                                 [{text,
                                   "gAn arithmetic expression can be used within a pattern if it meets both of the following two conditions:"}],
                                 0,false}],
                               0,true},
                              null},
                             null}},
                           {above,
                            {sep,
                             [{text,[1,42]},
                              {text,
                               "*It uses only numeric or bitwise operators."}],
                             0,false},
                            {sep,
                             [{text,[1,42]},
                              {text,
                               "7Its value can be evaluated to a constant when complied."}],
                             0,false}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{sep,[{text,"\f**Example:**"}],0,false}],
                               0,true},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {above,
                               {above,
                                {text,[3,96,96,96]},
                                {sep,
                                 [{text,
                                   "6\ncase {Value, Result} of\n    {?THRESHOLD+1, ok} -> ..."}],
                                 0,true}},
                               {text,[3,96,96,96]}},
                              null},
                             null}}],
                          0,false}],
                        0,false}},
                      {sep,
                       [{above,
                         {above,{above,{text,[0]},null},null},
                         {above,{above,{text,"\b## Match"},null},null}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{sep,
                                [{text,
                                  [21,84,104,101,32,102,111,108,108,111,119,
                                   105,110,103,32,109,97,116,99,104,101,115]}],
                                0,false},
                               {text,[7,42,69,120,112,114,49,42]},
                               {sep,
                                [{text,
                                  [20,44,32,97,32,112,97,116,116,101,114,110,
                                   44,32,97,103,97,105,110,115,116]}],
                                0,false},
                               {text,[7,42,69,120,112,114,50,42]},
                               {sep,[{text,[1,58]}],0,false}],
                              0,false}],
                            0,true},
                           null},
                          null}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {above,
                            {above,
                             {text,[3,96,96,96]},
                             {sep,
                              [{text,
                                [14,10,69,120,112,114,49,32,61,32,69,120,112,
                                 114,50]}],
                              0,true}},
                            {text,[3,96,96,96]}},
                           null},
                          null}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{sep,
                                [{text,
                                  "\\If the matching succeeds, any unbound variable in the pattern becomes bound and the value of"}],
                                0,false},
                               {text,[7,42,69,120,112,114,50,42]},
                               {sep,[{text,"\fis returned."}],0,false}],
                              0,false}],
                            0,true},
                           null},
                          null}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{sep,
                                [{text,
                                  [24,73,102,32,116,104,101,32,109,97,116,99,
                                   104,105,110,103,32,102,97,105,108,115,44,
                                   32,97]}],
                                0,false},
                               {text,"\n*badmatch*"},
                               {sep,
                                [{text,
                                  [22,114,117,110,45,116,105,109,101,32,101,
                                   114,114,111,114,32,111,99,99,117,114,115,
                                   46]}],
                                0,false}],
                              0,false}],
                            0,true},
                           null},
                          null}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,[{text,"\r**Examples:**"}],0,false}],
                            0,true},
                           null},
                          null}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {above,
                            {above,
                             {text,[3,96,96,96]},
                             {sep,
                              [{text,[4,10,49,62,32]},
                               {text,
                                [22,123,65,44,32,66,125,32,61,32,123,97,110,
                                 115,119,101,114,44,32,52,50,125,46]},
                               {text,
                                [16,10,123,97,110,115,119,101,114,44,52,50,
                                 125,10,50,62,32]},
                               {text,[2,65,46]},
                               {text,"\v\nanswer\n3> "},
                               {text,
                                [16,123,67,44,32,68,125,32,61,32,91,49,44,32,
                                 50,93,46]},
                               {text,
                                "<\n** exception error: no match of right-hand side value [1,2]"}],
                              0,true}},
                            {text,[3,96,96,96]}},
                           null},
                          null}}],
                       0,false}},
                     {sep,
                      [{text,
                        [25,60,97,32,110,97,109,101,61,34,99,97,108,108,115,
                         34,62,99,97,108,108,115,60,47,97,62]},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {text,
                           [17,35,35,32,70,117,110,99,116,105,111,110,32,67,
                            97,108,108,115]},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {above,
                           {above,
                            {text,[3,96,96,96]},
                            {sep,
                             [{text,
                               "4\nExprF(Expr1,...,ExprN)\nExprM:ExprF(Expr1,...,ExprN)"}],
                             0,true}},
                           {text,[3,96,96,96]}},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "$In the first form of function calls,"}],
                               0,false},
                              {text,
                               [30,42,69,120,112,114,77,58,69,120,112,114,70,
                                40,69,120,112,114,49,44,46,46,46,44,69,120,
                                112,114,78,41,42]},
                              {sep,[{text,"\t, each of"}],0,false},
                              {text,[7,42,69,120,112,114,77,42]},
                              {sep,[{text,[3,97,110,100]}],0,false},
                              {text,[7,42,69,120,112,114,70,42]},
                              {sep,
                               [{text,
                                 "jmust be an atom or an expression that evaluates to an atom. The function is said to be called by using the"}],
                               0,false},
                              {text,"!**fully qualified function name**"},
                              {sep,
                               [{text," . This is often referred to as a"}],
                               0,false},
                              {text,"\n**remote**"},
                              {sep,[{text,[2,111,114]}],0,false},
                              {text,
                               [26,42,42,101,120,116,101,114,110,97,108,32,
                                102,117,110,99,116,105,111,110,32,99,97,108,
                                108,42,42]},
                              {sep,[{text,[1,46]}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,[{text,"\f**Example:**"}],0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {above,
                           {above,
                            {text,[3,96,96,96]},
                            {sep,
                             [{text,
                               [31,10,108,105,115,116,115,58,107,101,121,115,
                                101,97,114,99,104,40,78,97,109,101,44,32,49,
                                44,32,76,105,115,116,41]}],
                             0,true}},
                           {text,[3,96,96,96]}},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "%In the second form of function calls,"}],
                               0,false},
                              {text,
                               [24,42,69,120,112,114,70,40,69,120,112,114,49,
                                44,46,46,46,44,69,120,112,114,78,41,42]},
                              {sep,[{text,[1,44]}],0,false},
                              {text,[7,42,69,120,112,114,70,42]},
                              {sep,
                               [{text,
                                 "%must be an atom or evaluate to a fun."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,[{text,[2,73,102]}],0,false},
                              {text,[7,42,69,120,112,114,70,42]},
                              {sep,
                               [{text,
                                 ":is an atom, the function is said to be called by using the"}],
                               0,false},
                              {text,"&**implicitly qualified function name**"},
                              {sep,
                               [{text,
                                 [17,46,32,73,102,32,116,104,101,32,102,117,
                                  110,99,116,105,111,110]}],
                               0,false},
                              {text,[7,42,69,120,112,114,70,42]},
                              {sep,
                               [{text,
                                 "3is locally defined, it is called. Alternatively, if"}],
                               0,false},
                              {text,[7,42,69,120,112,114,70,42]},
                              {sep,
                               [{text,
                                 [31,105,115,32,101,120,112,108,105,99,105,
                                  116,108,121,32,105,109,112,111,114,116,101,
                                  100,32,102,114,111,109,32,116,104,101]}],
                               0,false},
                              {text,[3,42,77,42]},
                              {sep,
                               [{text,[7,109,111,100,117,108,101,44]}],
                               0,false},
                              {text,
                               [26,42,77,58,69,120,112,114,70,40,69,120,112,
                                114,49,44,46,46,46,44,69,120,112,114,78,41,
                                42]},
                              {sep,[{text,"\ris called. If"}],0,false},
                              {text,[7,42,69,120,112,114,70,42]},
                              {sep,
                               [{text,
                                 "4is neither declared locally nor explicitly imported,"}],
                               0,false},
                              {text,[7,42,69,120,112,114,70,42]},
                              {sep,
                               [{text,
                                 "2must be the name of an automatically imported BIF."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,[{text,"\r**Examples:**"}],0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {above,
                           {above,
                            {text,[3,96,96,96]},
                            {sep,
                             [{text,
                               "&\nhandle(Msg, State)\nspawn(m, init, [])"}],
                             0,true}},
                           {text,[3,96,96,96]}},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,"\f**Examples**"},
                              {sep,[{text,[5,119,104,101,114,101]}],0,false},
                              {text,[7,42,69,120,112,114,70,42]},
                              {sep,[{text,"\tis a fun:"}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {above,
                           {above,
                            {text,[3,96,96,96]},
                            {sep,
                             [{text,[4,10,49,62,32]},
                              {text,
                               [25,70,117,110,49,32,61,32,102,117,110,40,88,
                                41,32,45,62,32,88,43,49,32,101,110,100,44]},
                              {text,[1,10]},
                              {text,"\bFun1(3)."},
                              {text,[6,10,52,10,50,62,32]},
                              {text,"!fun lists:append/2([1,2], [3,4])."},
                              {text,
                               [14,10,91,49,44,50,44,51,44,52,93,10,51,62,
                                32]}],
                             0,true}},
                           {text,[3,96,96,96]}},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "ÃNotice that when calling a local function, there is a difference between using the implicitly or fully qualified function name. The latter always refers to the latest version of the module. See"}],
                               0,false},
                              {text,
                               ",[Compilation and Code Loading](code_loading)"},
                              {sep,[{text,[3,97,110,100]}],0,false},
                              {text,
                               "'[Function Evaluation](./functions#eval)"},
                              {sep,[{text,[1,46]}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {sep,
                        [{above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {text,
                             "9## Local Function Names Clashing With  Auto-Imported BIFs"},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{sep,
                                 [{text,
                                   "Ã³If a local function has the same name as an auto-imported BIF, the semantics is that implicitly qualified function calls are directed to the locally defined function, not to the BIF. To avoid confusion, there is a compiler directive available,"}],
                                 0,false},
                                {text,"\"*-compile({no_auto_import,[F/A]})*"},
                                {sep,
                                 [{text,
                                   "i, that makes a BIF not being auto-imported. In certain situations, such a compile-directive is mandatory."}],
                                 0,false}],
                               0,false}],
                             0,true},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {above,
                             {above,
                              {text,
                               [21,33,33,33,32,119,97,114,110,105,110,103,32,
                                34,87,97,114,110,105,110,103,34]},
                              {sep,
                               [{text,[4,32,32,32,32]},
                                {sep,
                                 [{sep,
                                   [{above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{sep,
                                          [{text,
                                            [367,66,101,102,111,114,101,32,79,
                                             84,80,32,82,49,52,65,32,40,69,82,
                                             84,83,32,118,101,114,115,105,111,
                                             110,32,53,46,56,41,44,32,97,110,
                                             32,105,109,112,108,105,99,105,
                                             116,108,121,32,113,117,97,108,
                                             105,102,105,101,100,32,102,117,
                                             110,99,116,105,111,110,32,99,97,
                                             108,108,32,116,111,32,97,32,102,
                                             117,110,99,116,105,111,110,32,
                                             104,97,118,105,110,103,32,116,
                                             104,101,32,115,97,109,101,32,110,
                                             97,109,101,32,97,115,32,97,110,
                                             32,97,117,116,111,45,105,109,112,
                                             111,114,116,101,100,32,66,73,70,
                                             32,97,108,119,97,121,115,32,114,
                                             101,115,117,108,116,101,100,32,
                                             105,110,32,116,104,101,32,66,73,
                                             70,32,98,101,105,110,103,32,99,
                                             97,108,108,101,100,46,32,73,110,
                                             32,110,101,119,101,114,32,118,
                                             101,114,115,105,111,110,115,32,
                                             111,102,32,116,104,101,32,99,111,
                                             109,112,105,108,101,114,44,32,
                                             116,104,101,32,108,111,99,97,108,
                                             32,102,117,110,99,116,105,111,
                                             110,32,105,115,32,99,97,108,108,
                                             101,100,32,105,110,115,116,101,
                                             97,100,46,32,84,104,105,115,32,
                                             105,115,32,116,111,32,97,118,111,
                                             105,100,32,116,104,97,116,32,102,
                                             117,116,117,114,101,32,97,100,
                                             100,105,116,105,111,110,115,32,
                                             116,111,32,116,104,101,32,115,
                                             101,116,32,111,102,32,97,117,116,
                                             111,45,105,109,112,111,114,116,
                                             101,100,32,66,73,70,115,32,100,
                                             111,32,110,111,116,32,115,105,
                                             108,101,110,116,108,121,32,99,
                                             104,97,110,103,101,32,116,104,
                                             101,32,98,101,104,97,118,105,111,
                                             114,32,111,102,32,111,108,100,32,
                                             99,111,100,101,46]}],
                                          0,false}],
                                        0,true},
                                       null},
                                      null}},
                                    {above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{sep,
                                          [{text,
                                            [523,72,111,119,101,118,101,114,
                                             44,32,116,111,32,97,118,111,105,
                                             100,32,116,104,97,116,32,111,108,
                                             100,32,40,112,114,101,32,82,49,
                                             52,41,32,99,111,100,101,32,99,
                                             104,97,110,103,101,100,32,105,
                                             116,115,32,98,101,104,97,118,105,
                                             111,114,32,119,104,101,110,32,99,
                                             111,109,112,105,108,101,100,32,
                                             119,105,116,104,32,79,84,80,32,
                                             118,101,114,115,105,111,110,32,
                                             82,49,52,65,32,111,114,32,108,97,
                                             116,101,114,44,32,116,104,101,32,
                                             102,111,108,108,111,119,105,110,
                                             103,32,114,101,115,116,114,105,
                                             99,116,105,111,110,32,97,112,112,
                                             108,105,101,115,58,32,73,102,32,
                                             121,111,117,32,111,118,101,114,
                                             114,105,100,101,32,116,104,101,
                                             32,110,97,109,101,32,111,102,32,
                                             97,32,66,73,70,32,116,104,97,116,
                                             32,119,97,115,32,97,117,116,111,
                                             45,105,109,112,111,114,116,101,
                                             100,32,105,110,32,79,84,80,32,
                                             118,101,114,115,105,111,110,115,
                                             32,112,114,105,111,114,32,116,
                                             111,32,82,49,52,65,32,40,69,82,
                                             84,83,32,118,101,114,115,105,111,
                                             110,32,53,46,56,41,32,97,110,100,
                                             32,104,97,118,101,32,97,110,32,
                                             105,109,112,108,105,99,105,116,
                                             108,121,32,113,117,97,108,105,
                                             102,105,101,100,32,99,97,108,108,
                                             32,116,111,32,116,104,97,116,32,
                                             102,117,110,99,116,105,111,110,
                                             32,105,110,32,121,111,117,114,32,
                                             99,111,100,101,44,32,121,111,117,
                                             32,101,105,116,104,101,114,32,
                                             110,101,101,100,32,116,111,32,
                                             101,120,112,108,105,99,105,116,
                                             108,121,32,114,101,109,111,118,
                                             101,32,116,104,101,32,97,117,116,
                                             111,45,105,109,112,111,114,116,
                                             32,117,115,105,110,103,32,97,32,
                                             99,111,109,112,105,108,101,114,
                                             32,100,105,114,101,99,116,105,
                                             118,101,44,32,111,114,32,114,101,
                                             112,108,97,99,101,32,116,104,101,
                                             32,99,97,108,108,32,119,105,116,
                                             104,32,97,32,102,117,108,108,121,
                                             32,113,117,97,108,105,102,105,
                                             101,100,32,102,117,110,99,116,
                                             105,111,110,32,99,97,108,108,46,
                                             32,79,116,104,101,114,119,105,
                                             115,101,32,121,111,117,32,103,
                                             101,116,32,97,32,99,111,109,112,
                                             105,108,97,116,105,111,110,32,
                                             101,114,114,111,114,46,32,83,101,
                                             101,32,116,104,101,32,102,111,
                                             108,108,111,119,105,110,103,32,
                                             101,120,97,109,112,108,101,58]}],
                                          0,false}],
                                        0,true},
                                       null},
                                      null}}],
                                   0,false}],
                                 0,true}],
                               0,false}},
                             {text,[0]}},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {above,
                             {above,
                              {text,[3,96,96,96]},
                              {sep,
                               [{text,
                                 [336,10,45,101,120,112,111,114,116,40,91,108,
                                  101,110,103,116,104,47,49,44,102,47,49,93,
                                  41,46,10,10,45,99,111,109,112,105,108,101,
                                  40,123,110,111,95,97,117,116,111,95,105,109,
                                  112,111,114,116,44,91,108,101,110,103,116,
                                  104,47,49,93,125,41,46,32,37,32,101,114,108,
                                  97,110,103,58,108,101,110,103,116,104,47,49,
                                  32,110,111,32,108,111,110,103,101,114,32,97,
                                  117,116,111,105,109,112,111,114,116,101,100,
                                  10,10,108,101,110,103,116,104,40,91,93,41,
                                  32,45,62,10,32,32,32,32,48,59,10,108,101,
                                  110,103,116,104,40,91,72,124,84,93,41,32,45,
                                  62,10,32,32,32,32,49,32,43,32,108,101,110,
                                  103,116,104,40,84,41,46,32,37,37,32,67,97,
                                  108,108,115,32,116,104,101,32,108,111,99,97,
                                  108,32,102,117,110,99,116,105,111,110,32,
                                  108,101,110,103,116,104,47,49,10,10,102,40,
                                  88,41,32,119,104,101,110,32,101,114,108,97,
                                  110,103,58,108,101,110,103,116,104,40,88,41,
                                  32,62,32,51,32,45,62,32,37,37,32,67,97,108,
                                  108,115,32,101,114,108,97,110,103,58,108,
                                  101,110,103,116,104,47,49,44,10,32,32,32,32,
                                  32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                                  32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                                  32,32,37,37,32,119,104,105,99,104,32,105,
                                  115,32,97,108,108,111,119,101,100,32,105,
                                  110,32,103,117,97,114,100,115,10,32,32,32,
                                  32,108,111,110,103,46]}],
                               0,true}},
                             {text,[3,96,96,96]}},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{text,
                                 "Ã«The same logic applies to explicitly imported functions from other modules, as to locally defined functions. It is not allowed to both import a function from another module and have the function declared in the module at the same time:"}],
                               0,false}],
                             0,true},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {above,
                             {above,
                              {text,[3,96,96,96]},
                              {sep,
                               [{text,
                                 [398,10,45,101,120,112,111,114,116,40,91,102,
                                  47,49,93,41,46,10,10,45,99,111,109,112,105,
                                  108,101,40,123,110,111,95,97,117,116,111,95,
                                  105,109,112,111,114,116,44,91,108,101,110,
                                  103,116,104,47,49,93,125,41,46,32,37,32,101,
                                  114,108,97,110,103,58,108,101,110,103,116,
                                  104,47,49,32,110,111,32,108,111,110,103,101,
                                  114,32,97,117,116,111,105,109,112,111,114,
                                  116,101,100,10,10,45,105,109,112,111,114,
                                  116,40,109,111,100,44,91,108,101,110,103,
                                  116,104,47,49,93,41,46,10,10,102,40,88,41,
                                  32,119,104,101,110,32,101,114,108,97,110,
                                  103,58,108,101,110,103,116,104,40,88,41,32,
                                  62,32,51,51,32,45,62,32,37,37,32,67,97,108,
                                  108,115,32,101,114,108,97,110,103,58,108,
                                  101,110,103,116,104,47,49,44,10,32,32,32,32,
                                  32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                                  32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                                  32,32,32,37,37,32,119,104,105,99,104,32,105,
                                  115,32,97,108,108,111,119,101,100,32,105,
                                  110,32,103,117,97,114,100,115,10,10,32,32,
                                  32,32,101,114,108,97,110,103,58,108,101,110,
                                  103,116,104,40,88,41,59,32,32,32,32,32,32,
                                  32,32,32,32,32,32,32,32,37,37,32,69,120,112,
                                  108,105,99,105,116,32,99,97,108,108,32,116,
                                  111,32,101,114,108,97,110,103,58,108,101,
                                  110,103,116,104,32,105,110,32,98,111,100,
                                  121,10,10,102,40,88,41,32,45,62,10,32,32,32,
                                  32,108,101,110,103,116,104,40,88,41,46,32,
                                  32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                                  32,32,32,32,32,32,37,37,32,109,111,100,58,
                                  108,101,110,103,116,104,47,49,32,105,115,32,
                                  99,97,108,108,101,100]}],
                               0,true}},
                             {text,[3,96,96,96]}},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{sep,
                                 [{text,
                                   [159,70,111,114,32,97,117,116,111,45,105,
                                    109,112,111,114,116,101,100,32,66,73,70,
                                    115,32,97,100,100,101,100,32,105,110,32,
                                    69,114,108,97,110,103,47,79,84,80,32,82,
                                    49,52,65,32,97,110,100,32,116,104,101,114,
                                    101,97,102,116,101,114,44,32,111,118,101,
                                    114,114,105,100,105,110,103,32,116,104,
                                    101,32,110,97,109,101,32,119,105,116,104,
                                    32,97,32,108,111,99,97,108,32,102,117,110,
                                    99,116,105,111,110,32,111,114,32,101,120,
                                    112,108,105,99,105,116,32,105,109,112,111,
                                    114,116,32,105,115,32,97,108,119,97,121,
                                    115,32,97,108,108,111,119,101,100,46,32,
                                    72,111,119,101,118,101,114,44,32,105,102,
                                    32,116,104,101]}],
                                 0,false},
                                {text,"!*-compile({no_auto_import,[F/A])*"},
                                {sep,
                                 [{text,
                                   [144,100,105,114,101,99,116,105,118,101,32,
                                    105,115,32,110,111,116,32,117,115,101,100,
                                    44,32,116,104,101,32,99,111,109,112,105,
                                    108,101,114,32,105,115,115,117,101,115,32,
                                    97,32,119,97,114,110,105,110,103,32,119,
                                    104,101,110,101,118,101,114,32,116,104,
                                    101,32,102,117,110,99,116,105,111,110,32,
                                    105,115,32,99,97,108,108,101,100,32,105,
                                    110,32,116,104,101,32,109,111,100,117,108,
                                    101,32,117,115,105,110,103,32,116,104,101,
                                    32,105,109,112,108,105,99,105,116,108,121,
                                    32,113,117,97,108,105,102,105,101,100,32,
                                    102,117,110,99,116,105,111,110,32,110,97,
                                    109,101,46]}],
                                 0,false}],
                               0,false}],
                             0,true},
                            null},
                           null}}],
                        0,false}],
                      0,false}},
                    {sep,
                     [{above,
                       {above,{above,{text,[0]},null},null},
                       {above,{above,{text,[5,35,35,32,73,102]},null},null}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {above,
                          {above,
                           {text,[3,96,96,96]},
                           {sep,
                            [{text,
                              "O\nif\n    GuardSeq1 ->\n        Body1;\n    ...;\n    GuardSeqN ->\n        BodyN\nend"}],
                            0,true}},
                          {text,[3,96,96,96]}},
                         null},
                        null}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{sep,
                              [{text,
                                [18,84,104,101,32,98,114,97,110,99,104,101,
                                 115,32,111,102,32,97,110]}],
                              0,false},
                             {text,[4,42,105,102,42]},
                             {sep,
                              [{text,
                                ";-expression are scanned sequentially until a guard sequence"}],
                              0,false},
                             {text,"\n*GuardSeq*"},
                             {sep,
                              [{text,
                                "7that evaluates to true is found. Then the corresponding"}],
                              0,false},
                             {text,[6,42,66,111,100,121,42]},
                             {sep,
                              [{text,
                                "8(sequence of expressions separated by ',') is evaluated."}],
                              0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{sep,
                              [{text,
                                [19,84,104,101,32,114,101,116,117,114,110,32,
                                 118,97,108,117,101,32,111,102]}],
                              0,false},
                             {text,[6,42,66,111,100,121,42]},
                             {sep,
                              [{text,
                                [26,105,115,32,116,104,101,32,114,101,116,117,
                                 114,110,32,118,97,108,117,101,32,111,102,32,
                                 116,104,101]}],
                              0,false},
                             {text,[4,42,105,102,42]},
                             {sep,[{text,"\vexpression."}],0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{sep,
                              [{text,
                                "-If no guard sequence is evaluated as true, an"}],
                              0,false},
                             {text,"\v*if_clause*"},
                             {sep,
                              [{text,
                                "9run-time error occurs. If necessary, the guard expression"}],
                              0,false},
                             {text,[6,42,116,114,117,101,42]},
                             {sep,
                              [{text,
                                "Fcan be used in the last branch, as that guard sequence is always true."}],
                              0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,[{text,"\f**Example:**"}],0,false}],
                          0,true},
                         null},
                        null}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {above,
                          {above,
                           {text,[3,96,96,96]},
                           {sep,
                            [{text,
                              [135,10,105,115,95,103,114,101,97,116,101,114,
                               95,116,104,97,110,40,88,44,32,89,41,32,45,62,
                               10,32,32,32,32,105,102,10,32,32,32,32,32,32,32,
                               32,88,62,89,32,45,62,10,32,32,32,32,32,32,32,
                               32,32,32,32,32,116,114,117,101,59,10,32,32,32,
                               32,32,32,32,32,116,114,117,101,32,45,62,32,37,
                               32,119,111,114,107,115,32,97,115,32,97,110,32,
                               39,101,108,115,101,39,32,98,114,97,110,99,104,
                               10,32,32,32,32,32,32,32,32,32,32,32,32,102,97,
                               108,115,101,10,32,32,32,32,101,110,100]}],
                            0,true}},
                          {text,[3,96,96,96]}},
                         null},
                        null}}],
                     0,false}},
                   {sep,
                    [{text,
                      [23,60,97,32,110,97,109,101,61,34,99,97,115,101,34,62,
                       99,97,115,101,60,47,97,62]},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,{text,[7,35,35,32,67,97,115,101]},null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {above,
                         {above,
                          {text,[3,96,96,96]},
                          {sep,
                           [{text,
                             "y\ncase Expr of\n    Pattern1 [when GuardSeq1] ->\n        Body1;\n    ...;\n    PatternN [when GuardSeqN] ->\n        BodyN\nend"}],
                           0,true}},
                         {text,[3,96,96,96]}},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{sep,
                             [{text,
                               [14,84,104,101,32,101,120,112,114,101,115,115,
                                105,111,110]}],
                             0,false},
                            {text,[6,42,69,120,112,114,42]},
                            {sep,
                             [{text,
                               [29,105,115,32,101,118,97,108,117,97,116,101,
                                100,32,97,110,100,32,116,104,101,32,112,97,
                                116,116,101,114,110,115]}],
                             0,false},
                            {text,"\t*Pattern*"},
                            {sep,
                             [{text,
                               "`are sequentially matched against the result. If a match succeeds and the optional guard sequence"}],
                             0,false},
                            {text,"\n*GuardSeq*"},
                            {sep,
                             [{text,
                               [26,105,115,32,116,114,117,101,44,32,116,104,
                                101,32,99,111,114,114,101,115,112,111,110,100,
                                105,110,103]}],
                             0,false},
                            {text,[6,42,66,111,100,121,42]},
                            {sep,[{text,"\ris evaluated."}],0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{sep,
                             [{text,
                               [19,84,104,101,32,114,101,116,117,114,110,32,
                                118,97,108,117,101,32,111,102]}],
                             0,false},
                            {text,[6,42,66,111,100,121,42]},
                            {sep,
                             [{text,
                               [26,105,115,32,116,104,101,32,114,101,116,117,
                                114,110,32,118,97,108,117,101,32,111,102,32,
                                116,104,101]}],
                             0,false},
                            {text,[6,42,99,97,115,101,42]},
                            {sep,[{text,"\vexpression."}],0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{sep,
                             [{text,
                               "=If there is no matching pattern with a true guard sequence, a"}],
                             0,false},
                            {text,"\r*case_clause*"},
                            {sep,
                             [{text,
                               [22,114,117,110,45,116,105,109,101,32,101,114,
                                114,111,114,32,111,99,99,117,114,115,46]}],
                             0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {above,
                         {above,
                          {text,[3,96,96,96]},
                          {sep,
                           [{text,
                             "Ã\nis_valid_signal(Signal) ->\n    case Signal of\n        {signal, _What, _From, _To} ->\n            true;\n        {signal, _What, _To} ->\n            true;\n        _Else ->\n            false\n    end."}],
                           0,true}},
                         {text,[3,96,96,96]}},
                        null},
                       null}}],
                    0,false}},
                  {sep,
                   [{text,
                     [23,60,97,32,110,97,109,101,61,34,115,101,110,100,34,62,
                      115,101,110,100,60,47,97,62]},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,{text,[7,35,35,32,83,101,110,100]},null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {above,
                        {above,
                         {text,[3,96,96,96]},
                         {sep,
                          [{text,
                            [14,10,69,120,112,114,49,32,33,32,69,120,112,114,
                             50]}],
                          0,true}},
                        {text,[3,96,96,96]}},
                       null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{sep,
                            [{text,
                              [18,83,101,110,100,115,32,116,104,101,32,118,97,
                               108,117,101,32,111,102]}],
                            0,false},
                           {text,[7,42,69,120,112,114,50,42]},
                           {sep,
                            [{text,
                              "(as a message to the process specified by"}],
                            0,false},
                           {text,[7,42,69,120,112,114,49,42]},
                           {sep,
                            [{text,
                              [14,46,32,84,104,101,32,118,97,108,117,101,32,
                               111,102]}],
                            0,false},
                           {text,[7,42,69,120,112,114,50,42]},
                           {sep,
                            [{text,
                              "+is also the return value of the expression."}],
                            0,false}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,[7,42,69,120,112,114,49,42]},
                           {sep,
                            [{text,
                              "<must evaluate to a pid, a registered name (atom), or a tuple"}],
                            0,false},
                           {text,"\r*{Name,Node}*"},
                           {sep,[{text,[1,46]}],0,false},
                           {text,[6,42,78,97,109,101,42]},
                           {sep,
                            [{text,
                              [14,105,115,32,97,110,32,97,116,111,109,32,97,
                               110,100]}],
                            0,false},
                           {text,[6,42,78,111,100,101,42]},
                           {sep,
                            [{text,
                              [29,105,115,32,97,32,110,111,100,101,32,110,97,
                               109,101,44,32,97,108,115,111,32,97,110,32,97,
                               116,111,109,46]}],
                            0,false}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {above,
                     {above,
                      {sep,
                       [{text,[1,42]},
                        {sep,
                         [{sep,[{text,[2,73,102]}],0,false},
                          {text,[7,42,69,120,112,114,49,42]},
                          {sep,
                           [{text,
                             "7evaluates to a name, but this name is not registered, a"}],
                           0,false},
                          {text,"\b*badarg*"},
                          {sep,
                           [{text,
                             [22,114,117,110,45,116,105,109,101,32,101,114,
                              114,111,114,32,111,99,99,117,114,115,46]}],
                           0,false}],
                         0,false}],
                       0,false},
                      {sep,
                       [{text,[1,42]},
                        {text,
                         "ZSending a message to a pid never fails, even if the pid identifies a non-existing process."}],
                       0,false}},
                     {sep,
                      [{text,[1,42]},
                       {sep,
                        [{sep,
                          [{text,"(Distributed message sending, that is, if"}],
                          0,false},
                         {text,[7,42,69,120,112,114,49,42]},
                         {sep,
                          [{text,
                            [20,101,118,97,108,117,97,116,101,115,32,116,111,
                             32,97,32,116,117,112,108,101]}],
                          0,false},
                         {text,"\r*{Name,Node}*"},
                         {sep,
                          [{text,
                            "5(or a pid located at another node), also never fails."}],
                          0,false}],
                        0,false}],
                      0,false}}],
                   0,false}},
                 {sep,
                  [{text,
                    [29,60,97,32,110,97,109,101,61,34,114,101,99,101,105,118,
                     101,34,62,114,101,99,101,105,118,101,60,47,97,62]},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,{above,{text,"\n## Receive"},null},null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {above,
                       {above,
                        {text,[3,96,96,96]},
                        {sep,
                         [{text,
                           "t\nreceive\n    Pattern1 [when GuardSeq1] ->\n        Body1;\n    ...;\n    PatternN [when GuardSeqN] ->\n        BodyN\nend"}],
                         0,true}},
                       {text,[3,96,96,96]}},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,
                           [{text,
                             "OReceives messages sent to the process using the send operator (!). The patterns"}],
                           0,false},
                          {text,"\t*Pattern*"},
                          {sep,
                           [{text,
                             "Â are sequentially matched against the first message in time order in the mailbox, then the second, and so on. If a match succeeds and the optional guard sequence"}],
                           0,false},
                          {text,"\n*GuardSeq*"},
                          {sep,
                           [{text,
                             [26,105,115,32,116,114,117,101,44,32,116,104,101,
                              32,99,111,114,114,101,115,112,111,110,100,105,
                              110,103]}],
                           0,false},
                          {text,[6,42,66,111,100,121,42]},
                          {sep,
                           [{text,
                             [140,105,115,32,101,118,97,108,117,97,116,101,
                              100,46,32,84,104,101,32,109,97,116,99,104,105,
                              110,103,32,109,101,115,115,97,103,101,32,105,
                              115,32,99,111,110,115,117,109,101,100,44,32,116,
                              104,97,116,32,105,115,44,32,114,101,109,111,118,
                              101,100,32,102,114,111,109,32,116,104,101,32,
                              109,97,105,108,98,111,120,44,32,119,104,105,108,
                              101,32,97,110,121,32,111,116,104,101,114,32,109,
                              101,115,115,97,103,101,115,32,105,110,32,116,
                              104,101,32,109,97,105,108,98,111,120,32,114,101,
                              109,97,105,110,32,117,110,99,104,97,110,103,101,
                              100,46]}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,
                           [{text,
                             [19,84,104,101,32,114,101,116,117,114,110,32,118,
                              97,108,117,101,32,111,102]}],
                           0,false},
                          {text,[6,42,66,111,100,121,42]},
                          {sep,
                           [{text,
                             [26,105,115,32,116,104,101,32,114,101,116,117,
                              114,110,32,118,97,108,117,101,32,111,102,32,116,
                              104,101]}],
                           0,false},
                          {text,"\t*receive*"},
                          {sep,[{text,"\vexpression."}],0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{text,"\t*receive*"},
                          {sep,
                           [{text,
                             [152,110,101,118,101,114,32,102,97,105,108,115,
                              46,32,84,104,101,32,101,120,101,99,117,116,105,
                              111,110,32,105,115,32,115,117,115,112,101,110,
                              100,101,100,44,32,112,111,115,115,105,98,108,
                              121,32,105,110,100,101,102,105,110,105,116,101,
                              108,121,44,32,117,110,116,105,108,32,97,32,109,
                              101,115,115,97,103,101,32,97,114,114,105,118,
                              101,115,32,116,104,97,116,32,109,97,116,99,104,
                              101,115,32,111,110,101,32,111,102,32,116,104,
                              101,32,112,97,116,116,101,114,110,115,32,97,110,
                              100,32,119,105,116,104,32,97,32,116,114,117,101,
                              32,103,117,97,114,100,32,115,101,113,117,101,
                              110,99,101,46]}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {above,
                       {above,
                        {text,[3,96,96,96]},
                        {sep,
                         [{text,
                           "Ã\nwait_for_onhook() ->\n    receive\n        onhook ->\n            disconnect(),\n            idle();\n        {connect, B} ->\n            B ! {busy, self()},\n            wait_for_onhook()\n    end."}],
                         0,true}},
                       {text,[3,96,96,96]}},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,[{text,[3,84,104,101]}],0,false},
                          {text,"\t*receive*"},
                          {sep,
                           [{text,
                             "+expression can be augmented with a timeout:"}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {above,
                       {above,
                        {text,[3,96,96,96]},
                        {sep,
                         [{text,
                           [149,10,114,101,99,101,105,118,101,10,32,32,32,32,
                            80,97,116,116,101,114,110,49,32,91,119,104,101,
                            110,32,71,117,97,114,100,83,101,113,49,93,32,45,
                            62,10,32,32,32,32,32,32,32,32,66,111,100,121,49,
                            59,10,32,32,32,32,46,46,46,59,10,32,32,32,32,80,
                            97,116,116,101,114,110,78,32,91,119,104,101,110,
                            32,71,117,97,114,100,83,101,113,78,93,32,45,62,10,
                            32,32,32,32,32,32,32,32,66,111,100,121,78,10,97,
                            102,116,101,114,10,32,32,32,32,69,120,112,114,84,
                            32,45,62,10,32,32,32,32,32,32,32,32,66,111,100,
                            121,84,10,101,110,100]}],
                         0,true}},
                       {text,[3,96,96,96]}},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{text,[7,42,69,120,112,114,84,42]},
                          {sep,
                           [{text,
                             "ois to evaluate to an integer. The highest allowed value is 16#FFFFFFFF, that is, the value must fit in 32 bits."}],
                           0,false},
                          {text,
                           [16,42,114,101,99,101,105,118,101,46,46,97,102,116,
                            101,114,42]},
                          {sep,
                           [{text,
                             [16,119,111,114,107,115,32,101,120,97,99,116,108,
                              121,32,97,115]}],
                           0,false},
                          {text,"\t*receive*"},
                          {sep,
                           [{text,
                             "7, except that if no matching message has arrived within"}],
                           0,false},
                          {text,[7,42,69,120,112,114,84,42]},
                          {sep,
                           [{text,
                             [18,109,105,108,108,105,115,101,99,111,110,100,
                              115,44,32,116,104,101,110]}],
                           0,false},
                          {text,[7,42,66,111,100,121,84,42]},
                          {sep,
                           [{text,
                             ")is evaluated instead. The return value of"}],
                           0,false},
                          {text,[7,42,66,111,100,121,84,42]},
                          {sep,
                           [{text,"$then becomes the return value of the"}],
                           0,false},
                          {text,
                           [16,42,114,101,99,101,105,118,101,46,46,97,102,116,
                            101,114,42]},
                          {sep,[{text,"\vexpression."}],0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {above,
                       {above,
                        {text,[3,96,96,96]},
                        {sep,
                         [{text,
                           [265,10,119,97,105,116,95,102,111,114,95,111,110,
                            104,111,111,107,40,41,32,45,62,10,32,32,32,32,114,
                            101,99,101,105,118,101,10,32,32,32,32,32,32,32,32,
                            111,110,104,111,111,107,32,45,62,10,32,32,32,32,
                            32,32,32,32,32,32,32,32,100,105,115,99,111,110,
                            110,101,99,116,40,41,44,10,32,32,32,32,32,32,32,
                            32,32,32,32,32,105,100,108,101,40,41,59,10,32,32,
                            32,32,32,32,32,32,123,99,111,110,110,101,99,116,
                            44,32,66,125,32,45,62,10,32,32,32,32,32,32,32,32,
                            32,32,32,32,66,32,33,32,123,98,117,115,121,44,32,
                            115,101,108,102,40,41,125,44,10,32,32,32,32,32,32,
                            32,32,32,32,32,32,119,97,105,116,95,102,111,114,
                            95,111,110,104,111,111,107,40,41,10,32,32,32,32,
                            97,102,116,101,114,10,32,32,32,32,32,32,32,32,54,
                            48,48,48,48,32,45,62,10,32,32,32,32,32,32,32,32,
                            32,32,32,32,100,105,115,99,111,110,110,101,99,116,
                            40,41,44,10,32,32,32,32,32,32,32,32,32,32,32,32,
                            101,114,114,111,114,40,41,10,32,32,32,32,101,110,
                            100,46]}],
                         0,true}},
                       {text,[3,96,96,96]}},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,
                           [{text,
                             [20,73,116,32,105,115,32,108,101,103,97,108,32,
                              116,111,32,117,115,101,32,97]}],
                           0,false},
                          {text,
                           [16,42,114,101,99,101,105,118,101,46,46,97,102,116,
                            101,114,42]},
                          {sep,
                           [{text,
                             [28,101,120,112,114,101,115,115,105,111,110,32,
                              119,105,116,104,32,110,111,32,98,114,97,110,99,
                              104,101,115,58]}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {above,
                       {above,
                        {text,[3,96,96,96]},
                        {sep,
                         [{text,
                           "-\nreceive\nafter\n    ExprT ->\n        BodyT\nend"}],
                         0,true}},
                       {text,[3,96,96,96]}},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,
                           [{text,
                             "[This construction does not consume any messages, only suspends execution in the process for"}],
                           0,false},
                          {text,[7,42,69,120,112,114,84,42]},
                          {sep,
                           [{text,
                             ":milliseconds. This can be used to implement simple timers."}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {above,
                       {above,
                        {text,[3,96,96,96]},
                        {sep,
                         [{text,
                           [130,10,116,105,109,101,114,40,41,32,45,62,10,32,
                            32,32,32,115,112,97,119,110,40,109,44,32,116,105,
                            109,101,114,44,32,91,115,101,108,102,40,41,93,41,
                            46,10,10,116,105,109,101,114,40,80,105,100,41,32,
                            45,62,10,32,32,32,32,114,101,99,101,105,118,101,
                            10,32,32,32,32,97,102,116,101,114,10,32,32,32,32,
                            32,32,32,32,53,48,48,48,32,45,62,10,32,32,32,32,
                            32,32,32,32,32,32,32,32,80,105,100,32,33,32,116,
                            105,109,101,111,117,116,10,32,32,32,32,101,110,
                            100,46]}],
                         0,true}},
                       {text,[3,96,96,96]}},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,
                           [{text,
                             "1There are two special cases for the timeout value"}],
                           0,false},
                          {text,[7,42,69,120,112,114,84,42]},
                          {sep,[{text,[1,58]}],0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,
                     {text,[4,60,100,108,62]},
                     {nest,4,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,116,62]},
                              {sep,[{text,"\binfinity"}],0,false},
                              {text,[5,60,47,100,116,62]}],
                             0,true},
                            null},
                           null}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,100,62]},
                              {text,
                               "ÂªThe process is to wait indefinitely for a matching message; this is the same as not using a timeout. This can be useful for timeout values that are calculated at runtime."},
                              {text,[5,60,47,100,100,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,[{text,[1,48]}],0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {text,
                             "OIf there is no matching message in the mailbox, the timeout occurs immediately."},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}}}},
                    {text,[5,60,47,100,108,62]}}],
                  0,false}},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {text,
                      [19,35,35,32,84,101,114,109,32,67,111,109,112,97,114,
                       105,115,111,110,115]},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {above,
                      {above,
                       {text,[3,96,96,96]},
                       {sep,
                        [{text,[7,10,69,120,112,114,49,32]},
                         {text,[2,111,112]},
                         {text,[6,32,69,120,112,114,50]}],
                        0,true}},
                      {text,[3,96,96,96]}},
                     null},
                    null}},
                  {text,"\vTODO: TABLE"},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "MThe arguments can be of different data types. The following order is defined:"}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {above,
                      {above,
                       {text,[3,96,96,96]},
                       {sep,
                        [{text,
                          "U\nnumber < atom < reference < fun < port < pid < tuple < map < nil < list < bit string"}],
                        0,true}},
                      {text,[3,96,96,96]}},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,[5,42,110,105,108,42]},
                         {sep,
                          [{text,
                            "6in the previous expression represents the empty list ("}],
                          0,false},
                         {text,[4,42,91,93,42]},
                         {sep,
                          [{text,
                            ",), which is regarded as a separate type from"}],
                          0,false},
                         {text,"\b*list/0*"},
                         {sep,[{text,"\r. That is why"}],0,false},
                         {text,"\f*nil < list*"},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          [129,76,105,115,116,115,32,97,114,101,32,99,111,109,
                           112,97,114,101,100,32,101,108,101,109,101,110,116,
                           32,98,121,32,101,108,101,109,101,110,116,46,32,84,
                           117,112,108,101,115,32,97,114,101,32,111,114,100,
                           101,114,101,100,32,98,121,32,115,105,122,101,44,32,
                           116,119,111,32,116,117,112,108,101,115,32,119,105,
                           116,104,32,116,104,101,32,115,97,109,101,32,115,
                           105,122,101,32,97,114,101,32,99,111,109,112,97,114,
                           101,100,32,101,108,101,109,101,110,116,32,98,121,
                           32,101,108,101,109,101,110,116,46]}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "ÃMaps are ordered by size, two maps with the same size are compared by keys in ascending term order and then by values in key order. In maps key order integers types are considered less than floats types."}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "DAtoms are compared using their string value, codepoint by codepoint."}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            [148,87,104,101,110,32,99,111,109,112,97,114,105,
                             110,103,32,97,110,32,105,110,116,101,103,101,114,
                             32,116,111,32,97,32,102,108,111,97,116,44,32,116,
                             104,101,32,116,101,114,109,32,119,105,116,104,32,
                             116,104,101,32,108,101,115,115,101,114,32,112,
                             114,101,99,105,115,105,111,110,32,105,115,32,99,
                             111,110,118,101,114,116,101,100,32,105,110,116,
                             111,32,116,104,101,32,116,121,112,101,32,111,102,
                             32,116,104,101,32,111,116,104,101,114,32,116,101,
                             114,109,44,32,117,110,108,101,115,115,32,116,104,
                             101,32,111,112,101,114,97,116,111,114,32,105,115,
                             32,111,110,101,32,111,102]}],
                          0,false},
                         {text,[5,42,61,58,61,42]},
                         {sep,[{text,[2,111,114]}],0,false},
                         {text,[5,42,61,47,61,42]},
                         {sep,
                          [{text,
                            [355,46,32,65,32,102,108,111,97,116,32,105,115,32,
                             109,111,114,101,32,112,114,101,99,105,115,101,32,
                             116,104,97,110,32,97,110,32,105,110,116,101,103,
                             101,114,32,117,110,116,105,108,32,97,108,108,32,
                             115,105,103,110,105,102,105,99,97,110,116,32,102,
                             105,103,117,114,101,115,32,111,102,32,116,104,
                             101,32,102,108,111,97,116,32,97,114,101,32,116,
                             111,32,116,104,101,32,108,101,102,116,32,111,102,
                             32,116,104,101,32,100,101,99,105,109,97,108,32,
                             112,111,105,110,116,46,32,84,104,105,115,32,104,
                             97,112,112,101,110,115,32,119,104,101,110,32,116,
                             104,101,32,102,108,111,97,116,32,105,115,32,108,
                             97,114,103,101,114,47,115,109,97,108,108,101,114,
                             32,116,104,97,110,32,43,47,45,57,48,48,55,49,57,
                             57,50,53,52,55,52,48,57,57,50,46,48,46,32,84,104,
                             101,32,99,111,110,118,101,114,115,105,111,110,32,
                             115,116,114,97,116,101,103,121,32,105,115,32,99,
                             104,97,110,103,101,100,32,100,101,112,101,110,
                             100,105,110,103,32,111,110,32,116,104,101,32,115,
                             105,122,101,32,111,102,32,116,104,101,32,102,108,
                             111,97,116,32,98,101,99,97,117,115,101,32,111,
                             116,104,101,114,119,105,115,101,32,99,111,109,
                             112,97,114,105,115,111,110,32,111,102,32,108,97,
                             114,103,101,32,102,108,111,97,116,115,32,97,110,
                             100,32,105,110,116,101,103,101,114,115,32,119,
                             111,117,108,100,32,108,111,115,101,32,116,104,
                             101,105,114,32,116,114,97,110,115,105,116,105,
                             118,105,116,121,46]}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            "ETerm comparison operators return the Boolean value of the expression,"}],
                          0,false},
                         {text,[6,42,116,114,117,101,42]},
                         {sep,[{text,[2,111,114]}],0,false},
                         {text,[7,42,102,97,108,115,101,42]},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,[{sep,[{text,"\r**Examples:**"}],0,false}],0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {above,
                      {above,
                       {text,[3,96,96,96]},
                       {sep,
                        [{text,[4,10,49,62,32]},
                         {text,[7,49,61,61,49,46,48,46]},
                         {text,"\t\ntrue\n2> "},
                         {text,"\b1=:=1.0."},
                         {text,"\n\nfalse\n3> "},
                         {text,[6,49,32,62,32,97,46]},
                         {text,"\n\nfalse\n4> "},
                         {text,
                          [30,35,123,99,32,61,62,32,51,125,32,62,32,35,123,97,
                           32,61,62,32,49,44,32,98,32,61,62,32,50,125,46]},
                         {text,"\n\nfalse\n4> "},
                         {text,"+#{a => 1, b => 2} == #{a => 1.0, b => 2.0}."},
                         {text,[5,10,116,114,117,101]}],
                        0,true}},
                      {text,[3,96,96,96]}},
                     null},
                    null}}],
                 0,false}},
               {sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {text,
                     [25,35,35,32,65,114,105,116,104,109,101,116,105,99,32,69,
                      120,112,114,101,115,115,105,111,110,115]},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {above,
                     {above,
                      {text,[3,96,96,96]},
                      {sep,
                       [{text,[1,10]},
                        {text,[2,111,112]},
                        {text,"\f Expr\nExpr1 "},
                        {text,[2,111,112]},
                        {text,[6,32,69,120,112,114,50]}],
                       0,true}},
                     {text,[3,96,96,96]}},
                    null},
                   null}},
                 {text,"\vTODO: TABLE"},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,[{sep,[{text,"\r**Examples:**"}],0,false}],0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {above,
                     {above,
                      {text,[3,96,96,96]},
                      {sep,
                       [{text,[4,10,49,62,32]},
                        {text,[3,43,49,46]},
                        {text,[6,10,49,10,50,62,32]},
                        {text,[3,45,49,46]},
                        {text,[7,10,45,49,10,51,62,32]},
                        {text,[4,49,43,49,46]},
                        {text,[6,10,50,10,52,62,32]},
                        {text,[4,52,47,50,46]},
                        {text,"\b\n2.0\n5> "},
                        {text,"\b5 div 2."},
                        {text,[6,10,50,10,54,62,32]},
                        {text,"\b5 rem 2."},
                        {text,[6,10,49,10,55,62,32]},
                        {text,
                         [15,50,35,49,48,32,98,97,110,100,32,50,35,48,49,46]},
                        {text,[6,10,48,10,56,62,32]},
                        {text,
                         [14,50,35,49,48,32,98,111,114,32,50,35,48,49,46]},
                        {text,[6,10,51,10,57,62,32]},
                        {text,[7,97,32,43,32,49,48,46]},
                        {text,
                         [131,10,42,42,32,101,120,99,101,112,116,105,111,110,
                          32,101,114,114,111,114,58,32,97,110,32,101,114,114,
                          111,114,32,111,99,99,117,114,114,101,100,32,119,104,
                          101,110,32,101,118,97,108,117,97,116,105,110,103,32,
                          97,110,32,97,114,105,116,104,109,101,116,105,99,32,
                          101,120,112,114,101,115,115,105,111,110,10,32,32,32,
                          32,32,105,110,32,111,112,101,114,97,116,111,114,32,
                          32,43,47,50,10,32,32,32,32,32,32,32,32,99,97,108,
                          108,101,100,32,97,115,32,97,32,43,32,49,48,10,49,48,
                          62,32]},
                        {text,
                         [17,49,32,98,115,108,32,40,49,32,98,115,108,32,54,52,
                          41,46]},
                        {text,
                         "y\n** exception error: a system limit has been reached\n     in operator  bsl/2\n        called as 1 bsl 18446744073709551616"}],
                       0,true}},
                     {text,[3,96,96,96]}},
                    null},
                   null}}],
                0,false}},
              {sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {text,
                    [22,35,35,32,66,111,111,108,101,97,110,32,69,120,112,114,
                     101,115,115,105,111,110,115]},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {above,
                    {above,
                     {text,[3,96,96,96]},
                     {sep,
                      [{text,[1,10]},
                       {text,[2,111,112]},
                       {text,"\f Expr\nExpr1 "},
                       {text,[2,111,112]},
                       {text,[6,32,69,120,112,114,50]}],
                      0,true}},
                    {text,[3,96,96,96]}},
                   null},
                  null}},
                {text,"\vTODO: TABLE"},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,[{sep,[{text,"\r**Examples:**"}],0,false}],0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {above,
                    {above,
                     {text,[3,96,96,96]},
                     {sep,
                      [{text,[4,10,49,62,32]},
                       {text,"\tnot true."},
                       {text,"\n\nfalse\n2> "},
                       {text,
                        [15,116,114,117,101,32,97,110,100,32,102,97,108,115,
                         101,46]},
                       {text,"\n\nfalse\n3> "},
                       {text,
                        [15,116,114,117,101,32,120,111,114,32,102,97,108,115,
                         101,46]},
                       {text,"\t\ntrue\n4> "},
                       {text,
                        [16,116,114,117,101,32,111,114,32,103,97,114,98,97,
                         103,101,46]},
                       {text,
                        "Z\n** exception error: bad argument\n     in operator  or/2\n        called as true or garbage"}],
                      0,true}},
                    {text,[3,96,96,96]}},
                   null},
                  null}}],
               0,false}},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [28,35,35,32,83,104,111,114,116,45,67,105,114,99,117,105,
                    116,32,69,120,112,114,101,115,115,105,111,110,115]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,"'\nExpr1 orelse Expr2\nExpr1 andalso Expr2"}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,[7,42,69,120,112,114,50,42]},
                      {sep,
                       [{text,"(is evaluated only if necessary. That is,"}],
                       0,false},
                      {text,[7,42,69,120,112,114,50,42]},
                      {sep,
                       [{text,
                         [21,105,115,32,101,118,97,108,117,97,116,101,100,32,
                          111,110,108,121,32,105,102,58]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,[7,42,69,120,112,114,49,42]},
                   {sep,[{text,"\fevaluates to"}],0,false},
                   {text,[7,42,102,97,108,115,101,42]},
                   {sep,[{text,[5,105,110,32,97,110]}],0,false},
                   {text,"\b*orelse*"},
                   {sep,[{text,"\vexpression."}],0,false}],
                  0,false}],
                0,false},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,[{sep,[{text,[2,111,114]}],0,false}],0,true},
                  null},
                 null}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,[7,42,69,120,112,114,49,42]},
                   {sep,[{text,"\fevaluates to"}],0,false},
                   {text,[6,42,116,114,117,101,42]},
                   {sep,[{text,[5,105,110,32,97,110]}],0,false},
                   {text,"\t*andalso*"},
                   {sep,[{text,"\vexpression."}],0,false}],
                  0,false}],
                0,false},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,"\eReturns either the value of"}],0,false},
                      {text,[7,42,69,120,112,114,49,42]},
                      {sep,[{text,"\t(that is,"}],0,false},
                      {text,[6,42,116,114,117,101,42]},
                      {sep,[{text,[2,111,114]}],0,false},
                      {text,[7,42,102,97,108,115,101,42]},
                      {sep,
                       [{text,
                         [17,41,32,111,114,32,116,104,101,32,118,97,108,117,
                          101,32,111,102]}],
                       0,false},
                      {text,[7,42,69,120,112,114,50,42]},
                      {sep,[{text,[3,40,105,102]}],0,false},
                      {text,[7,42,69,120,112,114,50,42]},
                      {sep,
                       [{text,
                         [14,105,115,32,101,118,97,108,117,97,116,101,100,41,
                          46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [14,42,42,69,120,97,109,112,108,101,32,49,58,42,42]}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,
                       "-\ncase A >= -1.0 andalso math:sqrt(A+1) > B of"}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [18,84,104,105,115,32,119,111,114,107,115,32,101,118,
                          101,110,32,105,102]}],
                       0,false},
                      {text,[3,42,65,42]},
                      {sep,[{text,"\fis less than"}],0,false},
                      {text,[6,42,45,49,46,48,42]},
                      {sep,
                       [{text,
                         [21,44,32,115,105,110,99,101,32,105,110,32,116,104,
                          97,116,32,99,97,115,101,44]}],
                       0,false},
                      {text,"\r*math:sqrt/1*"},
                      {sep,
                       [{text,
                         [19,105,115,32,110,101,118,101,114,32,101,118,97,108,
                          117,97,116,101,100,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [14,42,42,69,120,97,109,112,108,101,32,50,58,42,42]}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,
                       "J\nOnlyOne = is_atom(L) orelse\n         (is_list(L) andalso length(L) == 1),"}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [21,70,114,111,109,32,69,114,108,97,110,103,47,79,84,
                          80,32,82,49,51,65,44]}],
                       0,false},
                      {text,[7,42,69,120,112,114,50,42]},
                      {sep,
                       [{text,
                         "Gis no longer required to evaluate to a Boolean value. As a consequence,"}],
                       0,false},
                      {text,"\t*andalso*"},
                      {sep,[{text,[3,97,110,100]}],0,false},
                      {text,"\b*orelse*"},
                      {sep,
                       [{text,
                         "lare now tail-recursive. For instance, the following function is tail-recursive in Erlang/OTP R13A and later:"}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,
                       "V\nall(Pred, [Hd|Tail]) ->\n    Pred(Hd) andalso all(Pred, Tail);\nall(_, []) ->\n    true."}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}}],
              0,false}},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {text,
                  [18,35,35,32,76,105,115,116,32,79,112,101,114,97,116,105,
                   111,110,115]},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,
                      [30,10,69,120,112,114,49,32,43,43,32,69,120,112,114,50,
                       10,69,120,112,114,49,32,45,45,32,69,120,112,114,50]}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [31,84,104,101,32,108,105,115,116,32,99,111,110,99,97,
                         116,101,110,97,116,105,111,110,32,111,112,101,114,97,
                         116,111,114]}],
                      0,false},
                     {text,[4,42,43,43,42]},
                     {sep,
                      [{text,
                        "Happends its second argument to its first and returns the resulting list."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        [29,84,104,101,32,108,105,115,116,32,115,117,98,116,
                         114,97,99,116,105,111,110,32,111,112,101,114,97,116,
                         111,114]}],
                      0,false},
                     {text,[4,42,45,45,42]},
                     {sep,
                      [{text,
                        "Â´produces a list that is a copy of the first argument. The procedure is a follows: for each element in the second argument, the first occurrence of this element (if any) is removed."}],
                      0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,[3,96,96,96]},
                   {sep,
                    [{text,[4,10,49,62,32]},
                     {text,[15,91,49,44,50,44,51,93,43,43,91,52,44,53,93,46]},
                     {text,
                      [16,10,91,49,44,50,44,51,44,52,44,53,93,10,50,62,32]},
                     {text,
                      [23,91,49,44,50,44,51,44,50,44,49,44,50,93,45,45,91,50,
                       44,49,44,50,93,46]},
                     {text,"\b\n[3,1,2]"}],
                    0,true}},
                  {text,[3,96,96,96]}},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {above,
                  {above,
                   {text,
                    [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,
                     114,110,105,110,103,34]},
                   {sep,
                    [{text,[4,32,32,32,32]},
                     {sep,
                      [{sep,
                        [{above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{sep,
                                 [{text,
                                   [17,84,104,101,32,99,111,109,112,108,101,
                                    120,105,116,121,32,111,102]}],
                                 0,false},
                                {text,"\b*A -- B*"},
                                {sep,
                                 [{text,
                                   [18,105,115,32,112,114,111,112,111,114,116,
                                    105,111,110,97,108,32,116,111]}],
                                 0,false},
                                {text,
                                 [21,42,108,101,110,103,116,104,40,65,41,42,
                                  108,101,110,103,116,104,40,66,41,42]},
                                {sep,
                                 [{text,
                                   "'. That is, it becomes very slow if both"}],
                                 0,false},
                                {text,[3,42,65,42]},
                                {sep,[{text,[3,97,110,100]}],0,false},
                                {text,[3,42,66,42]},
                                {sep,
                                 [{text,
                                   [15,97,114,101,32,108,111,110,103,32,108,
                                    105,115,116,115,46]}],
                                 0,false}],
                               0,false}],
                             0,true},
                            null},
                           null}}],
                        0,false}],
                      0,true}],
                    0,false}},
                  {text,[0]}},
                 null},
                null}}],
             0,false}},
           {sep,
            [{text,"-<a name=\"map_expressions\">map_expressions</a>"},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {text,
                 [18,35,35,32,77,97,112,32,69,120,112,114,101,115,115,105,111,
                  110,115]},
                null},
               null}},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [16,35,35,32,67,114,101,97,116,105,110,103,32,77,97,112,
                    115]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "7Constructing a new map is done by letting an expression"}],
                       0,false},
                      {text,[3,42,75,42]},
                      {sep,
                       [{text,"%be associated with another expression"}],
                       0,false},
                      {text,[3,42,86,42]},
                      {sep,[{text,[1,58]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,[{text,"\v#{ K => V }"}],0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "XNew maps can include multiple associations at construction by listing every association:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,[{text,"\e#{ K1 => V1, .., Kn => Vn }"}],0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "IAn empty map is constructed by not associating any terms with each other:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,[{text,[3,35,123,125]}],0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "tAll keys and values in the map are terms. Any expression is first evaluated and then the resulting terms are used as"}],
                       0,false},
                      {text,[7,42,42,107,101,121,42,42]},
                      {sep,[{text,[3,97,110,100]}],0,false},
                      {text,"\t**value**"},
                      {sep,[{text,"\rrespectively."}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,"$Keys and values are separated by the"}],
                       0,false},
                      {text,[4,42,61,62,42]},
                      {sep,
                       [{text,
                         "/arrow and associations are separated by a comma"}],
                       0,false},
                      {text,[3,42,44,42]},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,[{sep,[{text,"\r**Examples:**"}],0,false}],0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,
                       [306,10,77,48,32,61,32,35,123,125,44,32,32,32,32,32,32,
                        32,32,32,32,32,32,32,32,32,32,32,37,32,101,109,112,
                        116,121,32,109,97,112,10,77,49,32,61,32,35,123,97,32,
                        61,62,32,60,60,34,104,101,108,108,111,34,62,62,125,44,
                        32,37,32,115,105,110,103,108,101,32,97,115,115,111,99,
                        105,97,116,105,111,110,32,119,105,116,104,32,108,105,
                        116,101,114,97,108,115,10,77,50,32,61,32,35,123,49,32,
                        61,62,32,50,44,32,98,32,61,62,32,98,125,44,32,32,32,
                        37,32,109,117,108,116,105,112,108,101,32,97,115,115,
                        111,99,105,97,116,105,111,110,115,32,119,105,116,104,
                        32,108,105,116,101,114,97,108,115,10,77,51,32,61,32,
                        35,123,107,32,61,62,32,123,65,44,66,125,125,44,32,32,
                        32,32,32,32,32,37,32,115,105,110,103,108,101,32,97,
                        115,115,111,99,105,97,116,105,111,110,32,119,105,116,
                        104,32,118,97,114,105,97,98,108,101,115,10,77,52,32,
                        61,32,35,123,123,34,119,34,44,32,49,125,32,61,62,32,
                        102,40,41,125,46,32,32,37,32,99,111,109,112,111,117,
                        110,100,32,107,101,121,32,97,115,115,111,99,105,97,
                        116,101,100,32,119,105,116,104,32,97,110,32,101,118,
                        97,108,117,97,116,101,100,32,101,120,112,114,101,115,
                        115,105,111,110]}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[5,72,101,114,101,44]}],0,false},
                      {text,[3,42,65,42]},
                      {sep,[{text,[3,97,110,100]}],0,false},
                      {text,[3,42,66,42]},
                      {sep,
                       [{text,
                         [23,97,114,101,32,97,110,121,32,101,120,112,114,101,
                          115,115,105,111,110,115,32,97,110,100]}],
                       0,false},
                      {text,[4,42,77,48,42]},
                      {sep,[{text,[7,116,104,114,111,117,103,104]}],0,false},
                      {text,[4,42,77,52,42]},
                      {sep,
                       [{text,
                         [28,97,114,101,32,116,104,101,32,114,101,115,117,108,
                          116,105,110,103,32,109,97,112,32,116,101,114,109,
                          115,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "CIf two matching keys are declared, the latter key takes precedence."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,[4,10,49,62,32]},
                      {text,
                       [18,35,123,49,32,61,62,32,97,44,32,49,32,61,62,32,98,
                        125,46]},
                      {text,
                       [15,10,35,123,49,32,61,62,32,98,32,125,10,50,62,32]},
                      {text,
                       [20,35,123,49,46,48,32,61,62,32,97,44,32,49,32,61,62,
                        32,98,125,46]},
                      {text,
                       [21,10,35,123,49,32,61,62,32,98,44,32,49,46,48,32,61,
                        62,32,97,125,10]}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [259,84,104,101,32,111,114,100,101,114,32,105,110,32,
                        119,104,105,99,104,32,116,104,101,32,101,120,112,114,
                        101,115,115,105,111,110,115,32,99,111,110,115,116,114,
                        117,99,116,105,110,103,32,116,104,101,32,107,101,121,
                        115,32,40,97,110,100,32,116,104,101,105,114,32,97,115,
                        115,111,99,105,97,116,101,100,32,118,97,108,117,101,
                        115,41,32,97,114,101,32,101,118,97,108,117,97,116,101,
                        100,32,105,115,32,110,111,116,32,100,101,102,105,110,
                        101,100,46,32,84,104,101,32,115,121,110,116,97,99,116,
                        105,99,32,111,114,100,101,114,32,111,102,32,116,104,
                        101,32,107,101,121,45,118,97,108,117,101,32,112,97,
                        105,114,115,32,105,110,32,116,104,101,32,99,111,110,
                        115,116,114,117,99,116,105,111,110,32,105,115,32,111,
                        102,32,110,111,32,114,101,108,101,118,97,110,99,101,
                        44,32,101,120,99,101,112,116,32,105,110,32,116,104,
                        101,32,114,101,99,101,110,116,108,121,32,109,101,110,
                        116,105,111,110,101,100,32,99,97,115,101,32,111,102,
                        32,116,119,111,32,109,97,116,99,104,105,110,103,32,
                        107,101,121,115,46]}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [16,35,35,32,85,112,100,97,116,105,110,103,32,77,97,112,
                    115]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "7Updating a map has a similar syntax as constructing it."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [140,65,110,32,101,120,112,114,101,115,115,105,111,110,
                        32,100,101,102,105,110,105,110,103,32,116,104,101,32,
                        109,97,112,32,116,111,32,98,101,32,117,112,100,97,116,
                        101,100,44,32,105,115,32,112,117,116,32,105,110,32,
                        102,114,111,110,116,32,111,102,32,116,104,101,32,101,
                        120,112,114,101,115,115,105,111,110,32,100,101,102,
                        105,110,105,110,103,32,116,104,101,32,107,101,121,115,
                        32,116,111,32,98,101,32,117,112,100,97,116,101,100,32,
                        97,110,100,32,116,104,101,105,114,32,114,101,115,112,
                        101,99,116,105,118,101,32,118,97,108,117,101,115,58]}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,[{text,"\fM#{ K => V }"}],0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[4,72,101,114,101]}],0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,
                         [25,105,115,32,97,32,116,101,114,109,32,111,102,32,
                          116,121,112,101,32,109,97,112,32,97,110,100]}],
                       0,false},
                      {text,[3,42,75,42]},
                      {sep,[{text,[3,97,110,100]}],0,false},
                      {text,[3,42,86,42]},
                      {sep,
                       [{text,
                         [19,97,114,101,32,97,110,121,32,101,120,112,114,101,
                          115,115,105,111,110,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[6,73,102,32,107,101,121]}],0,false},
                      {text,[3,42,75,42]},
                      {sep,
                       [{text,
                         "Qdoes not match any existing key in the map, a new association is created from key"}],
                       0,false},
                      {text,[3,42,75,42]},
                      {sep,[{text,"\bto value"}],0,false},
                      {text,[3,42,86,42]},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[6,73,102,32,107,101,121]}],0,false},
                      {text,[3,42,75,42]},
                      {sep,
                       [{text,
                         [30,109,97,116,99,104,101,115,32,97,110,32,101,120,
                          105,115,116,105,110,103,32,107,101,121,32,105,110,
                          32,109,97,112]}],
                       0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,
                         "3, its associated value is replaced by the new value"}],
                       0,false},
                      {text,[3,42,86,42]},
                      {sep,
                       [{text,
                         "@. In both cases, the evaluated map expression returns a new map."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[2,73,102]}],0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,"(is not of type map, an exception of type"}],
                       0,false},
                      {text,"\b*badmap*"},
                      {sep,[{text,"\nis thrown."}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "?To only update an existing value, the following syntax is used:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,[{text,"\rM#{ K := V } "}],0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[4,72,101,114,101]}],0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,
                         [22,105,115,32,97,32,116,101,114,109,32,111,102,32,
                          116,121,112,101,32,109,97,112,44]}],
                       0,false},
                      {text,[3,42,86,42]},
                      {sep,
                       [{text,
                         [20,105,115,32,97,110,32,101,120,112,114,101,115,115,
                          105,111,110,32,97,110,100]}],
                       0,false},
                      {text,[3,42,75,42]},
                      {sep,
                       [{text,
                         "5is an expression that evaluates to an existing key in"}],
                       0,false},
                      {text,[3,42,77,42]},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[6,73,102,32,107,101,121]}],0,false},
                      {text,[3,42,75,42]},
                      {sep,
                       [{text,"'does not match any existing keys in map"}],
                       0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,
                         [22,44,32,97,110,32,101,120,99,101,112,116,105,111,
                          110,32,111,102,32,116,121,112,101]}],
                       0,false},
                      {text,"\b*badarg*"},
                      {sep,
                       [{text,"*is triggered at runtime. If a matching key"}],
                       0,false},
                      {text,[3,42,75,42]},
                      {sep,
                       [{text,
                         [17,105,115,32,112,114,101,115,101,110,116,32,105,
                          110,32,109,97,112]}],
                       0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,
                         "3, its associated value is replaced by the new value"}],
                       0,false},
                      {text,[3,42,86,42]},
                      {sep,
                       [{text,
                         "5, and the evaluated map expression returns a new map."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[2,73,102]}],0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,"(is not of type map, an exception of type"}],
                       0,false},
                      {text,"\b*badmap*"},
                      {sep,[{text,"\nis thrown."}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,[{sep,[{text,"\r**Examples:**"}],0,false}],0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,
                       "Â¥\nM0 = #{},\nM1 = M0#{a => 0},\nM2 = M1#{a => 1, b => 2},\nM3 = M2#{\"function\" => fun() -> f() end},\nM4 = M3#{a := 2, b := 3}.  % 'a' and 'b' was added in `M1` and `M2`."}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[4,72,101,114,101]}],0,false},
                      {text,[4,42,77,48,42]},
                      {sep,[{text,"\eis any map. It follows that"}],0,false},
                      {text,"\n*M1 .. M4*"},
                      {sep,
                       [{text,
                         [17,97,114,101,32,109,97,112,115,32,97,115,32,119,
                          101,108,108,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[4,77,111,114,101]}],0,false},
                      {text,"\r**Examples:**"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,[4,10,49,62,32]},
                      {text,[14,77,32,61,32,35,123,49,32,61,62,32,97,125,46]},
                      {text,
                       [15,10,35,123,49,32,61,62,32,97,32,125,10,50,62,32]},
                      {text,"\rM#{1.0 => b}."},
                      {text,
                       [25,10,35,123,49,32,61,62,32,97,44,32,49,46,48,32,61,
                        62,32,98,125,46,10,51,62,32]},
                      {text,"\vM#{1 := b}."},
                      {text,[14,10,35,123,49,32,61,62,32,98,125,10,52,62,32]},
                      {text,"\rM#{1.0 := b}."},
                      {text,"\"\n** exception error: bad argument\n"}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [256,65,115,32,105,110,32,99,111,110,115,116,114,117,
                        99,116,105,111,110,44,32,116,104,101,32,111,114,100,
                        101,114,32,105,110,32,119,104,105,99,104,32,116,104,
                        101,32,107,101,121,32,97,110,100,32,118,97,108,117,
                        101,32,101,120,112,114,101,115,115,105,111,110,115,32,
                        97,114,101,32,101,118,97,108,117,97,116,101,100,32,
                        105,115,32,110,111,116,32,100,101,102,105,110,101,100,
                        46,32,84,104,101,32,115,121,110,116,97,99,116,105,99,
                        32,111,114,100,101,114,32,111,102,32,116,104,101,32,
                        107,101,121,45,118,97,108,117,101,32,112,97,105,114,
                        115,32,105,110,32,116,104,101,32,117,112,100,97,116,
                        101,32,105,115,32,111,102,32,110,111,32,114,101,108,
                        101,118,97,110,99,101,44,32,101,120,99,101,112,116,32,
                        105,110,32,116,104,101,32,99,97,115,101,32,119,104,
                        101,114,101,32,116,119,111,32,107,101,121,115,32,109,
                        97,116,99,104,46,32,73,110,32,116,104,97,116,32,99,97,
                        115,101,44,32,116,104,101,32,108,97,116,116,101,114,
                        32,118,97,108,117,101,32,105,115,32,117,115,101,100,
                        46]}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [19,35,35,32,77,97,112,115,32,105,110,32,80,97,116,116,101,
                    114,110,115]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "@Matching of key-value associations from maps is done as follows:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,
                       [15,35,123,32,75,32,58,61,32,86,32,125,32,61,32,77]}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,[4,72,101,114,101]}],0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,
                         [19,105,115,32,97,110,121,32,109,97,112,46,32,84,104,
                          101,32,107,101,121]}],
                       0,false},
                      {text,[3,42,75,42]},
                      {sep,
                       [{text,
                         "7must be an expression with bound variables or literals."}],
                       0,false},
                      {text,[3,42,86,42]},
                      {sep,
                       [{text,
                         ":can be any pattern with either bound or unbound variables."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [15,73,102,32,116,104,101,32,118,97,114,105,97,98,
                          108,101]}],
                       0,false},
                      {text,[3,42,86,42]},
                      {sep,
                       [{text,
                         "Ais unbound, it becomes bound to the value associated with the key"}],
                       0,false},
                      {text,[3,42,75,42]},
                      {sep,
                       [{text,
                         [29,44,32,119,104,105,99,104,32,109,117,115,116,32,
                          101,120,105,115,116,32,105,110,32,116,104,101,32,
                          109,97,112]}],
                       0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,
                         [17,46,32,73,102,32,116,104,101,32,118,97,114,105,97,
                          98,108,101]}],
                       0,false},
                      {text,[3,42,86,42]},
                      {sep,
                       [{text,
                         "1is bound, it must match the value associated with"}],
                       0,false},
                      {text,[3,42,75,42]},
                      {sep,[{text,[2,105,110]}],0,false},
                      {text,[3,42,77,42]},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,[4,10,49,62,32]},
                      {text,
                       [24,77,32,61,32,35,123,34,116,117,112,108,101,34,32,61,
                        62,32,123,49,44,50,125,125,46]},
                      {text,
                       [24,10,35,123,34,116,117,112,108,101,34,32,61,62,32,
                        123,49,44,50,125,125,10,50,62,32]},
                      {text,
                       [24,35,123,34,116,117,112,108,101,34,32,58,61,32,123,
                        49,44,66,125,125,32,61,32,77,46]},
                      {text,
                       [24,10,35,123,34,116,117,112,108,101,34,32,61,62,32,
                        123,49,44,50,125,125,10,51,62,32]},
                      {text,[2,66,46]},
                      {text,[3,10,50,46]}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [19,84,104,105,115,32,98,105,110,100,115,32,118,97,
                          114,105,97,98,108,101]}],
                       0,false},
                      {text,[3,42,66,42]},
                      {sep,[{text,"\nto integer"}],0,false},
                      {text,[3,42,50,42]},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "7Similarly, multiple values from the map can be matched:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,
                       [31,35,123,32,75,49,32,58,61,32,86,49,44,32,46,46,44,
                        32,75,110,32,58,61,32,86,110,32,125,32,61,32,77]}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,[{text,"\tHere keys"}],0,false},
                      {text,"\n*K1 .. Kn*"},
                      {sep,
                       [{text,
                         "Nare any expressions with literals or bound variables. If all keys exist in map"}],
                       0,false},
                      {text,[3,42,77,42]},
                      {sep,
                       [{text,
                         [18,44,32,97,108,108,32,118,97,114,105,97,98,108,101,
                          115,32,105,110]}],
                       0,false},
                      {text,"\n*V1 .. Vn*"},
                      {sep,
                       [{text,
                         "=is matched to the associated values of their respective keys."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "EIf the matching conditions are not met, the match fails, either with:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{sep,[{text,[1,65]}],0,false},
                           {text,"\n*badmatch*"},
                           {sep,[{text,"\nexception."}],0,false}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,
                            "MThis is if it is used in the context of the match operator as in the example."}],
                          0,false}],
                        0,true},
                       null},
                      null}}],
                   0,false}],
                 0,false},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,
                     "TOr resulting in the next clause being tested in function heads and case expressions."}],
                   0,false}],
                 0,false}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text," Matching in maps only allows for"}],
                       0,false},
                      {text,[4,42,58,61,42]},
                      {sep,
                       [{text,
                         [30,97,115,32,100,101,108,105,109,105,116,101,114,
                          115,32,111,102,32,97,115,115,111,99,105,97,116,105,
                          111,110,115,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "BThe order in which keys are declared in matching has no relevance."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "UDuplicate keys are allowed in matching and match each pattern associated to the keys:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,
                     [{text,
                       [25,35,123,32,75,32,58,61,32,86,49,44,32,75,32,58,61,
                        32,86,50,32,125,32,61,32,77]}],
                     0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "aMatching an expression against an empty map literal, matches its type but no variables are bound:"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {above,
                   {above,
                    {text,[3,96,96,96]},
                    {sep,[{text,"\n#{} = Expr"}],0,true}},
                   {text,[3,96,96,96]}},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,")This expression matches if the expression"}],
                       0,false},
                      {text,[6,42,69,120,112,114,42]},
                      {sep,
                       [{text,
                         "4is of type map, otherwise it fails with an exception"}],
                       0,false},
                      {text,"\n*badmatch*"},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {text,
                     [18,35,35,32,77,97,116,99,104,105,110,103,32,83,121,110,
                      116,97,120]},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         ";Matching of literals as keys are allowed in function heads:"}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {above,
                     {above,
                      {text,[3,96,96,96]},
                      {sep,
                       [{text,
                         [257,10,37,37,32,111,110,108,121,32,115,116,97,114,
                          116,32,105,102,32,110,111,116,95,115,116,97,114,116,
                          101,100,10,104,97,110,100,108,101,95,99,97,108,108,
                          40,115,116,97,114,116,44,32,70,114,111,109,44,32,35,
                          123,32,115,116,97,116,101,32,58,61,32,110,111,116,
                          95,115,116,97,114,116,101,100,32,125,32,61,32,83,41,
                          32,45,62,10,46,46,46,10,32,32,32,32,123,114,101,112,
                          108,121,44,32,111,107,44,32,83,35,123,32,115,116,97,
                          116,101,32,58,61,32,115,116,97,114,116,32,125,125,
                          59,10,10,37,37,32,111,110,108,121,32,99,104,97,110,
                          103,101,32,105,102,32,115,116,97,114,116,101,100,10,
                          104,97,110,100,108,101,95,99,97,108,108,40,99,104,
                          97,110,103,101,44,32,70,114,111,109,44,32,35,123,32,
                          115,116,97,116,101,32,58,61,32,115,116,97,114,116,
                          32,125,32,61,32,83,41,32,45,62,10,46,46,46,10,32,32,
                          32,32,123,114,101,112,108,121,44,32,111,107,44,32,
                          83,35,123,32,115,116,97,116,101,32,58,61,32,99,104,
                          97,110,103,101,100,32,125,125,59]}],
                       0,true}},
                     {text,[3,96,96,96]}},
                    null},
                   null}}],
                0,false}],
              0,false},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {text,
                   [17,35,35,32,77,97,112,115,32,105,110,32,71,117,97,114,100,
                    115]},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "UMaps are allowed in guards as long as all subexpressions are valid guard expressions."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,[{text,"\eTwo guard BIFs handle maps:"}],0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,"#[is_map/1](../erts/erlang#is_map/1)"},
                    {sep,[{text,[6,105,110,32,116,104,101]}],0,false},
                    {text,"\b*erlang*"},
                    {sep,[{text,[6,109,111,100,117,108,101]}],0,false}],
                   0,false}],
                 0,false},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,"'[map_size/1](../erts/erlang#map_size/1)"},
                    {sep,[{text,[6,105,110,32,116,104,101]}],0,false},
                    {text,"\b*erlang*"},
                    {sep,[{text,[6,109,111,100,117,108,101]}],0,false}],
                   0,false}],
                 0,false}}],
              0,false}],
            0,false}},
          {sep,
           [{text,"#<a name=\"bit_syntax\">bit_syntax</a>"},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [25,35,35,32,66,105,116,32,83,121,110,116,97,120,32,69,120,
                 112,114,101,115,115,105,111,110,115]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [18,60,60,62,62,10,60,60,69,49,44,46,46,46,44,69,110,62,
                     62]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,"\fEach element"}],0,false},
                   {text,[4,42,69,105,42]},
                   {sep,[{text,"\vspecifies a"}],0,false},
                   {text,"\v**segment**"},
                   {sep,
                    [{text,
                      [31,111,102,32,116,104,101,32,98,105,116,32,115,116,114,
                       105,110,103,46,32,69,97,99,104,32,101,108,101,109,101,
                       110,116]}],
                    0,false},
                   {text,[4,42,69,105,42]},
                   {sep,
                    [{text,"#is a value, followed by an optional"}],
                    0,false},
                   {text,
                    [19,42,42,115,105,122,101,32,101,120,112,114,101,115,115,
                     105,111,110,42,42]},
                   {sep,
                    [{text,
                      [15,97,110,100,32,97,110,32,111,112,116,105,111,110,97,
                       108]}],
                    0,false},
                   {text,
                    [23,42,42,116,121,112,101,32,115,112,101,99,105,102,105,
                     101,114,32,108,105,115,116,42,42]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "`\nEi = Value |\n     Value:Size |\n     Value/TypeSpecifierList |\n     Value:Size/TypeSpecifierList"}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,"\"Used in a bit string construction,"}],
                    0,false},
                   {text,[7,42,86,97,108,117,101,42]},
                   {sep,
                    [{text,
                      "Â¥is an expression that is to evaluate to an integer, float, or bit string. If the expression is not a single literal or variable, it is to be enclosed in parentheses."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [30,85,115,101,100,32,105,110,32,97,32,98,105,116,32,
                       115,116,114,105,110,103,32,109,97,116,99,104,105,110,
                       103,44]}],
                    0,false},
                   {text,[7,42,86,97,108,117,101,42]},
                   {sep,
                    [{text,
                      "4must be a variable, or an integer, float, or string."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "6Notice that, for example, using a string literal as in"}],
                    0,false},
                   {text,"\v*<<\"abc\">>*"},
                   {sep,
                    [{text,
                      [22,105,115,32,115,121,110,116,97,99,116,105,99,32,115,
                       117,103,97,114,32,102,111,114]}],
                    0,false},
                   {text,[14,42,60,60,36,97,44,36,98,44,36,99,62,62,42]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,"\"Used in a bit string construction,"}],
                    0,false},
                   {text,[6,42,83,105,122,101,42]},
                   {sep,
                    [{text,
                      "3is an expression that is to evaluate to an integer."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [30,85,115,101,100,32,105,110,32,97,32,98,105,116,32,
                       115,116,114,105,110,103,32,109,97,116,99,104,105,110,
                       103,44]}],
                    0,false},
                   {text,[6,42,83,105,122,101,42]},
                   {sep,
                    [{text,
                      "6must be an integer, or a variable bound to an integer."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,"\fThe value of"}],0,false},
                   {text,[6,42,83,105,122,101,42]},
                   {sep,
                    [{text,
                      "jspecifies the size of the segment in units (see below). The default value depends on the type (see below):"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,[{text,[3,70,111,114]}],0,false},
                  {text,"\t*integer*"},
                  {sep,[{text,"\bit is 8."}],0,false}],
                 0,false}],
               0,false},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,[{text,[3,70,111,114]}],0,false},
                  {text,[7,42,102,108,111,97,116,42]},
                  {sep,[{text,"\tit is 64."}],0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[3,70,111,114]}],0,false},
                 {text,"\b*binary*"},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,"\v*bitstring*"},
                 {sep,
                  [{text,"%it is the whole binary or bit string."}],
                  0,false}],
                0,false}],
              0,false}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [155,73,110,32,109,97,116,99,104,105,110,103,44,32,116,
                     104,105,115,32,100,101,102,97,117,108,116,32,118,97,108,
                     117,101,32,105,115,32,111,110,108,121,32,118,97,108,105,
                     100,32,102,111,114,32,116,104,101,32,108,97,115,116,32,
                     101,108,101,109,101,110,116,46,32,65,108,108,32,111,116,
                     104,101,114,32,98,105,116,32,115,116,114,105,110,103,32,
                     111,114,32,98,105,110,97,114,121,32,101,108,101,109,101,
                     110,116,115,32,105,110,32,116,104,101,32,109,97,116,99,
                     104,105,110,103,32,109,117,115,116,32,104,97,118,101,32,
                     97,32,115,105,122,101,32,115,112,101,99,105,102,105,99,
                     97,116,105,111,110,46]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[7,70,111,114,32,116,104,101]}],0,false},
                   {text,[6,42,117,116,102,56,42]},
                   {sep,[{text,[1,44]}],0,false},
                   {text,[7,42,117,116,102,49,54,42]},
                   {sep,[{text,[5,44,32,97,110,100]}],0,false},
                   {text,[7,42,117,116,102,51,50,42]},
                   {sep,[{text,[6,116,121,112,101,115,44]}],0,false},
                   {text,[6,42,83,105,122,101,42]},
                   {sep,
                    [{text,
                      "amust not be given. The size of the segment is implicitly determined by the type and value itself."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [19,42,84,121,112,101,83,112,101,99,105,102,105,101,114,
                     76,105,115,116,42]},
                   {sep,
                    [{text,
                      "~is a list of type specifiers, in any order, separated by hyphens (-). Default values are used for any omitted type specifiers."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,
              {text,[4,60,100,108,62]},
              {nest,4,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,
                            [{sep,
                              [{text,[4,84,121,112,101]},
                               {sep,[{text,[1,61]}],0,false},
                               {text,[7,105,110,116,101,103,101,114]},
                               {sep,[{text,[1,124]}],0,false},
                               {text,[5,102,108,111,97,116]},
                               {sep,[{text,[1,124]}],0,false},
                               {text,[6,98,105,110,97,114,121]},
                               {sep,[{text,[1,124]}],0,false},
                               {text,[5,98,121,116,101,115]},
                               {sep,[{text,[1,124]}],0,false},
                               {text,"\tbitstring"},
                               {sep,[{text,[1,124]}],0,false},
                               {text,[4,98,105,116,115]},
                               {sep,[{text,[1,124]}],0,false},
                               {text,[4,117,116,102,56]},
                               {sep,[{text,[1,124]}],0,false},
                               {text,[5,117,116,102,49,54]},
                               {sep,[{text,[1,124]}],0,false},
                               {text,[5,117,116,102,51,50]}],
                              0,false}],
                            0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,100,62]},
                           {sep,
                            [{sep,
                              [{text,
                                [14,84,104,101,32,100,101,102,97,117,108,116,
                                 32,105,115]}],
                              0,false},
                             {text,[7,105,110,116,101,103,101,114]},
                             {sep,[{text,[1,46]}],0,false},
                             {text,[5,98,121,116,101,115]},
                             {sep,
                              [{text,
                                [18,105,115,32,97,32,115,104,111,114,116,104,
                                 97,110,100,32,102,111,114]}],
                              0,false},
                             {text,[6,98,105,110,97,114,121]},
                             {sep,[{text,[3,97,110,100]}],0,false},
                             {text,[4,98,105,116,115]},
                             {sep,
                              [{text,
                                [18,105,115,32,97,32,115,104,111,114,116,104,
                                 97,110,100,32,102,111,114]}],
                              0,false},
                             {text,"\tbitstring"},
                             {sep,
                              [{text,
                                "*. See below for more information about the"}],
                              0,false},
                             {text,[3,117,116,102]},
                             {sep,
                              [{text,[6,116,121,112,101,115,46]}],
                              0,false}],
                            0,false},
                           {text,[5,60,47,100,100,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,116,62]},
                          {sep,
                           [{sep,
                             [{text,"\nSignedness"},
                              {sep,[{text,[1,61]}],0,false},
                              {text,[6,115,105,103,110,101,100]},
                              {sep,[{text,[1,124]}],0,false},
                              {text,"\bunsigned"}],
                             0,false}],
                           0,false},
                          {text,[5,60,47,100,116,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,100,62]},
                         {sep,
                          [{sep,
                            [{text,
                              ".Only matters for matching and when the type is"}],
                            0,false},
                           {text,[7,105,110,116,101,103,101,114]},
                           {sep,
                            [{text,
                              [16,46,32,84,104,101,32,100,101,102,97,117,108,
                               116,32,105,115]}],
                            0,false},
                           {text,"\bunsigned"},
                           {sep,[{text,[1,46]}],0,false}],
                          0,false},
                         {text,[5,60,47,100,100,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,116,62]},
                        {sep,
                         [{sep,
                           [{text,"\nEndianness"},
                            {sep,[{text,[1,61]}],0,false},
                            {text,[3,98,105,103]},
                            {sep,[{text,[1,124]}],0,false},
                            {text,[6,108,105,116,116,108,101]},
                            {sep,[{text,[1,124]}],0,false},
                            {text,[6,110,97,116,105,118,101]}],
                           0,false}],
                         0,false},
                        {text,[5,60,47,100,116,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,100,62]},
                       {sep,
                        [{sep,
                          [{text,
                            "Ã¥Native-endian means that the endianness is resolved at load time to be either big-endian or little-endian, depending on what is native for the CPU that the Erlang machine is run on. Endianness only matters when the Type is either"}],
                          0,false},
                         {text,[7,105,110,116,101,103,101,114]},
                         {sep,[{text,[1,44]}],0,false},
                         {text,[5,117,116,102,49,54]},
                         {sep,[{text,[1,44]}],0,false},
                         {text,[5,117,116,102,51,50]},
                         {sep,[{text,[4,44,32,111,114]}],0,false},
                         {text,[5,102,108,111,97,116]},
                         {sep,
                          [{text,
                            [16,46,32,84,104,101,32,100,101,102,97,117,108,
                             116,32,105,115]}],
                          0,false},
                         {text,[3,98,105,103]},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false},
                       {text,[5,60,47,100,100,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,116,62]},
                      {sep,
                       [{sep,
                         [{text,[4,85,110,105,116]},
                          {sep,[{text,[1,61]}],0,false},
                          {text,
                           [19,117,110,105,116,58,73,110,116,101,103,101,114,
                            76,105,116,101,114,97,108]}],
                         0,false}],
                       0,false},
                      {text,[5,60,47,100,116,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {sep,
                      [{sep,
                        [{text,
                          ".The allowed range is 1..256. Defaults to 1 for"}],
                        0,false},
                       {text,[7,105,110,116,101,103,101,114]},
                       {sep,[{text,[1,44]}],0,false},
                       {text,[5,102,108,111,97,116]},
                       {sep,[{text,[5,44,32,97,110,100]}],0,false},
                       {text,"\tbitstring"},
                       {sep,
                        [{text,
                          [14,44,32,97,110,100,32,116,111,32,56,32,102,111,
                           114]}],
                        0,false},
                       {text,[6,98,105,110,97,114,121]},
                       {sep,
                        [{text,
                          "/. No unit specifier must be given for the types"}],
                        0,false},
                       {text,[4,117,116,102,56]},
                       {sep,[{text,[1,44]}],0,false},
                       {text,[5,117,116,102,49,54]},
                       {sep,[{text,[5,44,32,97,110,100]}],0,false},
                       {text,[5,117,116,102,51,50]},
                       {sep,[{text,[1,46]}],0,false}],
                      0,false},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}}}},
             {text,[5,60,47,100,108,62]}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,"\fThe value of"}],0,false},
                   {text,[6,42,83,105,122,101,42]},
                   {sep,
                    [{text,
                      "Dmultiplied with the unit gives the number of bits. A segment of type"}],
                    0,false},
                   {text,"\b*binary*"},
                   {sep,
                    [{text,
                      "/must have a size that is evenly divisible by 8."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,
                  [15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
                 {sep,
                  [{text,[4,32,32,32,32]},
                   {sep,
                    [{sep,
                      [{above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "'When constructing binaries, if the size"}],
                               0,false},
                              {text,[3,42,78,42]},
                              {sep,
                               [{text,
                                 [141,111,102,32,97,110,32,105,110,116,101,
                                  103,101,114,32,115,101,103,109,101,110,116,
                                  32,105,115,32,116,111,111,32,115,109,97,108,
                                  108,32,116,111,32,99,111,110,116,97,105,110,
                                  32,116,104,101,32,103,105,118,101,110,32,
                                  105,110,116,101,103,101,114,44,32,116,104,
                                  101,32,109,111,115,116,32,115,105,103,110,
                                  105,102,105,99,97,110,116,32,98,105,116,115,
                                  32,111,102,32,116,104,101,32,105,110,116,
                                  101,103,101,114,32,97,114,101,32,115,105,
                                  108,101,110,116,108,121,32,100,105,115,99,
                                  97,114,100,101,100,32,97,110,100,32,111,110,
                                  108,121,32,116,104,101]}],
                               0,false},
                              {text,[3,42,78,42]},
                              {sep,
                               [{text,
                                 "/least significant bits are put into the binary."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}}],
                      0,false}],
                    0,true}],
                  0,false}},
                {text,[0]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,"\tThe types"}],0,false},
                   {text,[6,42,117,116,102,56,42]},
                   {sep,[{text,[1,44]}],0,false},
                   {text,[7,42,117,116,102,49,54,42]},
                   {sep,[{text,[5,44,32,97,110,100]}],0,false},
                   {text,[7,42,117,116,102,51,50,42]},
                   {sep,
                    [{text,"\"specifies encoding/decoding of the"}],
                    0,false},
                   {text,"!**Unicode Transformation Format**"},
                   {sep,
                    [{text,"*s UTF-8, UTF-16, and UTF-32, respectively."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text," When constructing a segment of a"}],0,false},
                   {text,[5,42,117,116,102,42]},
                   {sep,[{text,[5,116,121,112,101,44]}],0,false},
                   {text,[7,42,86,97,108,117,101,42]},
                   {sep,
                    [{text,
                      "]must be an integer in the range 0..16#D7FF or 16#E000....16#10FFFF. Construction fails with a"}],
                    0,false},
                   {text,"\b*badarg*"},
                   {sep,[{text,"\fexception if"}],0,false},
                   {text,[7,42,86,97,108,117,101,42]},
                   {sep,
                    [{text,
                      "^is outside the allowed ranges. The size of the resulting binary segment depends on the type or"}],
                    0,false},
                   {text,[7,42,86,97,108,117,101,42]},
                   {sep,[{text,"\n, or both:"}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,[{text,[3,70,111,114]}],0,false},
                  {text,[6,42,117,116,102,56,42]},
                  {sep,[{text,[1,44]}],0,false},
                  {text,[7,42,86,97,108,117,101,42]},
                  {sep,
                   [{text,
                     [24,105,115,32,101,110,99,111,100,101,100,32,105,110,32,
                      49,45,52,32,98,121,116,101,115,46]}],
                   0,false}],
                 0,false}],
               0,false},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,[{text,[3,70,111,114]}],0,false},
                  {text,[7,42,117,116,102,49,54,42]},
                  {sep,[{text,[1,44]}],0,false},
                  {text,[7,42,86,97,108,117,101,42]},
                  {sep,[{text,"\eis encoded in 2 or 4 bytes."}],0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,[{text,[3,70,111,114]}],0,false},
                 {text,[7,42,117,116,102,51,50,42]},
                 {sep,[{text,[1,44]}],0,false},
                 {text,[7,42,86,97,108,117,101,42]},
                 {sep,[{text," is always be encoded in 4 bytes."}],0,false}],
                0,false}],
              0,false}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "_When constructing, a literal string can be given followed by one of the UTF types, for example:"}],
                    0,false},
                   {text,
                    [16,42,60,60,34,97,98,99,34,47,117,116,102,56,62,62,42]},
                   {sep,
                    [{text,
                      [28,119,104,105,99,104,32,105,115,32,115,121,110,116,97,
                       99,116,105,99,32,115,117,103,97,114,32,102,111,114]}],
                    0,false},
                   {text,
                    [29,42,60,60,36,97,47,117,116,102,56,44,36,98,47,117,116,
                     102,56,44,36,99,47,117,116,102,56,62,62,42]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,"$A successful match of a segment of a"}],
                    0,false},
                   {text,[5,42,117,116,102,42]},
                   {sep,
                    [{text,
                      [140,116,121,112,101,44,32,114,101,115,117,108,116,115,
                       32,105,110,32,97,110,32,105,110,116,101,103,101,114,32,
                       105,110,32,116,104,101,32,114,97,110,103,101,32,48,46,
                       46,49,54,35,68,55,70,70,32,111,114,32,49,54,35,69,48,
                       48,48,46,46,49,54,35,49,48,70,70,70,70,46,32,84,104,
                       101,32,109,97,116,99,104,32,102,97,105,108,115,32,105,
                       102,32,116,104,101,32,114,101,116,117,114,110,101,100,
                       32,118,97,108,117,101,32,102,97,108,108,115,32,111,117,
                       116,115,105,100,101,32,116,104,111,115,101,32,114,97,
                       110,103,101,115,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [17,65,32,115,101,103,109,101,110,116,32,111,102,32,116,
                       121,112,101]}],
                    0,false},
                   {text,[6,42,117,116,102,56,42]},
                   {sep,
                    [{text,
                      [141,109,97,116,99,104,101,115,32,49,45,52,32,98,121,
                       116,101,115,32,105,110,32,116,104,101,32,98,105,110,97,
                       114,121,44,32,105,102,32,116,104,101,32,98,105,110,97,
                       114,121,32,97,116,32,116,104,101,32,109,97,116,99,104,
                       32,112,111,115,105,116,105,111,110,32,99,111,110,116,
                       97,105,110,115,32,97,32,118,97,108,105,100,32,85,84,70,
                       45,56,32,115,101,113,117,101,110,99,101,46,32,40,83,
                       101,101,32,82,70,67,45,51,54,50,57,32,111,114,32,116,
                       104,101,32,85,110,105,99,111,100,101,32,115,116,97,110,
                       100,97,114,100,46,41]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [17,65,32,115,101,103,109,101,110,116,32,111,102,32,116,
                       121,112,101]}],
                    0,false},
                   {text,[7,42,117,116,102,49,54,42]},
                   {sep,
                    [{text,
                      "Ãcan match 2 or 4 bytes in the binary. The match fails if the binary at the match position does not contain a legal UTF-16 encoding of a Unicode code point. (See RFC-2781 or the Unicode standard.)"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [17,65,32,115,101,103,109,101,110,116,32,111,102,32,116,
                       121,112,101]}],
                    0,false},
                   {text,[7,42,117,116,102,51,50,42]},
                   {sep,
                    [{text,
                      "5can match 4 bytes in the binary in the same way as an"}],
                    0,false},
                   {text,"\t*integer*"},
                   {sep,
                    [{text,
                      "nsegment matches 32 bits. The match fails if the resulting integer is outside the legal ranges mentioned above."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,[{sep,[{text,"\r**Examples:**"}],0,false}],0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,[4,10,49,62,32]},
                   {text,
                    [19,66,105,110,49,32,61,32,60,60,49,44,49,55,44,52,50,62,
                     62,46]},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\b<1,17,42"},
                   {text,[1,62]},
                   {text,[5,62,10,50,62,32]},
                   {text,
                    [17,66,105,110,50,32,61,32,60,60,34,97,98,99,34,62,62,46]},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\t<97,98,99"},
                   {text,[1,62]},
                   {text,[5,62,10,51,62,32]},
                   {text,
                    [22,66,105,110,51,32,61,32,60,60,49,44,49,55,44,52,50,58,
                     49,54,62,62,46]},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\n<1,17,0,42"},
                   {text,[1,62]},
                   {text,[5,62,10,52,62,32]},
                   {text,
                    [30,60,60,65,44,66,44,67,58,49,54,62,62,32,61,32,60,60,49,
                     44,49,55,44,52,50,58,49,54,62,62,46]},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\n<1,17,0,42"},
                   {text,[1,62]},
                   {text,[5,62,10,53,62,32]},
                   {text,[2,67,46]},
                   {text,[7,10,52,50,10,54,62,32]},
                   {text,
                    [30,60,60,68,58,49,54,44,69,44,70,62,62,32,61,32,60,60,49,
                     44,49,55,44,52,50,58,49,54,62,62,46]},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\n<1,17,0,42"},
                   {text,[1,62]},
                   {text,[5,62,10,55,62,32]},
                   {text,[2,68,46]},
                   {text,"\b\n273\n8> "},
                   {text,[2,70,46]},
                   {text,[7,10,52,50,10,57,62,32]},
                   {text," <<G,H/binary>> = <<1,17,42:16>>."},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\n<1,17,0,42"},
                   {text,[1,62]},
                   {text,[6,62,10,49,48,62,32]},
                   {text,[2,72,46]},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\b<17,0,42"},
                   {text,[1,62]},
                   {text,[6,62,10,49,49,62,32]},
                   {text,"#<<G,J/bitstring>> = <<1,17,42:12>>."},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\f<1,17,2,10:4"},
                   {text,[1,62]},
                   {text,[6,62,10,49,50,62,32]},
                   {text,[2,74,46]},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\n<17,2,10:4"},
                   {text,[1,62]},
                   {text,[6,62,10,49,51,62,32]},
                   {text,[14,60,60,49,48,50,52,47,117,116,102,56,62,62,46]},
                   {text,[1,10]},
                   {text,[1,60]},
                   {text,"\b<208,128"},
                   {text,[1,62]},
                   {text,[2,62,10]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "1Notice that bit string patterns cannot be nested."}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [18,78,111,116,105,99,101,32,97,108,115,111,32,116,104,
                       97,116,32,34]}],
                    0,false},
                   {text,"\t*B=<<1>>*"},
                   {sep,
                    [{text,
                      [21,34,32,105,115,32,105,110,116,101,114,112,114,101,
                       116,101,100,32,97,115,32,34]}],
                    0,false},
                   {text,"\n*B =<<1>>*"},
                   {sep,
                    [{text,
                      "K\" which is a syntax error. The correct way is to write a space after '=': \""}],
                    0,false},
                   {text,"\n*B= <<1>>*"},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [29,77,111,114,101,32,101,120,97,109,112,108,101,115,32,
                       97,114,101,32,112,114,111,118,105,100,101,100,32,105,
                       110]}],
                    0,false},
                   {text,"$[Programming Examples](./bit_syntax)"},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}},
         {sep,
          [{text,
            [23,60,97,32,110,97,109,101,61,34,102,117,110,115,34,62,102,117,
             110,115,60,47,97,62]},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,
               [18,35,35,32,70,117,110,32,69,120,112,114,101,115,115,105,111,
                110,115]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "Âª\nfun\n    [Name](Pattern11,...,Pattern1N) [when GuardSeq1] ->\n              Body1;\n    ...;\n    [Name](PatternK1,...,PatternKN) [when GuardSeqK] ->\n              BodyK\nend"}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,"(A fun expression begins with the keyword"}],
                   0,false},
                  {text,[5,42,102,117,110,42]},
                  {sep,
                   [{text,
                     [25,97,110,100,32,101,110,100,115,32,119,105,116,104,32,
                      116,104,101,32,107,101,121,119,111,114,100]}],
                   0,false},
                  {text,[5,42,101,110,100,42]},
                  {sep,
                   [{text,
                     "<. Between them is to be a function declaration, similar to a"}],
                   0,false},
                  {text,"2[regular function declaration](./functions#syntax)"},
                  {sep,
                   [{text,
                     "L, except that the function name is optional and is to be a variable, if any."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "ÂºVariables in a fun head shadow the function name and both shadow variables in the function clause surrounding the fun expression. Variables bound in a fun body are local to the fun body."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "8The return value of the expression is the resulting fun."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,[{sep,[{text,"\r**Examples:**"}],0,false}],0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,[4,10,49,62,32]},
                  {text,
                   [26,70,117,110,49,32,61,32,102,117,110,32,40,88,41,32,45,
                    62,32,88,43,49,32,101,110,100,46]},
                  {text,[5,10,35,70,117,110]},
                  {text,
                   [20,60,101,114,108,95,101,118,97,108,46,54,46,51,57,48,55,
                    52,53,52,54]},
                  {text,[5,62,10,50,62,32]},
                  {text,"\bFun1(2)."},
                  {text,[6,10,51,10,51,62,32]},
                  {text,".Fun2 = fun (X) when X>=5 -> gt; (X) -> lt end."},
                  {text,[5,10,35,70,117,110]},
                  {text,
                   [20,60,101,114,108,95,101,118,97,108,46,54,46,51,57,48,55,
                    52,53,52,54]},
                  {text,[5,62,10,52,62,32]},
                  {text,"\bFun2(7)."},
                  {text,[7,10,103,116,10,53,62,32]},
                  {text,
                   "CFun3 = fun Fact(1) -> 1; Fact(X) when X > 1 -> X * Fact(X - 1) end."},
                  {text,[5,10,35,70,117,110]},
                  {text,
                   [20,60,101,114,108,95,101,118,97,108,46,54,46,51,57,48,55,
                    52,53,52,54]},
                  {text,[5,62,10,54,62,32]},
                  {text,"\bFun3(4)."},
                  {text,[3,10,50,52]}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"/The following fun expressions are also allowed:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,"%\nfun Name/Arity\nfun Module:Name/Arity"}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,[2,73,110]}],0,false},
                  {text,"\f*Name/Arity*"},
                  {sep,[{text,[1,44]}],0,false},
                  {text,[6,42,78,97,109,101,42]},
                  {sep,
                   [{text,
                     [14,105,115,32,97,110,32,97,116,111,109,32,97,110,100]}],
                   0,false},
                  {text,[7,42,65,114,105,116,121,42]},
                  {sep,
                   [{text,
                     [14,105,115,32,97,110,32,105,110,116,101,103,101,114,
                      46]}],
                   0,false},
                  {text,"\f*Name/Arity*"},
                  {sep,
                   [{text,
                     "Omust specify an existing local function. The expression is syntactic sugar for:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,"/\nfun (Arg1,...,ArgN) -> Name(Arg1,...,ArgN) end"}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,[2,73,110]}],0,false},
                  {text,
                   [19,42,77,111,100,117,108,101,58,78,97,109,101,47,65,114,
                    105,116,121,42]},
                  {sep,[{text,[1,44]}],0,false},
                  {text,"\b*Module*"},
                  {sep,[{text,[5,44,32,97,110,100]}],0,false},
                  {text,[6,42,78,97,109,101,42]},
                  {sep,[{text,"\rare atoms and"}],0,false},
                  {text,[7,42,65,114,105,116,121,42]},
                  {sep,
                   [{text,",is an integer. Starting from Erlang/OTP R15,"}],
                   0,false},
                  {text,"\b*Module*"},
                  {sep,[{text,[1,44]}],0,false},
                  {text,[6,42,78,97,109,101,42]},
                  {sep,[{text,[5,44,32,97,110,100]}],0,false},
                  {text,[7,42,65,114,105,116,121,42]},
                  {sep,
                   [{text,
                     "Gcan also be variables. A fun defined in this way refers to the function"}],
                   0,false},
                  {text,[6,42,78,97,109,101,42]},
                  {sep,[{text,"\nwith arity"}],0,false},
                  {text,[7,42,65,114,105,116,121,42]},
                  {sep,[{text,[6,105,110,32,116,104,101]}],0,false},
                  {text,"\n**latest**"},
                  {sep,
                   [{text,
                     [17,118,101,114,115,105,111,110,32,111,102,32,109,111,
                      100,117,108,101]}],
                   0,false},
                  {text,"\b*Module*"},
                  {sep,
                   [{text,
                     "_. A fun defined in this way is not dependent on the code for the module in which it is defined."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [29,77,111,114,101,32,101,120,97,109,112,108,101,115,32,
                      97,114,101,32,112,114,111,118,105,100,101,100,32,105,
                      110]}],
                   0,false},
                  {text,
                   [30,91,80,114,111,103,114,97,109,109,105,110,103,32,69,120,
                    97,109,112,108,101,115,93,40,46,47,102,117,110,115,41]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}},
        {sep,
         [{text,
           [25,60,97,32,110,97,109,101,61,34,99,97,116,99,104,34,62,99,97,116,
            99,104,60,47,97,62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [18,35,35,32,67,97,116,99,104,32,97,110,100,32,84,104,114,111,
               119]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,[{text,"\v\ncatch Expr"}],0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [20,82,101,116,117,114,110,115,32,116,104,101,32,118,97,
                     108,117,101,32,111,102]}],
                  0,false},
                 {text,[6,42,69,120,112,114,42]},
                 {sep,
                  [{text,
                    "Xunless an exception occurs during the evaluation. In that case, the exception is caught."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [23,70,111,114,32,101,120,99,101,112,116,105,111,110,115,
                     32,111,102,32,99,108,97,115,115]}],
                  0,false},
                 {text,[7,42,101,114,114,111,114,42]},
                 {sep,[{text,"\e, that is, run-time errors,"}],0,false},
                 {text,
                  [25,42,123,39,69,88,73,84,39,44,123,82,101,97,115,111,110,
                   44,83,116,97,99,107,125,125,42]},
                 {sep,[{text,"\fis returned."}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [23,70,111,114,32,101,120,99,101,112,116,105,111,110,115,
                     32,111,102,32,99,108,97,115,115]}],
                  0,false},
                 {text,[6,42,101,120,105,116,42]},
                 {sep,
                  [{text,
                    [26,44,32,116,104,97,116,32,105,115,44,32,116,104,101,32,
                     99,111,100,101,32,99,97,108,108,101,100]}],
                  0,false},
                 {text,"\f*exit(Term)*"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,[15,42,123,39,69,88,73,84,39,44,84,101,114,109,125,42]},
                 {sep,[{text,"\fis returned."}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [23,70,111,114,32,101,120,99,101,112,116,105,111,110,115,
                     32,111,102,32,99,108,97,115,115]}],
                  0,false},
                 {text,[7,42,116,104,114,111,119,42]},
                 {sep,
                  [{text,
                    [25,44,32,116,104,97,116,32,105,115,32,116,104,101,32,99,
                     111,100,101,32,99,97,108,108,101,100]}],
                  0,false},
                 {text,"\r*throw(Term)*"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,[6,42,84,101,114,109,42]},
                 {sep,[{text,"\fis returned."}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"\b*Reason*"},
                 {sep,
                  [{text,"/depends on the type of error that occurred, and"}],
                  0,false},
                 {text,[7,42,83,116,97,99,107,42]},
                 {sep,
                  [{text,"*is the stack of recent function calls, see"}],
                  0,false},
                 {text,"%[Exit Reasons](./errors#exit_reasons)"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,[{sep,[{text,"\r**Examples:**"}],0,false}],0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,49,62,32]},
                 {text,"\ncatch 1+2."},
                 {text,[6,10,51,10,50,62,32]},
                 {text,"\ncatch 1+a."},
                 {text,
                  [26,10,123,39,69,88,73,84,39,44,123,98,97,100,97,114,105,
                   116,104,44,91,46,46,46,93,125,125]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\vNotice that"}],0,false},
                 {text,[7,42,99,97,116,99,104,42]},
                 {sep,
                  [{text,
                    "ohas low precedence and catch subexpressions often needs to be enclosed in a block expression or in parentheses:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,51,62,32]},
                 {text,[14,65,32,61,32,99,97,116,99,104,32,49,43,50,46]},
                 {text,"*\n** 1: syntax error before: 'catch' **\n4> "},
                 {text,[16,65,32,61,32,40,99,97,116,99,104,32,49,43,50,41,46]},
                 {text,[2,10,51]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[7,84,104,101,32,66,73,70]}],0,false},
                 {text,"\f*throw(Any)*"},
                 {sep,
                  [{text,
                    "Ocan be used for non-local return from a function. It must be evaluated within a"}],
                  0,false},
                 {text,[7,42,99,97,116,99,104,42]},
                 {sep,
                  [{text,
                    [25,44,32,119,104,105,99,104,32,114,101,116,117,114,110,
                     115,32,116,104,101,32,118,97,108,117,101]}],
                  0,false},
                 {text,[5,42,65,110,121,42]},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,53,62,32]},
                 {text,
                  [19,99,97,116,99,104,32,116,104,114,111,119,40,104,101,108,
                   108,111,41,46]},
                 {text,[6,10,104,101,108,108,111]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[2,73,102]}],0,false},
                 {text,"\t*throw/1*"},
                 {sep,[{text,"\"is not evaluated within a catch, a"}],0,false},
                 {text,"\t*nocatch*"},
                 {sep,
                  [{text,
                    [22,114,117,110,45,116,105,109,101,32,101,114,114,111,114,
                     32,111,99,99,117,114,115,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}},
       {sep,
        [{text,
          [21,60,97,32,110,97,109,101,61,34,116,114,121,34,62,116,114,121,60,
           47,97,62]},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,[6,35,35,32,84,114,121]},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Ã\ntry Exprs\ncatch\n    Class1:ExceptionPattern1[:Stacktrace] [when ExceptionGuardSeq1] ->\n        ExceptionBody1;\n    ClassN:ExceptionPatternN[:Stacktrace] [when ExceptionGuardSeqN] ->\n        ExceptionBodyN\nend"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [25,84,104,105,115,32,105,115,32,97,110,32,101,110,104,97,
                    110,99,101,109,101,110,116,32,111,102]}],
                 0,false},
                {text,[15,91,99,97,116,99,104,93,40,35,99,97,116,99,104,41]},
                {sep,
                 [{text,
                   [30,46,32,73,116,32,103,105,118,101,115,32,116,104,101,32,
                    112,111,115,115,105,98,105,108,105,116,121,32,116,111,
                    58]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {text,"0Distinguish between different exception classes."}],
            0,false},
           {sep,
            [{text,[1,42]},{text,"'Choose to handle only the desired ones."}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{sep,[{text,"%Passing the others on to an enclosing"}],0,false},
              {text,[5,42,116,114,121,42]},
              {sep,[{text,[2,111,114]}],0,false},
              {text,[7,42,99,97,116,99,104,42]},
              {sep,
               [{text,
                 [31,44,32,111,114,32,116,111,32,100,101,102,97,117,108,116,
                  32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,
                  46]}],
               0,false}],
             0,false}],
           0,false}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text," Notice that although the keyword"}],0,false},
                {text,[7,42,99,97,116,99,104,42]},
                {sep,
                 [{text,
                   [14,105,115,32,117,115,101,100,32,105,110,32,116,104,101]}],
                 0,false},
                {text,[5,42,116,114,121,42]},
                {sep,
                 [{text,
                   [26,101,120,112,114,101,115,115,105,111,110,44,32,116,104,
                    101,114,101,32,105,115,32,110,111,116,32,97]}],
                 0,false},
                {text,[7,42,99,97,116,99,104,42]},
                {sep,
                 [{text,
                   [21,101,120,112,114,101,115,115,105,111,110,32,119,105,116,
                    104,105,110,32,116,104,101]}],
                 0,false},
                {text,[5,42,116,114,121,42]},
                {sep,[{text,"\vexpression."}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [23,73,116,32,114,101,116,117,114,110,115,32,116,104,101,
                    32,118,97,108,117,101,32,111,102]}],
                 0,false},
                {text,[7,42,69,120,112,114,115,42]},
                {sep,
                 [{text,
                   [26,40,97,32,115,101,113,117,101,110,99,101,32,111,102,32,
                    101,120,112,114,101,115,115,105,111,110,115]}],
                 0,false},
                {text,
                 [19,42,69,120,112,114,49,44,32,46,46,46,44,32,69,120,112,114,
                  78,42]},
                {sep,
                 [{text,
                   "i) unless an exception occurs during the evaluation. In that case the exception is caught and the patterns"}],
                 0,false},
                {text,
                 [18,42,69,120,99,101,112,116,105,111,110,80,97,116,116,101,
                  114,110,42]},
                {sep,
                 [{text,
                   [30,119,105,116,104,32,116,104,101,32,114,105,103,104,116,
                    32,101,120,99,101,112,116,105,111,110,32,99,108,97,115,
                    115]}],
                 0,false},
                {text,[7,42,67,108,97,115,115,42]},
                {sep,
                 [{text,
                   "jare sequentially matched against the caught exception. If a match succeeds and the optional guard sequence"}],
                 0,false},
                {text,
                 [19,42,69,120,99,101,112,116,105,111,110,71,117,97,114,100,
                  83,101,113,42]},
                {sep,
                 [{text,
                   [26,105,115,32,116,114,117,101,44,32,116,104,101,32,99,111,
                    114,114,101,115,112,111,110,100,105,110,103]}],
                 0,false},
                {text,
                 [15,42,69,120,99,101,112,116,105,111,110,66,111,100,121,42]},
                {sep,
                 [{text,"(is evaluated to become the return value."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\f*Stacktrace*"},
                {sep,
                 [{text,
                   [127,44,32,105,102,32,115,112,101,99,105,102,105,101,100,
                    44,32,109,117,115,116,32,98,101,32,116,104,101,32,110,97,
                    109,101,32,111,102,32,97,32,118,97,114,105,97,98,108,101,
                    32,40,110,111,116,32,97,32,112,97,116,116,101,114,110,41,
                    46,32,84,104,101,32,115,116,97,99,107,32,116,114,97,99,
                    101,32,105,115,32,98,111,117,110,100,32,116,111,32,116,
                    104,101,32,118,97,114,105,97,98,108,101,32,119,104,101,
                    110,32,116,104,101,32,99,111,114,114,101,115,112,111,110,
                    100,105,110,103]}],
                 0,false},
                {text,
                 [18,42,69,120,99,101,112,116,105,111,110,80,97,116,116,101,
                  114,110,42]},
                {sep,[{text,"\bmatches."}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"+If an exception occurs during evaluation of"}],
                 0,false},
                {text,[7,42,69,120,112,114,115,42]},
                {sep,
                 [{text,
                   [24,98,117,116,32,116,104,101,114,101,32,105,115,32,110,
                    111,32,109,97,116,99,104,105,110,103]}],
                 0,false},
                {text,
                 [18,42,69,120,99,101,112,116,105,111,110,80,97,116,116,101,
                  114,110,42]},
                {sep,[{text,"\fof the right"}],0,false},
                {text,[7,42,67,108,97,115,115,42]},
                {sep,
                 [{text,
                   "<with a true guard sequence, the exception is passed on as if"}],
                 0,false},
                {text,[7,42,69,120,112,114,115,42]},
                {sep,
                 [{text,
                   [26,104,97,100,32,110,111,116,32,98,101,101,110,32,101,110,
                    99,108,111,115,101,100,32,105,110,32,97]}],
                 0,false},
                {text,[5,42,116,114,121,42]},
                {sep,[{text,"\vexpression."}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"+If an exception occurs during evaluation of"}],
                 0,false},
                {text,
                 [15,42,69,120,99,101,112,116,105,111,110,66,111,100,121,42]},
                {sep,
                 [{text,
                   [19,44,32,105,116,32,105,115,32,110,111,116,32,99,97,117,
                    103,104,116,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [21,73,116,32,105,115,32,97,108,108,111,119,101,100,32,116,
                    111,32,111,109,105,116]}],
                 0,false},
                {text,[7,42,67,108,97,115,115,42]},
                {sep,[{text,[3,97,110,100]}],0,false},
                {text,"\f*Stacktrace*"},
                {sep,[{text,"\f. An omitted"}],0,false},
                {text,[7,42,67,108,97,115,115,42]},
                {sep,
                 [{text,
                   [16,105,115,32,115,104,111,114,116,104,97,110,100,32,102,
                    111,114]}],
                 0,false},
                {text,[7,42,116,104,114,111,119,42]},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Â©\ntry Exprs\ncatch\n    ExceptionPattern1 [when ExceptionGuardSeq1] ->\n        ExceptionBody1;\n    ExceptionPatternN [when ExceptionGuardSeqN] ->\n        ExceptionBodyN\nend"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[3,84,104,101]}],0,false},
                {text,[5,42,116,114,121,42]},
                {sep,
                 [{text,
                   [22,101,120,112,114,101,115,115,105,111,110,32,99,97,110,
                    32,104,97,118,101,32,97,110]}],
                 0,false},
                {text,[4,42,111,102,42]},
                {sep,[{text,"\bsection:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [325,10,116,114,121,32,69,120,112,114,115,32,111,102,10,32,
                  32,32,32,80,97,116,116,101,114,110,49,32,91,119,104,101,110,
                  32,71,117,97,114,100,83,101,113,49,93,32,45,62,10,32,32,32,
                  32,32,32,32,32,66,111,100,121,49,59,10,32,32,32,32,46,46,46,
                  59,10,32,32,32,32,80,97,116,116,101,114,110,78,32,91,119,
                  104,101,110,32,71,117,97,114,100,83,101,113,78,93,32,45,62,
                  10,32,32,32,32,32,32,32,32,66,111,100,121,78,10,99,97,116,
                  99,104,10,32,32,32,32,67,108,97,115,115,49,58,69,120,99,101,
                  112,116,105,111,110,80,97,116,116,101,114,110,49,91,58,83,
                  116,97,99,107,116,114,97,99,101,93,32,91,119,104,101,110,32,
                  69,120,99,101,112,116,105,111,110,71,117,97,114,100,83,101,
                  113,49,93,32,45,62,10,32,32,32,32,32,32,32,32,69,120,99,101,
                  112,116,105,111,110,66,111,100,121,49,59,10,32,32,32,32,46,
                  46,46,59,10,32,32,32,32,67,108,97,115,115,78,58,69,120,99,
                  101,112,116,105,111,110,80,97,116,116,101,114,110,78,91,58,
                  83,116,97,99,107,116,114,97,99,101,93,32,91,119,104,101,110,
                  32,69,120,99,101,112,116,105,111,110,71,117,97,114,100,83,
                  101,113,78,93,32,45,62,10,32,32,32,32,32,32,32,32,69,120,99,
                  101,112,116,105,111,110,66,111,100,121,78,10,101,110,100]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [20,73,102,32,116,104,101,32,101,118,97,108,117,97,116,105,
                    111,110,32,111,102]}],
                 0,false},
                {text,[7,42,69,120,112,114,115,42]},
                {sep,
                 [{text,"+succeeds without an exception, the patterns"}],
                 0,false},
                {text,"\t*Pattern*"},
                {sep,
                 [{text,
                   "Dare sequentially matched against the result in the same way as for a"}],
                 0,false},
                {text,"\r[case](#case)"},
                {sep,
                 [{text,"0expression, except that if the matching fails, a"}],
                 0,false},
                {text,"\f*try_clause*"},
                {sep,
                 [{text,
                   [22,114,117,110,45,116,105,109,101,32,101,114,114,111,114,
                    32,111,99,99,117,114,115,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"/An exception occurring during the evaluation of"}],
                 0,false},
                {text,[6,42,66,111,100,121,42]},
                {sep,
                 [{text,
                   [14,105,115,32,110,111,116,32,99,97,117,103,104,116,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[3,84,104,101]}],0,false},
                {text,[5,42,116,114,121,42]},
                {sep,
                 [{text,"(expression can also be augmented with an"}],
                 0,false},
                {text,[7,42,97,102,116,101,114,42]},
                {sep,
                 [{text,
                   ";section, intended to be used for cleanup with side effects:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [345,10,116,114,121,32,69,120,112,114,115,32,111,102,10,32,
                  32,32,32,80,97,116,116,101,114,110,49,32,91,119,104,101,110,
                  32,71,117,97,114,100,83,101,113,49,93,32,45,62,10,32,32,32,
                  32,32,32,32,32,66,111,100,121,49,59,10,32,32,32,32,46,46,46,
                  59,10,32,32,32,32,80,97,116,116,101,114,110,78,32,91,119,
                  104,101,110,32,71,117,97,114,100,83,101,113,78,93,32,45,62,
                  10,32,32,32,32,32,32,32,32,66,111,100,121,78,10,99,97,116,
                  99,104,10,32,32,32,32,67,108,97,115,115,49,58,69,120,99,101,
                  112,116,105,111,110,80,97,116,116,101,114,110,49,91,58,83,
                  116,97,99,107,116,114,97,99,101,93,32,91,119,104,101,110,32,
                  69,120,99,101,112,116,105,111,110,71,117,97,114,100,83,101,
                  113,49,93,32,45,62,10,32,32,32,32,32,32,32,32,69,120,99,101,
                  112,116,105,111,110,66,111,100,121,49,59,10,32,32,32,32,46,
                  46,46,59,10,32,32,32,32,67,108,97,115,115,78,58,69,120,99,
                  101,112,116,105,111,110,80,97,116,116,101,114,110,78,91,58,
                  83,116,97,99,107,116,114,97,99,101,93,32,91,119,104,101,110,
                  32,69,120,99,101,112,116,105,111,110,71,117,97,114,100,83,
                  101,113,78,93,32,45,62,10,32,32,32,32,32,32,32,32,69,120,99,
                  101,112,116,105,111,110,66,111,100,121,78,10,97,102,116,101,
                  114,10,32,32,32,32,65,102,116,101,114,66,111,100,121,10,101,
                  110,100]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\v*AfterBody*"},
                {sep,
                 [{text,
                   [25,105,115,32,101,118,97,108,117,97,116,101,100,32,97,102,
                    116,101,114,32,101,105,116,104,101,114]}],
                 0,false},
                {text,[6,42,66,111,100,121,42]},
                {sep,[{text,[2,111,114]}],0,false},
                {text,
                 [15,42,69,120,99,101,112,116,105,111,110,66,111,100,121,42]},
                {sep,
                 [{text,"-, no matter which one. The evaluated value of"}],
                 0,false},
                {text,"\v*AfterBody*"},
                {sep,[{text," is lost; the return value of the"}],0,false},
                {text,[5,42,116,114,121,42]},
                {sep,
                 [{text,
                   [30,101,120,112,114,101,115,115,105,111,110,32,105,115,32,
                    116,104,101,32,115,97,109,101,32,119,105,116,104,32,97,
                    110]}],
                 0,false},
                {text,[7,42,97,102,116,101,114,42]},
                {sep,
                 [{text,
                   [19,115,101,99,116,105,111,110,32,97,115,32,119,105,116,
                    104,111,117,116,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"0Even if an exception occurs during evaluation of"}],
                 0,false},
                {text,[6,42,66,111,100,121,42]},
                {sep,[{text,[2,111,114]}],0,false},
                {text,
                 [15,42,69,120,99,101,112,116,105,111,110,66,111,100,121,42]},
                {sep,[{text,[1,44]}],0,false},
                {text,"\v*AfterBody*"},
                {sep,
                 [{text,
                   ";is evaluated. In this case the exception is passed on after"}],
                 0,false},
                {text,"\v*AfterBody*"},
                {sep,
                 [{text,"-has been evaluated, so the exception from the"}],
                 0,false},
                {text,[5,42,116,114,121,42]},
                {sep,
                 [{text,
                   [30,101,120,112,114,101,115,115,105,111,110,32,105,115,32,
                    116,104,101,32,115,97,109,101,32,119,105,116,104,32,97,
                    110]}],
                 0,false},
                {text,[7,42,97,102,116,101,114,42]},
                {sep,
                 [{text,
                   [19,115,101,99,116,105,111,110,32,97,115,32,119,105,116,
                    104,111,117,116,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"+If an exception occurs during evaluation of"}],
                 0,false},
                {text,"\v*AfterBody*"},
                {sep,
                 [{text,
                   [31,105,116,115,101,108,102,44,32,105,116,32,105,115,32,
                    110,111,116,32,99,97,117,103,104,116,46,32,83,111,32,105,
                    102]}],
                 0,false},
                {text,"\v*AfterBody*"},
                {sep,[{text,"\"is evaluated after an exception in"}],0,false},
                {text,[7,42,69,120,112,114,115,42]},
                {sep,[{text,[1,44]}],0,false},
                {text,[6,42,66,111,100,121,42]},
                {sep,[{text,[4,44,32,111,114]}],0,false},
                {text,
                 [15,42,69,120,99,101,112,116,105,111,110,66,111,100,121,42]},
                {sep,
                 [{text,
                   "7, that exception is lost and masked by the exception in"}],
                 0,false},
                {text,"\v*AfterBody*"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[3,84,104,101]}],0,false},
                {text,[4,42,111,102,42]},
                {sep,[{text,[1,44]}],0,false},
                {text,[7,42,99,97,116,99,104,42]},
                {sep,[{text,[5,44,32,97,110,100]}],0,false},
                {text,[7,42,97,102,116,101,114,42]},
                {sep,
                 [{text,
                   "9sections are all optional, as long as there is at least a"}],
                 0,false},
                {text,[7,42,99,97,116,99,104,42]},
                {sep,[{text,[5,111,114,32,97,110]}],0,false},
                {text,[7,42,97,102,116,101,114,42]},
                {sep,[{text,"#section. So the following are valid"}],0,false},
                {text,[5,42,116,114,121,42]},
                {sep,[{text,"\fexpressions:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Ã\ntry Exprs of \n    Pattern when GuardSeq -> \n        Body \nafter \n    AfterBody \nend\n\ntry Exprs\ncatch \n    ExpressionPattern -> \n        ExpressionBody\nafter\n    AfterBody\nend\n\ntry Exprs after AfterBody end"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\eNext is an example of using"}],0,false},
                {text,[7,42,97,102,116,101,114,42]},
                {sep,
                 [{text,
                   ":. This closes the file, even in the event of exceptions in"}],
                 0,false},
                {text,"\r*file:read/2*"},
                {sep,[{text,[5,111,114,32,105,110]}],0,false},
                {text,
                 [18,42,98,105,110,97,114,121,95,116,111,95,116,101,114,109,
                  47,49,42]},
                {sep,
                 [{text,",. The exceptions are the same as without the"}],
                 0,false},
                {text,[5,42,116,114,121,42]},
                {sep,[{text,[3,46,46,46]}],0,false},
                {text,[7,42,97,102,116,101,114,42]},
                {sep,[{text,[3,46,46,46]}],0,false},
                {text,[5,42,101,110,100,42]},
                {sep,[{text,"\vexpression:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Â¼\ntermize_file(Name) ->\n    {ok,F} = file:open(Name, [read,binary]),\n    try\n        {ok,Bin} = file:read(F, 1024*1024),\n        binary_to_term(Bin)\n    after\n        file:close(F)\n    end."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\eNext is an example of using"}],0,false},
                {text,[5,42,116,114,121,42]},
                {sep,[{text,"\nto emulate"}],0,false},
                {text,"\f*catch Expr*"},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "|\ntry Expr\ncatch\n    throw:Term -> Term;\n    exit:Reason -> {'EXIT',Reason}\n    error:Reason:Stk -> {'EXIT',{Reason,Stk}}\nend"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [28,35,35,32,80,97,114,101,110,116,104,101,115,105,122,101,100,32,
             69,120,112,114,101,115,115,105,111,110,115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,[{text,[7,10,40,69,120,112,114,41]}],0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,"0Parenthesized expressions are useful to override"}],
                0,false},
               {text,
                [29,91,111,112,101,114,97,116,111,114,32,112,114,101,99,101,
                 100,101,110,99,101,115,93,40,35,112,114,101,99,41]},
               {sep,
                [{text,"), for example, in arithmetic expressions:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,[4,10,49,62,32]},
               {text,"\n1 + 2 * 3."},
               {text,[6,10,55,10,50,62,32]},
               {text,"\f(1 + 2) * 3."},
               {text,[2,10,57]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [20,35,35,32,66,108,111,99,107,32,69,120,112,114,101,115,115,105,
            111,110,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,"%\nbegin\n   Expr1,\n   ...,\n   ExprN\nend"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [146,66,108,111,99,107,32,101,120,112,114,101,115,115,105,
                  111,110,115,32,112,114,111,118,105,100,101,32,97,32,119,97,
                  121,32,116,111,32,103,114,111,117,112,32,97,32,115,101,113,
                  117,101,110,99,101,32,111,102,32,101,120,112,114,101,115,
                  115,105,111,110,115,44,32,115,105,109,105,108,97,114,32,116,
                  111,32,97,32,99,108,97,117,115,101,32,98,111,100,121,46,32,
                  84,104,101,32,114,101,116,117,114,110,32,118,97,108,117,101,
                  32,105,115,32,116,104,101,32,118,97,108,117,101,32,111,102,
                  32,116,104,101,32,108,97,115,116,32,101,120,112,114,101,115,
                  115,105,111,110]}],
               0,false},
              {text,[7,42,69,120,112,114,78,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}},
    {sep,
     [{text,
       [21,60,97,32,110,97,109,101,61,34,108,99,115,34,62,108,99,115,60,47,97,
        62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [22,35,35,32,76,105,115,116,32,67,111,109,112,114,101,104,101,110,
           115,105,111,110,115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "Â¯List comprehensions is a feature of many modern functional programming languages. Subject to certain rules, they provide a succinct notation for generating elements in a list."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [153,76,105,115,116,32,99,111,109,112,114,101,104,101,110,115,
                 105,111,110,115,32,97,114,101,32,97,110,97,108,111,103,111,
                 117,115,32,116,111,32,115,101,116,32,99,111,109,112,114,101,
                 104,101,110,115,105,111,110,115,32,105,110,32,90,101,114,109,
                 101,108,111,45,70,114,97,110,107,101,108,32,115,101,116,32,
                 116,104,101,111,114,121,32,97,110,100,32,97,114,101,32,99,97,
                 108,108,101,100,32,90,70,32,101,120,112,114,101,115,115,105,
                 111,110,115,32,105,110,32,77,105,114,97,110,100,97,46,32,84,
                 104,101,121,32,97,114,101,32,97,110,97,108,111,103,111,117,
                 115,32,116,111,32,116,104,101]}],
              0,false},
             {text,[7,42,115,101,116,111,102,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\t*findall*"},
             {sep,
              [{text,
                [21,112,114,101,100,105,99,97,116,101,115,32,105,110,32,80,
                 114,111,108,111,103,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              ":List comprehensions are written with the following syntax:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,[{text,"$\n[Expr || Qualifier1,...,QualifierN]"}],0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[5,72,101,114,101,44]}],0,false},
             {text,[6,42,69,120,112,114,42]},
             {sep,[{text,"$is an arbitrary expression, and each"}],0,false},
             {text,"\v*Qualifier*"},
             {sep,[{text,"\"is either a generator or a filter."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,[{text,[1,65]}],0,false},
            {text,"\r**generator**"},
            {sep,
             [{text,[14,105,115,32,119,114,105,116,116,101,110,32,97,115,58]}],
             0,false},
            {above,{above,null,null},null},
            {sep,[{text,[2,194,160]}],0,false},
            {sep,[{text,[2,194,160]}],0,false},
            {text,
             [21,42,80,97,116,116,101,114,110,32,60,45,32,76,105,115,116,69,
              120,112,114,42]},
            {sep,[{text,[1,46]}],0,false},
            {above,{above,null,null},null},
            {text,"\n*ListExpr*"},
            {sep,
             [{text,
               ":must be an expression, which evaluates to a list of terms."}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,[{text,[1,65]}],0,false},
            {text,
             [24,42,42,98,105,116,32,115,116,114,105,110,103,32,103,101,110,
              101,114,97,116,111,114,42,42]},
            {sep,
             [{text,[14,105,115,32,119,114,105,116,116,101,110,32,97,115,58]}],
             0,false},
            {above,{above,null,null},null},
            {sep,[{text,[2,194,160]}],0,false},
            {sep,[{text,[2,194,160]}],0,false},
            {text,"#*BitstringPattern <= BitStringExpr*"},
            {sep,[{text,[1,46]}],0,false},
            {above,{above,null,null},null},
            {text,[15,42,66,105,116,83,116,114,105,110,103,69,120,112,114,42]},
            {sep,
             [{text,
               "6must be an expression, which evaluates to a bitstring."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,[{text,[1,65]}],0,false},
           {text,"\n**filter**"},
           {sep,[{text,"$is an expression, which evaluates to"}],0,false},
           {text,[6,42,116,114,117,101,42]},
           {sep,[{text,[2,111,114]}],0,false},
           {text,[7,42,102,97,108,115,101,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "vThe variables in the generator patterns, shadow variables in the function clause, surrounding the list comprehensions."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "TA list comprehension returns a list, where the elements are the result of evaluating"}],
              0,false},
             {text,[6,42,69,120,112,114,42]},
             {sep,
              [{text,
                "rfor each combination of generator list elements and bit string generator elements, for which all filters are true."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,
              [22,91,88,42,50,32,124,124,32,88,32,60,45,32,91,49,44,50,44,51,
               93,93,46]},
             {text,"\b\n[2,4,6]"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [140,87,104,101,110,32,116,104,101,114,101,32,97,114,101,32,
                 110,111,32,103,101,110,101,114,97,116,111,114,115,32,111,114,
                 32,98,105,116,32,115,116,114,105,110,103,32,103,101,110,101,
                 114,97,116,111,114,115,44,32,97,32,108,105,115,116,32,99,111,
                 109,112,114,101,104,101,110,115,105,111,110,32,114,101,116,
                 117,114,110,115,32,101,105,116,104,101,114,32,97,32,108,105,
                 115,116,32,119,105,116,104,32,111,110,101,32,101,108,101,109,
                 101,110,116,32,40,116,104,101,32,114,101,115,117,108,116,32,
                 111,102,32,101,118,97,108,117,97,116,105,110,103]}],
              0,false},
             {text,[6,42,69,120,112,114,42]},
             {sep,
              [{text,
                "5) if all filters are true or an empty list otherwise."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,
              [21,91,50,32,124,124,32,105,115,95,105,110,116,101,103,101,114,
               40,50,41,93,46]},
             {text,"\b\n[2]\n2> "},
             {text,
              [21,91,120,32,124,124,32,105,115,95,105,110,116,101,103,101,114,
               40,120,41,93,46]},
             {text,[3,10,91,93]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [29,77,111,114,101,32,101,120,97,109,112,108,101,115,32,97,
                 114,101,32,112,114,111,118,105,100,101,100,32,105,110]}],
              0,false},
             {text,".[Programming Examples.](./list_comprehensions)"}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [28,35,35,32,66,105,116,32,83,116,114,105,110,103,32,67,111,109,112,
          114,101,104,101,110,115,105,111,110,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [129,66,105,116,32,115,116,114,105,110,103,32,99,111,109,112,114,
              101,104,101,110,115,105,111,110,115,32,97,114,101,32,97,110,97,
              108,111,103,111,117,115,32,116,111,32,76,105,115,116,32,67,111,
              109,112,114,101,104,101,110,115,105,111,110,115,46,32,84,104,
              101,121,32,97,114,101,32,117,115,101,100,32,116,111,32,103,101,
              110,101,114,97,116,101,32,98,105,116,32,115,116,114,105,110,103,
              115,32,101,102,102,105,99,105,101,110,116,108,121,32,97,110,100,
              32,115,117,99,99,105,110,99,116,108,121,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "@Bit string comprehensions are written with the following syntax:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,"1\n<< BitStringExpr || Qualifier1,...,QualifierN >>"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,[15,42,66,105,116,83,116,114,105,110,103,69,120,112,114,42]},
            {sep,
             [{text,"2is an expression that evalutes to a bit string. If"}],
             0,false},
            {text,[15,42,66,105,116,83,116,114,105,110,103,69,120,112,114,42]},
            {sep,
             [{text,
               "<is a function call, it must be enclosed in parentheses. Each"}],
             0,false},
            {text,"\v*Qualifier*"},
            {sep,
             [{text,
               ":is either a generator, a bit string generator or a filter."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,[{text,[1,65]}],0,false},
           {text,"\r**generator**"},
           {sep,
            [{text,[14,105,115,32,119,114,105,116,116,101,110,32,97,115,58]}],
            0,false},
           {above,{above,null,null},null},
           {sep,[{text,[2,194,160]}],0,false},
           {sep,[{text,[2,194,160]}],0,false},
           {text,
            [21,42,80,97,116,116,101,114,110,32,60,45,32,76,105,115,116,69,
             120,112,114,42]},
           {sep,[{text,[1,46]}],0,false},
           {above,{above,null,null},null},
           {text,"\n*ListExpr*"},
           {sep,
            [{text,
              "8must be an expression that evaluates to a list of terms."}],
            0,false}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,[{text,[1,65]}],0,false},
           {text,
            [24,42,42,98,105,116,32,115,116,114,105,110,103,32,103,101,110,
             101,114,97,116,111,114,42,42]},
           {sep,
            [{text,[14,105,115,32,119,114,105,116,116,101,110,32,97,115,58]}],
            0,false},
           {above,{above,null,null},null},
           {sep,[{text,[2,194,160]}],0,false},
           {sep,[{text,[2,194,160]}],0,false},
           {text,"#*BitstringPattern <= BitStringExpr*"},
           {sep,[{text,[1,46]}],0,false},
           {above,{above,null,null},null},
           {text,[15,42,66,105,116,83,116,114,105,110,103,69,120,112,114,42]},
           {sep,
            [{text,"4must be an expression that evaluates to a bitstring."}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,[{text,[1,65]}],0,false},
          {text,"\n**filter**"},
          {sep,[{text,"\"is an expression that evaluates to"}],0,false},
          {text,[6,42,116,114,117,101,42]},
          {sep,[{text,[2,111,114]}],0,false},
          {text,[7,42,102,97,108,115,101,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "|The variables in the generator patterns, shadow variables in the function clause, surrounding the bit string comprehensions."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "lA bit string comprehension returns a bit string, which is created by concatenating the results of evaluating"}],
             0,false},
            {text,"\v*BitString*"},
            {sep,
             [{text,
               "Vfor each combination of bit string generator elements, for which all filters are true."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[4,10,49,62,32]},
            {text,"*<< << (X*2) >> || <<X>> <= << 1,2,3 >> >>."},
            {text,[1,10]},
            {text,[1,60]},
            {text,[6,60,50,44,52,44,54]},
            {text,[1,62]},
            {text,[1,62]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,77,111,114,101,32,101,120,97,109,112,108,101,115,32,97,114,
                101,32,112,114,111,118,105,100,101,100,32,105,110]}],
             0,false},
            {text,"%[Programming Examples.](./bit_syntax)"}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}},
  {sep,
   [{text,"\e<a name=\"guards\">guards</a>"},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [18,35,35,32,71,117,97,114,100,32,83,101,113,117,101,110,99,101,115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[1,65]}],0,false},
           {text,
            [18,42,42,103,117,97,114,100,32,115,101,113,117,101,110,99,101,42,
             42]},
           {sep,
            [{text,
              "Â©is a sequence of guards, separated by semicolon (;). The guard sequence is true if at least one of the guards is true. (The remaining guards, if any, are not evaluated.)"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [19,42,71,117,97,114,100,49,59,46,46,46,59,71,117,97,114,100,75,
             42]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[1,65]}],0,false},
           {text,"\t**guard**"},
           {sep,
            [{text,
              "ris a sequence of guard expressions, separated by comma (,). The guard is true if all guard expressions evaluate to"}],
            0,false},
           {text,[6,42,116,114,117,101,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,[{sep,[{text,"\e*GuardExpr1,...,GuardExprN*"}],0,false}],0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [16,84,104,101,32,115,101,116,32,111,102,32,118,97,108,105,
               100]}],
            0,false},
           {text,
            [21,42,42,103,117,97,114,100,32,101,120,112,114,101,115,115,105,
             111,110,115,42,42]},
           {sep,
            [{text,
              [269,40,115,111,109,101,116,105,109,101,115,32,99,97,108,108,
               101,100,32,103,117,97,114,100,32,116,101,115,116,115,41,32,105,
               115,32,97,32,115,117,98,115,101,116,32,111,102,32,116,104,101,
               32,115,101,116,32,111,102,32,118,97,108,105,100,32,69,114,108,
               97,110,103,32,101,120,112,114,101,115,115,105,111,110,115,46,
               32,84,104,101,32,114,101,97,115,111,110,32,102,111,114,32,114,
               101,115,116,114,105,99,116,105,110,103,32,116,104,101,32,115,
               101,116,32,111,102,32,118,97,108,105,100,32,101,120,112,114,
               101,115,115,105,111,110,115,32,105,115,32,116,104,97,116,32,
               101,118,97,108,117,97,116,105,111,110,32,111,102,32,97,32,103,
               117,97,114,100,32,101,120,112,114,101,115,115,105,111,110,32,
               109,117,115,116,32,98,101,32,103,117,97,114,97,110,116,101,101,
               100,32,116,111,32,98,101,32,102,114,101,101,32,111,102,32,115,
               105,100,101,32,101,102,102,101,99,116,115,46,32,86,97,108,105,
               100,32,103,117,97,114,100,32,101,120,112,114,101,115,115,105,
               111,110,115,32,97,114,101,32,116,104,101,32,102,111,108,108,
               111,119,105,110,103,58]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{sep,[{text,"\bThe atom"}],0,false},
              {text,[6,42,116,114,117,101,42]}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {text,
             "BOther constants (terms and bound variables), all regarded as false"}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,[{text,"$Calls to the BIFs specified in table"}],0,false},
             {text,
              [16,42,84,121,112,101,32,84,101,115,116,32,66,73,70,115,42]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {text,
           [16,84,101,114,109,32,99,111,109,112,97,114,105,115,111,110,115]}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {text,
          [22,65,114,105,116,104,109,101,116,105,99,32,101,120,112,114,101,
           115,115,105,111,110,115]}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {text,
         [19,66,111,111,108,101,97,110,32,101,120,112,114,101,115,115,105,111,
          110,115]}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{sep,[{text,"\eShort-circuit expressions ("}],0,false},
         {text,"\t*andalso*"},
         {sep,[{text,[1,47]}],0,false},
         {text,"\b*orelse*"},
         {sep,[{text,[1,41]}],0,false}],
        0,false}],
      0,false}},
    {text,"\vTODO: TABLE"},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "CNotice that most type test BIFs have older equivalents, without the"}],
            0,false},
           {text,[5,42,105,115,95,42]},
           {sep,
            [{text,
              "Ãprefix. These old BIFs are retained for backwards compatibility only and are not to be used in new code. They are also only allowed at top level. For example, they are not allowed in Boolean expressions in guards."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {text,"\vTODO: TABLE"},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [303,73,102,32,97,110,32,97,114,105,116,104,109,101,116,105,99,32,
             101,120,112,114,101,115,115,105,111,110,44,32,97,32,66,111,111,
             108,101,97,110,32,101,120,112,114,101,115,115,105,111,110,44,32,
             97,32,115,104,111,114,116,45,99,105,114,99,117,105,116,32,101,
             120,112,114,101,115,115,105,111,110,44,32,111,114,32,97,32,99,97,
             108,108,32,116,111,32,97,32,103,117,97,114,100,32,66,73,70,32,
             102,97,105,108,115,32,40,98,101,99,97,117,115,101,32,111,102,32,
             105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,115,
             41,44,32,116,104,101,32,101,110,116,105,114,101,32,103,117,97,
             114,100,32,102,97,105,108,115,46,32,73,102,32,116,104,101,32,103,
             117,97,114,100,32,119,97,115,32,112,97,114,116,32,111,102,32,97,
             32,103,117,97,114,100,32,115,101,113,117,101,110,99,101,44,32,
             116,104,101,32,110,101,120,116,32,103,117,97,114,100,32,105,110,
             32,116,104,101,32,115,101,113,117,101,110,99,101,32,40,116,104,
             97,116,32,105,115,44,32,116,104,101,32,103,117,97,114,100,32,102,
             111,108,108,111,119,105,110,103,32,116,104,101,32,110,101,120,
             116,32,115,101,109,105,99,111,108,111,110,41,32,105,115,32,101,
             118,97,108,117,97,116,101,100,46]}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{text,
    [23,60,97,32,110,97,109,101,61,34,112,114,101,99,34,62,112,114,101,99,60,
     47,97,62]},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [22,35,35,32,79,112,101,114,97,116,111,114,32,80,114,101,99,101,100,
        101,110,99,101]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"(Operator precedence in falling priority:"}],0,false}],
       0,true},
      null},
     null}},
   {text,"\vTODO: TABLE"},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "ÂªWhen evaluating an expression, the operator with the highest priority is evaluated first. Operators with the same priority are evaluated according to their associativity."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "FThe left associative arithmetic operators are evaluated left to right:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,[1,10]},
          {text,[17,54,32,43,32,53,32,42,32,52,32,45,32,51,32,47,32,50]},
          {text,[14,32,101,118,97,108,117,97,116,101,115,32,116,111,10]},
          {text,"\f6 + 20 - 1.5"},
          {text,[14,32,101,118,97,108,117,97,116,101,115,32,116,111,10]},
          {text,"\b26 - 1.5"},
          {text,[14,32,101,118,97,108,117,97,116,101,115,32,116,111,10]},
          {text,[4,50,52,46,53]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}}],
  0,false}}
