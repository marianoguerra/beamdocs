{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [24,35,32,80,101,114,102,111,114,109,97,110,99,101,32,99,111,109,112,
          97,114,105,115,111,110]},
        null},
       null}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"!## Comparison of encoder/decoders"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [389,84,104,101,32,77,101,103,97,99,111,47,72,46,50,52,56,32,
                115,116,97,110,100,97,114,100,32,100,101,102,105,110,101,115,
                32,98,111,116,104,32,97,32,112,108,97,105,110,32,116,101,120,
                116,32,101,110,99,111,100,105,110,103,32,97,110,100,32,97,32,
                98,105,110,97,114,121,32,101,110,99,111,100,105,110,103,32,40,
                65,83,78,46,49,32,66,69,82,41,32,97,110,100,32,119,101,32,104,
                97,118,101,32,105,109,112,108,101,109,101,110,116,101,100,32,
                101,110,99,111,100,101,114,115,32,97,110,100,32,100,101,99,
                111,100,101,114,115,32,102,111,114,32,98,111,116,104,46,32,87,
                101,32,100,111,32,115,117,112,112,108,121,32,97,32,98,117,110,
                99,104,32,111,102,32,100,105,102,102,101,114,101,110,116,32,
                101,110,99,111,100,105,110,103,47,100,101,99,111,100,105,110,
                103,32,109,111,100,117,108,101,115,32,97,110,100,32,116,104,
                101,32,117,115,101,114,32,109,97,121,32,105,110,32,102,97,99,
                116,32,105,109,112,108,101,109,101,110,116,32,116,104,101,105,
                114,32,111,119,110,32,40,108,105,107,101,32,111,117,114,32,
                101,114,108,95,100,105,115,116,32,109,111,100,117,108,101,41,
                46,32,85,115,105,110,103,32,97,32,110,111,110,45,115,116,97,
                110,100,97,114,100,32,101,110,99,111,100,105,110,103,32,102,
                111,114,109,97,116,32,104,97,115,32,105,116,115,32,111,98,118,
                105,111,117,115,32,100,114,97,119,98,97,99,107,115,44,32,98,
                117,116,32,109,97,121,32,98,101,32,117,115,101,102,117,108,32,
                105,110,32,115,111,109,101,32,99,111,110,102,105,103,117,114,
                97,116,105,111,110,115,46]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "ÛWe have made four different measurements of our Erlang/OTP implementation of the Megaco/H.248 protocol stack, in order to compare our different encoders/decoders. The result of each one is summarized in the table below."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [132,84,104,101,32,114,101,115,117,108,116,32,97,98,111,118,
                101,32,97,114,101,32,116,104,101,32,102,97,115,116,101,115,
                116,32,111,102,32,116,104,101,115,101,32,99,111,110,102,105,
                103,117,114,97,116,105,111,110,115,32,102,111,114,32,101,97,
                99,104,32,99,111,100,101,99,46,32,84,104,101,32,102,105,103,
                117,114,101,115,32,112,114,101,115,101,110,116,101,100,32,97,
                114,101,32,116,104,101,32,97,118,101,114,97,103,101,32,111,
                102,32,97,108,108,32,117,115,101,100,32,109,101,115,115,97,
                103,101,115,46]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [325,70,111,114,32,99,111,109,112,97,114,105,115,111,110,44,
                  32,97,108,115,111,32,105,110,99,108,117,100,101,100,32,97,
                  114,101,32,102,105,114,115,116,44,32,112,101,114,102,111,
                  114,109,97,110,99,101,32,102,105,103,117,114,101,115,32,119,
                  105,116,104,32,109,101,103,97,99,111,32,40,105,110,99,108,
                  117,100,105,110,103,32,116,104,101,32,109,101,97,115,117,
                  114,101,109,101,110,116,32,115,111,102,116,119,97,114,101,
                  41,32,97,110,100,32,97,115,110,49,32,97,112,112,108,105,99,
                  97,116,105,111,110,115,32,104,105,112,101,45,99,111,109,112,
                  105,108,101,100,32,40,115,101,99,111,110,100,32,102,105,103,
                  117,114,101,32,105,110,32,116,104,101,32,116,105,109,101,32,
                  99,111,108,117,109,110,115,44,32,110,111,116,101,32,116,104,
                  97,116,32,112,101,114,32,98,105,110,32,100,101,99,111,100,
                  101,32,104,97,100,32,115,111,109,101,32,105,115,115,117,101,
                  115,32,115,111,32,116,104,111,115,101,32,102,105,103,117,
                  114,101,115,32,97,114,101,32,110,111,116,32,105,110,99,108,
                  117,100,101,100,41,44,32,97,110,100,32,115,101,99,111,110,
                  100,44,32,112,101,114,102,111,114,109,97,110,99,101,32,102,
                  105,103,117,114,101,115,32,119,104,101,114,101,32,116,104,
                  101,32,102,108,101,120,32,100,114,105,118,101,114,32,119,97,
                  115,32,98,117,105,108,116,32,97,115]}],
               0,false},
              {text,
               [15,42,110,111,110,45,114,101,101,110,116,114,97,110,116,42]},
              {sep,
               [{text,
                 "wflex (third figure in the time columns, only valid for text codecs using the flex-scanner, figures within parenthesis)."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {text,"\vTODO: TABLE"}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,"%## System performance characteristics"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "mThis is primarily a way to show the effects of using the reentrant flex scanner instead of the non-reentrant."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "³As can be seen from the figures above there is no real difference between a non-reentrant and an reentrant flex scanner when it comes to the decode times of an individual message."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "dThe real difference is instead in system characteristics, which is best shown with the mstone1 test."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "¿When running SMP erlang on a multi-core machine the \"throughput\" is significantly higher. The mstone1 test is an extreme test, but it shows what is gained by using the reentrant flex-scanner."}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"4![MStone1 with mstone1.sh -d flex -s 4](mstone1.jpg)"}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"### Description of encoders/decoders"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [414,73,110,32,65,112,112,101,110,100,105,120,32,65,32,111,102,
              32,116,104,101,32,77,101,103,97,99,111,47,72,46,50,52,56,32,115,
              112,101,99,105,102,105,99,97,116,105,111,110,32,40,82,70,67,32,
              51,53,50,53,41,44,32,116,104,101,114,101,32,97,114,101,32,97,98,
              111,117,116,32,51,48,32,109,101,115,115,97,103,101,115,32,116,
              104,97,116,32,115,104,111,119,115,32,97,32,114,101,112,114,101,
              115,101,110,116,97,116,105,118,101,32,99,97,108,108,32,102,108,
              111,119,46,32,87,101,32,104,97,118,101,32,97,108,115,111,32,97,
              100,100,101,100,32,97,32,102,101,119,32,101,120,116,114,97,32,
              118,101,114,115,105,111,110,32,49,44,32,118,101,114,115,105,111,
              110,32,50,32,97,110,100,32,118,101,114,115,105,111,110,32,51,32,
              109,101,115,115,97,103,101,115,46,32,87,101,32,104,97,118,101,
              32,117,115,101,100,32,116,104,101,115,101,32,109,101,115,115,97,
              103,101,115,32,97,115,32,98,97,115,105,115,32,102,111,114,32,
              111,117,114,32,109,101,97,115,117,114,101,109,101,110,116,115,
              46,32,79,117,114,32,102,105,103,117,114,101,115,32,104,97,118,
              101,32,110,111,116,32,98,101,101,110,32,119,101,105,103,104,116,
              101,100,32,105,110,32,114,101,103,97,114,100,32,116,111,32,104,
              111,119,32,102,114,101,113,117,101,110,116,32,116,104,101,32,
              100,105,102,102,101,114,101,110,116,32,107,105,110,100,115,32,
              111,102,32,109,101,115,115,97,103,101,115,32,116,104,97,116,32,
              97,114,101,32,115,101,110,116,32,98,101,116,119,101,101,110,32,
              116,104,101,32,109,101,100,105,97,32,103,97,116,101,119,97,121,
              32,97,110,100,32,105,116,115,32,99,111,110,116,114,111,108,108,
              101,114,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"1The test compares the following encoder/decoders:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"\n**pretty**"},
             {sep,
              [{text,
                [330,45,32,112,114,101,116,116,121,32,112,114,105,110,116,101,
                 100,32,116,101,120,116,46,32,73,110,32,116,104,101,32,116,
                 101,120,116,32,101,110,99,111,100,105,110,103,44,32,116,104,
                 101,32,112,114,111,116,111,99,111,108,32,115,116,97,99,107,
                 32,105,109,112,108,101,109,101,110,116,111,114,115,32,104,97,
                 118,101,32,116,104,101,32,99,104,111,105,99,101,32,111,102,
                 32,117,115,105,110,103,32,97,32,109,105,120,32,111,102,32,
                 115,104,111,114,116,32,97,110,100,32,108,111,110,103,32,107,
                 101,121,119,111,114,100,115,46,32,73,116,32,105,115,32,97,
                 108,115,111,32,112,111,115,115,105,98,108,101,32,116,111,32,
                 97,100,100,32,119,104,105,116,101,32,115,112,97,99,101,115,
                 32,116,111,32,105,109,112,114,111,118,101,32,114,101,97,100,
                 97,98,105,108,105,116,121,46,32,84,104,101,32,112,114,101,
                 116,116,121,32,116,101,120,116,32,101,110,99,111,100,105,110,
                 103,32,117,116,105,108,105,122,101,115,32,108,111,110,103,32,
                 107,101,121,119,111,114,100,115,32,97,110,100,32,97,110,32,
                 105,110,100,101,110,116,97,116,105,111,110,32,115,116,121,
                 108,101,32,108,105,107,101,32,116,104,101,32,116,101,120,116,
                 32,101,120,97,109,112,108,101,115,32,105,110,32,116,104,101,
                 32,77,101,103,97,99,111,47,72,46,50,52,56,32,115,112,101,99,
                 105,102,105,99,97,116,105,111,110,46]}],
              0,false}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"\v**compact**"},
             {sep,
              [{text,
                "]- the compact text encoding uses the shortest possible keywords and no optional white spaces."}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[7,42,42,98,101,114,42,42]},
            {sep,[{text,"\f- ASN.1 BER."}],0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[7,42,42,112,101,114,42,42]},
           {sep,
            [{text,
              [145,45,32,65,83,78,46,49,32,80,69,82,46,32,78,111,116,32,115,
               116,97,110,100,97,114,100,105,122,101,100,32,97,115,32,97,32,
               118,97,108,105,100,32,77,101,103,97,99,111,47,72,46,50,52,56,
               32,101,110,99,111,100,105,110,103,44,32,98,117,116,32,105,110,
               99,108,117,100,101,100,32,102,111,114,32,116,104,101,32,109,97,
               116,116,101,114,32,111,102,32,99,111,109,112,108,101,116,101,
               110,101,115,115,32,97,115,32,105,116,115,32,101,110,99,111,100,
               105,110,103,32,105,115,32,101,120,116,114,101,109,101,108,121,
               32,99,111,109,112,97,99,116,46]}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,"\f**erl_dist**"},
          {sep,
           [{text,
             [307,45,32,69,114,108,97,110,103,39,115,32,110,97,116,105,118,
              101,32,100,105,115,116,114,105,98,117,116,105,111,110,32,102,
              111,114,109,97,116,46,32,78,111,116,32,115,116,97,110,100,97,
              114,100,105,122,101,100,32,97,115,32,97,32,118,97,108,105,100,
              32,77,101,103,97,99,111,47,72,46,50,52,56,32,101,110,99,111,100,
              105,110,103,44,32,98,117,116,32,105,110,99,108,117,100,101,100,
              32,97,115,32,97,32,114,101,102,101,114,101,110,99,101,32,100,
              117,101,32,116,111,32,105,116,115,32,119,101,108,108,32,107,110,
              111,119,110,32,112,101,114,102,111,114,109,97,110,99,101,32,99,
              104,97,114,97,99,116,101,114,105,115,116,105,99,115,46,32,69,
              114,108,97,110,103,32,105,115,32,97,32,100,121,110,97,109,105,
              99,97,108,108,121,32,116,121,112,101,100,32,108,97,110,103,117,
              97,103,101,32,97,110,100,32,97,110,121,32,69,114,108,97,110,103,
              32,100,97,116,97,32,115,116,114,117,99,116,117,114,101,32,109,
              97,121,32,98,101,32,115,101,114,105,97,108,105,122,101,100,32,
              116,111,32,116,104,101,32,101,114,108,95,100,105,115,116,32,102,
              111,114,109,97,116,32,98,121,32,117,115,105,110,103,32,98,117,
              105,108,116,45,105,110,32,102,117,110,99,116,105,111,110,115,
              46]}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "|The actual encoded messages have been collected in one directory per encoding type, containing one file per encoded message."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ËHere follows an example of a text message to give a feeling of the difference between the pretty and compact versions of text messages. First the pretty printed, well indented version with long keywords:"}],
           0,false}],
         0,true},
        null},
       null}},
     null,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [293,10,77,69,71,65,67,79,47,49,32,91,49,50,52,46,49,50,52,46,49,
              50,52,46,50,50,50,93,32,10,32,32,84,114,97,110,115,97,99,116,
              105,111,110,32,61,32,57,57,57,56,32,123,32,10,32,32,32,32,67,
              111,110,116,101,120,116,32,61,32,45,32,123,32,10,32,32,32,32,32,
              32,83,101,114,118,105,99,101,67,104,97,110,103,101,32,61,32,82,
              79,79,84,32,123,32,10,32,32,32,32,32,32,32,32,83,101,114,118,
              105,99,101,115,32,123,32,10,32,32,32,32,32,32,32,32,32,32,77,
              101,116,104,111,100,32,61,32,82,101,115,116,97,114,116,44,32,10,
              32,32,32,32,32,32,32,32,32,32,83,101,114,118,105,99,101,67,104,
              97,110,103,101,65,100,100,114,101,115,115,32,61,32,53,53,53,53,
              53,44,32,10,32,32,32,32,32,32,32,32,32,32,80,114,111,102,105,
              108,101,32,61,32,82,101,115,71,87,47,49,44,32,10,32,32,32,32,32,
              32,32,32,32,32,82,101,97,115,111,110,32,61,32,34,57,48,49,32,77,
              71,32,67,111,108,100,32,66,111,111,116,34,10,32,32,32,32,32,32,
              32,32,125,10,32,32,32,32,32,32,125,32,32,10,32,32,32,32,125,10,
              32,32,125,32,32,32,32]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "JThen the compact text version without indentation and with short keywords:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "g\n!/1 [124.124.124.222] T=9998{\n  C=-{SC=ROOT{SV{MT=RS,AD=55555,PF=ResGW/1,RE=\"901 MG Cold Boot\"}}}}    "}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\b## Setup"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "úThe measurements has been performed on a HP xw4600 Workstation with a Intel(R) Core(TM)2 Quad CPU Q9550 @ 2.83GHz, with 4 GB memory and running Ubuntu 10.04 x86_64, kernel 2.6.32-22-generic. Software versions was open source OTP R13B04 (megaco-3.14)."}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\n## Summary"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [610,73,110,32,111,117,114,32,109,101,97,115,117,114,101,109,101,
            110,116,115,32,119,101,32,104,97,118,101,32,115,101,101,110,32,
            116,104,97,116,32,116,104,101,114,101,32,97,114,101,32,110,111,32,
            115,105,103,110,105,102,105,99,97,110,116,32,100,105,102,102,101,
            114,101,110,99,101,115,32,105,110,32,109,101,115,115,97,103,101,
            32,115,105,122,101,115,32,98,101,116,119,101,101,110,32,65,83,78,
            46,49,32,66,69,82,32,97,110,100,32,116,104,101,32,99,111,109,112,
            97,99,116,32,116,101,120,116,32,102,111,114,109,97,116,46,32,83,
            111,109,101,32,99,97,114,101,32,115,104,111,117,108,100,32,98,101,
            32,116,97,107,101,110,32,119,104,101,110,32,117,115,105,110,103,
            32,116,104,101,32,112,114,101,116,116,121,32,116,101,120,116,32,
            115,116,121,108,101,32,40,119,104,105,99,104,32,105,115,32,117,
            115,101,100,32,105,110,32,97,108,108,32,116,104,101,32,101,120,97,
            109,112,108,101,115,32,105,110,99,108,117,100,101,100,32,105,110,
            32,116,104,101,32,112,114,111,116,111,99,111,108,32,115,112,101,
            99,105,102,105,99,97,116,105,111,110,32,97,110,100,32,112,114,101,
            102,101,114,114,101,100,32,100,117,114,105,110,103,32,100,101,98,
            117,103,103,105,110,103,32,115,101,115,115,105,111,110,115,41,32,
            115,105,110,99,101,32,116,104,101,32,109,101,115,115,97,103,101,
            115,32,99,97,110,32,116,104,101,110,32,98,101,32,113,117,105,116,
            101,32,108,97,114,103,101,46,32,73,102,32,116,104,101,32,109,101,
            115,115,97,103,101,32,115,105,122,101,32,114,101,97,108,108,121,
            32,105,115,32,97,32,115,101,114,105,111,117,115,32,105,115,115,
            117,101,44,32,111,117,114,32,112,101,114,32,101,110,99,111,100,
            101,114,32,115,104,111,117,108,100,32,98,101,32,117,115,101,100,
            44,32,97,115,32,116,104,101,32,65,83,78,46,49,32,80,69,82,32,102,
            111,114,109,97,116,32,105,115,32,109,117,99,104,32,109,111,114,
            101,32,99,111,109,112,97,99,116,32,116,104,97,110,32,97,108,108,
            32,116,104,101,32,111,116,104,101,114,32,97,108,116,101,114,110,
            97,116,105,118,101,115,46,32,73,116,115,32,109,97,106,111,114,32,
            100,114,97,119,98,97,99,107,32,105,115,32,116,104,97,116,32,105,
            116,32,105,115,32,104,97,115,32,110,111,116,32,98,101,101,110,32,
            97,112,112,114,111,118,101,100,32,97,115,32,97,32,118,97,108,105,
            100,32,77,101,103,97,99,111,47,72,46,50,52,56,32,109,101,115,115,
            97,103,101,32,101,110,99,111,100,105,110,103,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "CWhen it comes to pure encode/decode performance, it turns out that:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         "Vour fastest binary encoder (ber) is about equal to our fastest text encoder (compact)."}],
       0,false}],
     0,false},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         "cour fastest binary decoder (ber) is about 54% (61%) faster than our fastest text decoder (compact)."}],
       0,false}],
     0,false}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [304,73,102,32,116,104,101,32,112,117,114,101,32,101,110,99,111,
            100,101,47,100,101,99,111,100,101,32,112,101,114,102,111,114,109,
            97,110,99,101,32,114,101,97,108,108,121,32,105,115,32,97,32,115,
            101,114,105,111,117,115,32,105,115,115,117,101,44,32,111,117,114,
            32,101,114,108,95,100,105,115,116,32,101,110,99,111,100,101,114,
            32,99,111,117,108,100,32,98,101,32,117,115,101,100,44,32,97,115,
            32,116,104,101,32,101,110,99,111,100,105,110,103,47,100,101,99,
            111,100,105,110,103,32,111,102,32,116,104,101,32,101,114,108,97,
            110,103,32,100,105,115,116,114,105,98,117,116,105,111,110,32,102,
            111,114,109,97,116,32,105,115,32,109,117,99,104,32,102,97,115,116,
            101,114,32,116,104,97,110,32,97,108,108,32,116,104,101,32,111,116,
            104,101,114,32,97,108,116,101,114,110,97,116,105,118,101,115,46,
            32,73,116,115,32,109,97,106,111,114,32,100,114,97,119,98,97,99,
            107,32,105,115,32,116,104,97,116,32,105,116,32,105,115,32,104,97,
            115,32,110,111,116,32,98,101,101,110,32,97,112,112,114,111,118,
            101,100,32,97,115,32,97,32,118,97,108,105,100,32,77,101,103,97,99,
            111,47,72,46,50,52,56,32,109,101,115,115,97,103,101,32,101,110,99,
            111,100,105,110,103,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           " There is no performance advantage of building (and using) a non-reentrant flex scanner over a reentrant flex scanner (if flex supports building such a scanner)."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
        {sep,
         [{text,[4,32,32,32,32]},
          {sep,
           [{sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "ÍPlease, observe that these performance figures are related to our implementation in Erlang/OTP. Measurements of other implementations using other tools and techniques may of course result in other figures."}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false}],
           0,true}],
         0,false}},
       {text,[0]}},
      null},
     null}}],
  0,false}}
