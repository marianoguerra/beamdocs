{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [17,35,32,71,101,116,116,105,110,103,32,83,116,97,114,116,101,
               100]},
             null},
            null}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,{above,{text,"\n## Example"},null},null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "aThe following example demonstrates the basic functionality used to run the Erlang ASN.1 compiler."}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [19,67,114,101,97,116,101,32,97,32,102,105,108,101,32,
                       110,97,109,101,100]}],
                    0,false},
                   {text,"\f*People.asn*"},
                   {sep,
                    [{text,
                      [25,99,111,110,116,97,105,110,105,110,103,32,116,104,
                       101,32,102,111,108,108,111,119,105,110,103,58]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "Â¸\nPeople DEFINITIONS AUTOMATIC TAGS ::=\nBEGIN\n  Person ::= SEQUENCE {\n    name PrintableString,\n    location INTEGER {home(0),field(1),roving(2)},\n    age INTEGER OPTIONAL\n  }\nEND      "}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [264,84,104,105,115,32,102,105,108,101,32,109,117,115,116,
                     32,98,101,32,99,111,109,112,105,108,101,100,32,98,101,
                     102,111,114,101,32,105,116,32,99,97,110,32,98,101,32,117,
                     115,101,100,46,32,84,104,101,32,65,83,78,46,49,32,99,111,
                     109,112,105,108,101,114,32,99,104,101,99,107,115,32,116,
                     104,97,116,32,116,104,101,32,115,121,110,116,97,120,32,
                     105,115,32,99,111,114,114,101,99,116,32,97,110,100,32,
                     116,104,97,116,32,116,104,101,32,116,101,120,116,32,114,
                     101,112,114,101,115,101,110,116,115,32,112,114,111,112,
                     101,114,32,65,83,78,46,49,32,99,111,100,101,32,98,101,
                     102,111,114,101,32,103,101,110,101,114,97,116,105,110,
                     103,32,97,110,32,97,98,115,116,114,97,99,116,32,115,121,
                     110,116,97,120,32,116,114,101,101,46,32,84,104,101,32,99,
                     111,100,101,45,103,101,110,101,114,97,116,111,114,32,116,
                     104,101,110,32,117,115,101,115,32,116,104,101,32,97,98,
                     115,116,114,97,99,116,32,115,121,110,116,97,120,32,116,
                     114,101,101,32,116,111,32,103,101,110,101,114,97,116,101,
                     32,99,111,100,101,46]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "hThe generated Erlang files are placed in the current directory or in the directory specified with option"}],
                    0,false},
                   {text,
                    [14,42,123,111,117,116,100,105,114,44,68,105,114,125,42]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "IThe following shows how the compiler can be called from the Erlang shell:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,[3,10,49,62]},
                   {text,"! asn1ct:compile(\"People\", [ber])."},
                   {text,"\f\nok\n2>      "}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[6,79,112,116,105,111,110]}],0,false},
                   {text,"\t*verbose*"},
                   {sep,
                    [{text,
                      ":can be added to get information about the generated files:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,[3,10,50,62]},
                   {text,") asn1ct:compile(\"People\", [ber,verbose])."},
                   {text,
                    [139,10,69,114,108,97,110,103,32,65,83,78,46,49,32,99,111,
                     109,112,105,108,105,110,103,32,34,80,101,111,112,108,101,
                     46,97,115,110,34,32,10,45,45,123,103,101,110,101,114,97,
                     116,101,100,44,34,80,101,111,112,108,101,46,97,115,110,
                     49,100,98,34,125,45,45,10,45,45,123,103,101,110,101,114,
                     97,116,101,100,44,34,80,101,111,112,108,101,46,104,114,
                     108,34,125,45,45,10,45,45,123,103,101,110,101,114,97,116,
                     101,100,44,34,80,101,111,112,108,101,46,101,114,108,34,
                     125,45,45,10,111,107,10,51,62,32,32,32,32,32,32]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,"\fASN.1 module"}],0,false},
                   {text,"\b*People*"},
                   {sep,
                    [{text,
                      "=is now accepted and the abstract syntax tree is saved in file"}],
                    0,false},
                   {text,
                    [15,42,80,101,111,112,108,101,46,97,115,110,49,100,98,42]},
                   {sep,
                    [{text,
                      [132,46,32,84,104,101,32,103,101,110,101,114,97,116,101,
                       100,32,69,114,108,97,110,103,32,99,111,100,101,32,105,
                       115,32,99,111,109,112,105,108,101,100,32,117,115,105,
                       110,103,32,116,104,101,32,69,114,108,97,110,103,32,99,
                       111,109,112,105,108,101,114,32,97,110,100,32,108,111,
                       97,100,101,100,32,105,110,116,111,32,116,104,101,32,69,
                       114,108,97,110,103,32,114,117,110,116,105,109,101,32,
                       115,121,115,116,101,109,46,32,84,104,101,114,101,32,
                       105,115,32,110,111,119,32,97,110,32,65,80,73,32,102,
                       111,114]}],
                    0,false},
                   {text,"\n*encode/2*"},
                   {sep,[{text,[3,97,110,100]}],0,false},
                   {text,"\n*decode/2*"},
                   {sep,[{text,"\tin module"}],0,false},
                   {text,"\b*People*"},
                   {sep,
                    [{text,
                      [23,44,32,119,104,105,99,104,32,105,115,32,99,97,108,
                       108,101,100,32,108,105,107,101,58]}],
                    0,false},
                   {above,{above,null,null},null},
                   {text,"'*'People':encode(<Type name>, <Value>)*"},
                   {above,{above,null,null},null},
                   {sep,[{text,[2,111,114]}],0,false},
                   {above,{above,null,null},null},
                   {text,"'*'People':decode(<Type name>, <Value>)*"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "\\Assume that there is a network application that receives instances of the ASN.1 defined type"}],
                    0,false},
                   {text,"\b*Person*"},
                   {sep,
                    [{text,"&, modifies, and sends them back again:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [311,10,114,101,99,101,105,118,101,10,32,32,32,123,80,111,
                     114,116,44,123,100,97,116,97,44,66,121,116,101,115,125,
                     125,32,45,62,10,32,32,32,32,32,32,32,99,97,115,101,32,39,
                     80,101,111,112,108,101,39,58,100,101,99,111,100,101,40,
                     39,80,101,114,115,111,110,39,44,66,121,116,101,115,41,32,
                     111,102,10,32,32,32,32,32,32,32,32,32,32,32,123,111,107,
                     44,80,125,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,32,123,111,107,44,65,110,115,119,101,114,125,32,
                     61,32,39,80,101,111,112,108,101,39,58,101,110,99,111,100,
                     101,40,39,80,101,114,115,111,110,39,44,109,107,95,97,110,
                     115,119,101,114,40,80,41,41,44,10,32,32,32,32,32,32,32,
                     32,32,32,32,32,32,32,32,80,111,114,116,32,33,32,123,115,
                     101,108,102,40,41,44,123,99,111,109,109,97,110,100,44,65,
                     110,115,119,101,114,125,125,59,10,32,32,32,32,32,32,32,
                     32,32,32,32,123,101,114,114,111,114,44,82,101,97,115,111,
                     110,125,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,
                     32,32,32,101,120,105,116,40,123,101,114,114,111,114,44,
                     82,101,97,115,111,110,125,41,10,32,32,32,32,32,32,32,101,
                     110,100,10,32,32,32,32,101,110,100,44,32,32,32,32,32,
                     32]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [159,73,110,32,116,104,105,115,32,101,120,97,109,112,
                       108,101,44,32,97,32,115,101,114,105,101,115,32,111,102,
                       32,98,121,116,101,115,32,105,115,32,114,101,99,101,105,
                       118,101,100,32,102,114,111,109,32,97,110,32,101,120,
                       116,101,114,110,97,108,32,115,111,117,114,99,101,32,97,
                       110,100,32,116,104,101,32,98,121,116,101,115,32,97,114,
                       101,32,116,104,101,110,32,100,101,99,111,100,101,100,
                       32,105,110,116,111,32,97,32,118,97,108,105,100,32,69,
                       114,108,97,110,103,32,116,101,114,109,46,32,84,104,105,
                       115,32,119,97,115,32,97,99,104,105,101,118,101,100,32,
                       119,105,116,104,32,116,104,101,32,99,97,108,108]}],
                    0,false},
                   {text,"!*'People':decode('Person',Bytes)*"},
                   {sep,
                    [{text,
                      "2, which returned an Erlang value of the ASN.1 type"}],
                    0,false},
                   {text,"\b*Person*"},
                   {sep,
                    [{text,
                      "2. Then an answer was constructed and encoded using"}],
                    0,false},
                   {text,"\"*'People':encode('Person',Answer)*"},
                   {sep,
                    [{text,
                      "{, which takes an instance of a defined ASN.1 type and transforms it to a binary according to the BER or PER encoding rules."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "7The encoder and decoder can also be run from the shell:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,[4,10,50,62,32]},
                   {text,",Rockstar = {'Person',\"Some Name\",roving,50}."},
                   {text,"%\n{'Person',\"Some Name\",roving,50}\n3> "},
                   {text,".{ok,Bin} = 'People':encode('Person',Rockstar)."},
                   {text,[5,10,123,111,107,44]},
                   {text,[1,60]},
                   {text,
                    "@<243,17,19,9,83,111,109,101,32,78,97,109,101,2,1,2,\n      2,1,50"},
                   {text,[1,62]},
                   {text,[6,62,125,10,52,62,32]},
                   {text,",{ok,Person} = 'People':decode('Person',Bin)."},
                   {text,
                    "/\n{ok,{'Person',\"Some Name\",roving,50}}\n5>      "}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {sep,
             [{above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {text,
                  [22,35,35,32,77,111,100,117,108,101,32,68,101,112,101,110,
                   100,101,110,99,105,101,115]},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "kIt is common that ASN.1 modules import defined types, values, and other entities from another ASN.1 module."}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "ÃEarlier versions of the ASN.1 compiler required that modules that were imported from had to be compiled before the module that imported. This caused problems when ASN.1 modules had circular dependencies."}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "ÃReferenced modules are now parsed when the compiler finds an entity that is imported. No code is generated for the referenced module. However, the compiled modules rely on that the referenced modules are also compiled."}],
                    0,false}],
                  0,true},
                 null},
                null}}],
             0,false}],
           0,false}},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,{text,"### ASN.1 Application User Interface"},null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,[3,84,104,101]}],0,false},
                  {text,[7,42,65,83,78,46,49,42]},
                  {sep,
                   [{text,
                     "@application provides the following two separate user interfaces:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\nThe module"}],0,false},
                {text,"\b*asn1ct*"},
                {sep,
                 [{text,
                   "D, which provides the compile-time functions (including the compiler)"}],
                 0,false}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{sep,[{text,"\nThe module"}],0,false},
                {text,"\f*asn1rt_nif*"},
                {sep,
                 [{text,
                   "Q, which provides the runtime functions for the ASN.1 decoder for the BER back end"}],
                 0,false}],
               0,false}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "kThe reason for this division of the interfaces into compile-time and runtime is that only runtime modules ("}],
                   0,false},
                  {text,"\t*asn1rt**"},
                  {sep,
                   [{text,"*) need to be loaded in an embedded system."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {text,
                 [25,35,35,32,67,111,109,112,105,108,101,45,84,105,109,101,32,
                  70,117,110,99,116,105,111,110,115]},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       "GThe ASN.1 compiler can be started directly from the command line by the"}],
                     0,false},
                    {text,[6,42,101,114,108,99,42]},
                    {sep,
                     [{text,
                       [131,112,114,111,103,114,97,109,46,32,84,104,105,115,
                        32,105,115,32,99,111,110,118,101,110,105,101,110,116,
                        32,119,104,101,110,32,99,111,109,112,105,108,105,110,
                        103,32,109,97,110,121,32,65,83,78,46,49,32,102,105,
                        108,101,115,32,102,114,111,109,32,116,104,101,32,99,
                        111,109,109,97,110,100,32,108,105,110,101,32,111,114,
                        32,119,104,101,110,32,117,115,105,110,103,32,77,97,
                        107,101,102,105,108,101,115,46,32,83,111,109,101,32,
                        101,120,97,109,112,108,101,115,32,111,102,32,104,111,
                        119,32,116,104,101]}],
                     0,false},
                    {text,[6,42,101,114,108,99,42]},
                    {sep,
                     [{text,
                       "0command can be used to start the ASN.1 compiler:"}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     [139,10,101,114,108,99,32,80,101,114,115,111,110,46,97,
                      115,110,10,101,114,108,99,32,45,98,112,101,114,32,80,
                      101,114,115,111,110,46,97,115,110,10,101,114,108,99,32,
                      45,98,98,101,114,32,46,46,47,69,120,97,109,112,108,101,
                      46,97,115,110,10,101,114,108,99,32,45,111,32,46,46,47,
                      97,115,110,102,105,108,101,115,32,45,73,32,46,46,47,97,
                      115,110,102,105,108,101,115,32,45,73,32,47,117,115,114,
                      47,108,111,99,97,108,47,115,116,97,110,100,97,114,100,
                      115,47,97,115,110,49,32,80,101,114,115,111,110,46,97,
                      115,110]}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,"&Useful options for the ASN.1 compiler:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,
               {text,[4,60,100,108,62]},
               {nest,4,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,
                            {above,
                             {above,
                              {above,
                               {above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{text,[4,60,100,116,62]},
                                    {sep,
                                     [{text,
                                       [20,45,98,91,98,101,114,32,124,32,112,
                                        101,114,32,124,32,117,112,101,114,
                                        93]}],
                                     0,false},
                                    {text,[5,60,47,100,116,62]}],
                                   0,true},
                                  null},
                                 null}},
                               {above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{text,[4,60,100,100,62]},
                                    {above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{sep,
                                          [{sep,
                                            [{text,
                                              "%Choice of encoding rules. If omitted,"}],
                                            0,false},
                                           {text,[3,98,101,114]},
                                           {sep,
                                            [{text,
                                              [15,105,115,32,116,104,101,32,
                                               100,101,102,97,117,108,116,
                                               46]}],
                                            0,false}],
                                          0,false}],
                                        0,true},
                                       null},
                                      null}},
                                    {text,[5,60,47,100,100,62]}],
                                   0,true},
                                  null},
                                 null}}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,116,62]},
                                   {sep,
                                    [{text,
                                      [15,45,111,32,79,117,116,68,105,114,101,
                                       99,116,111,114,121]}],
                                    0,false},
                                   {text,[5,60,47,100,116,62]}],
                                  0,true},
                                 null},
                                null}}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{text,[4,60,100,100,62]},
                                  {above,
                                   {above,{above,{text,[0]},null},null},
                                   {above,
                                    {above,
                                     {sep,
                                      [{sep,
                                        [{text,
                                          "CWhere to put the generated files. Default is the current directory."}],
                                        0,false}],
                                      0,true},
                                     null},
                                    null}},
                                  {text,[5,60,47,100,100,62]}],
                                 0,true},
                                null},
                               null}}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,116,62]},
                                 {sep,[{text,"\r-I IncludeDir"}],0,false},
                                 {text,[5,60,47,100,116,62]}],
                                0,true},
                               null},
                              null}}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{text,[4,60,100,100,62]},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{sep,
                                      [{sep,
                                        [{text,
                                          [19,87,104,101,114,101,32,116,111,
                                           32,115,101,97,114,99,104,32,102,
                                           111,114]}],
                                        0,false},
                                       {text,[7,46,97,115,110,49,100,98]},
                                       {sep,
                                        [{text,
                                          "Ãfiles and ASN.1 source specs to resolve references to other modules. This option can be repeated many times if there are several places to search in. The compiler searches the current directory first."}],
                                        0,false}],
                                      0,false}],
                                    0,true},
                                   null},
                                  null}},
                                {text,[5,60,47,100,100,62]}],
                               0,true},
                              null},
                             null}}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,116,62]},
                               {sep,[{text,[4,43,100,101,114]}],0,false},
                               {text,[5,60,47,100,116,62]}],
                              0,true},
                             null},
                            null}}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,100,62]},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{sep,
                                      [{text,
                                        ")DER encoding rule. Only when using option"}],
                                      0,false},
                                     {text,[4,45,98,101,114]},
                                     {sep,[{text,[1,46]}],0,false}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {text,[5,60,47,100,100,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,[{text,[5,43,109,97,112,115]}],0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,
                                  [{sep,
                                    [{text,
                                      ",Use maps instead of records to represent the"}],
                                    0,false},
                                   {text,"\bSEQUENCE"},
                                   {sep,[{text,[3,97,110,100]}],0,false},
                                   {text,[3,83,69,84]},
                                   {sep,[{text,"\ttypes. No"}],0,false},
                                   {text,[4,46,104,114,108]},
                                   {sep,
                                    [{text,
                                      "(files will be generated. See the Section"}],
                                    0,false},
                                   {text,
                                    "'Map representation for SEQUENCE and SET"},
                                   {sep,
                                    [{text,
                                      [21,102,111,114,32,109,111,114,101,32,
                                       105,110,102,111,114,109,97,116,105,111,
                                       110,46]}],
                                    0,false}],
                                  0,false}],
                                0,true},
                               null},
                              null}},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,[{text,"\v+asn1config"}],0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    "-This functionality works together with option"}],
                                  0,false},
                                 {text,[3,98,101,114]},
                                 {sep,
                                  [{text,
                                    "1. It enables the specialized decodes, see Section"}],
                                  0,false},
                                 {text,
                                  [18,83,112,101,99,105,97,108,105,122,101,
                                   100,32,68,101,99,111,100,101]},
                                 {sep,[{text,[1,46]}],0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,[{text,"\v+undec_rest"}],0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{sep,
                                [{text,
                                  "ÃA buffer that holds a message being decoded can also have trailing bytes. If those trailing bytes are important, they can be returned along with the decoded value by compiling the ASN.1 specification with option"}],
                                0,false},
                               {text,"\v+undec_rest"},
                               {sep,
                                [{text,
                                  "&. The return value from the decoder is"}],
                                0,false},
                               {text,
                                [15,123,111,107,44,86,97,108,117,101,44,82,
                                 101,115,116,125]},
                               {sep,[{text,[5,119,104,101,114,101]}],0,false},
                               {text,[4,82,101,115,116]},
                               {sep,
                                [{text,
                                  "*is a binary containing the trailing bytes."}],
                                0,false}],
                              0,false}],
                            0,true},
                           null},
                          null}},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,
                        [{text,
                          [18,43,39,65,110,121,32,69,114,108,99,32,79,112,116,
                           105,111,110,39]}],
                        0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{text,
                              "Â©Any option can be added to the Erlang compiler when compiling the generated Erlang files. Any option unrecognized by the ASN.1 compiler is passed to the Erlang compiler."}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}}}},
              {text,[5,60,47,100,108,62]}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [29,70,111,114,32,97,32,99,111,109,112,108,101,116,101,
                        32,100,101,115,99,114,105,112,116,105,111,110,32,111,
                        102]}],
                     0,false},
                    {text,[6,42,101,114,108,99,42]},
                    {sep,
                     [{text,
                       [28,44,32,115,101,101,32,69,82,84,83,32,82,101,102,101,
                        114,101,110,99,101,32,77,97,110,117,97,108,46]}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       "ÃThe compiler and other compile-time functions can also be started from the Erlang shell. Here follows a brief description of the primary functions. For a complete description of each function, see module"}],
                     0,false},
                    {text,"\b*asn1ct*"},
                    {sep,[{text,[6,105,110,32,116,104,101]}],0,false},
                    {text," [ASN.1 Reference Manual](asn1ct)"},
                    {sep,[{text,[1,46]}],0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [26,84,104,101,32,99,111,109,112,105,108,101,114,32,
                        105,115,32,115,116,97,114,116,101,100,32,98,121]}],
                     0,false},
                    {text,
                     [18,42,97,115,110,49,99,116,58,99,111,109,112,105,108,
                      101,47,49,42]},
                    {sep,
                     [{text,
                       [24,119,105,116,104,32,100,101,102,97,117,108,116,32,
                        111,112,116,105,111,110,115,44,32,111,114]}],
                     0,false},
                    {text,
                     [18,42,97,115,110,49,99,116,58,99,111,109,112,105,108,
                      101,47,50,42]},
                    {sep,
                     [{text,
                       [30,105,102,32,101,120,112,108,105,99,105,116,32,111,
                        112,116,105,111,110,115,32,97,114,101,32,103,105,118,
                        101,110,46]}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,{sep,[{sep,[{text,"\bExample:"}],0,false}],0,true},null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,",\nasn1ct:compile(\"H323-MESSAGES.asn1\").      "}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,[{sep,[{text,"\fThis equals:"}],0,false}],0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     "2\nasn1ct:compile(\"H323-MESSAGES.asn1\",[ber]).      "}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     [26,73,102,32,80,69,82,32,101,110,99,111,100,105,110,103,
                      32,105,115,32,119,97,110,116,101,100,58]}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     "2\nasn1ct:compile(\"H323-MESSAGES.asn1\",[per]).      "}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "AThe generic encode and decode functions can be called as follows:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     "y\n'H323-MESSAGES':encode('SomeChoiceType',{call,<<\"octetstring\">>}).\n'H323-MESSAGES':decode('SomeChoiceType',Bytes).      "}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}}],
            0,false},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {text,
                 [20,35,35,32,82,117,110,116,105,109,101,32,70,117,110,99,116,
                  105,111,110,115]},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       "3When an ASN.1 specification is compiled with option"}],
                     0,false},
                    {text,[5,42,98,101,114,42]},
                    {sep,[{text,[5,44,32,116,104,101]}],0,false},
                    {text,"\f*asn1rt_nif*"},
                    {sep,
                     [{text,
                       [29,109,111,100,117,108,101,32,97,110,100,32,116,104,
                        101,32,78,73,70,32,108,105,98,114,97,114,121,32,105,
                        110]}],
                     0,false},
                    {text,
                     [15,42,97,115,110,49,47,112,114,105,118,95,100,105,114,
                      42]},
                    {sep,
                     [{text,
                       [22,97,114,101,32,110,101,101,100,101,100,32,97,116,32,
                        114,117,110,116,105,109,101,46]}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       [19,66,121,32,99,97,108,108,105,110,103,32,102,117,110,
                        99,116,105,111,110]}],
                     0,false},
                    {text,"\b*info/0*"},
                    {sep,
                     [{text,
                       "Rin a generated module, you get information about which compiler options were used."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}}],
            0,false},
           {sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,{above,{text,"\t## Errors"},null},null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "ÃErrors detected at compile-time are displayed on the screen together with line numbers indicating where in the source file the respective error was detected. If no errors are found, an Erlang ASN.1 module is created."}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       "CThe runtime encoders and decoders execute within a catch and return"}],
                     0,false},
                    {text,"\f*{ok, Data}*"},
                    {sep,[{text,[2,111,114]}],0,false},
                    {text,
                     [30,42,123,101,114,114,111,114,44,32,123,97,115,110,49,
                      44,32,68,101,115,99,114,105,112,116,105,111,110,125,125,
                      42]},
                    {sep,[{text,[5,119,104,101,114,101]}],0,false},
                    {text,"\r*Description*"},
                    {sep,
                     [{text,"'is an Erlang term describing the error."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,[{text,"\nCurrently,"}],0,false},
                    {text,"\r*Description*"},
                    {sep,
                     [{text,
                       [16,108,111,111,107,115,32,108,105,107,101,32,116,104,
                        105,115,58]}],
                     0,false},
                    {text," *{ErrorDescription, StackTrace}*"},
                    {sep,
                     [{text,
                       "9. Applications should not depend on the exact contents of"}],
                     0,false},
                    {text,"\r*Description*"},
                    {sep,
                     [{text,"!as it could change in the future."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}}],
            0,false}],
          0,false}},
        {sep,
         [{text,"+<a name=\"inlineExamples\">inlineExamples</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [25,35,35,32,77,117,108,116,105,45,70,105,108,101,32,67,111,109,
               112,105,108,97,116,105,111,110]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  ";There are various reasons for using multi-file compilation:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {sep,
            [{text,[1,42]},
             {text,
              [130,84,111,32,99,104,111,111,115,101,32,116,104,101,32,110,97,
               109,101,32,102,111,114,32,116,104,101,32,103,101,110,101,114,
               97,116,101,100,32,109,111,100,117,108,101,44,32,102,111,114,32,
               101,120,97,109,112,108,101,44,32,98,101,99,97,117,115,101,32,
               121,111,117,32,110,101,101,100,32,116,111,32,99,111,109,112,
               105,108,101,32,116,104,101,32,115,97,109,101,32,115,112,101,99,
               115,32,102,111,114,32,100,105,102,102,101,114,101,110,116,32,
               101,110,99,111,100,105,110,103,32,114,117,108,101,115,46]}],
            0,false},
           {sep,
            [{text,[1,42]},{text,"#You want only one resulting module."}],
            0,false}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "?Specify which ASN.1 specs to compile in a module with extension"}],
                  0,false},
                 {text,"\n*.set.asn*"},
                 {sep,
                  [{text,
                    "c. Choose a module name and provide the names of the ASN.1 specs. For example, if you have the specs"}],
                  0,false},
                 {text,"\v*File1.asn*"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,"\v*File2.asn*"},
                 {sep,[{text,[5,44,32,97,110,100]}],0,false},
                 {text,"\v*File3.asn*"},
                 {sep,[{text,"\r, your module"}],0,false},
                 {text,
                  [18,42,77,121,77,111,100,117,108,101,46,115,101,116,46,97,
                   115,110,42]},
                 {sep,
                  [{text,
                    [17,108,111,111,107,115,32,97,115,32,102,111,108,108,111,
                     119,115,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,"\"\nFile1.asn\nFile2.asn\nFile3.asn    "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "BIf you compile with the following, the result is one merged module"}],
                  0,false},
                 {text,
                  [14,42,77,121,77,111,100,117,108,101,46,101,114,108,42]},
                 {sep,
                  [{text,
                    "3with the generated code from the three ASN.1 specs:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [29,10,126,62,32,101,114,108,99,32,77,121,77,111,100,117,
                   108,101,46,115,101,116,46,97,115,110,32,32,32,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}}],
         0,false}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [20,35,35,32,82,101,109,97,114,107,32,97,98,111,117,116,32,84,97,
              103,115]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "ÃTags used to be important for all users of ASN.1, because it was necessary to add tags manually to certain constructs in order for the ASN.1 specification to be valid. Example of an old-style specification:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "z\nTags DEFINITIONS ::=\nBEGIN\n  Afters ::= CHOICE { cheese [0] IA5String,\n                      dessert [1] IA5String }\nEND "}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "aWithout the tags (the numbers in square brackets) the ASN.1 compiler refused to compile the file."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [31,73,110,32,49,57,57,52,32,116,104,101,32,103,108,111,98,
                    97,108,32,116,97,103,103,105,110,103,32,109,111,100,101]}],
                 0,false},
                {text,[16,42,65,85,84,79,77,65,84,73,67,32,84,65,71,83,42]},
                {sep,
                 [{text,
                   [26,119,97,115,32,105,110,116,114,111,100,117,99,101,100,
                    46,32,66,121,32,112,117,116,116,105,110,103]}],
                 0,false},
                {text,[16,42,65,85,84,79,77,65,84,73,67,32,84,65,71,83,42]},
                {sep,
                 [{text,
                   "xin the module header, the ASN.1 compiler automatically adds tags when needed. The following is the same specification in"}],
                 0,false},
                {text,[16,42,65,85,84,79,77,65,84,73,67,32,84,65,71,83,42]},
                {sep,[{text,[5,109,111,100,101,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [129,10,84,97,103,115,32,68,69,70,73,78,73,84,73,79,78,83,32,
                  65,85,84,79,77,65,84,73,67,32,84,65,71,83,32,58,58,61,10,66,
                  69,71,73,78,10,32,32,65,102,116,101,114,115,32,58,58,61,32,
                  67,72,79,73,67,69,32,123,32,99,104,101,101,115,101,32,73,65,
                  53,83,116,114,105,110,103,44,10,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,32,32,32,32,32,32,100,101,115,115,101,
                  114,116,32,73,65,53,83,116,114,105,110,103,32,125,10,69,78,
                  68,32]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "5Tags are not mentioned any more in this User's Guide."}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}},
      {sep,
       [{text,"!<a name=\"ASN1Types\">ASN1Types</a>"},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,[14,35,35,32,65,83,78,46,49,32,84,121,112,101,115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "uThis section describes the ASN.1 types including their functionality, purpose, and how values are assigned in Erlang."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,"/ASN.1 has both primitive and constructed types:"}],
              0,false}],
            0,true},
           null},
          null}},
        null,
        {text,"\vTODO: TABLE"},
        {text,")<a name=\"TypeNameValue\">TypeNameValue</a>"},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
             {sep,
              [{text,[4,32,32,32,32]},
               {sep,
                [{sep,
                  [{above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{text,
                           "ÃThe values of each ASN.1 type have their own representation in Erlang, as described in the following sections. Users must provide these values for encoding according to the representation, as shown in the following example:"}],
                         0,false}],
                       0,true},
                      null},
                     null}}],
                  0,false}],
                0,true}],
              0,false}},
            {text,[0]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,"/\nOperational ::= BOOLEAN --ASN.1 definition    "}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,[{text,"&In Erlang code it can look as follows:"}],0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "B\nVal = true,\n{ok,Bytes} = MyModule:encode('Operational', Val),    "}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {sep,
         [{text,
           [29,60,97,32,110,97,109,101,61,34,66,79,79,76,69,65,78,34,62,66,79,
            79,76,69,65,78,60,47,97,62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,"\n## BOOLEAN"},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "3Booleans in ASN.1 express values that can be either"}],
                  0,false},
                 {text,[6,42,84,82,85,69,42]},
                 {sep,[{text,[2,111,114]}],0,false},
                 {text,[7,42,70,65,76,83,69,42]},
                 {sep,
                  [{text,
                    [26,46,32,84,104,101,32,109,101,97,110,105,110,103,115,32,
                     97,115,115,105,103,110,101,100,32,116,111]}],
                  0,false},
                 {text,[6,42,84,82,85,69,42]},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,[7,42,70,65,76,83,69,42]},
                 {sep,
                  [{text,"#are outside the scope of this text."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,[{text," In ASN.1 it is possible to have:"}],0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [24,10,79,112,101,114,97,116,105,111,110,97,108,32,58,58,61,
                   32,66,79,79,76,69,65,78]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [25,65,115,115,105,103,110,105,110,103,32,97,32,118,97,
                     108,117,101,32,116,111,32,116,121,112,101]}],
                  0,false},
                 {text,"\r*Operational*"},
                 {sep,
                  [{text,
                    "9in Erlang is possible by using the following Erlang code:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[6,96,96,96,101,114,108]},
               {sep,
                [{text,
                  [15,10,77,121,118,97,114,49,32,61,32,116,114,117,101,44]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [25,84,104,117,115,44,32,105,110,32,69,114,108,97,110,103,
                     32,116,104,101,32,97,116,111,109,115]}],
                  0,false},
                 {text,[6,42,116,114,117,101,42]},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,[7,42,102,97,108,115,101,42]},
                 {sep,
                  [{text,"#are used to encode a boolean value."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,
           [29,60,97,32,110,97,109,101,61,34,73,78,84,69,71,69,82,34,62,73,78,
            84,69,71,69,82,60,47,97,62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,"\n## INTEGER"},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "Â¤ASN.1 itself specifies indefinitely large integers. Erlang systems with version 4.3 and higher support very large integers, in practice indefinitely large integers."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "Ã The concept of subtyping can be applied to integers and to other ASN.1 types. The details of subtyping are not explained here; for more information, see X.680. Various syntaxes are allowed when defining a type as an integer:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [155,10,84,49,32,58,58,61,32,73,78,84,69,71,69,82,10,84,50,
                   32,58,58,61,32,73,78,84,69,71,69,82,32,40,45,50,46,46,55,
                   41,10,84,51,32,58,58,61,32,73,78,84,69,71,69,82,32,40,48,
                   46,46,77,65,88,41,10,84,52,32,58,58,61,32,73,78,84,69,71,
                   69,82,32,40,48,60,46,46,77,65,88,41,10,84,53,32,58,58,61,
                   32,73,78,84,69,71,69,82,32,40,77,73,78,60,46,46,45,57,57,
                   41,10,84,54,32,58,58,61,32,73,78,84,69,71,69,82,32,123,114,
                   101,100,40,48,41,44,98,108,117,101,40,49,41,44,119,104,105,
                   116,101,40,50,41,125]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,"%The Erlang representation of an ASN.1"}],
                  0,false},
                 {text,"\t*INTEGER*"},
                 {sep,
                  [{text,
                    [29,105,115,32,97,110,32,105,110,116,101,103,101,114,32,
                     111,114,32,97,110,32,97,116,111,109,32,105,102,32,97]}],
                  0,false},
                 {text,
                  [19,42,78,97,109,101,100,32,78,117,109,98,101,114,32,76,105,
                   115,116,42]},
                 {sep,[{text,[4,40,115,101,101]}],0,false},
                 {text,[4,42,84,54,42]},
                 {sep,
                  [{text,"#in the previous list) is specified."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "bThe following is an example of Erlang code that assigns values for the types in the previous list:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "J\nT1value = 0,\nT2value = 6,\nT6value1 = blue,\nT6value2 = 0,\nT6value3 = white"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "Â´These Erlang variables are now bound to valid instances of ASN.1 defined types. This style of value can be passed directly to the encoder for transformation into a series of bytes."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "GThe decoder returns an atom if the value corresponds to a symbol in the"}],
                  0,false},
                 {text,
                  [19,42,78,97,109,101,100,32,78,117,109,98,101,114,32,76,105,
                   115,116,42]},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,
           [23,60,97,32,110,97,109,101,61,34,82,69,65,76,34,62,82,69,65,76,60,
            47,97,62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,[7,35,35,32,82,69,65,76]},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"2The following ASN.1 type is used for real numbers:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,[{text,"\f\nR1 ::= REAL"}],0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,",It is assigned a value in Erlang as follows:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,"+\nR1value1 = \"2.14\",\nR1value2 = {256,10,-2},"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [153,73,110,32,116,104,101,32,108,97,115,116,32,108,105,
                     110,101,44,32,110,111,116,105,99,101,32,116,104,97,116,
                     32,116,104,101,32,116,117,112,108,101,32,123,50,53,54,44,
                     49,48,44,45,50,125,32,105,115,32,116,104,101,32,114,101,
                     97,108,32,110,117,109,98,101,114,32,50,46,53,54,32,105,
                     110,32,97,32,115,112,101,99,105,97,108,32,110,111,116,97,
                     116,105,111,110,44,32,119,104,105,99,104,32,101,110,99,
                     111,100,101,115,32,102,97,115,116,101,114,32,116,104,97,
                     110,32,115,105,109,112,108,121,32,115,116,97,116,105,110,
                     103,32,116,104,101,32,110,117,109,98,101,114,32,97,115]}],
                  0,false},
                 {text,"\b*\"2.56\"*"},
                 {sep,
                  [{text,
                    [26,46,32,84,104,101,32,97,114,105,116,121,32,116,104,114,
                     101,101,32,116,117,112,108,101,32,105,115]}],
                  0,false},
                 {text,
                  [26,42,123,77,97,110,116,105,115,115,97,44,66,97,115,101,44,
                   69,120,112,111,110,101,110,116,125,42]},
                 {sep,
                  [{text,"%, that is, Mantissa \\* Base^Exponent."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,
           [23,60,97,32,110,97,109,101,61,34,78,85,76,76,34,62,78,85,76,76,60,
            47,97,62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,[7,35,35,32,78,85,76,76]},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\bThe type"}],0,false},
                 {text,[6,42,78,85,76,76,42]},
                 {sep,
                  [{text,
                    "]is suitable where supply and recognition of a value is important but the actual value is not."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [16,10,78,111,116,121,112,101,32,58,58,61,32,78,85,76,76]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"+This type is assigned in Erlang as follows:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,[{text,"\r\nN1 = 'NULL',"}],0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"#The actual value is the quoted atom"}],0,false},
                 {text,"\b*'NULL'*"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,"#<a name=\"ENUMERATED\">ENUMERATED</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,"\r## ENUMERATED"},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\bThe type"}],0,false},
                 {text,"\f*ENUMERATED*"},
                 {sep,
                  [{text,
                    "ican be used when the value you want to describe can only take one of a set of predefined values. Example:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "y\nDaysOfTheWeek ::= ENUMERATED { \n    sunday(1),monday(2),tuesday(3),\n    wednesday(4),thursday(5),friday(6),saturday(7) }"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "MFor example, to assign a weekday value in Erlang, use the same atom as in the"}],
                  0,false},
                 {text,
                  [14,42,69,110,117,109,101,114,97,116,105,111,110,115,42]},
                 {sep,
                  [{text,
                    [23,111,102,32,116,104,101,32,116,121,112,101,32,100,101,
                     102,105,110,105,116,105,111,110,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [17,10,68,97,121,49,32,61,32,115,97,116,117,114,100,97,121,
                   44]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ÃThe enumerated type is similar to an integer type, when defined with a set of predefined values. The difference is that an enumerated type can only have specified values, whereas an integer can have any value."}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,"#<a name=\"BIT STRING\">BIT STRING</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,"\r## BIT STRING"},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\bThe type"}],0,false},
                 {text,"\f*BIT STRING*"},
                 {sep,
                  [{text,
                    [156,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,
                     109,111,100,101,108,32,105,110,102,111,114,109,97,116,
                     105,111,110,32,116,104,97,116,32,105,115,32,109,97,100,
                     101,32,117,112,32,111,102,32,97,114,98,105,116,114,97,
                     114,121,32,108,101,110,103,116,104,32,115,101,114,105,
                     101,115,32,111,102,32,98,105,116,115,46,32,73,116,32,105,
                     115,32,105,110,116,101,110,100,101,100,32,116,111,32,98,
                     101,32,117,115,101,100,32,102,111,114,32,115,101,108,101,
                     99,116,105,111,110,32,111,102,32,102,108,97,103,115,44,
                     32,110,111,116,32,102,111,114,32,98,105,110,97,114,121,
                     32,102,105,108,101,115,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\tIn ASN.1,"}],0,false},
                 {text,"\f*BIT STRING*"},
                 {sep,[{text," definitions can look as follows:"}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "S\nBits1 ::= BIT STRING\nBits2 ::= BIT STRING {foo(0),bar(1),gnu(2),gnome(3),punk(14)}"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "?The following two notations are available for representation of"}],
                  0,false},
                 {text,"\f*BIT STRING*"},
                 {sep,
                  [{text,
                    "6values in Erlang and as input to the encode functions:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{sep,
                [{text,
                  [26,65,32,98,105,116,115,116,114,105,110,103,46,32,66,121,
                   32,100,101,102,97,117,108,116,44,32,97]}],
                0,false},
               {text,"\f*BIT STRING*"},
               {sep,
                [{text,
                  "9with no symbolic names is decoded to an Erlang bitstring."}],
                0,false}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{sep,
                [{text,"-A list of atoms corresponding to atoms in the"}],
                0,false},
               {text,[14,42,78,97,109,101,100,66,105,116,76,105,115,116,42]},
               {sep,[{text,[6,105,110,32,116,104,101]}],0,false},
               {text,"\f*BIT STRING*"},
               {sep,[{text,"\rdefinition. A"}],0,false},
               {text,"\f*BIT STRING*"},
               {sep,
                [{text,
                  "Swith symbolic names is always decoded to the format shown in the following example:"}],
                0,false}],
              0,false}],
            0,false}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "t\nBits1Val1 = <<0:1,1:1,0:1,1:1,1:1>>,\nBits2Val1 = [gnu,punk],\nBits2Val2 = <<2#1110:4>>,\nBits2Val3 = [bar,gnu,gnome],"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"\v*Bits2Val2*"},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,"\v*Bits2Val3*"},
                 {sep,
                  [{text,
                    [22,100,101,110,111,116,101,32,116,104,101,32,115,97,109,
                     101,32,118,97,108,117,101,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"\v*Bits2Val1*"},
                 {sep,
                  [{text,
                    "Pis assigned symbolic values. The assignment means that the bits corresponding to"}],
                  0,false},
                 {text,[5,42,103,110,117,42]},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,[6,42,112,117,110,107,42]},
                 {sep,
                  [{text,
                    "Ã, that is, bits 2 and 14 are set to 1, and the rest are set to 0. The symbolic values are shown as a list of values. If a named value, which is not specified in the type definition, is shown, a runtime error occurs."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"\f*BIT STRING*"},
                 {sep,
                  [{text,"+s can also be subtyped with, for example, a"}],
                  0,false},
                 {text,[6,42,83,73,90,69,42]},
                 {sep,
                  [{text,
                    [14,115,112,101,99,105,102,105,99,97,116,105,111,110,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,")\nBits3 ::= BIT STRING (SIZE(0..31))      "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"1This means that no bit higher than 31 can be set."}],
                0,false}],
              0,true},
             null},
            null}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,",## Deprecated Representations for BIT STRING"},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [159,73,110,32,97,100,100,105,116,105,111,110,32,116,
                       111,32,116,104,101,32,114,101,112,114,101,115,101,110,
                       116,97,116,105,111,110,115,32,100,101,115,99,114,105,
                       98,101,100,32,101,97,114,108,105,101,114,44,32,116,104,
                       101,32,102,111,108,108,111,119,105,110,103,32,100,101,
                       112,114,101,99,97,116,101,100,32,114,101,112,114,101,
                       115,101,110,116,97,116,105,111,110,115,32,97,114,101,
                       32,97,118,97,105,108,97,98,108,101,32,105,102,32,116,
                       104,101,32,115,112,101,99,105,102,105,99,97,116,105,
                       111,110,32,104,97,115,32,98,101,101,110,32,99,111,109,
                       112,105,108,101,100,32,119,105,116,104,32,111,112,116,
                       105,111,110]}],
                    0,false},
                   {text,
                    [21,42,108,101,103,97,99,121,95,101,114,108,97,110,103,95,
                     116,121,112,101,115,42]},
                   {sep,[{text,[1,58]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,
                   [{text,
                     "dAa a list of binary digits (0 or 1). This format is accepted as input to the encode functions, and a"}],
                   0,false},
                  {text,"\f*BIT STRING*"},
                  {sep,
                   [{text,"#is decoded to this format if option"}],
                   0,false},
                  {text,
                   [21,42,42,108,101,103,97,99,121,95,98,105,116,95,115,116,
                    114,105,110,103,42,42]},
                  {sep,[{text,"\tis given."}],0,false}],
                 0,false}],
               0,false},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{sep,[{text,[2,65,115]}],0,false},
                  {text,
                   [17,42,123,85,110,117,115,101,100,44,66,105,110,97,114,121,
                    125,42]},
                  {sep,[{text,[5,119,104,101,114,101]}],0,false},
                  {text,"\b*Unused*"},
                  {sep,
                   [{text,
                     "Xdenotes how many trailing zero-bits 0-7 that are unused in the least significant byte in"}],
                   0,false},
                  {text,"\b*Binary*"},
                  {sep,
                   [{text,
                     "A. This format is accepted as input to the encode functions, and a"}],
                   0,false},
                  {text,"\f*BIT STRING*"},
                  {sep,
                   [{text,
                     [28,105,115,32,100,101,99,111,100,101,100,32,116,111,32,
                      116,104,105,115,32,102,111,114,109,97,116,32,105,102]}],
                   0,false},
                  {text,
                   [20,42,99,111,109,112,97,99,116,95,98,105,116,95,115,116,
                    114,105,110,103,42]},
                  {sep,
                   [{text,
                     [15,104,97,115,32,98,101,101,110,32,103,105,118,101,110,
                      46]}],
                   0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{sep,
                  [{text,
                    "SAs a hexadecimal number (or an integer). Avoid this as it is easy to misinterpret a"}],
                  0,false},
                 {text,"\f*BIT STRING*"},
                 {sep,
                  [{text,
                    [21,118,97,108,117,101,32,105,110,32,116,104,105,115,32,
                     102,111,114,109,97,116,46]}],
                  0,false}],
                0,false}],
              0,false}}],
           0,false}],
         0,false},
        {sep,
         [{text,"'<a name=\"OCTET STRING\">OCTET STRING</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,[15,35,35,32,79,67,84,69,84,32,83,84,82,73,78,71]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,[14,42,79,67,84,69,84,32,83,84,82,73,78,71,42]},
                 {sep,[{text,"#is the simplest of all ASN.1 types."}],0,false},
                 {text,[14,42,79,67,84,69,84,32,83,84,82,73,78,71,42]},
                 {sep,
                  [{text,
                    "Â¨only moves or transfers, for example, binary files or other unstructured information complying with two rules: the bytes consist of octets and encoding is not required."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "<It is possible to have the following ASN.1 type definitions:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "9\nO1 ::= OCTET STRING\nO2 ::= OCTET STRING (SIZE(28))      "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"1With the following example assignments in Erlang:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "Q\nO1Val = <<17,13,19,20,0,0,255,254>>,\nO2Val = <<\"must be exactly 28 chars....\">>,"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [14,66,121,32,100,101,102,97,117,108,116,44,32,97,110]}],
                  0,false},
                 {text,[14,42,79,67,84,69,84,32,83,84,82,73,78,71,42]},
                 {sep,
                  [{text,
                    "]is always represented as an Erlang binary. If the specification has been compiled with option"}],
                  0,false},
                 {text,
                  [21,42,108,101,103,97,99,121,95,101,114,108,97,110,103,95,
                   116,121,112,101,115,42]},
                 {sep,
                  [{text,
                    "Y, the encode functions accept both lists and binaries, and the decode functions decode an"}],
                  0,false},
                 {text,[14,42,79,67,84,69,84,32,83,84,82,73,78,71,42]},
                 {sep,[{text,"\nto a list."}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,"1<a name=\"Character Strings\">Character Strings</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [20,35,35,32,67,104,97,114,97,99,116,101,114,32,83,116,114,105,
               110,103,115]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "OASN.1 supports a wide variety of character sets. The main difference between an"}],
                  0,false},
                 {text,[14,42,79,67,84,69,84,32,83,84,82,73,78,71,42]},
                 {sep,[{text,"\"and a character string is that the"}],0,false},
                 {text,[14,42,79,67,84,69,84,32,83,84,82,73,78,71,42]},
                 {sep,
                  [{text,"0has no imposed semantics on the bytes delivered."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "jHowever, when using, for example, IA5String (which closely resembles ASCII), byte 65 (in decimal notation)"}],
                  0,false},
                 {text,"\t**means**"},
                 {sep,
                  [{text,[14,99,104,97,114,97,99,116,101,114,32,39,65,39,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "qFor example, if a defined type is to be a VideotexString and an octet is received with the unsigned integer value"}],
                  0,false},
                 {text,[3,42,88,42]},
                 {sep,
                  [{text,
                    "M, the octet is to be interpreted as specified in standard ITU-T T.100, T.101."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [325,84,104,101,32,65,83,78,46,49,32,116,111,32,69,114,108,
                   97,110,103,32,99,111,109,112,105,108,101,114,32,100,111,
                   101,115,32,110,111,116,32,100,101,116,101,114,109,105,110,
                   101,32,116,104,101,32,99,111,114,114,101,99,116,32,105,110,
                   116,101,114,112,114,101,116,97,116,105,111,110,32,111,102,
                   32,101,97,99,104,32,66,69,82,32,115,116,114,105,110,103,32,
                   111,99,116,101,116,32,118,97,108,117,101,32,119,105,116,
                   104,32,100,105,102,102,101,114,101,110,116,32,99,104,97,
                   114,97,99,116,101,114,32,115,116,114,105,110,103,115,46,32,
                   84,104,101,32,97,112,112,108,105,99,97,116,105,111,110,32,
                   105,115,32,114,101,115,112,111,110,115,105,98,108,101,32,
                   102,111,114,32,105,110,116,101,114,112,114,101,116,97,116,
                   105,111,110,32,111,102,32,111,99,116,101,116,115,46,32,84,
                   104,101,114,101,102,111,114,101,44,32,102,114,111,109,32,
                   116,104,101,32,66,69,82,32,115,116,114,105,110,103,32,112,
                   111,105,110,116,32,111,102,32,118,105,101,119,44,32,111,99,
                   116,101,116,115,32,97,114,101,32,118,101,114,121,32,115,
                   105,109,105,108,97,114,32,116,111,32,99,104,97,114,97,99,
                   116,101,114,32,115,116,114,105,110,103,115,32,97,110,100,
                   32,97,114,101,32,99,111,109,112,105,108,101,100,32,105,110,
                   32,116,104,101,32,115,97,109,101,32,119,97,121,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "RWhen PER is used, there is a significant difference in the encoding scheme between"}],
                  0,false},
                 {text,[14,42,79,67,84,69,84,32,83,84,82,73,78,71,42]},
                 {sep,
                  [{text,
                    "{s and other strings. The constraints specified for a type are especially important for PER, where they affect the encoding."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,{sep,[{sep,[{text,"\tExamples:"}],0,false}],0,true},null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "R\nDigs ::= NumericString (SIZE(1..3))\nTextFile ::= IA5String (SIZE(0..64000))      "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"%The corresponding Erlang assignments:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [144,10,68,105,103,115,86,97,108,49,32,61,32,34,52,53,54,34,
                   44,10,68,105,103,115,86,97,108,50,32,61,32,34,49,50,51,34,
                   44,10,84,101,120,116,70,105,108,101,86,97,108,49,32,61,32,
                   34,97,98,99,46,46,46,120,121,122,46,46,46,34,44,10,84,101,
                   120,116,70,105,108,101,86,97,108,50,32,61,32,91,56,56,44,
                   55,54,44,53,53,44,52,52,44,57,57,44,49,50,49,32,46,46,46,
                   46,46,46,46,46,46,46,32,97,32,108,111,116,32,111,102,32,99,
                   104,97,114,97,99,116,101,114,115,32,104,101,114,101,32,46,
                   46,46,46,93]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [459,84,104,101,32,69,114,108,97,110,103,32,114,101,112,114,
                   101,115,101,110,116,97,116,105,111,110,32,102,111,114,32,
                   34,66,77,80,83,116,114,105,110,103,34,32,97,110,100,32,34,
                   85,110,105,118,101,114,115,97,108,83,116,114,105,110,103,
                   34,32,105,115,32,101,105,116,104,101,114,32,97,32,108,105,
                   115,116,32,111,102,32,65,83,67,73,73,32,118,97,108,117,101,
                   115,32,111,114,32,97,32,108,105,115,116,32,111,102,32,113,
                   117,97,100,114,117,112,108,101,115,46,32,84,104,101,32,113,
                   117,97,100,114,117,112,108,101,32,114,101,112,114,101,115,
                   101,110,116,97,116,105,111,110,32,97,115,115,111,99,105,97,
                   116,101,115,32,116,111,32,116,104,101,32,85,110,105,99,111,
                   100,101,32,115,116,97,110,100,97,114,100,32,114,101,112,
                   114,101,115,101,110,116,97,116,105,111,110,32,111,102,32,
                   99,104,97,114,97,99,116,101,114,115,46,32,84,104,101,32,65,
                   83,67,73,73,32,99,104,97,114,97,99,116,101,114,115,32,97,
                   114,101,32,97,108,108,32,114,101,112,114,101,115,101,110,
                   116,101,100,32,98,121,32,113,117,97,100,114,117,112,108,
                   101,115,32,98,101,103,105,110,110,105,110,103,32,119,105,
                   116,104,32,116,104,114,101,101,32,122,101,114,111,115,32,
                   108,105,107,101,32,123,48,44,48,44,48,44,54,53,125,32,102,
                   111,114,32,99,104,97,114,97,99,116,101,114,32,39,65,39,46,
                   32,87,104,101,110,32,100,101,99,111,100,105,110,103,32,97,
                   32,118,97,108,117,101,32,102,111,114,32,116,104,101,115,
                   101,32,115,116,114,105,110,103,115,44,32,116,104,101,32,
                   114,101,115,117,108,116,32,105,115,32,97,32,108,105,115,
                   116,32,111,102,32,113,117,97,100,114,117,112,108,101,115,
                   44,32,111,114,32,105,110,116,101,103,101,114,115,32,119,
                   104,101,110,32,116,104,101,32,118,97,108,117,101,32,105,
                   115,32,97,110,32,65,83,67,73,73,32,99,104,97,114,97,99,116,
                   101,114,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "WThe following example shows how it works. Assume the following specification is in file"}],
                  0,false},
                 {text,
                  [18,42,80,114,105,109,83,116,114,105,110,103,115,46,97,115,
                   110,49,42]},
                 {sep,[{text,[1,58]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "N\nPrimStrings DEFINITIONS AUTOMATIC TAGS ::=\nBEGIN\n   BMP ::= BMPString\nEND    "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,[{text,"#Encoding and decoding some strings:"}],0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,49,62,32]},
                 {text,"%asn1ct:compile('PrimStrings', [ber])."},
                 {text,[7,10,111,107,10,50,62,32]},
                 {text,
                  "E{ok,Bytes1} = 'PrimStrings':encode('BMP', [{0,0,53,53},{0,0,45,56}])."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,
                  [24,60,51,48,44,52,44,53,51,44,53,52,44,52,53,44,53,54,62,
                   62,125,10,51,62,32]},
                 {text,"$'PrimStrings':decode('BMP', Bytes1)."},
                 {text,"#\n{ok,[{0,0,53,53},{0,0,45,56}]}\n4> "},
                 {text,
                  "D{ok,Bytes2} = 'PrimStrings':encode('BMP', [{0,0,53,53},{0,0,0,65}])."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,
                  [23,60,51,48,44,52,44,53,51,44,53,51,44,48,44,54,53,62,62,
                   125,10,53,62,32]},
                 {text,"$'PrimStrings':decode('BMP', Bytes2)."},
                 {text,
                  [26,10,123,111,107,44,91,123,48,44,48,44,53,51,44,53,51,125,
                   44,54,53,93,125,10,54,62,32]},
                 {text,
                  "8{ok,Bytes3} = 'PrimStrings':encode('BMP', \"BMP string\")."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,
                  "E<30,20,0,66,0,77,0,80,0,32,0,115,0,116,0,114,0,105,0,110,0,103>>}\n7> "},
                 {text,"$'PrimStrings':decode('BMP', Bytes3)."},
                 {text,
                  [24,10,123,111,107,44,34,66,77,80,32,115,116,114,105,110,
                   103,34,125,32,32,32,32,32,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "ÃType UTF8String is represented as a UTF-8 encoded binary in Erlang. Such binaries can be created directly using the binary syntax or by converting from a list of Unicode code points using function"}],
                  0,false},
                 {text," *unicode:characters_to_binary/1*"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ZThe following shows examples of how UTF-8 encoded binaries can be created and manipulated:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,49,62,32]},
                 {text,
                  [42,71,115,32,61,32,34,208,156,208,190,208,185,32,208,188,
                   208,176,208,187,208,181,208,189,209,140,208,186,208,184,
                   208,185,32,208,147,208,189,208,190,208,188,34,46]},
                 {text,
                  "^\n[1052,1086,1081,32,1084,1072,1083,1077,1085,1100,1082,1080,\n 1081,32,1043,1085,1086,1084]\n2> "},
                 {text,"(Gbin = unicode:characters_to_binary(Gs)."},
                 {text,[1,10]},
                 {text,[1,60]},
                 {text,
                  [130,60,50,48,56,44,49,53,54,44,50,48,56,44,49,57,48,44,50,
                   48,56,44,49,56,53,44,51,50,44,50,48,56,44,49,56,56,44,50,
                   48,56,44,49,55,54,44,50,48,56,44,49,56,55,44,50,48,56,44,
                   10,32,32,49,56,49,44,50,48,56,44,49,56,57,44,50,48,57,44,
                   49,52,48,44,50,48,56,44,49,56,54,44,50,48,56,44,49,56,52,
                   44,50,48,56,44,49,56,53,44,51,50,44,50,48,56,44,49,52,55,
                   44,10,32,32,50,48,56,44,46,46,46,62,62,10,51,62,32]},
                 {text,
                  [53,71,98,105,110,32,61,32,60,60,34,208,156,208,190,208,185,
                   32,208,188,208,176,208,187,208,181,208,189,209,140,208,186,
                   208,184,208,185,32,208,147,208,189,208,190,208,188,34,47,
                   117,116,102,56,62,62,46]},
                 {text,[1,10]},
                 {text,[1,60]},
                 {text,
                  [130,60,50,48,56,44,49,53,54,44,50,48,56,44,49,57,48,44,50,
                   48,56,44,49,56,53,44,51,50,44,50,48,56,44,49,56,56,44,50,
                   48,56,44,49,55,54,44,50,48,56,44,49,56,55,44,50,48,56,44,
                   10,32,32,49,56,49,44,50,48,56,44,49,56,57,44,50,48,57,44,
                   49,52,48,44,50,48,56,44,49,56,54,44,50,48,56,44,49,56,52,
                   44,50,48,56,44,49,56,53,44,51,50,44,50,48,56,44,49,52,55,
                   44,10,32,32,50,48,56,44,46,46,46,62,62,10,52,62,32]},
                 {text,"&Gs = unicode:characters_to_list(Gbin)."},
                 {text,
                  "Z\n[1052,1086,1081,32,1084,1072,1083,1077,1085,1100,1082,1080,\n 1081,32,1043,1085,1086,1084]"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [20,70,111,114,32,100,101,116,97,105,108,115,44,32,115,
                     101,101,32,116,104,101]}],
                  0,false},
                 {text,
                  [20,91,117,110,105,99,111,100,101,93,40,46,47,117,110,105,
                   99,111,100,101,41]},
                 {sep,
                  [{text,
                    [17,109,111,100,117,108,101,32,105,110,32,83,84,68,76,73,
                     66,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  ";In the following example, this ASN.1 specification is used:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "F\nUTF DEFINITIONS AUTOMATIC TAGS ::=\nBEGIN\n   UTF ::= UTF8String\nEND   "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "7Encoding and decoding a string with Unicode characters:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,53,62,32]},
                 {text,
                  [29,97,115,110,49,99,116,58,99,111,109,112,105,108,101,40,
                   39,85,84,70,39,44,32,91,98,101,114,93,41,46]},
                 {text,[7,10,111,107,10,54,62,32]},
                 {text,
                  [55,123,111,107,44,66,121,116,101,115,49,125,32,61,32,39,85,
                   84,70,39,58,101,110,99,111,100,101,40,39,85,84,70,39,44,32,
                   60,60,34,208,147,208,189,208,190,208,188,34,47,117,116,102,
                   56,62,62,41,46]},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,",<12,8,208,147,208,189,208,190,208,188>>}\n7> "},
                 {text,"({ok,Bin1} = 'UTF':decode('UTF', Bytes1)."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,"'<208,147,208,189,208,190,208,188>>}\n8> "},
                 {text,"\eio:format(\"~ts\\n\", [Bin1])."},
                 {text,
                  [16,10,208,147,208,189,208,190,208,188,10,111,107,10,57,62,
                   32]},
                 {text,"!unicode:characters_to_list(Bin1)."},
                 {text,
                  [25,10,91,49,48,52,51,44,49,48,56,53,44,49,48,56,54,44,49,
                   48,56,52,93,32,32,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}}],
         0,false},
        {sep,
         [{text,"1<a name=\"OBJECT IDENTIFIER\">OBJECT IDENTIFIER</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [20,35,35,32,79,66,74,69,67,84,32,73,68,69,78,84,73,70,73,69,
               82]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\bThe type"}],0,false},
                 {text,
                  [19,42,79,66,74,69,67,84,32,73,68,69,78,84,73,70,73,69,82,
                   42]},
                 {sep,
                  [{text,
                    "tis used whenever a unique identity is required. An ASN.1 module, a transfer syntax, and so on, is identified with an"}],
                  0,false},
                 {text,
                  [19,42,79,66,74,69,67,84,32,73,68,69,78,84,73,70,73,69,82,
                   42]},
                 {sep,
                  [{text,
                    [31,46,32,65,115,115,117,109,101,32,116,104,101,32,102,
                     111,108,108,111,119,105,110,103,32,101,120,97,109,112,
                     108,101,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [26,10,79,105,100,32,58,58,61,32,79,66,74,69,67,84,32,73,68,
                   69,78,84,73,70,73,69,82]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "JTherefore, the following example is a valid Erlang instance of type 'Oid':"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [20,10,79,105,100,86,97,108,49,32,61,32,123,49,44,50,44,53,
                   53,125,44]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,
                  [19,42,79,66,74,69,67,84,32,73,68,69,78,84,73,70,73,69,82,
                   42]},
                 {sep,
                  [{text,
                    "Lvalue is simply a tuple with the consecutive values, which must be integers."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [128,84,104,101,32,102,105,114,115,116,32,118,97,108,117,
                   101,32,105,115,32,108,105,109,105,116,101,100,32,116,111,
                   32,116,104,101,32,118,97,108,117,101,115,32,48,44,32,49,44,
                   32,111,114,32,50,46,32,84,104,101,32,115,101,99,111,110,
                   100,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,
                   105,110,32,116,104,101,32,114,97,110,103,101,32,48,46,46,
                   51,57,32,119,104,101,110,32,116,104,101,32,102,105,114,115,
                   116,32,118,97,108,117,101,32,105,115,32,48,32,111,114,32,
                   49,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,
                  [19,42,79,66,74,69,67,84,32,73,68,69,78,84,73,70,73,69,82,
                   42]},
                 {sep,
                  [{text,
                    "Ã£is an important type and it is widely used within different standards to identify various objects uniquely. Dubuisson: ASN.1 - Communication Between Heterogeneous Systems includes an easy-to-understand description of the use of"}],
                  0,false},
                 {text,
                  [19,42,79,66,74,69,67,84,32,73,68,69,78,84,73,70,73,69,82,
                   42]},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,"1<a name=\"Object Descriptor\">Object Descriptor</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [20,35,35,32,79,98,106,101,99,116,32,68,101,115,99,114,105,112,
               116,111,114]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "MValues of this type can be assigned a value as an ordinary string as follows:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "2\n      \"This is the value of an Object descriptor\""}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}}],
         0,false},
        {sep,
         [{text,"+<a name=\"The TIME types\">The TIME types</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,"\r## TIME Types"},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ÃTwo time types are defined within ASN.1: Generalized Time and Universal Time Coordinated (UTC). Both are assigned a value as an ordinary string within double quotes, for example, \"19820102070533.8\"."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "Â¯For DER encoding, the compiler does not check the validity of the time values. The DER requirements upon those strings are regarded as a matter for the application to fulfill."}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,
           [31,60,97,32,110,97,109,101,61,34,83,69,81,85,69,78,67,69,34,62,83,
            69,81,85,69,78,67,69,60,47,97,62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,"\v## SEQUENCE"},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "|The structured types of ASN.1 are constructed from other types in a manner similar to the concepts of array and struct in C."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[1,65]}],0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,
                  [{text,
                    "Cin ASN.1 is comparable with a struct in C and a record in Erlang. A"}],
                  0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,
                  [{text,
                    [26,99,97,110,32,98,101,32,100,101,102,105,110,101,100,32,
                     97,115,32,102,111,108,108,111,119,115,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "V\nPdu ::= SEQUENCE {\n   a INTEGER,\n   b REAL,\n   c OBJECT IDENTIFIER,\n   d NULL }      "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,"&This is a 4-component structure called"}],
                  0,false},
                 {text,[5,42,80,100,117,42]},
                 {sep,
                  [{text,
                    [15,46,32,66,121,32,100,101,102,97,117,108,116,44,32,97]}],
                  0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,
                  [{text,
                    "Nis represented by a record in Erlang. It can also be represented as a map; see"}],
                  0,false},
                 {text,
                  "M[Map representation for SEQUENCE and SET](./asn1_getting_started#MAP_SEQ_SET)"},
                 {sep,[{text,"\n. For each"}],0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,[5,42,83,69,84,42]},
                 {sep,
                  [{text,
                    "Ain an ASN.1 module an Erlang record declaration is generated. For"}],
                  0,false},
                 {text,[5,42,80,100,117,42]},
                 {sep,
                  [{text,"), a record like the following is defined:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,[{text,"#\n-record('Pdu',{a, b, c, d}).      "}],0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,"$The record declarations for a module"}],
                  0,false},
                 {text,[3,42,77,42]},
                 {sep,
                  [{text,
                    [24,97,114,101,32,112,108,97,99,101,100,32,105,110,32,97,
                     32,115,101,112,97,114,97,116,101]}],
                  0,false},
                 {text,[7,42,77,46,104,114,108,42]},
                 {sep,[{text,[5,102,105,108,101,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,",Values can be assigned in Erlang as follows:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  ";\nMyPdu = #'Pdu'{a=22,b=77.99,c={0,1,2,3,4},d='NULL'}.      "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    ">The decode functions return a record as result when decoding a"}],
                  0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,[{text,[4,111,114,32,97]}],0,false},
                 {text,[5,42,83,69,84,42]},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[1,65]}],0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,[{text,[5,97,110,100,32,97]}],0,false},
                 {text,[5,42,83,69,84,42]},
                 {sep,
                  [{text,
                    [30,99,97,110,32,99,111,110,116,97,105,110,32,97,32,99,
                     111,109,112,111,110,101,110,116,32,119,105,116,104,32,
                     97]}],
                  0,false},
                 {text,"\t*DEFAULT*"},
                 {sep,
                  [{text,
                    "Ekeyword followed by the actual value, which is the default value. The"}],
                  0,false},
                 {text,"\t*DEFAULT*"},
                 {sep,
                  [{text,
                    [152,107,101,121,119,111,114,100,32,109,101,97,110,115,32,
                     116,104,97,116,32,116,104,101,32,97,112,112,108,105,99,
                     97,116,105,111,110,32,100,111,105,110,103,32,116,104,101,
                     32,101,110,99,111,100,105,110,103,32,99,97,110,32,111,
                     109,105,116,32,101,110,99,111,100,105,110,103,32,111,102,
                     32,116,104,101,32,118,97,108,117,101,44,32,119,104,105,
                     99,104,32,114,101,115,117,108,116,115,32,105,110,32,102,
                     101,119,101,114,32,98,121,116,101,115,32,116,111,32,115,
                     101,110,100,32,116,111,32,116,104,101,32,114,101,99,101,
                     105,118,105,110,103,32,97,112,112,108,105,99,97,116,105,
                     111,110,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [31,65,110,32,97,112,112,108,105,99,97,116,105,111,110,32,
                     99,97,110,32,117,115,101,32,116,104,101,32,97,116,111,
                     109]}],
                  0,false},
                 {text,[14,42,97,115,110,49,95,68,69,70,65,85,76,84,42]},
                 {sep,
                  [{text,
                    "Gto indicate that the encoding is to be omitted for that position in the"}],
                  0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [425,68,101,112,101,110,100,105,110,103,32,111,110,32,116,
                   104,101,32,101,110,99,111,100,105,110,103,32,114,117,108,
                   101,115,44,32,116,104,101,32,101,110,99,111,100,101,114,32,
                   99,97,110,32,97,108,115,111,32,99,111,109,112,97,114,101,
                   32,116,104,101,32,103,105,118,101,110,32,118,97,108,117,
                   101,32,116,111,32,116,104,101,32,100,101,102,97,117,108,
                   116,32,118,97,108,117,101,32,97,110,100,32,97,117,116,111,
                   109,97,116,105,99,97,108,108,121,32,111,109,105,116,32,116,
                   104,101,32,101,110,99,111,100,105,110,103,32,105,102,32,
                   116,104,101,32,118,97,108,117,101,115,32,97,114,101,32,101,
                   113,117,97,108,46,32,72,111,119,32,109,117,99,104,32,101,
                   102,102,111,114,116,32,116,104,101,32,101,110,99,111,100,
                   101,114,32,109,97,107,101,115,32,116,111,32,99,111,109,112,
                   97,114,101,32,116,104,101,32,118,97,108,117,101,115,32,100,
                   101,112,101,110,100,115,32,111,110,32,116,104,101,32,101,
                   110,99,111,100,105,110,103,32,114,117,108,101,115,46,32,84,
                   104,101,32,68,69,82,32,101,110,99,111,100,105,110,103,32,
                   114,117,108,101,115,32,102,111,114,98,105,100,32,101,110,
                   99,111,100,105,110,103,32,97,32,118,97,108,117,101,32,101,
                   113,117,97,108,32,116,111,32,116,104,101,32,100,101,102,97,
                   117,108,116,32,118,97,108,117,101,44,32,115,111,32,105,116,
                   32,104,97,115,32,97,32,109,111,114,101,32,116,104,111,114,
                   111,117,103,104,32,97,110,100,32,116,105,109,101,45,99,111,
                   110,115,117,109,105,110,103,32,99,111,109,112,97,114,105,
                   115,111,110,32,116,104,97,110,32,116,104,101,32,101,110,99,
                   111,100,101,114,115,32,102,111,114,32,116,104,101,32,111,
                   116,104,101,114,32,101,110,99,111,100,105,110,103,32,114,
                   117,108,101,115,46]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  ";In the following example, this ASN.1 specification is used:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [259,10,70,105,108,101,32,68,69,70,73,78,73,84,73,79,78,83,
                   32,65,85,84,79,77,65,84,73,67,32,84,65,71,83,32,58,58,61,
                   10,66,69,71,73,78,10,83,101,113,49,32,58,58,61,32,83,69,81,
                   85,69,78,67,69,32,123,10,32,32,32,32,97,32,73,78,84,69,71,
                   69,82,32,68,69,70,65,85,76,84,32,49,44,10,32,32,32,32,98,
                   32,83,101,113,50,32,68,69,70,65,85,76,84,32,123,97,97,32,
                   84,82,85,69,44,32,98,98,32,49,53,125,10,125,10,10,83,101,
                   113,50,32,58,58,61,32,83,69,81,85,69,78,67,69,32,123,10,32,
                   32,32,32,97,97,32,66,79,79,76,69,65,78,44,10,32,32,32,32,
                   98,98,32,73,78,84,69,71,69,82,10,125,10,10,83,101,113,51,
                   32,58,58,61,32,83,69,81,85,69,78,67,69,32,123,10,32,32,32,
                   32,98,115,32,66,73,84,32,83,84,82,73,78,71,32,123,97,40,48,
                   41,44,32,98,40,49,41,44,32,99,40,50,41,125,32,68,69,70,65,
                   85,76,84,32,123,97,44,32,99,125,10,125,10,69,78,68,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "MExample where the BER encoder is able to omit encoding of the default values:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,49,62,32]},
                 {text,
                  [30,97,115,110,49,99,116,58,99,111,109,112,105,108,101,40,
                   39,70,105,108,101,39,44,32,91,98,101,114,93,41,46]},
                 {text,[7,10,111,107,10,50,62,32]},
                 {text,
                  ":'File':encode('Seq1', {'Seq1',asn1_DEFAULT,asn1_DEFAULT})."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,"\f<48,0>>}\n3> "},
                 {text,"3'File':encode('Seq1', {'Seq1',1,{'Seq2',true,15}})."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,"\v<48,0>>}   "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [20,69,120,97,109,112,108,101,32,119,105,116,104,32,97,32,
                     110,97,109,101,100]}],
                  0,false},
                 {text,"\f*BIT STRING*"},
                 {sep,
                  [{text,
                    "1where the BER encoder does not omit the encoding:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,52,62,32]},
                 {text,",'File':encode('Seq3', {'Seq3',asn1_DEFAULT)."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,"\f<48,0>>}\n5> "},
                 {text,",'File':encode('Seq3', {'Seq3',<<16#101:3>>)."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,
                  [25,60,52,56,44,52,44,49,50,56,44,50,44,53,44,49,54,48,62,
                   62,125,32,32,32,32,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,"/The DER encoder omits the encoding for the same"}],
                  0,false},
                 {text,"\f*BIT STRING*"},
                 {sep,[{text,[1,58]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,54,62,32]},
                 {text,"\"asn1ct:compile('File', [ber,der])."},
                 {text,[7,10,111,107,10,55,62,32]},
                 {text,",'File':encode('Seq3', {'Seq3',asn1_DEFAULT)."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,"\f<48,0>>}\n8> "},
                 {text,",'File':encode('Seq3', {'Seq3',<<16#101:3>>)."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,"\r<48,0>>}     "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}}],
         0,false},
        {sep,
         [{text,
           [21,60,97,32,110,97,109,101,61,34,83,69,84,34,62,83,69,84,60,47,97,
            62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,[6,35,35,32,83,69,84]},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [14,73,110,32,69,114,108,97,110,103,44,32,116,104,101]}],
                  0,false},
                 {text,[5,42,83,69,84,42]},
                 {sep,
                  [{text,
                    [23,116,121,112,101,32,105,115,32,117,115,101,100,32,101,
                     120,97,99,116,108,121,32,97,115]}],
                  0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,
                  [{text,
                    "?. Notice that if BER or DER encoding rules are used, decoding a"}],
                  0,false},
                 {text,[5,42,83,69,84,42]},
                 {sep,
                  [{text,
                    [25,105,115,32,115,108,111,119,101,114,32,116,104,97,110,
                     32,100,101,99,111,100,105,110,103,32,97]}],
                  0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,
                  [{text,"&because the components must be sorted."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,{text,"%## Extensibility for SEQUENCE and SET"},null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[6,87,104,101,110,32,97]}],0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,[{text,[2,111,114]}],0,false},
                 {text,[5,42,83,69,84,42]},
                 {sep,
                  [{text,
                    [141,99,111,110,116,97,105,110,115,32,97,110,32,101,120,
                     116,101,110,115,105,111,110,32,109,97,114,107,101,114,32,
                     97,110,100,32,101,120,116,101,110,115,105,111,110,32,99,
                     111,109,112,111,110,101,110,116,115,32,97,115,32,116,104,
                     101,32,102,111,108,108,111,119,105,110,103,44,32,116,104,
                     101,32,116,121,112,101,32,99,97,110,32,103,101,116,32,
                     109,111,114,101,32,99,111,109,112,111,110,101,110,116,
                     115,32,105,110,32,110,101,119,101,114,32,118,101,114,115,
                     105,111,110,115,32,111,102,32,116,104,101,32,65,83,78,46,
                     49,32,115,112,101,99,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "Q\nSExt ::= SEQUENCE {\n           a INTEGER,\n           ...,\n           b BOOLEAN }"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,"'In this case it has got a new component"}],
                  0,false},
                 {text,[3,42,98,42]},
                 {sep,
                  [{text,
                    "[. Thus, incoming messages that are decoded can have more or fever components than this one."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\rThe component"}],0,false},
                 {text,[3,42,98,42]},
                 {sep,
                  [{text,
                    [128,105,115,32,116,114,101,97,116,101,100,32,97,115,32,
                     97,110,32,111,114,105,103,105,110,97,108,32,99,111,109,
                     112,111,110,101,110,116,32,119,104,101,110,32,101,110,99,
                     111,100,105,110,103,32,97,32,109,101,115,115,97,103,101,
                     46,32,73,110,32,116,104,105,115,32,99,97,115,101,44,32,
                     97,115,32,105,116,32,105,115,32,110,111,116,32,97,110,32,
                     111,112,116,105,111,110,97,108,32,101,108,101,109,101,
                     110,116,44,32,105,116,32,109,117,115,116,32,98,101,32,
                     101,110,99,111,100,101,100,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [20,68,117,114,105,110,103,32,100,101,99,111,100,105,110,
                     103,44,32,116,104,101]}],
                  0,false},
                 {text,[3,42,98,42]},
                 {sep,
                  [{text,
                    "1field of the record gets the decoded value of the"}],
                  0,false},
                 {text,[3,42,98,42]},
                 {sep,
                  [{text,"*component, if present, otherwise the value"}],
                  0,false},
                 {text,[14,42,97,115,110,49,95,78,79,86,65,76,85,69,42]},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,"%<a name=\"MAP_SEQ_SET\">MAP_SEQ_SET</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,{text,"*## Map representation for SEQUENCE and SET"},null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "1If the ASN.1 module has been compiled with option"}],
                  0,false},
                 {text,[6,42,109,97,112,115,42]},
                 {sep,[{text,"\v, the types"}],0,false},
                 {text,"\n*SEQUENCE*"},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,[5,42,83,69,84,42]},
                 {sep,
                  [{text,
                    [24,97,114,101,32,114,101,112,114,101,115,101,110,116,101,
                     100,32,97,115,32,109,97,112,115,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  ";In the following example, this ASN.1 specification is used:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [137,10,70,105,108,101,32,68,69,70,73,78,73,84,73,79,78,83,
                   32,65,85,84,79,77,65,84,73,67,32,84,65,71,83,32,58,58,61,
                   10,66,69,71,73,78,10,83,101,113,49,32,58,58,61,32,83,69,81,
                   85,69,78,67,69,32,123,10,32,32,32,32,97,32,73,78,84,69,71,
                   69,82,32,68,69,70,65,85,76,84,32,52,50,44,10,32,32,32,32,
                   98,32,66,79,79,76,69,65,78,32,79,80,84,73,79,78,65,76,44,
                   10,32,32,32,32,99,32,73,65,53,83,116,114,105,110,103,10,
                   125,10,69,78,68,32,32,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "EOptional fields are to be omitted from the map if they have no value:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,49,62,32]},
                 {text,"#asn1ct:compile('File', [per,maps])."},
                 {text,[7,10,111,107,10,50,62,32]},
                 {text,
                  "4{ok,E} = 'File':encode('Seq1', #{a=>0,c=>\"string\"})."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,"\"<128,1,0,6,115,116,114,105,110,103"},
                 {text,[1,62]},
                 {text,[3,62,125,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "<When decoding, optional fields will be omitted from the map:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,51,62,32]},
                 {text,
                  [25,39,70,105,108,101,39,58,100,101,99,111,100,101,40,39,83,
                   101,113,49,39,44,32,69,41,46]},
                 {text," \n{ok,#{a => 0,c => \"string\"}}   "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"+Default values can be omitted from the map:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,[4,10,52,62,32]},
                 {text,"0{ok,E2} = 'File':encode('Seq1', #{c=>\"string\"})."},
                 {text,[5,10,123,111,107,44]},
                 {text,[1,60]},
                 {text,
                  [28,60,48,44,54,44,49,49,53,44,49,49,54,44,49,49,52,44,49,
                   48,53,44,49,49,48,44,49,48,51]},
                 {text,[1,62]},
                 {text,[6,62,125,10,53,62,32]},
                 {text,
                  [26,39,70,105,108,101,39,58,100,101,99,111,100,101,40,39,83,
                   101,113,49,39,44,32,69,50,41,46]},
                 {text,"!\n{ok,#{a => 42,c => \"string\"}}   "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
               {sep,
                [{text,[4,32,32,32,32]},
                 {sep,
                  [{sep,
                    [{above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{sep,
                             [{text,"\"It is not allowed to use the atoms"}],
                             0,false},
                            {text,"\f*asn1_VALUE*"},
                            {sep,[{text,[3,97,110,100]}],0,false},
                            {text,
                             [14,42,97,115,110,49,95,68,69,70,65,85,76,84,42]},
                            {sep,[{text,"\nwith maps."}],0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}}],
                    0,false}],
                  0,true}],
                0,false}},
              {text,[0]}},
             null},
            null}}],
         0,false},
        {sep,
         [{text,"\e<a name=\"CHOICE\">CHOICE</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,"\t## CHOICE"},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\bThe type"}],0,false},
                 {text,"\b*CHOICE*"},
                 {sep,
                  [{text,
                    "Ais a space saver and is similar to the concept of a 'union' in C."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [21,65,115,115,117,109,101,32,116,104,101,32,102,111,108,
                   108,111,119,105,110,103,58]}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [137,10,83,111,109,101,77,111,100,117,108,101,78,97,109,101,
                   32,68,69,70,73,78,73,84,73,79,78,83,32,65,85,84,79,77,65,
                   84,73,67,32,84,65,71,83,32,58,58,61,10,66,69,71,73,78,10,
                   84,32,58,58,61,32,67,72,79,73,67,69,32,123,10,32,32,32,32,
                   32,32,32,32,120,32,82,69,65,76,44,10,32,32,32,32,32,32,32,
                   32,121,32,73,78,84,69,71,69,82,44,10,32,32,32,32,32,32,32,
                   32,122,32,79,66,74,69,67,84,32,73,68,69,78,84,73,70,73,69,
                   82,32,125,10,69,78,68,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"0It is then possible to assign values as follows:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,"%\nTVal1 = {y,17},\nTVal2 = {z,{0,1,2}},"}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[1,65]}],0,false},
                 {text,"\b*CHOICE*"},
                 {sep,
                  [{text,"(value is always represented as the tuple"}],
                  0,false},
                 {text,
                  [26,42,123,67,104,111,105,99,101,65,108,116,101,114,110,97,
                   116,105,118,101,44,32,86,97,108,125,42]},
                 {sep,[{text,[5,119,104,101,114,101]}],0,false},
                 {text,
                  [19,42,67,104,111,105,99,101,65,108,116,101,114,110,97,116,
                   105,118,101,42]},
                 {sep,
                  [{text,
                    "4is an atom denoting the selected choice alternative."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [20,35,35,32,69,120,116,101,110,115,105,98,108,101,32,67,72,
                 79,73,67,69]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[6,87,104,101,110,32,97]}],0,false},
                   {text,"\b*CHOICE*"},
                   {sep,
                    [{text,
                      "Rcontains an extension marker and the decoder detects an unknown alternative of the"}],
                    0,false},
                   {text,"\b*CHOICE*"},
                   {sep,
                    [{text,"&, the value is represented as follows:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,[{text," \n{asn1_ExtAlt, BytesForOpenType}"}],0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[4,72,101,114,101]}],0,false},
                   {text,
                    [18,42,66,121,116,101,115,70,111,114,79,112,101,110,84,
                     121,112,101,42]},
                   {sep,
                    [{text,
                      "=is a list of bytes constituting the encoding of the \"unknown\""}],
                    0,false},
                   {text,"\b*CHOICE*"},
                   {sep,[{text,"\falternative."}],0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}],
         0,false},
        {sep,
         [{text,
           [21,60,97,32,110,97,109,101,61,34,83,79,70,34,62,83,79,70,60,47,97,
            62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [25,35,35,32,83,69,84,32,79,70,32,97,110,100,32,83,69,81,85,69,
               78,67,69,32,79,70]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\tThe types"}],0,false},
                 {text,"\b*SET OF*"},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,"\r*SEQUENCE OF*"},
                 {sep,
                  [{text,
                    [137,99,111,114,114,101,115,112,111,110,100,32,116,111,32,
                     116,104,101,32,99,111,110,99,101,112,116,32,111,102,32,
                     97,110,32,97,114,114,97,121,32,105,110,32,115,101,118,
                     101,114,97,108,32,112,114,111,103,114,97,109,109,105,110,
                     103,32,108,97,110,103,117,97,103,101,115,46,32,84,104,
                     101,32,69,114,108,97,110,103,32,115,121,110,116,97,120,
                     32,102,111,114,32,98,111,116,104,32,116,121,112,101,115,
                     32,105,115,32,115,116,114,97,105,103,104,116,102,111,114,
                     119,97,114,100,44,32,102,111,114,32,101,120,97,109,112,
                     108,101,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "Q\nArr1 ::= SET SIZE (5) OF INTEGER (4..9) \nArr2 ::= SEQUENCE OF OCTET STRING      "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,[{text,"\"In Erlang the following can apply:"}],0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "D\nArr1Val = [4,5,6,7,8],\nArr2Val = [\"abc\",[14,34,54],\"Octets\"],      "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\"Notice that the definition of type"}],0,false},
                 {text,"\b*SET OF*"},
                 {sep,
                  [{text,
                    "eimplies that the order of the components is undefined, but in practice there is no difference between"}],
                  0,false},
                 {text,"\b*SET OF*"},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,"\r*SEQUENCE OF*"},
                 {sep,
                  [{text,
                    "C. The ASN.1 compiler for Erlang does not randomize the order of the"}],
                  0,false},
                 {text,"\b*SET OF*"},
                 {sep,[{text,"\ecomponents before encoding."}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [28,72,111,119,101,118,101,114,44,32,102,111,114,32,97,32,
                     118,97,108,117,101,32,111,102,32,116,121,112,101]}],
                  0,false},
                 {text,"\b*SET OF*"},
                 {sep,
                  [{text,
                    "Â¼, the DER encoding format requires the elements to be sent in ascending order of their encoding, which implies an expensive sorting procedure in runtime. Therefore it is recommended to use"}],
                  0,false},
                 {text,"\r*SEQUENCE OF*"},
                 {sep,[{text,"\ninstead of"}],0,false},
                 {text,"\b*SET OF*"},
                 {sep,[{text,"\fif possible."}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,
           [21,60,97,32,110,97,109,101,61,34,65,78,89,34,62,65,78,89,60,47,97,
            62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [25,35,35,32,65,78,89,32,97,110,100,32,65,78,89,32,68,69,70,73,
               78,69,68,32,66,89]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\tThe types"}],0,false},
                 {text,[5,42,65,78,89,42]},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,[16,42,65,78,89,32,68,69,70,73,78,69,68,32,66,89,42]},
                 {sep,
                  [{text,
                    [292,104,97,118,101,32,98,101,101,110,32,114,101,109,111,
                     118,101,100,32,102,114,111,109,32,116,104,101,32,115,116,
                     97,110,100,97,114,100,32,115,105,110,99,101,32,49,57,57,
                     52,46,32,73,116,32,105,115,32,114,101,99,111,109,109,101,
                     110,100,101,100,32,110,111,116,32,116,111,32,117,115,101,
                     32,116,104,101,115,101,32,116,121,112,101,115,32,97,110,
                     121,32,109,111,114,101,46,32,84,104,101,121,32,99,97,110,
                     44,32,104,111,119,101,118,101,114,44,32,101,120,105,115,
                     116,32,105,110,32,115,111,109,101,32,111,108,100,32,65,
                     83,78,46,49,32,109,111,100,117,108,101,115,46,32,84,104,
                     101,32,105,100,101,97,32,119,105,116,104,32,116,104,105,
                     115,32,116,121,112,101,32,119,97,115,32,116,111,32,108,
                     101,97,118,101,32,97,32,34,104,111,108,101,34,32,105,110,
                     32,97,32,100,101,102,105,110,105,116,105,111,110,32,119,
                     104,101,114,101,32,105,116,32,119,97,115,32,112,111,115,
                     115,105,98,108,101,32,116,111,32,112,117,116,32,117,110,
                     115,112,101,99,105,102,105,101,100,32,100,97,116,97,32,
                     111,102,32,97,110,121,32,107,105,110,100,44,32,101,118,
                     101,110,32,110,111,110,45,65,83,78,46,49,32,100,97,116,
                     97,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,"%A value of this type is encoded as an"}],
                  0,false},
                 {text,"\v*open type*"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\nInstead of"}],0,false},
                 {text,[5,42,65,78,89,42]},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,[16,42,65,78,89,32,68,69,70,73,78,69,68,32,66,89,42]},
                 {sep,
                  [{text,
                    [26,44,32,105,116,32,105,115,32,114,101,99,111,109,109,
                     101,110,100,101,100,32,116,111,32,117,115,101]}],
                  0,false},
                 {text,
                  [26,42,105,110,102,111,114,109,97,116,105,111,110,32,111,98,
                   106,101,99,116,32,99,108,97,115,115,42]},
                 {sep,[{text,[1,44]}],0,false},
                 {text,
                  [19,42,116,97,98,108,101,32,99,111,110,115,116,114,97,105,
                   110,116,115,42]},
                 {sep,[{text,[5,44,32,97,110,100]}],0,false},
                 {text,
                  [18,42,112,97,114,97,109,101,116,101,114,105,122,97,116,105,
                   111,110,42]},
                 {sep,
                  [{text,
                    [29,46,32,73,110,32,112,97,114,116,105,99,117,108,97,114,
                     32,116,104,101,32,99,111,110,115,116,114,117,99,116]}],
                  0,false},
                 {text,
                  [23,42,84,89,80,69,45,73,68,69,78,84,73,70,73,69,82,46,64,
                   84,121,112,101,42]},
                 {sep,
                  [{text,"%accomplish the same as the deprecated"}],
                  0,false},
                 {text,[5,42,65,78,89,42]},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\bSee also"}],0,false},
                 {text,")[Information object](#Information Object)"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{text,"/<a name=\"NegotiationTypes\">NegotiationTypes</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,"/## EXTERNAL, EMBEDDED PDV, and CHARACTER STRING"},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\tThe types"}],0,false},
                 {text,"\n*EXTERNAL*"},
                 {sep,[{text,[1,44]}],0,false},
                 {text,[14,42,69,77,66,69,68,68,69,68,32,80,68,86,42]},
                 {sep,[{text,[5,44,32,97,110,100]}],0,false},
                 {text,
                  [18,42,67,72,65,82,65,67,84,69,82,32,83,84,82,73,78,71,42]},
                 {sep,
                  [{text,
                    "kare used in presentation layer negotiation. They are encoded according to their associated type, see X.680."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\bThe type"}],0,false},
                 {text,"\n*EXTERNAL*"},
                 {sep,
                  [{text,
                    [268,104,97,100,32,97,32,115,108,105,103,104,116,108,121,
                     32,100,105,102,102,101,114,101,110,116,32,97,115,115,111,
                     99,105,97,116,101,100,32,116,121,112,101,32,98,101,102,
                     111,114,101,32,49,57,57,52,46,32,88,46,54,57,49,32,115,
                     116,97,116,101,115,32,116,104,97,116,32,101,110,99,111,
                     100,105,110,103,32,109,117,115,116,32,102,111,108,108,
                     111,119,32,116,104,101,32,111,108,100,101,114,32,97,115,
                     115,111,99,105,97,116,101,100,32,116,121,112,101,46,32,
                     83,111,44,32,103,101,110,101,114,97,116,101,100,32,101,
                     110,99,111,100,101,47,100,101,99,111,100,101,32,102,117,
                     110,99,116,105,111,110,115,32,99,111,110,118,101,114,116,
                     32,118,97,108,117,101,115,32,111,102,32,116,104,101,32,
                     110,101,119,101,114,32,102,111,114,109,97,116,32,116,111,
                     32,116,104,101,32,111,108,100,101,114,32,102,111,114,109,
                     97,116,32,98,101,102,111,114,101,32,101,110,99,111,100,
                     105,110,103,46,32,84,104,105,115,32,105,109,112,108,105,
                     101,115,32,116,104,97,116,32,105,116,32,105,115,32,97,
                     108,108,111,119,101,100,32,116,111,32,117,115,101]}],
                  0,false},
                 {text,"\n*EXTERNAL*"},
                 {sep,
                  [{text,
                    "btype values of either format for encoding. Decoded values are always returned in the newer format."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false},
        {sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [23,35,35,32,69,109,98,101,100,100,101,100,32,78,97,109,101,100,
               32,84,121,112,101,115]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [139,84,104,101,32,115,116,114,117,99,116,117,114,101,100,
                     32,116,121,112,101,115,32,112,114,101,118,105,111,117,
                     115,108,121,32,100,101,115,99,114,105,98,101,100,32,99,
                     97,110,32,104,97,118,101,32,111,116,104,101,114,32,110,
                     97,109,101,100,32,116,121,112,101,115,32,97,115,32,116,
                     104,101,105,114,32,99,111,109,112,111,110,101,110,116,
                     115,46,32,84,104,101,32,103,101,110,101,114,97,108,32,
                     115,121,110,116,97,120,32,116,111,32,97,115,115,105,103,
                     110,32,97,32,118,97,108,117,101,32,116,111,32,99,111,109,
                     112,111,110,101,110,116]}],
                  0,false},
                 {text,[3,42,67,42]},
                 {sep,
                  [{text,
                    [21,111,102,32,97,32,110,97,109,101,100,32,65,83,78,46,49,
                     32,116,121,112,101]}],
                  0,false},
                 {text,[3,42,84,42]},
                 {sep,
                  [{text,
                    [30,105,110,32,69,114,108,97,110,103,32,105,115,32,116,
                     104,101,32,114,101,99,111,114,100,32,115,121,110,116,97,
                     120]}],
                  0,false},
                 {text,
                  [17,42,35,39,84,39,123,39,67,39,61,86,97,108,117,101,125,
                   42]},
                 {sep,[{text,[6,46,32,72,101,114,101]}],0,false},
                 {text,[7,42,86,97,108,117,101,42]},
                 {sep,[{text,"\"can be a value of yet another type"}],0,false},
                 {text,[4,42,84,50,42]},
                 {sep,
                  [{text,
                    [14,44,32,102,111,114,32,101,120,97,109,112,108,101,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "Ã±\nEmbeddedExample DEFINITIONS AUTOMATIC TAGS ::=\nBEGIN\nB ::= SEQUENCE {\n        a Arr1,\n        b T }\n\nArr1 ::= SET SIZE (5) OF INTEGER (4..9) \n\nT ::= CHOICE {\n        x REAL,\n        y INTEGER,\n        z OBJECT IDENTIFIER }\n        END      "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,"\n*SEQUENCE*"},
                 {text,[3,42,98,42]},
                 {sep,
                  [{text,"$can be encoded as follows in Erlang:"}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "j\n1> 'EmbeddedExample':encode('B', {'B',[4,5,6,7,8],{x,\"7.77\"}}).\n{ok,<<5,56,0,8,3,55,55,55,46,69,45,50>>} "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}}],
         0,false}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"\"## Naming of Records in .hrl Files"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [15,87,104,101,110,32,116,104,101,32,111,112,116,105,111,
                  110]}],
               0,false},
              {text,[6,42,109,97,112,115,42]},
              {sep,[{text,"\fis given, no"}],0,false},
              {text,[6,42,46,104,114,108,42]},
              {sep,
               [{text,
                 "]files will be generated. The rest of this section describes the behavior of the compiler when"}],
               0,false},
              {text,[6,42,109,97,112,115,42]},
              {sep,[{text,"\fis not used."}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "BWhen an ASN.1 specification is compiled, all defined types of type"}],
               0,false},
              {text,[5,42,83,69,84,42]},
              {sep,[{text,[2,111,114]}],0,false},
              {text,"\n*SEQUENCE*"},
              {sep,
               [{text,"1result in a corresponding record in the generated"}],
               0,false},
              {text,[6,42,46,104,114,108,42]},
              {sep,[{text,"$file. This is because the values for"}],0,false},
              {text,[5,42,83,69,84,42]},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"\n*SEQUENCE*"},
              {sep,
               [{text,"&are represented as records by default."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "KSome special cases of this functionality are presented in the next section."}],
             0,false}],
           0,true},
          null},
         null}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [28,35,35,32,69,109,98,101,100,100,101,100,32,83,116,114,117,99,
              116,117,114,101,100,32,84,121,112,101,115]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [136,73,110,32,65,83,78,46,49,32,105,116,32,105,115,32,97,
                  108,115,111,32,112,111,115,115,105,98,108,101,32,116,111,32,
                  104,97,118,101,32,99,111,109,112,111,110,101,110,116,115,32,
                  116,104,97,116,32,97,114,101,32,116,104,101,109,115,101,108,
                  118,101,115,32,115,116,114,117,99,116,117,114,101,100,32,
                  116,121,112,101,115,46,32,70,111,114,32,101,120,97,109,112,
                  108,101,44,32,105,116,32,105,115,32,112,111,115,115,105,98,
                  108,101,32,116,111,32,104,97,118,101,32,116,104,101,32,102,
                  111,108,108,111,119,105,110,103,58]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Ã\nEmb ::= SEQUENCE {\n    a SEQUENCE OF OCTET STRING,\n    b SET {\n       a INTEGER,\n       b INTEGER DEFAULT 66},\n    c CHOICE {\n       a INTEGER,\n       b FooType } }\n\nFooType ::= [3] VisibleString      "}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "3The following records are generated because of type"}],
                 0,false},
                {text,[5,42,69,109,98,42]},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Z\n-record('Emb,{a, b, c}).\n-record('Emb_b',{a, b = asn1_DEFAULT}). % the embedded SET type "}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [14,86,97,108,117,101,115,32,111,102,32,116,121,112,101]}],
                 0,false},
                {text,[5,42,69,109,98,42]},
                {sep,[{text,"\ecan be assigned as follows:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "i\nV = #'Emb'{a=[\"qqqq\",[1,2,255]], \n           b = #'Emb_b'{a=99}, \n           c ={b,\"Can you see this\"}}."}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [28,70,111,114,32,97,110,32,101,109,98,101,100,100,101,100,
                    32,116,121,112,101,32,111,102,32,116,121,112,101]}],
                 0,false},
                {text,"\n*SEQUENCE*"},
                {sep,[{text,[1,47]}],0,false},
                {text,[5,42,83,69,84,42]},
                {sep,[{text,[4,105,110,32,97]}],0,false},
                {text,"\n*SEQUENCE*"},
                {sep,[{text,[1,47]}],0,false},
                {text,[5,42,83,69,84,42]},
                {sep,
                 [{text,
                   "u, the record name is extended with an underscore and the component name. If the embedded structure is deeper with the"}],
                 0,false},
                {text,"\n*SEQUENCE*"},
                {sep,[{text,[1,44]}],0,false},
                {text,[5,42,83,69,84,42]},
                {sep,[{text,[4,44,32,111,114]}],0,false},
                {text,"\b*CHOICE*"},
                {sep,
                 [{text,
                   "Ttypes in the line, each component name/alternative name is added to the record name."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,{sep,[{sep,[{text,"\bExample:"}],0,false}],0,true},null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "c\nSeq ::= SEQUENCE{\n    a CHOICE{\n        b SEQUENCE {\n           c  INTEGER\n        }\n    }\n}      "}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,[{text,"%This results in the following record:"}],0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [30,10,45,114,101,99,111,114,100,40,39,83,101,113,95,97,95,
                  98,39,44,123,99,125,41,46,32,32,32,32,32,32]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "7If the structured type has a component with an embedded"}],
                 0,false},
                {text,"\r*SEQUENCE OF*"},
                {sep,[{text,[1,47]}],0,false},
                {text,"\b*SET OF*"},
                {sep,[{text," which embedded type in turn is a"}],0,false},
                {text,"\n*SEQUENCE*"},
                {sep,[{text,[1,47]}],0,false},
                {text,[5,42,83,69,84,42]},
                {sep,
                 [{text,
                   [28,44,32,105,116,32,103,105,118,101,115,32,97,32,114,101,
                    99,111,114,100,32,119,105,116,104,32,116,104,101]}],
                 0,false},
                {text,"\r*SEQUENCE OF*"},
                {sep,[{text,[1,47]}],0,false},
                {text,"\b*SET OF*"},
                {sep,
                 [{text,"%addition as in the following example:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [140,10,83,101,113,32,58,58,61,32,83,69,81,85,69,78,67,69,32,
                  123,10,32,32,32,32,97,32,83,69,81,85,69,78,67,69,32,79,70,
                  32,83,69,81,85,69,78,67,69,32,123,10,32,32,32,32,32,32,32,
                  32,32,32,32,98,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,125,10,32,32,32,32,99,32,83,69,84,32,79,70,32,83,69,81,
                  85,69,78,67,69,32,123,10,32,32,32,32,32,32,32,32,32,32,32,
                  100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,10,
                  125,32,32,32,32,32,32]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"&This results in the following records:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "<\n-record('Seq_a_SEQOF'{b}).\n-record('Seq_c_SETOF'{d}).      "}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "Â²A parameterized type is to be considered as an embedded type. Each time such a type is referenced, an instance of it is defined. Thus, in the following example a record with name"}],
                 0,false},
                {text,"\t*'Seq_b'*"},
                {sep,
                 [{text,
                   [19,105,115,32,103,101,110,101,114,97,116,101,100,32,105,
                    110,32,116,104,101]}],
                 0,false},
                {text,[6,42,46,104,114,108,42]},
                {sep,[{text," file and is used to hold values:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "S\nSeq ::= SEQUENCE {\n    b PType{INTEGER}\n}\n\nPType{T} ::= SEQUENCE{\n    id T\n}      "}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [18,35,35,32,82,101,99,117,114,115,105,118,101,32,84,121,112,101,
              115]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "CTypes that refer to themselves are called recursive types. Example:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [134,10,82,101,99,32,58,58,61,32,67,72,79,73,67,69,32,123,10,
                  32,32,32,32,32,110,111,116,104,105,110,103,32,78,85,76,76,
                  44,10,32,32,32,32,32,115,111,109,101,116,104,105,110,103,32,
                  83,69,81,85,69,78,67,69,32,123,10,32,32,32,32,32,32,32,32,
                  32,32,97,32,73,78,84,69,71,69,82,44,10,32,32,32,32,32,32,32,
                  32,32,32,98,32,79,67,84,69,84,32,83,84,82,73,78,71,44,10,32,
                  32,32,32,32,32,32,32,32,32,99,32,82,101,99,32,125,125,32,32,
                  32,32,32,32]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [143,84,104,105,115,32,105,115,32,97,108,108,111,119,101,100,
                  32,105,110,32,65,83,78,46,49,32,97,110,100,32,116,104,101,
                  32,65,83,78,46,49,45,116,111,45,69,114,108,97,110,103,32,99,
                  111,109,112,105,108,101,114,32,115,117,112,112,111,114,116,
                  115,32,116,104,105,115,32,114,101,99,117,114,115,105,118,
                  101,32,116,121,112,101,46,32,65,32,118,97,108,117,101,32,
                  102,111,114,32,116,104,105,115,32,116,121,112,101,32,105,
                  115,32,97,115,115,105,103,110,101,100,32,105,110,32,69,114,
                  108,97,110,103,32,97,115,32,102,111,108,108,111,119,115,
                  58]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Â \nV = {something,#'Rec_something'{a = 77, \n                                b = \"some octets here\", \n                                c = {nothing,'NULL'}}}.      "}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[15,35,35,32,65,83,78,46,49,32,86,97,108,117,101,115]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [296,86,97,108,117,101,115,32,99,97,110,32,98,101,32,97,115,115,
               105,103,110,101,100,32,116,111,32,97,110,32,65,83,78,46,49,32,
               116,121,112,101,32,119,105,116,104,105,110,32,116,104,101,32,
               65,83,78,46,49,32,99,111,100,101,32,105,116,115,101,108,102,44,
               32,97,115,32,111,112,112,111,115,101,100,32,116,111,32,116,104,
               101,32,97,99,116,105,111,110,115,32,105,110,32,116,104,101,32,
               112,114,101,118,105,111,117,115,32,115,101,99,116,105,111,110,
               32,119,104,101,114,101,32,97,32,118,97,108,117,101,32,119,97,
               115,32,97,115,115,105,103,110,101,100,32,116,111,32,97,110,32,
               65,83,78,46,49,32,116,121,112,101,32,105,110,32,69,114,108,97,
               110,103,46,32,84,104,101,32,102,117,108,108,32,118,97,108,117,
               101,32,115,121,110,116,97,120,32,111,102,32,65,83,78,46,49,32,
               105,115,32,115,117,112,112,111,114,116,101,100,32,97,110,100,
               32,88,46,54,56,48,32,100,101,115,99,114,105,98,101,115,32,105,
               110,32,100,101,116,97,105,108,32,104,111,119,32,116,111,32,97,
               115,115,105,103,110,32,118,97,108,117,101,115,32,105,110,32,65,
               83,78,46,49,46,32,65,32,115,104,111,114,116,32,101,120,97,109,
               112,108,101,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "d\nTT ::= SEQUENCE {\n   a INTEGER,\n   b SET OF OCTET STRING }\n\ntt TT ::= {a 77,b {\"kalle\",\"kula\"}}    "}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "eThe value defined here can be used in several ways. It can, for example, be used as the value in some"}],
              0,false},
             {text,"\t*DEFAULT*"},
             {sep,[{text,"\ncomponent:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "B\nSS ::= SET {\n    s OBJECT IDENTIFIER,\n    val TT DEFAULT tt }    "}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "`It can also be used from inside an Erlang program. If this ASN.1 code is defined in ASN.1 module"}],
              0,false},
             {text,"\b*Values*"},
             {sep,
              [{text,
                [17,44,32,116,104,101,32,65,83,78,46,49,32,118,97,108,117,
                 101]}],
              0,false},
             {text,[4,42,116,116,42]},
             {sep,
              [{text,"0can be reached from Erlang as a function call to"}],
              0,false},
             {text,[15,42,39,86,97,108,117,101,115,39,58,116,116,40,41,42]},
             {sep,
              [{text,
                [28,97,115,32,105,110,32,116,104,101,32,102,111,108,108,111,
                 119,105,110,103,32,101,120,97,109,112,108,101,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,[4,10,49,62,32]},
             {text,
              [20,86,97,108,32,61,32,39,86,97,108,117,101,115,39,58,116,116,
               40,41,46]},
             {text,
              [31,10,123,39,84,84,39,44,55,55,44,91,34,107,97,108,108,101,34,
               44,34,107,117,108,97,34,93,125,10,50,62,32]},
             {text,"'{ok,Bytes} = 'Values':encode('TT',Val)."},
             {text,[5,10,123,111,107,44]},
             {text,[1,60]},
             {text,
              "G<48,18,128,1,77,161,13,4,5,107,97,108,108,101,4,4,\n      107,117,108,97"},
             {text,[1,62]},
             {text,[6,62,125,10,52,62,32]},
             {text,
              [28,39,86,97,108,117,101,115,39,58,100,101,99,111,100,101,40,39,
               84,84,39,44,66,121,116,101,115,41,46]},
             {text,"%\n{ok,{'TT',77,[\"kalle\",\"kula\"]}}\n5>  "}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "Â¡This example shows that a function is generated by the compiler that returns a valid Erlang representation of the value, although the value is of a complex type."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [26,70,117,114,116,104,101,114,109,111,114,101,44,32,105,102,
                 32,116,104,101,32,111,112,116,105,111,110]}],
              0,false},
             {text,[6,42,109,97,112,115,42]},
             {sep,
              [{text,
                "7is not used, a macro is generated for each value in the"}],
              0,false},
             {text,[6,42,46,104,114,108,42]},
             {sep,[{text,"\efile. So, the defined value"}],0,false},
             {text,[4,42,116,116,42]},
             {sep,
              [{text,
                [24,99,97,110,32,97,108,115,111,32,98,101,32,101,120,116,114,
                 97,99,116,101,100,32,98,121]}],
              0,false},
             {text,[5,42,63,116,116,42]},
             {sep,
              [{text,
                [20,105,110,32,97,112,112,108,105,99,97,116,105,111,110,32,99,
                 111,100,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\t## Macros"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\bThe type"}],0,false},
            {text,[7,42,77,65,67,82,79,42]},
            {sep,
             [{text,
               "=is not supported. It is no longer part of the ASN.1 standard."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}},
  {sep,
   [{text,"3<a name=\"Information Object\">Information Object</a>"},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"$## ASN.1 Information Objects (X.681)"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "Ã¬Information Object Classes, Information Objects, and Information Object Sets (in the following called classes, objects, and object sets, respectively) are defined in the standard definition X.681. Only a brief explanation is given here."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [318,84,104,101,115,101,32,99,111,110,115,116,114,117,99,116,115,
             32,109,97,107,101,115,32,105,116,32,112,111,115,115,105,98,108,
             101,32,116,111,32,100,101,102,105,110,101,32,111,112,101,110,32,
             116,121,112,101,115,44,32,116,104,97,116,32,105,115,44,32,118,97,
             108,117,101,115,32,111,102,32,116,104,97,116,32,116,121,112,101,
             32,99,97,110,32,98,101,32,111,102,32,97,110,121,32,65,83,78,46,
             49,32,116,121,112,101,46,32,65,108,115,111,44,32,114,101,108,97,
             116,105,111,110,115,104,105,112,115,32,99,97,110,32,98,101,32,
             100,101,102,105,110,101,100,32,98,101,116,119,101,101,110,32,100,
             105,102,102,101,114,101,110,116,32,116,121,112,101,115,32,97,110,
             100,32,118,97,108,117,101,115,44,32,97,115,32,99,108,97,115,115,
             101,115,32,99,97,110,32,104,111,108,100,32,116,121,112,101,115,
             44,32,118,97,108,117,101,115,44,32,111,98,106,101,99,116,115,44,
             32,111,98,106,101,99,116,32,115,101,116,115,44,32,97,110,100,32,
             111,116,104,101,114,32,99,108,97,115,115,101,115,32,105,110,32,
             116,104,101,105,114,32,102,105,101,108,100,115,46,32,65,32,99,
             108,97,115,115,32,99,97,110,32,98,101,32,100,101,102,105,110,101,
             100,32,105,110,32,65,83,78,46,49,32,97,115,32,102,111,108,108,
             111,119,115,58]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [304,10,71,69,78,69,82,65,76,45,80,82,79,67,69,68,85,82,69,32,58,
             58,61,32,67,76,65,83,83,32,123,10,32,32,32,32,32,32,38,77,101,
             115,115,97,103,101,44,10,32,32,32,32,32,32,38,82,101,112,108,121,
             32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,79,80,84,73,79,78,
             65,76,44,10,32,32,32,32,32,32,38,69,114,114,111,114,32,32,32,32,
             32,32,32,32,32,32,32,32,32,32,32,79,80,84,73,79,78,65,76,44,10,
             32,32,32,32,32,32,38,105,100,32,32,32,32,32,32,32,32,32,32,80,
             114,105,110,116,97,98,108,101,83,116,114,105,110,103,32,85,78,73,
             81,85,69,10,125,10,87,73,84,72,32,83,89,78,84,65,88,32,123,10,32,
             32,32,32,32,32,78,69,87,32,77,69,83,83,65,71,69,32,32,32,32,32,
             38,77,101,115,115,97,103,101,10,32,32,32,32,32,32,91,82,69,80,76,
             89,32,32,32,32,32,32,32,32,32,32,32,38,82,101,112,108,121,93,10,
             32,32,32,32,32,32,91,69,82,82,79,82,32,32,32,32,32,32,32,32,32,
             32,32,38,69,114,114,111,114,93,10,32,32,32,32,32,32,65,68,68,82,
             69,83,83,32,32,32,32,32,32,32,32,32,32,38,105,100,10,125,32,32,
             32,32]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [134,65,110,32,111,98,106,101,99,116,32,105,115,32,97,110,32,105,
             110,115,116,97,110,99,101,32,111,102,32,97,32,99,108,97,115,115,
             46,32,65,110,32,111,98,106,101,99,116,32,115,101,116,32,105,115,
             32,97,32,115,101,116,32,99,111,110,116,97,105,110,105,110,103,32,
             111,98,106,101,99,116,115,32,111,102,32,97,32,115,112,101,99,105,
             102,105,101,100,32,99,108,97,115,115,46,32,65,32,100,101,102,105,
             110,105,116,105,111,110,32,99,97,110,32,108,111,111,107,32,97,
             115,32,102,111,108,108,111,119,115,58]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "Ã\nobject1 GENERAL-PROCEDURE ::= {\n    NEW MESSAGE      PrintableString\n    ADDRESS          \"home\"\n}\n\nobject2 GENERAL-PROCEDURE ::= {\n    NEW MESSAGE INTEGER\n    ERROR INTEGER\n    ADDRESS \"remote\"\n}"}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\nThe object"}],0,false},
           {text,"\t*object1*"},
           {sep,[{text,"\eis an instance of the class"}],0,false},
           {text,
            [19,42,71,69,78,69,82,65,76,45,80,82,79,67,69,68,85,82,69,42]},
           {sep,
            [{text,
              "Aand has one type field and one fixed type value field. The object"}],
            0,false},
           {text,"\t*object2*"},
           {sep,
            [{text,
              [26,104,97,115,32,97,108,115,111,32,97,110,32,111,112,116,105,
               111,110,97,108,32,102,105,101,108,100]}],
            0,false},
           {text,[7,42,69,82,82,79,82,42]},
           {sep,[{text,"\", which is a type field. The field"}],0,false},
           {text,"\t*ADDRESS*"},
           {sep,[{text,[4,105,115,32,97]}],0,false},
           {text,"\b*UNIQUE*"},
           {sep,
            [{text,
              "@field. Objects in an object set must have unique values in their"}],
            0,false},
           {text,"\b*UNIQUE*"},
           {sep,[{text,"\ffield, as in"}],0,false},
           {text,
            [20,42,71,69,78,69,82,65,76,45,80,82,79,67,69,68,85,82,69,83,42]},
           {sep,[{text,[1,58]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "F\nGENERAL-PROCEDURES GENERAL-PROCEDURE ::= {\n    object1 | object2}    "}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [260,89,111,117,32,99,97,110,110,111,116,32,101,110,99,111,100,
             101,32,97,32,99,108,97,115,115,44,32,111,98,106,101,99,116,44,32,
             111,114,32,111,98,106,101,99,116,32,115,101,116,44,32,111,110,
             108,121,32,114,101,102,101,114,32,116,111,32,105,116,32,119,104,
             101,110,32,100,101,102,105,110,105,110,103,32,111,116,104,101,
             114,32,65,83,78,46,49,32,101,110,116,105,116,105,101,115,46,32,
             84,121,112,105,99,97,108,108,121,32,121,111,117,32,114,101,102,
             101,114,32,116,111,32,97,32,99,108,97,115,115,32,97,115,32,119,
             101,108,108,32,97,115,32,116,111,32,111,98,106,101,99,116,32,115,
             101,116,115,32,98,121,32,116,97,98,108,101,32,99,111,110,115,116,
             114,97,105,110,116,115,32,97,110,100,32,99,111,109,112,111,110,
             101,110,116,32,114,101,108,97,116,105,111,110,32,99,111,110,115,
             116,114,97,105,110,116,115,32,40,88,46,54,56,50,41,32,105,110,32,
             65,83,78,46,49,32,116,121,112,101,115,44,32,97,115,32,105,110,32,
             116,104,101,32,102,111,108,108,111,119,105,110,103,58]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "Â¨\nStartMessage  ::= SEQUENCE {\n    msgId  GENERAL-PROCEDURE.&id  ({GENERAL-PROCEDURES}),\n    content GENERAL-PROCEDURE.&Message ({GENERAL-PROCEDURES}{@msgId}),\n    }    "}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[7,73,110,32,116,121,112,101]}],0,false},
           {text,[14,42,83,116,97,114,116,77,101,115,115,97,103,101,42]},
           {sep,[{text," , the constraint following field"}],0,false},
           {text,"\t*content*"},
           {sep,
            [{text,
              [29,116,101,108,108,115,32,116,104,97,116,32,105,110,32,97,32,
               118,97,108,117,101,32,111,102,32,116,121,112,101]}],
            0,false},
           {text,[14,42,83,116,97,114,116,77,101,115,115,97,103,101,42]},
           {sep,
            [{text,
              [18,116,104,101,32,118,97,108,117,101,32,105,110,32,102,105,101,
               108,100]}],
            0,false},
           {text,"\t*content*"},
           {sep,
            [{text,"6must come from the same object that is chosen by field"}],
            0,false},
           {text,[7,42,109,115,103,73,100,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\rSo, the value"}],0,false},
           {text,
            ">*#'StartMessage'{msgId=\"home\",content=\"Any Printable String\"}*"},
           {sep,
            [{text,
              [23,105,115,32,108,101,103,97,108,32,116,111,32,101,110,99,111,
               100,101,32,97,115,32,97]}],
            0,false},
           {text,[14,42,83,116,97,114,116,77,101,115,115,97,103,101,42]},
           {sep,
            [{text,
              [25,118,97,108,117,101,46,32,72,111,119,101,118,101,114,44,32,
               116,104,101,32,118,97,108,117,101]}],
            0,false},
           {text,
            "8*#'StartMessage'{msgId=\"remote\", content=\"Some String\"}*"},
           {sep,
            [{text,
              [31,105,115,32,105,108,108,101,103,97,108,32,97,115,32,116,104,
               101,32,99,111,110,115,116,114,97,105,110,116,32,105,110]}],
            0,false},
           {text,[14,42,83,116,97,114,116,77,101,115,115,97,103,101,42]},
           {sep,
            [{text,
              "Ltells that when you have chosen a value from a specific object in object set"}],
            0,false},
           {text,
            [20,42,71,69,78,69,82,65,76,45,80,82,79,67,69,68,85,82,69,83,42]},
           {sep,[{text,"\bin field"}],0,false},
           {text,[7,42,109,115,103,73,100,42]},
           {sep,
            [{text,
              "n, you must choose a value from that same object in the content field too. In this second case, it is to be any"}],
            0,false},
           {text,"\t*INTEGER*"},
           {sep,[{text,[6,118,97,108,117,101,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,[14,42,83,116,97,114,116,77,101,115,115,97,103,101,42]},
           {sep,[{text,"\fcan in field"}],0,false},
           {text,"\t*content*"},
           {sep,
            [{text,
              "@be encoded with a value of any type that an object in object set"}],
            0,false},
           {text,
            [20,42,71,69,78,69,82,65,76,45,80,82,79,67,69,68,85,82,69,83,42]},
           {sep,[{text,"\nhas in its"}],0,false},
           {text,"\r*NEW MESSAGE*"},
           {sep,[{text,"(field. This field refers to a type field"}],0,false},
           {text,"\n*&Message*"},
           {sep,
            [{text,
              [19,105,110,32,116,104,101,32,99,108,97,115,115,46,32,70,105,
               101,108,100]}],
            0,false},
           {text,[7,42,109,115,103,73,100,42]},
           {sep,
            [{text,
              [22,105,115,32,97,108,119,97,121,115,32,101,110,99,111,100,101,
               100,32,97,115,32,97]}],
            0,false},
           {text,
            [17,42,80,114,105,110,116,97,98,108,101,83,116,114,105,110,103,
             42]},
           {sep,
            [{text,"3, as the field refers to a fixed type in the class."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [153,73,110,32,112,114,97,99,116,105,99,101,44,32,111,98,106,101,
             99,116,32,115,101,116,115,32,97,114,101,32,117,115,117,97,108,
             108,121,32,100,101,99,108,97,114,101,100,32,116,111,32,98,101,32,
             101,120,116,101,110,115,105,98,108,101,32,115,111,32,116,104,97,
             116,32,109,111,114,101,32,111,98,106,101,99,116,115,32,99,97,110,
             32,98,101,32,97,100,100,101,100,32,116,111,32,116,104,101,32,115,
             101,116,32,108,97,116,101,114,46,32,69,120,116,101,110,115,105,
             98,105,108,105,116,121,32,105,115,32,105,110,100,105,99,97,116,
             101,100,32,97,115,32,102,111,108,108,111,119,115,58]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "K\nGENERAL-PROCEDURES GENERAL-PROCEDURE ::= {\n    object1 | object2, ...}    "}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "jWhen decoding a type that uses an extensible set constraint, it is always possible that the value in field"}],
            0,false},
           {text,"\b*UNIQUE*"},
           {sep,
            [{text,
              "Â£is unknown (that is, the type has been encoded with a later version of the ASN.1 specification). The unencoded data is then returned wrapped in a tuple as follows:"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [23,10,123,97,115,110,49,95,79,80,69,78,84,89,80,69,44,66,105,110,
             97,114,121,125]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[4,72,101,114,101]}],0,false},
           {text,"\b*Binary*"},
           {sep,
            [{text,
              ">is an Erlang binary that contains the encoded data. (If option"}],
            0,false},
           {text,
            [21,42,108,101,103,97,99,121,95,101,114,108,97,110,103,95,116,121,
             112,101,115,42]},
           {sep,
            [{text,"-has been given, only the binary is returned.)"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\e## Parameterization (X.683)"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "ÃParameterization, which is defined in X.683, can be used when defining types, values, value sets, classes, objects, or object sets. A part of a definition can be supplied as a parameter. For example, if a"}],
           0,false},
          {text,[6,42,84,121,112,101,42]},
          {sep,
           [{text,
             [136,105,115,32,117,115,101,100,32,105,110,32,97,32,100,101,102,
              105,110,105,116,105,111,110,32,119,105,116,104,32,97,32,99,101,
              114,116,97,105,110,32,112,117,114,112,111,115,101,44,32,121,111,
              117,32,119,97,110,116,32,116,104,101,32,116,121,112,101,32,110,
              97,109,101,32,116,111,32,101,120,112,114,101,115,115,32,116,104,
              101,32,105,110,116,101,110,116,105,111,110,46,32,84,104,105,115,
              32,99,97,110,32,98,101,32,100,111,110,101,32,119,105,116,104,32,
              112,97,114,97,109,101,116,101,114,105,122,97,116,105,111,110,
              46]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "ÃWhen many types (or another ASN.1 entity) only differ in some minor cases, but the structure of the types is similar, only one general type can be defined and the differences can be supplied through parameters."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"#Example of use of parameterization:"}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [144,10,71,101,110,101,114,97,108,123,84,121,112,101,125,32,58,58,
            61,32,83,69,81,85,69,78,67,69,10,123,10,32,32,32,32,32,110,117,
            109,98,101,114,32,32,32,32,32,73,78,84,69,71,69,82,44,10,32,32,32,
            32,32,115,116,114,105,110,103,32,32,32,32,32,84,121,112,101,10,
            125,10,32,32,32,32,32,32,10,84,49,32,58,58,61,32,71,101,110,101,
            114,97,108,123,80,114,105,110,116,97,98,108,101,83,116,114,105,
            110,103,125,10,10,84,50,32,58,58,61,32,71,101,110,101,114,97,108,
            123,66,73,84,32,83,84,82,73,78,71,125]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,"1An example of a value that can be encoded as type"}],
           0,false},
          {text,[4,42,84,49,42]},
          {sep,[{text,[2,105,115]}],0,false},
          {text,[14,42,123,49,50,44,34,104,101,108,108,111,34,125,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "Â¶Notice that the compiler does not generate encode/decode functions for parameterized types, only for the instances of the parameterized types. Therefore, if a file contains the types"}],
           0,false},
          {text,"\v*General{}*"},
          {sep,[{text,[1,44]}],0,false},
          {text,[4,42,84,49,42]},
          {sep,[{text,[5,44,32,97,110,100]}],0,false},
          {text,[4,42,84,50,42]},
          {sep,
           [{text,
             "Jas in the previous example, encode/decode functions are only generated for"}],
           0,false},
          {text,[4,42,84,49,42]},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,[4,42,84,50,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
