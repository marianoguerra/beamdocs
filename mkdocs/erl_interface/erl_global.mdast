{above,
 {above,
  {above,
   {above,
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f# erl_global"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f# erl_global"},null},null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"!Access globally registered names."}],0,false}],
       0,true},
      null},
     null}}},
  {above,
   {above,{above,{text,[0]},null},null},
   {above,
    {above,
     {sep,
      [{sep,
        [{sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "RThe support for VxWorks is deprecated as of OTP 22, and will be removed in OTP 23."}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [14,84,104,101,32,111,108,100,32,108,101,103,97,99,121]}],
                   0,false},
                  {text,
                   [15,42,101,114,108,95,105,110,116,101,114,102,97,99,101,
                    42]},
                  {sep,
                   [{text,
                     [30,108,105,98,114,97,114,121,32,40,102,117,110,99,116,
                      105,111,110,115,32,119,105,116,104,32,112,114,101,102,
                      105,120]}],
                   0,false},
                  {text,[6,42,101,114,108,95,42]},
                  {sep,
                   [{text,
                     "W) is deprecated as of OTP 22, and will be removed in OTP 23. This does not apply to the"}],
                   0,false},
                  {text,[4,42,101,105,42]},
                  {sep,
                   [{text,
                     [23,108,105,98,114,97,114,121,46,32,82,101,97,115,111,
                      110,97,98,108,121,32,110,101,119]}],
                   0,false},
                  {text,[5,42,103,99,99,42]},
                  {sep,
                   [{text,
                     "_compilers will issue deprecation warnings. In order to disable these warnings, define the macro"}],
                   0,false},
                  {text,
                   [17,42,69,73,95,78,79,95,68,69,80,82,95,87,65,82,78,42]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "XThis module provides support for registering, looking up, and unregistering names in the"}],
                 0,false},
                {text,"\b*global*"},
                {sep,[{text,"!module. For more information, see"}],0,false},
                {text,
                 [25,91,107,101,114,110,101,108,47,103,108,111,98,97,108,93,
                  40,46,47,103,108,111,98,97,108,41]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "Ã´Notice that the functions below perform an RPC using an open file descriptor provided by the caller. This file descriptor must not be used for other traffic during the global operation, as the function can then receive unexpected data and fail."}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,true},
     null},
    null}}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"%## erl_global_names(fd,count):char **"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [28,79,98,116,97,105,110,32,108,105,115,116,32,111,102,32,103,108,
            111,98,97,108,32,110,97,109,101,115,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},{sep,[{text,[7,105,110,116,32,102,100,59]}],0,false}],
     0,false},
    {sep,[{text,[1,42]},{sep,[{text,"\fint \\*count;"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"+Retrieves a list of all known global names."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[4,42,102,100,42]},
          {sep,
           [{text,".is an open descriptor to an Erlang connection."}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[7,42,99,111,117,110,116,42]},
          {sep,[{text," is the address of an integer, or"}],0,false},
          {text,[6,42,78,85,76,76,42]},
          {sep,[{text,[4,46,32,73,102]}],0,false},
          {text,[7,42,99,111,117,110,116,42]},
          {sep,[{text,[6,105,115,32,110,111,116]}],0,false},
          {text,[6,42,78,85,76,76,42]},
          {sep,
           [{text,
             "9, it is set by the function to the number of names found."}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "hOn success, the function returns an array of strings, each containing a single registered name, and sets"}],
             0,false},
            {text,[7,42,99,111,117,110,116,42]},
            {sep,
             [{text,
               "Ato the number of names found. The array is terminated by a single"}],
             0,false},
            {text,[6,42,78,85,76,76,42]},
            {sep,
             [{text,")pointer. On failure, the function returns"}],
             0,false},
            {text,[6,42,78,85,76,76,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[7,42,99,111,117,110,116,42]},
            {sep,
             [{text,
               [16,105,115,32,110,111,116,32,109,111,100,105,102,105,101,100,
                46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
          {sep,
           [{text,[4,32,32,32,32]},
            {sep,
             [{sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,
                          "{It is the caller's responsibility to free the array afterwards. It has been allocated by the function with a single call to"}],
                        0,false},
                       {text,"\n*malloc()*"},
                       {sep,[{text,"\r, so a single"}],0,false},
                       {text,"\b*free()*"},
                       {sep,
                        [{text,
                          [25,105,115,32,97,108,108,32,116,104,97,116,32,105,
                           115,32,110,101,99,101,115,115,97,114,121,46]}],
                        0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,true}],
           0,false}},
         {text,[0]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"'## erl_global_register(fd,name,pid):int"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [26,82,101,103,105,115,116,101,114,32,97,32,110,97,109,101,32,105,
            110,32,103,108,111,98,97,108,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},{sep,[{text,[7,105,110,116,32,102,100,59]}],0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [18,99,111,110,115,116,32,99,104,97,114,32,92,42,110,97,109,101,
           59]}],
        0,false}],
      0,false}},
    {sep,[{text,[1,42]},{sep,[{text,"\fETERM \\*pid;"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [19,82,101,103,105,115,116,101,114,115,32,97,32,110,97,109,101,
                32,105,110]}],
             0,false},
            {text,"\b*global*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[4,42,102,100,42]},
           {sep,
            [{text,".is an open descriptor to an Erlang connection."}],
            0,false}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[6,42,110,97,109,101,42]},
           {sep,
            [{text,
              [26,105,115,32,116,104,101,32,110,97,109,101,32,116,111,32,114,
               101,103,105,115,116,101,114,32,105,110]}],
            0,false},
           {text,"\b*global*"},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[5,42,112,105,100,42]},
          {sep,[{text,"(is the pid that is to be associated with"}],0,false},
          {text,[6,42,110,97,109,101,42]},
          {sep,[{text,"\e. This value is returned by"}],0,false},
          {text,"\b*global*"},
          {sep,[{text,"&when processes request the location of"}],0,false},
          {text,[6,42,110,97,109,101,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
            {text,[3,42,48,42]},
            {sep,
             [{text,
               [21,111,110,32,115,117,99,99,101,115,115,44,32,111,116,104,101,
                114,119,105,115,101]}],
             0,false},
            {text,[4,42,45,49,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"%## erl_global_unregister(fd,name):int"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [30,85,110,114,101,103,105,115,116,101,114,32,97,32,110,97,109,101,
            32,102,114,111,109,32,103,108,111,98,97,108,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},{sep,[{text,[7,105,110,116,32,102,100,59]}],0,false}],
     0,false},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [18,99,111,110,115,116,32,99,104,97,114,32,92,42,110,97,109,101,59]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [23,85,110,114,101,103,105,115,116,101,114,115,32,97,32,110,97,
                109,101,32,102,114,111,109]}],
             0,false},
            {text,"\b*global*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[4,42,102,100,42]},
          {sep,
           [{text,".is an open descriptor to an Erlang connection."}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[6,42,110,97,109,101,42]},
          {sep,
           [{text,
             [30,105,115,32,116,104,101,32,110,97,109,101,32,116,111,32,117,
              110,114,101,103,105,115,116,101,114,32,102,114,111,109]}],
           0,false},
          {text,"\b*global*"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
            {text,[3,42,48,42]},
            {sep,
             [{text,
               [21,111,110,32,115,117,99,99,101,115,115,44,32,111,116,104,101,
                114,119,105,115,101]}],
             0,false},
            {text,[4,42,45,49,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"+## erl_global_whereis(fd,name,node):ETERM *"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [25,76,111,111,107,32,117,112,32,97,32,110,97,109,101,32,105,110,
            32,103,108,111,98,97,108,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},{sep,[{text,[7,105,110,116,32,102,100,59]}],0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [18,99,111,110,115,116,32,99,104,97,114,32,92,42,110,97,109,101,
           59]}],
        0,false}],
      0,false}},
    {sep,[{text,[1,42]},{sep,[{text,"\fchar \\*node;"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [18,76,111,111,107,115,32,117,112,32,97,32,110,97,109,101,32,
                105,110]}],
             0,false},
            {text,"\b*global*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[4,42,102,100,42]},
          {sep,
           [{text,".is an open descriptor to an Erlang connection."}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[6,42,110,97,109,101,42]},
          {sep,[{text,"&is the name that is to be looked up in"}],0,false},
          {text,"\b*global*"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,[6,42,110,111,100,101,42]},
            {sep,[{text,[6,105,115,32,110,111,116]}],0,false},
            {text,[6,42,78,85,76,76,42]},
            {sep,
             [{text,
               "W, it is a pointer to a buffer where the function can fill in the name of the node where"}],
             0,false},
            {text,[6,42,110,97,109,101,42]},
            {sep,[{text,"\tis found."}],0,false},
            {text,[6,42,110,111,100,101,42]},
            {sep,
             [{text,
               [25,99,97,110,32,98,101,32,112,97,115,115,101,100,32,100,105,
                114,101,99,116,108,121,32,116,111]}],
             0,false},
            {text,[15,42,101,114,108,95,99,111,110,110,101,99,116,40,41,42]},
            {sep,[{text,"\rif necessary."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [143,79,110,32,115,117,99,99,101,115,115,44,32,116,104,101,32,
                102,117,110,99,116,105,111,110,32,114,101,116,117,114,110,115,
                32,97,110,32,69,114,108,97,110,103,32,112,105,100,32,99,111,
                110,116,97,105,110,105,110,103,32,116,104,101,32,97,100,100,
                114,101,115,115,32,111,102,32,116,104,101,32,115,112,101,99,
                105,102,105,101,100,32,110,97,109,101,44,32,97,110,100,32,116,
                104,101,32,110,111,100,101,32,105,115,32,105,110,105,116,105,
                97,108,105,122,101,100,32,116,111,32,116,104,101,32,110,111,
                100,101,32,110,97,109,101,32,119,104,101,114,101]}],
             0,false},
            {text,[6,42,110,97,109,101,42]},
            {sep,
             [{text,
               [21,105,115,32,102,111,117,110,100,46,32,79,110,32,102,97,105,
                108,117,114,101,44]}],
             0,false},
            {text,[6,42,78,85,76,76,42]},
            {sep,
             [{text,
               [15,105,115,32,114,101,116,117,114,110,101,100,32,97,110,100]}],
             0,false},
            {text,[6,42,110,111,100,101,42]},
            {sep,
             [{text,
               [16,105,115,32,110,111,116,32,109,111,100,105,102,105,101,100,
                46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
