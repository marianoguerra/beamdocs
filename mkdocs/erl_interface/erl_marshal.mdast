{above,
 {above,
  {above,
   {above,
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\r# erl_marshal"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\r# erl_marshal"},null},null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"&Encoding and decoding of Erlang terms."}],0,false}],
       0,true},
      null},
     null}}},
  {above,
   {above,{above,{text,[0]},null},null},
   {above,
    {above,
     {sep,
      [{sep,
        [{sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "RThe support for VxWorks is deprecated as of OTP 22, and will be removed in OTP 23."}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [14,84,104,101,32,111,108,100,32,108,101,103,97,99,121]}],
                   0,false},
                  {text,
                   [15,42,101,114,108,95,105,110,116,101,114,102,97,99,101,
                    42]},
                  {sep,
                   [{text,
                     [30,108,105,98,114,97,114,121,32,40,102,117,110,99,116,
                      105,111,110,115,32,119,105,116,104,32,112,114,101,102,
                      105,120]}],
                   0,false},
                  {text,[6,42,101,114,108,95,42]},
                  {sep,
                   [{text,
                     "W) is deprecated as of OTP 22, and will be removed in OTP 23. This does not apply to the"}],
                   0,false},
                  {text,[4,42,101,105,42]},
                  {sep,
                   [{text,
                     [23,108,105,98,114,97,114,121,46,32,82,101,97,115,111,
                      110,97,98,108,121,32,110,101,119]}],
                   0,false},
                  {text,[5,42,103,99,99,42]},
                  {sep,
                   [{text,
                     "_compilers will issue deprecation warnings. In order to disable these warnings, define the macro"}],
                   0,false},
                  {text,
                   [17,42,69,73,95,78,79,95,68,69,80,82,95,87,65,82,78,42]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [138,84,104,105,115,32,109,111,100,117,108,101,32,99,111,110,
                  116,97,105,110,115,32,102,117,110,99,116,105,111,110,115,32,
                  102,111,114,32,101,110,99,111,100,105,110,103,32,69,114,108,
                  97,110,103,32,116,101,114,109,115,32,105,110,116,111,32,97,
                  32,115,101,113,117,101,110,99,101,32,111,102,32,98,121,116,
                  101,115,44,32,97,110,100,32,102,111,114,32,100,101,99,111,
                  100,105,110,103,32,69,114,108,97,110,103,32,116,101,114,109,
                  115,32,102,114,111,109,32,97,32,115,101,113,117,101,110,99,
                  101,32,111,102,32,98,121,116,101,115,46]}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,true},
     null},
    null}}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"$## erl_compare_ext(bufp1, bufp2):int"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [31,67,111,109,112,97,114,101,32,101,110,99,111,100,101,100,32,98,
            121,116,101,32,115,101,113,117,101,110,99,101,115,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,[1,42]},
     {sep,
      [{text,
        [30,117,110,115,105,103,110,101,100,32,99,104,97,114,32,92,42,98,117,
         102,112,49,44,92,42,98,117,102,112,50,59]}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,[{sep,[{text,"\eCompares two encoded terms."}],0,false}],0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[7,42,98,117,102,112,49,42]},
          {sep,
           [{text,"4is a buffer containing an encoded Erlang term term1."}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[7,42,98,117,102,112,50,42]},
          {sep,
           [{text,"4is a buffer containing an encoded Erlang term term2."}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
            {text,[3,42,48,42]},
            {sep,
             [{text,
               [23,105,102,32,116,104,101,32,116,101,114,109,115,32,97,114,
                101,32,101,113,117,97,108,44]}],
             0,false},
            {text,[4,42,45,49,42]},
            {sep,[{text,[2,105,102]}],0,false},
            {text,[7,42,116,101,114,109,49,42]},
            {sep,[{text,[1,60]}],0,false},
            {text,[7,42,116,101,114,109,50,42]},
            {sep,[{text,[4,44,32,111,114]}],0,false},
            {text,[3,42,49,42]},
            {sep,[{text,[2,105,102]}],0,false},
            {text,[7,42,116,101,114,109,50,42]},
            {sep,[{text,[1,60]}],0,false},
            {text,[7,42,116,101,114,109,49,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\e## erl_decode(bufp):ETERM *"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text," ## erl_decode_buf(bufpp):ETERM *"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"+Convert a term from Erlang external format."}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [21,117,110,115,105,103,110,101,100,32,99,104,97,114,32,92,42,98,117,
          102,112,59]}],
       0,false}],
     0,false},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [24,117,110,115,105,103,110,101,100,32,99,104,97,114,32,92,42,92,42,
          98,117,102,112,112,59]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,[14,42,101,114,108,95,100,101,99,111,100,101,40,41,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,
             [18,42,101,114,108,95,100,101,99,111,100,101,95,98,117,102,40,41,
              42]},
            {sep,
             [{text,
               "Idecode the contents of a buffer and return the corresponding Erlang term."}],
             0,false},
            {text,
             [18,42,101,114,108,95,100,101,99,111,100,101,95,98,117,102,40,41,
              42]},
            {sep,
             [{text,
               "fprovides a simple mechanism for dealing with several encoded terms stored consecutively in the buffer."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[6,42,98,117,102,112,42]},
          {sep,
           [{text,
             "Eis a pointer to a buffer containing one or more encoded Erlang terms."}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[7,42,98,117,102,112,112,42]},
          {sep,
           [{text,
             [134,105,115,32,116,104,101,32,97,100,100,114,101,115,115,32,111,
              102,32,97,32,98,117,102,102,101,114,32,112,111,105,110,116,101,
              114,46,32,84,104,101,32,98,117,102,102,101,114,32,99,111,110,
              116,97,105,110,115,32,111,110,101,32,111,114,32,109,111,114,101,
              32,99,111,110,115,101,99,117,116,105,118,101,108,121,32,101,110,
              99,111,100,101,100,32,69,114,108,97,110,103,32,116,101,114,109,
              115,46,32,70,111,108,108,111,119,105,110,103,32,97,32,115,117,
              99,99,101,115,115,102,117,108,32,99,97,108,108,32,116,111]}],
           0,false},
          {text,
           [18,42,101,114,108,95,100,101,99,111,100,101,95,98,117,102,40,41,
            42]},
          {sep,[{text,[1,44]}],0,false},
          {text,[7,42,98,117,102,112,112,42]},
          {sep,
           [{text,"6is updated so that it points to the next encoded term."}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,[14,42,101,114,108,95,100,101,99,111,100,101,40,41,42]},
            {sep,
             [{text,
               "7returns an Erlang term corresponding to the contents of"}],
             0,false},
            {text,[6,42,98,117,102,112,42]},
            {sep,
             [{text,
               [21,111,110,32,115,117,99,99,101,115,115,44,32,111,116,104,101,
                114,119,105,115,101]}],
             0,false},
            {text,[6,42,78,85,76,76,42]},
            {sep,[{text,[1,46]}],0,false},
            {text,
             [18,42,101,114,108,95,100,101,99,111,100,101,95,98,117,102,40,41,
              42]},
            {sep,
             [{text,
               "Mreturns an Erlang term corresponding to the first of the consecutive terms in"}],
             0,false},
            {text,[7,42,98,117,102,112,112,42]},
            {sep,[{text,"\tand moves"}],0,false},
            {text,[7,42,98,117,102,112,112,42]},
            {sep,
             [{text,
               "Yforward to point to the next term in the buffer. On failure, each of the functions return"}],
             0,false},
            {text,[6,42,78,85,76,76,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [29,35,35,32,101,114,108,95,101,110,99,111,100,101,40,116,101,114,109,
        44,32,98,117,102,112,41,58,105,110,116]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\"## erl_encode_buf(term, bufpp):int"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"+Convert a term into Erlang external format."}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,[{text,[1,42]},{sep,[{text,"\rETERM \\*term;"}],0,false}],0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [21,117,110,115,105,103,110,101,100,32,99,104,97,114,32,92,42,98,
           117,102,112,59]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [24,117,110,115,105,103,110,101,100,32,99,104,97,114,32,92,42,92,42,
          98,117,102,112,112,59]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,[14,42,101,114,108,95,101,110,99,111,100,101,40,41,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,
             [18,42,101,114,108,95,101,110,99,111,100,101,95,98,117,102,40,41,
              42]},
            {sep,
             [{text,
               "Eencode Erlang terms into external format for storage or transmission."}],
             0,false},
            {text,
             [18,42,101,114,108,95,101,110,99,111,100,101,95,98,117,102,40,41,
              42]},
            {sep,
             [{text,
               "Xprovides a simple mechanism for encoding several terms consecutively in the same buffer."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[6,42,116,101,114,109,42]},
           {sep,[{text," is an Erlang term to be encoded."}],0,false}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[6,42,98,117,102,112,42]},
           {sep,
            [{text,
              "Eis a pointer to a buffer containing one or more encoded Erlang terms."}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[7,42,98,117,102,112,112,42]},
          {sep,
           [{text,
             [127,105,115,32,97,32,112,111,105,110,116,101,114,32,116,111,32,
              97,32,112,111,105,110,116,101,114,32,116,111,32,97,32,98,117,
              102,102,101,114,32,99,111,110,116,97,105,110,105,110,103,32,111,
              110,101,32,111,114,32,109,111,114,101,32,99,111,110,115,101,99,
              117,116,105,118,101,108,121,32,101,110,99,111,100,101,100,32,69,
              114,108,97,110,103,32,116,101,114,109,115,46,32,70,111,108,108,
              111,119,105,110,103,32,97,32,115,117,99,99,101,115,115,102,117,
              108,32,99,97,108,108,32,116,111]}],
           0,false},
          {text,
           [18,42,101,114,108,95,101,110,99,111,100,101,95,98,117,102,40,41,
            42]},
          {sep,[{text,[1,44]}],0,false},
          {text,[7,42,98,117,102,112,112,42]},
          {sep,
           [{text,
             "Gis updated so that it points to the position for the next encoded term."}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "RThese functions return the number of bytes written to buffer on success, otherwise"}],
             0,false},
            {text,[3,42,48,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [273,78,111,116,105,99,101,32,116,104,97,116,32,110,111,32,98,
                111,117,110,100,115,32,99,104,101,99,107,105,110,103,32,105,
                115,32,100,111,110,101,32,111,110,32,116,104,101,32,98,117,
                102,102,101,114,46,32,73,116,32,105,115,32,116,104,101,32,99,
                97,108,108,101,114,39,115,32,114,101,115,112,111,110,115,105,
                98,105,108,105,116,121,32,116,111,32,101,110,115,117,114,101,
                32,116,104,97,116,32,116,104,101,32,98,117,102,102,101,114,32,
                105,115,32,108,97,114,103,101,32,101,110,111,117,103,104,32,
                116,111,32,104,111,108,100,32,116,104,101,32,101,110,99,111,
                100,101,100,32,116,101,114,109,115,46,32,89,111,117,32,99,97,
                110,32,101,105,116,104,101,114,32,117,115,101,32,97,32,115,
                116,97,116,105,99,32,98,117,102,102,101,114,32,116,104,97,116,
                32,105,115,32,108,97,114,103,101,32,101,110,111,117,103,104,
                32,116,111,32,104,111,108,100,32,116,104,101,32,116,101,114,
                109,115,32,121,111,117,32,101,120,112,101,99,116,32,116,111,
                32,110,101,101,100,32,105,110,32,121,111,117,114,32,112,114,
                111,103,114,97,109,44,32,111,114,32,117,115,101]}],
             0,false},
            {text,
             [16,42,101,114,108,95,116,101,114,109,95,108,101,110,40,41,42]},
            {sep,
             [{text,"5to determine the exact requirements for a given term."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "ºThe following can help you estimate the buffer requirements for a term. Notice that this information is implementation-specific, and can change in future versions. If you are unsure, use"}],
             0,false},
            {text,
             [16,42,101,114,108,95,116,101,114,109,95,108,101,110,40,41,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [147,69,114,108,97,110,103,32,116,101,114,109,115,32,97,114,101,
              32,101,110,99,111,100,101,100,32,119,105,116,104,32,97,32,49,32,
              98,121,116,101,32,116,97,103,32,116,104,97,116,32,105,100,101,
              110,116,105,102,105,101,115,32,116,104,101,32,116,121,112,101,
              32,111,102,32,111,98,106,101,99,116,44,32,97,32,50,45,32,111,
              114,32,52,45,98,121,116,101,32,108,101,110,103,116,104,32,102,
              105,101,108,100,44,32,97,110,100,32,116,104,101,110,32,116,104,
              101,32,100,97,116,97,32,105,116,115,101,108,102,46,32,83,112,
              101,99,105,102,105,99,97,108,108,121,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,116,62]},
                            {sep,[{text,[6,84,117,112,108,101,115]}],0,false},
                            {text,[5,60,47,100,116,62]}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {text,
                             ".Need 5 bytes, plus the space for each element."},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,[{text,[5,76,105,115,116,115]}],0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {text,
                           "]Need 5 bytes, plus the space for each element, and 1 more byte for the empty list at the end."},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,
                          [{text,
                            [17,83,116,114,105,110,103,115,32,97,110,100,32,
                             97,116,111,109,115]}],
                          0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {text,
                         "ÄNeed 3 bytes, plus 1 byte for each character (the terminating 0 is not encoded). Really long strings (more than 64k characters) are encoded as lists. Atoms cannot contain more than 256 characters."},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,[{text,"\bIntegers"}],0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {text,"\rNeed 5 bytes."},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,[{text,"\nCharacters"}],0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {text,
                     [30,40,73,110,116,101,103,101,114,115,32,60,32,50,53,54,
                      41,32,110,101,101,100,32,50,32,98,121,116,101,115,46]},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,
                    [{text,
                      [22,70,108,111,97,116,105,110,103,32,112,111,105,110,
                       116,32,110,117,109,98,101,114,115]}],
                    0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {text,[14,78,101,101,100,32,51,50,32,98,121,116,101,115,46]},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[{text,[4,80,105,100,115]}],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {text,
                 "BNeed 10 bytes, plus the space for the node name, which is an atom."},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,
                [{text,
                  [14,80,111,114,116,115,32,97,110,100,32,82,101,102,115]}],
                0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {text,
               "ANeed 6 bytes, plus the space for the node name, which is an atom."},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "xThe total space required is the result calculated from the information above, plus 1 more byte for a version identifier."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [25,35,35,32,101,114,108,95,101,120,116,95,115,105,122,101,40,98,117,
        102,112,41,58,105,110,116]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [31,67,111,117,110,116,32,101,108,101,109,101,110,116,115,32,105,
            110,32,101,110,99,111,100,101,100,32,116,101,114,109,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,[1,42]},
     {sep,
      [{text,
        [21,117,110,115,105,103,110,101,100,32,99,104,97,114,32,92,42,98,117,
         102,112,59]}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"2Returns the number of elements in an encoded term."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"### erl_ext_type(bufp):unsigned char"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"+Determine type of an encoded byte sequence."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,[1,42]},
     {sep,
      [{text,
        [21,117,110,115,105,103,110,101,100,32,99,104,97,114,32,92,42,98,117,
         102,112,59]}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "WIdentifies and returns the type of Erlang term encoded in a buffer. It skips a trailing"}],
             0,false},
            {text,"\t**magic**"},
            {sep,[{text,"\videntifier."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
            {text,[3,42,48,42]},
            {sep,
             [{text,"+if the type cannot be determined or one of:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {sep,[{text,[1,42]},{text,"\r*ERL_INTEGER*"}],0,false},
               {sep,[{text,[1,42]},{text,"\n*ERL_ATOM*"}],0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,"\t*ERL_PID*"},
                  {sep,[{text,"\e(Erlang process identifier)"}],0,false}],
                 0,false}],
               0,false}},
             {sep,[{text,[1,42]},{text,"\n*ERL_PORT*"}],0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,"\t*ERL_REF*"},
                {sep,
                 [{text,
                   [18,40,69,114,108,97,110,103,32,114,101,102,101,114,101,
                    110,99,101,41]}],
                 0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {text,[16,42,69,82,76,95,69,77,80,84,89,95,76,73,83,84,42]}],
            0,false}},
          {sep,[{text,[1,42]},{text,"\n*ERL_LIST*"}],0,false}},
         {sep,[{text,[1,42]},{text,"\v*ERL_TUPLE*"}],0,false}},
        {sep,[{text,[1,42]},{text,"\v*ERL_FLOAT*"}],0,false}},
       {sep,[{text,[1,42]},{text,"\f*ERL_BINARY*"}],0,false}},
      {sep,
       [{text,[1,42]},{text,[14,42,69,82,76,95,70,85,78,67,84,73,79,78,42]}],
       0,false}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"*## erl_peek_ext(bufp, pos):unsigned char *"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [23,83,116,101,112,32,111,118,101,114,32,101,110,99,111,100,101,
            100,32,116,101,114,109,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [21,117,110,115,105,103,110,101,100,32,99,104,97,114,32,92,42,98,117,
          102,112,59]}],
       0,false}],
     0,false},
    {sep,[{text,[1,42]},{sep,[{text,"\bint pos;"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "mThis function is used for stepping over one or more encoded terms in a buffer, to directly access later term."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[6,42,98,117,102,112,42]},
          {sep,
           [{text,
             "Eis a pointer to a buffer containing one or more encoded Erlang terms."}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[5,42,112,111,115,42]},
          {sep,
           [{text,"4indicates how many terms to step over in the buffer."}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "BReturns a pointer to a subterm that can be used in a later call to"}],
             0,false},
            {text,[14,42,101,114,108,95,100,101,99,111,100,101,40,41,42]},
            {sep,
             [{text,
               ">to retrieve the term at that position. If there is no term, or"}],
             0,false},
            {text,[5,42,112,111,115,42]},
            {sep,
             [{text,"1would exceed the size of the terms in the buffer,"}],
             0,false},
            {text,[6,42,78,85,76,76,42]},
            {sep,[{text,"\fis returned."}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [22,35,35,32,101,114,108,95,116,101,114,109,95,108,101,110,40,116,41,
        58,105,110,116]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [31,68,101,116,101,114,109,105,110,101,32,101,110,99,111,100,101,
            100,32,115,105,122,101,32,111,102,32,116,101,114,109,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,[{text,[1,42]},{sep,[{text,"\nETERM \\*t;"}],0,false}],0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"3Determines the buffer space that would be needed by"}],
             0,false},
            {text,[3,42,116,42]},
            {sep,
             [{text,"1if it were encoded into Erlang external format by"}],
             0,false},
            {text,[14,42,101,114,108,95,101,110,99,111,100,101,40,41,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [26,82,101,116,117,114,110,115,32,116,104,101,32,115,105,122,101,
              32,105,110,32,98,121,116,101,115,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
