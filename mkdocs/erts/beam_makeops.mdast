{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [25,35,32,84,104,101,32,98,101,97,109,95,109,97,107,101,111,112,115,
           32,115,99,114,105,112,116]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\eThis document describes the"}],0,false},
             {sep,[{text,"\fbeam_makeops"}],0,false},
             {sep,[{text,[7,115,99,114,105,112,116,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}},
     {sep,
      [{text,"'<a name=\"Introduction\">Introduction</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,[15,35,35,32,73,110,116,114,111,100,117,99,116,105,111,110]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {sep,[{text,"\fbeam_makeops"}],0,false},
              {sep,
               [{text,
                 [128,80,101,114,108,32,115,99,114,105,112,116,32,105,115,32,
                  117,115,101,100,32,97,116,32,98,117,105,108,100,45,116,105,
                  109,101,32,98,121,32,98,111,116,104,32,116,104,101,32,99,
                  111,109,112,105,108,101,114,32,97,110,100,32,114,117,110,
                  116,105,109,101,32,115,121,115,116,101,109,46,32,71,105,118,
                  101,110,32,97,32,110,117,109,98,101,114,32,111,102,32,105,
                  110,112,117,116,32,102,105,108,101,115,32,40,97,108,108,32,
                  119,105,116,104,32,116,104,101,32,101,120,116,101,110,115,
                  105,111,110]}],
               0,false},
              {text,[6,42,46,116,97,98,42]},
              {sep,
               [{text,
                 "}), it will generate source files used by the Erlang compiler and by the runtime system to load and execute BEAM instructions."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [17,69,115,115,101,110,116,105,97,108,108,121,32,116,104,111,
                  115,101]}],
               0,false},
              {text,[6,42,46,116,97,98,42]},
              {sep,[{text,"\rfiles define:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [331,69,120,116,101,114,110,97,108,32,103,101,110,101,114,105,
                 99,32,66,69,65,77,32,105,110,115,116,114,117,99,116,105,111,
                 110,115,46,32,84,104,101,121,32,97,114,101,32,116,104,101,32,
                 105,110,115,116,114,117,99,116,105,111,110,115,32,116,104,97,
                 116,32,97,114,101,32,107,110,111,119,110,32,116,111,32,98,
                 111,116,104,32,116,104,101,32,99,111,109,112,105,108,101,114,
                 32,97,110,100,32,116,104,101,32,114,117,110,116,105,109,101,
                 32,115,121,115,116,101,109,46,32,71,101,110,101,114,105,99,
                 32,105,110,115,116,114,117,99,116,105,111,110,115,32,97,114,
                 101,32,115,116,97,98,108,101,32,98,101,116,119,101,101,110,
                 32,114,101,108,101,97,115,101,115,46,32,78,101,119,32,103,
                 101,110,101,114,105,99,32,105,110,115,116,114,117,99,116,105,
                 111,110,115,32,119,105,116,104,32,104,105,103,104,32,110,117,
                 109,98,101,114,115,32,116,104,97,110,32,112,114,101,118,105,
                 111,117,115,32,105,110,115,116,114,117,99,116,105,111,110,
                 115,32,99,97,110,32,98,101,32,97,100,100,101,100,32,105,110,
                 32,109,97,106,111,114,32,114,101,108,101,97,115,101,115,46,
                 32,84,104,101,32,79,84,80,32,50,48,32,114,101,108,101,97,115,
                 101,32,104,97,115,32,49,53,57,32,101,120,116,101,114,110,97,
                 108,32,103,101,110,101,114,105,99,32,105,110,115,116,114,117,
                 99,116,105,111,110,115,46]}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "ÀInternal generic instructions. They are known only to the runtime system and can be changed at any time without compatibility issues. They are created by transformation rules (described next)."}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [331,82,117,108,101,115,32,102,111,114,32,116,114,97,110,115,
                102,111,114,109,105,110,103,32,111,110,101,32,111,114,32,109,
                111,114,101,32,103,101,110,101,114,105,99,32,105,110,115,116,
                114,117,99,116,105,111,110,115,32,116,111,32,111,116,104,101,
                114,32,103,101,110,101,114,105,99,32,105,110,115,116,114,117,
                99,116,105,111,110,115,46,32,84,104,101,32,116,114,97,110,115,
                102,111,114,109,97,116,105,111,110,32,114,117,108,101,115,32,
                97,108,108,111,119,32,99,111,109,98,105,110,105,110,103,44,32,
                115,112,108,105,116,116,105,110,103,44,32,97,110,100,32,114,
                101,109,111,118,97,108,32,111,102,32,105,110,115,116,114,117,
                99,116,105,111,110,115,44,32,97,115,32,119,101,108,108,32,97,
                115,32,115,104,117,102,102,108,105,110,103,32,111,112,101,114,
                97,110,100,115,46,32,66,101,99,97,117,115,101,32,111,102,32,
                116,104,101,32,116,114,97,110,115,102,111,114,109,97,116,105,
                111,110,32,114,117,108,101,115,44,32,116,104,101,32,114,117,
                110,116,105,109,101,32,99,97,110,32,104,97,118,101,32,109,97,
                110,121,32,105,110,116,101,114,110,97,108,32,103,101,110,101,
                114,105,99,32,105,110,115,116,114,117,99,116,105,111,110,115,
                32,116,104,97,116,32,97,114,101,32,111,110,108,121,32,107,110,
                111,119,110,32,116,111,32,114,117,110,116,105,109,101,32,115,
                121,115,116,101,109,46]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [403,83,112,101,99,105,102,105,99,32,66,69,65,77,32,105,110,115,
               116,114,117,99,116,105,111,110,115,46,32,84,104,101,32,115,112,
               101,99,105,102,105,99,32,105,110,115,116,114,117,99,116,105,
               111,110,115,32,97,114,101,32,116,104,101,32,105,110,115,116,
               114,117,99,116,105,111,110,115,32,116,104,97,116,32,97,114,101,
               32,97,99,116,117,97,108,108,121,32,101,120,101,99,117,116,101,
               100,32,98,121,32,116,104,101,32,114,117,110,116,105,109,101,32,
               115,121,115,116,101,109,46,32,84,104,101,121,32,99,97,110,32,
               98,101,32,99,104,97,110,103,101,100,32,97,116,32,97,110,121,32,
               116,105,109,101,32,119,105,116,104,111,117,116,32,99,97,117,
               115,105,110,103,32,99,111,109,112,97,116,105,98,105,108,105,
               116,121,32,105,115,115,117,101,115,46,32,84,104,101,32,108,111,
               97,100,101,114,32,116,114,97,110,115,108,97,116,101,115,32,103,
               101,110,101,114,105,99,32,105,110,115,116,114,117,99,116,105,
               111,110,115,32,116,111,32,115,112,101,99,105,102,105,99,32,105,
               110,115,116,114,117,99,116,105,111,110,115,46,32,73,110,32,103,
               101,110,101,114,97,108,44,32,102,111,114,32,101,97,99,104,32,
               103,101,110,101,114,105,99,32,105,110,115,116,114,117,99,116,
               105,111,110,44,32,116,104,101,114,101,32,101,120,105,115,116,
               115,32,97,32,102,97,109,105,108,121,32,111,102,32,115,112,101,
               99,105,102,105,99,32,105,110,115,116,114,117,99,116,105,111,
               110,115,46,32,84,104,101,32,79,84,80,32,50,48,32,114,101,108,
               101,97,115,101,32,104,97,115,32,51,56,57,32,115,112,101,99,105,
               102,105,99,32,105,110,115,116,114,117,99,116,105,111,110,115,
               46]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,",The implementation of specific instructions."}],
           0,false}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "QGeneric instructions have typed operands. Here are a few examples of operands for"}],
               0,false},
              {text,"\b*move/2*"},
              {sep,[{text,[1,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "A\n{move,{atom,id},{x,5}}.\n{move,{x,3},{x,0}}.\n{move,{x,2},{y,1}}.\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "VWhen those instructions are loaded, the loader rewrites them to specific instructions:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,"&\nmove_cx id 5\nmove_xx 3 0\nmove_xy 2 1\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "ÉCorresponding to each generic instruction, there is a family of specific instructions. The types that an instance of a specific instruction can handle are encoded in the instruction names. For example,"}],
               0,false},
              {text,"\t*move_xy*"},
              {sep,
               [{text,
                 "^takes an X register number as the first operand and a Y register number as the second operand."}],
               0,false},
              {text,"\t*move_cx*"},
              {sep,
               [{text,
                 "_takes a tagged Erlang term as the first operand and an X register number as the second operand."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}},
    {sep,
     [{text,
       "M<a name=\"An-example-the-move-instruction\">An-example-the-move-instruction</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,"### An example: the move instruction"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\tUsing the"}],0,false},
             {text,[6,42,109,111,118,101,42]},
             {sep,
              [{text,
                "Qinstruction as an example, we will give a quick tour to show the main features of"}],
              0,false},
             {sep,[{text,"\fbeam_makeops"}],0,false},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[6,73,110,32,116,104,101]}],0,false},
             {text,"\n*compiler*"},
             {sep,
              [{text,
                [24,97,112,112,108,105,99,97,116,105,111,110,44,32,105,110,32,
                 116,104,101,32,102,105,108,101]}],
              0,false},
             {text,"\v*genop.tab*"},
             {sep,
              [{text,
                [30,44,32,116,104,101,114,101,32,105,115,32,116,104,101,32,
                 102,111,108,108,111,119,105,110,103,32,108,105,110,101,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,{text,[3,96,96,96]},{sep,[{text,"\f\n64: move/2\n"}],0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ÒThis is a definition of an external generic BEAM instruction. Most importantly it specifices that the opcode is 64. It also defines that it has two operands. The BEAM assembler will use the opcode when creating"}],
              0,false},
             {text,[7,42,46,98,101,97,109,42]},
             {sep,
              [{text,
                [129,102,105,108,101,115,46,32,84,104,101,32,99,111,109,112,
                 105,108,101,114,32,100,111,101,115,32,110,111,116,32,114,101,
                 97,108,108,121,32,110,101,101,100,32,116,104,101,32,97,114,
                 105,116,121,44,32,98,117,116,32,105,116,32,119,105,108,108,
                 32,117,115,101,32,105,116,32,97,115,32,97,110,32,105,110,116,
                 101,114,110,97,108,32,115,97,110,105,116,121,32,99,104,101,
                 99,107,32,119,104,101,110,32,97,115,115,101,109,98,108,105,
                 110,103,32,116,104,101,32,66,69,65,77,32,99,111,100,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [20,76,101,116,39,115,32,104,97,118,101,32,97,32,108,111,111,
                 107,32,97,116]}],
              0,false},
             {text,"\t*ops.tab*"},
             {sep,[{text,[2,105,110]}],0,false},
             {text,
              [20,42,101,114,116,115,47,101,109,117,108,97,116,111,114,47,98,
               101,97,109,42]},
             {sep,
              [{text,
                [20,44,32,119,104,101,114,101,32,116,104,101,32,115,112,101,
                 99,105,102,105,99]}],
              0,false},
             {text,[6,42,109,111,118,101,42]},
             {sep,
              [{text,"1instructions are defined. Here are a few of them:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [28,10,109,111,118,101,32,120,32,120,10,109,111,118,101,32,120,
               32,121,10,109,111,118,101,32,99,32,120,10]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                " Each specific instructions is defined by following the name of the instruction with the types for each operand. An operand type is a single letter. For example,"}],
              0,false},
             {text,[3,42,120,42]},
             {sep,
              [{text,
                [20,109,101,97,110,115,32,97,110,32,88,32,114,101,103,105,115,
                 116,101,114,44]}],
              0,false},
             {text,[3,42,121,42]},
             {sep,
              [{text,
                [23,109,101,97,110,115,32,97,32,89,32,114,101,103,105,115,116,
                 101,114,44,32,97,110,100]}],
              0,false},
             {text,[3,42,99,42]},
             {sep,
              [{text,
                "Jis a \"constant\" (a tagged term such as an integer, an atom, or a literal)."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"+Now let's look at the implementation of the"}],
              0,false},
             {text,[6,42,109,111,118,101,42]},
             {sep,
              [{text,
                "Winstruction. There are multiple files containing implementations of instructions in the"}],
              0,false},
             {text,
              [20,42,101,114,116,115,47,101,109,117,108,97,116,111,114,47,98,
               101,97,109,42]},
             {sep,
              [{text,
                [14,100,105,114,101,99,116,111,114,121,46,32,84,104,101]}],
              0,false},
             {text,[6,42,109,111,118,101,42]},
             {sep,
              [{text,
                [25,105,110,115,116,114,117,99,116,105,111,110,32,105,115,32,
                 100,101,102,105,110,101,100,32,105,110]}],
              0,false},
             {text,"\f*instrs.tab*"},
             {sep,
              [{text,
                [21,46,32,73,116,32,108,111,111,107,115,32,108,105,107,101,32,
                 116,104,105,115,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,[{text,"%\nmove(Src, Dst) {\n    $Dst = $Src;\n}\n"}],0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [140,84,104,101,32,105,109,112,108,101,109,101,110,116,97,116,
                 105,111,110,32,102,111,114,32,97,110,32,105,110,115,116,114,
                 117,99,116,105,111,110,32,108,97,114,103,101,108,121,32,102,
                 111,108,108,111,119,115,32,116,104,101,32,67,32,115,121,110,
                 116,97,120,44,32,101,120,99,101,112,116,32,116,104,97,116,32,
                 116,104,101,32,118,97,114,105,97,98,108,101,115,32,105,110,
                 32,116,104,101,32,102,117,110,99,116,105,111,110,32,104,101,
                 97,100,32,100,111,110,39,116,32,104,97,118,101,32,97,110,121,
                 32,116,121,112,101,115,46,32,84,104,101]}],
              0,false},
             {text,[3,42,36,42]},
             {sep,
              [{text,
                "5before an identifier denotes a macro expansion. Thus,"}],
              0,false},
             {text,[6,42,36,83,114,99,42]},
             {sep,
              [{text,
                "Mwill expand to the code to pick up the source operand for the instruction and"}],
              0,false},
             {text,[6,42,36,68,115,116,42]},
             {sep,
              [{text,")to the code for the destination register."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                " We will look at the code for each specific instruction in turn. To make the code easier to understand, let's first look at the memory layout for the instruction"}],
              0,false},
             {text,
              [24,42,123,109,111,118,101,44,123,97,116,111,109,44,105,100,125,
               44,123,120,44,53,125,125,42]},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "ö\n     +--------------------+--------------------+\nI -> |                 40 |       &&lb_move_cx |\n     +--------------------+--------------------+\n     |                        Tagged atom 'id' |\n     +--------------------+--------------------+\n"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [139,84,104,105,115,32,101,120,97,109,112,108,101,32,97,110,100,
               32,97,108,108,32,111,116,104,101,114,32,101,120,97,109,112,108,
               101,115,32,105,110,32,116,104,101,32,100,111,99,117,109,101,
               110,116,32,97,115,115,117,109,101,115,32,97,32,54,52,45,98,105,
               116,32,97,114,99,104,105,99,116,101,99,116,117,114,101,44,32,
               97,110,100,32,102,117,114,116,104,101,114,109,111,114,101,32,
               116,104,97,116,32,112,111,105,110,116,101,114,115,32,116,111,
               32,67,32,99,111,100,101,32,102,105,116,32,105,110,32,51,50,32,
               98,105,116,115,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[3,42,73,42]},
             {sep,
              [{text,
                "Zin the BEAM virtual machine is the instruction pointer. When BEAM executes an instruction,"}],
              0,false},
             {text,[3,42,73,42]},
             {sep,
              [{text,",points to the first word of the instruction."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[14,42,38,38,108,98,95,109,111,118,101,95,99,120,42]},
             {sep,
              [{text,"(is the address to C code that implements"}],
              0,false},
             {text,"\t*move_cx*"},
             {sep,
              [{text,
                "®. It is stored in the lower 32 bits of the word. In the upper 32 bits is the byte offset to the X register; the register number 5 has been multiplied by the word size size 8."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text," In the next word the tagged atom"}],0,false},
             {text,[4,42,105,100,42]},
             {sep,[{text,"\nis stored."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                ";With that background, we can look at the generated code for"}],
              0,false},
             {text,"\t*move_cx*"},
             {sep,[{text,[2,105,110]}],0,false},
             {text,"\f*beam_hot.h*"},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [159,10,79,112,67,97,115,101,40,109,111,118,101,95,99,120,41,58,
               10,123,10,32,32,66,101,97,109,73,110,115,116,114,32,110,101,
               120,116,95,112,102,32,61,32,66,101,97,109,67,111,100,101,65,
               100,100,114,40,73,91,50,93,41,59,10,32,32,120,98,40,66,101,97,
               109,69,120,116,114,97,68,97,116,97,40,73,91,48,93,41,41,32,61,
               32,73,91,49,93,59,10,32,32,73,32,43,61,32,50,59,10,32,32,65,83,
               83,69,82,84,40,86,65,76,73,68,95,73,78,83,84,82,40,110,101,120,
               116,95,112,102,41,41,59,10,32,32,71,111,116,111,80,70,40,110,
               101,120,116,95,112,102,41,59,10,125,10]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,[{text,"%We will go through each line in turn."}],0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [18,42,79,112,67,97,115,101,40,109,111,118,101,95,99,120,41,
                 58,42]},
               {sep,
                [{text,"(defines a label for the instruction. The"}],
                0,false},
               {text,"\n*OpCase()*"},
               {sep,
                [{text,
                  [19,109,97,99,114,111,32,105,115,32,100,101,102,105,110,101,
                   100,32,105,110]}],
                0,false},
               {text,"\f*beam_emu.c*"},
               {sep,
                [{text,
                  [29,46,32,73,116,32,119,105,108,108,32,101,120,112,97,110,
                   100,32,116,104,105,115,32,108,105,110,101,32,116,111]}],
                0,false},
               {text,"\r*lb_move_cx:*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,")*BeamInstr next_pf = BeamCodeAddr(I[2]);*"},
               {sep,
                [{text,
                  "Hfetches the pointer to code for the next instruction to be executed. The"}],
                0,false},
               {text,
                [16,42,66,101,97,109,67,111,100,101,65,100,100,114,40,41,42]},
               {sep,
                [{text,
                  "Jmacro extracts the pointer from the lower 32 bits of the instruction word."}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"!*xb(BeamExtraData(I[0])) = I[1];*"},
              {sep,
               [{text,
                 [19,105,115,32,116,104,101,32,101,120,112,97,110,115,105,111,
                  110,32,111,102]}],
               0,false},
              {text,"\r*$Dst = $Src*"},
              {sep,[{text,[1,46]}],0,false},
              {text,
               [17,42,66,101,97,109,69,120,116,114,97,68,97,116,97,40,41,42]},
              {sep,
               [{text,
                 [155,105,115,32,97,32,109,97,99,114,111,32,116,104,97,116,32,
                  119,105,108,108,32,101,120,116,114,97,99,116,32,116,104,101,
                  32,117,112,112,101,114,32,51,50,32,98,105,116,115,32,102,
                  114,111,109,32,116,104,101,32,105,110,115,116,114,117,99,
                  116,105,111,110,32,119,111,114,100,46,32,73,110,32,116,104,
                  105,115,32,101,120,97,109,112,108,101,44,32,105,116,32,119,
                  105,108,108,32,114,101,116,117,114,110,32,52,48,32,119,104,
                  105,99,104,32,105,115,32,116,104,101,32,98,121,116,101,32,
                  111,102,102,115,101,116,32,102,111,114,32,88,32,114,101,103,
                  105,115,116,101,114,32,53,46,32,84,104,101]}],
               0,false},
              {text,[6,42,120,98,40,41,42]},
              {sep,[{text,"$macro will cast a byte pointer to an"}],0,false},
              {text,[7,42,69,116,101,114,109,42]},
              {sep,
               [{text,
                 [31,112,111,105,110,116,101,114,32,97,110,100,32,100,101,114,
                  101,102,101,114,101,110,99,101,32,105,116,46,32,84,104,
                  101]}],
               0,false},
              {text,[6,42,73,91,49,93,42]},
              {sep,
               [{text,
                 [24,111,110,32,116,104,101,32,114,105,103,104,116,32,115,105,
                  100,101,32,111,102,32,116,104,101]}],
               0,false},
              {text,[3,42,61,42]},
              {sep,[{text," fetches an Erlang term (the atom"}],0,false},
              {text,[4,42,105,100,42]},
              {sep,
               [{text,[14,105,110,32,116,104,105,115,32,99,97,115,101,41,46]}],
               0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"\b*I += 2*"},
             {sep,
              [{text,
                "9advances the instruction pointer to the next instruction."}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{text,
               [29,73,110,32,97,32,100,101,98,117,103,45,99,111,109,112,105,
                108,101,100,32,101,109,117,108,97,116,111,114,44]}],
             0,false},
            {text,
             [31,42,65,83,83,69,82,84,40,86,65,76,73,68,95,73,78,83,84,82,40,
              110,101,120,116,95,112,102,41,41,59,42]},
            {sep,
             [{text,
               [15,109,97,107,101,115,32,115,117,114,101,32,116,104,97,116]}],
             0,false},
            {text,"\t*next_pf*"},
            {sep,
             [{text,
               ":is a valid instruction (that is, that it points within the"}],
             0,false},
            {text,
             [16,42,112,114,111,99,101,115,115,95,109,97,105,110,40,41,42]},
            {sep,[{text,"\vfunction in"}],0,false},
            {text,"\f*beam_emu.c*"},
            {sep,[{text,[2,41,46]}],0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [18,42,71,111,116,111,80,70,40,110,101,120,116,95,112,102,41,59,
             42]},
           {sep,
            [{text,"*transfers control to the next instruction."}],
            0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"'Now let's look at the implementation of"}],0,false},
             {text,"\t*move_xx*"},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "ñ\nOpCase(move_xx):\n{\n  Eterm tmp_packed1 = BeamExtraData(I[0]);\n  BeamInstr next_pf = BeamCodeAddr(I[1]);\n  xb((tmp_packed1>>BEAM_TIGHT_SHIFT)) = xb(tmp_packed1&BEAM_TIGHT_MASK);\n  I += 1;\n  ASSERT(VALID_INSTR(next_pf));\n  GotoPF(next_pf);\n}\n"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "EWe will go through the lines that are new or have changed compared to"}],
              0,false},
             {text,"\t*move_cx*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"**Eterm tmp_packed1 = BeamExtraData(I[0]);*"},
             {sep,
              [{text,
                "Wpicks up both X register numbers packed into the upper 32 bits of the instruction word."}],
              0,false}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,")*BeamInstr next_pf = BeamCodeAddr(I[1]);*"},
             {sep,
              [{text,
                "«pre-fetches the address of the next instruction. Note that because both X registers operands fits into the instruction word, the next instruction is in the very next word."}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             "H*xb((tmp_packed1>>BEAM_TIGHT_SHIFT)) = xb(tmp_packed1&BEAM_TIGHT_MASK);*"},
            {sep,
             [{text,
               "Acopies the source to the destination. (For a 64-bit architecture,"}],
             0,false},
            {text,[18,42,66,69,65,77,95,84,73,71,72,84,95,83,72,73,70,84,42]},
            {sep,[{text,"\tis 16 and"}],0,false},
            {text,[17,42,66,69,65,77,95,84,73,71,72,84,95,77,65,83,75,42]},
            {sep,[{text,[2,105,115]}],0,false},
            {text,"\b*0xFFFF*"},
            {sep,[{text,[2,46,41]}],0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"\t*I += 1;*"},
           {sep,
            [{text,
              "9advances the instruction pointer to the next instruction."}],
            0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\t*move_xy*"},
             {sep,
              [{text,
                [22,105,115,32,97,108,109,111,115,116,32,105,100,101,110,116,
                 105,99,97,108,32,116,111]}],
              0,false},
             {text,"\t*move_xx*"},
             {sep,[{text,"'. The only difference is the use of the"}],0,false},
             {text,[6,42,121,98,40,41,42]},
             {sep,
              [{text,
                [16,109,97,99,114,111,32,105,110,115,116,101,97,100,32,111,
                 102]}],
              0,false},
             {text,[6,42,120,98,40,41,42]},
             {sep,[{text,"&to reference the destination register:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "ñ\nOpCase(move_xy):\n{\n  Eterm tmp_packed1 = BeamExtraData(I[0]);\n  BeamInstr next_pf = BeamCodeAddr(I[1]);\n  yb((tmp_packed1>>BEAM_TIGHT_SHIFT)) = xb(tmp_packed1&BEAM_TIGHT_MASK);\n  I += 1;\n  ASSERT(VALID_INSTR(next_pf));\n  GotoPF(next_pf);\n}\n"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {sep,
       [{text,
         "w<a name=\"An-example-the-move-instruction_Transformation-rules\">An-example-the-move-instruction_Transformation-rules</a>"},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [23,35,35,32,84,114,97,110,115,102,111,114,109,97,116,105,111,110,
             32,114,117,108,101,115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "oNext let's look at how we can do some optimizations using transformation rules. For simple instructions such as"}],
                0,false},
               {text,"\b*move/2*"},
               {sep,
                [{text,
                  "·, the instruction dispatch overhead can be substantial. A simple optimization is to combine common instructions sequences to a single instruction. One such common sequence is multiple"}],
                0,false},
               {text,[6,42,109,111,118,101,42]},
               {sep,
                [{text,"/instructions moving X registers to Y registers."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,"+Using the following rule we can combine two"}],
                0,false},
               {text,[6,42,109,111,118,101,42]},
               {sep,
                [{text,
                  [17,105,110,115,116,114,117,99,116,105,111,110,115,32,116,
                   111,32,97]}],
                0,false},
               {text,[7,42,109,111,118,101,50,42]},
               {sep,[{text,"\finstruction:"}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "6\nmove X1=x Y1=y | move X2=x Y2=y => move2 X1 Y1 X2 Y2\n"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [28,84,104,101,32,108,101,102,116,32,115,105,100,101,32,111,
                   102,32,116,104,101,32,97,114,114,111,119,32,40]}],
                0,false},
               {text,[4,42,61,62,42]},
               {sep,
                [{text,
                  "ê) is a pattern. If the pattern matches, the matching instructions will be replaced by the instructions on the right side. Variables in a pattern must start with an uppercase letter just as in Erlang. A pattern variable may be followed"}],
                0,false},
               {text,[3,42,61,42]},
               {sep,
                [{text,
                  [151,97,110,100,32,111,110,101,32,111,114,32,109,111,114,
                   101,32,116,121,112,101,32,108,101,116,116,101,114,115,32,
                   116,111,32,99,111,110,115,116,114,97,105,110,32,116,104,
                   101,32,109,97,116,99,104,32,116,111,32,111,110,101,32,111,
                   102,32,116,104,111,115,101,32,116,121,112,101,115,46,32,84,
                   104,101,32,118,97,114,105,97,98,108,101,115,32,116,104,97,
                   116,32,97,114,101,32,98,111,117,110,100,32,111,110,32,116,
                   104,101,32,108,101,102,116,32,115,105,100,101,32,99,97,110,
                   32,98,101,32,117,115,101,100,32,111,110,32,116,104,101,32,
                   114,105,103,104,116,32,115,105,100,101,46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "IWe will also need to define a specific instruction and an implementation:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [146,10,35,32,73,110,32,111,112,115,46,116,97,98,10,109,111,
                 118,101,50,32,120,32,121,32,120,32,121,10,10,47,47,32,73,110,
                 32,105,110,115,116,114,115,46,116,97,98,10,109,111,118,101,
                 50,40,83,49,44,32,68,49,44,32,83,50,44,32,68,50,41,32,123,10,
                 32,32,32,32,69,116,101,114,109,32,86,49,44,32,86,50,59,10,32,
                 32,32,32,86,49,32,61,32,36,83,49,59,10,32,32,32,32,86,50,32,
                 61,32,36,83,50,59,10,32,32,32,32,36,68,49,32,61,32,86,49,59,
                 10,32,32,32,32,36,68,50,32,61,32,86,50,59,10,125,10]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "»When the loader has found a match and replaced the matched instructions, it will match the new instructions against the transformation rules. Because of that, we can define the rule for a"}],
                0,false},
               {text,"\t*move3/6*"},
               {sep,
                [{text,
                  [23,105,110,115,116,114,117,99,116,105,111,110,32,97,115,32,
                   102,111,108,108,111,119,115,58]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "O\nmove2 X1=x Y1=y X2=x Y2=y | move X3=x Y3=y => \\\n      move3 X1 Y1 X2 Y2 X3 Y3\n"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,[2,40,65]}],0,false},
               {text,[3,42,92,42]},
               {sep,
                [{text,
                  "Cbefore a newline can be used to break a long line for readability.)"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,"1It would also be possible to define it like this:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "T\nmove X1=x Y1=y | move X2=x Y2=y | move X3=x Y3=y => \\\n     move3 X1 Y1 X2 Y2 X3 Y3\n"}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "7but in that case it must be defined before the rule for"}],
                0,false},
               {text,"\t*move2/4*"},
               {sep,
                [{text,"0because the first matching rule will be applied."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [132,79,110,101,32,109,117,115,116,32,98,101,32,99,97,114,
                   101,102,117,108,32,110,111,116,32,116,111,32,99,114,101,97,
                   116,101,32,105,110,102,105,110,105,116,101,32,108,111,111,
                   112,115,46,32,70,111,114,32,101,120,97,109,112,108,101,44,
                   32,105,102,32,119,101,32,102,111,114,32,115,111,109,101,32,
                   114,101,97,115,111,110,32,119,111,117,108,100,32,119,97,
                   110,116,32,116,111,32,114,101,118,101,114,115,101,32,116,
                   104,101,32,111,112,101,114,97,110,100,32,111,114,100,101,
                   114,32,102,111,114,32,116,104,101]}],
                0,false},
               {text,[6,42,109,111,118,101,42]},
               {sep,
                [{text,"&instruction, we must not do like this:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                [30,10,109,111,118,101,32,83,114,99,32,68,115,116,32,61,62,32,
                 109,111,118,101,32,68,115,116,32,83,114,99,10]}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "kThe loader would swap the operands forever. To avoid the loop, we must rename the instruction. For example:"}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,[{text," \nmove Src Dst => assign Dst Src\n"}],0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,"0This concludes the quick tour of the features of"}],
                0,false},
               {sep,[{text,"\fbeam_makeops"}],0,false},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false}},
   {sep,
    [{text,
      "Y<a name=\"Short-overview-of-instruction-loading\">Short-overview-of-instruction-loading</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,"(## Short overview of instruction loading"},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "sTo give some background to the rest of this document, here follows a quick overview of how instructions are loaded."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 "òThe loader reads and decodes one instruction at a time from the BEAM code and creates a generic instruction. Many transformation rules must look at multiple instructions, so the loader will keep multiple generic instructions in a linked list."}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [257,84,104,101,32,108,111,97,100,101,114,32,116,114,105,101,
                  115,32,116,111,32,97,112,112,108,121,32,116,114,97,110,115,
                  102,111,114,109,97,116,105,111,110,32,114,117,108,101,115,
                  32,97,103,97,105,110,115,116,32,116,104,101,32,103,101,110,
                  101,114,105,99,32,105,110,115,116,114,117,99,116,105,111,
                  110,115,32,105,110,32,116,104,101,32,108,105,110,107,101,
                  100,32,108,105,115,116,46,32,73,102,32,97,32,114,117,108,
                  101,32,109,97,116,99,104,101,115,44,32,116,104,101,32,109,
                  97,116,99,104,101,100,32,105,110,115,116,114,117,99,116,105,
                  111,110,115,32,119,105,108,108,32,98,101,32,114,101,109,111,
                  118,101,100,32,97,110,100,32,114,101,112,108,97,99,101,100,
                  32,119,105,116,104,32,110,101,119,32,103,101,110,101,114,
                  105,99,32,105,110,115,116,114,117,99,116,105,111,110,115,32,
                  99,111,110,115,116,114,117,99,116,101,100,32,102,114,111,
                  109,32,116,104,101,32,114,105,103,104,116,32,115,105,100,
                  101,32,111,102,32,116,104,101,32,116,114,97,110,115,102,111,
                  114,109,97,116,105,111,110,46]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "TIf a transformation rule matched, the loader applies the transformation rules again."}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               "}If no transformation rule match, the loader will begin rewriting the first of generic instructions to a specific instruction."}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,
              [{text,
                "³First the loader will search for a specific operation where the types for all operands match the type for the generic instruction. The first matching instruction will be selected."}],
              0,false},
             {sep,[{text,"\fbeam_makeops"}],0,false},
             {sep,
              [{text,
                [154,104,97,115,32,111,114,100,101,114,101,100,32,116,104,101,
                 32,115,112,101,99,105,102,105,99,32,105,110,115,116,114,117,
                 99,116,105,111,110,115,32,115,111,32,116,104,97,116,32,105,
                 110,115,116,114,117,99,116,105,111,110,115,32,119,105,116,
                 104,32,109,111,114,101,32,115,112,101,99,105,102,105,99,32,
                 111,112,101,114,97,110,100,115,32,99,111,109,101,115,32,98,
                 101,102,111,114,101,32,105,110,115,116,114,117,99,116,105,
                 111,110,115,32,119,105,116,104,32,108,101,115,115,32,115,112,
                 101,99,105,102,105,99,32,111,112,101,114,97,110,100,115,46,
                 32,70,111,114,32,101,120,97,109,112,108,101,44]}],
              0,false},
             {text,"\t*move_nx*"},
             {sep,
              [{text,
                [21,105,115,32,109,111,114,101,32,115,112,101,99,105,102,105,
                 99,32,116,104,97,110]}],
              0,false},
             {text,"\t*move_cx*"},
             {sep,
              [{text,
                [25,46,32,73,102,32,116,104,101,32,102,105,114,115,116,32,111,
                 112,101,114,97,110,100,32,105,115]}],
              0,false},
             {text,[4,42,91,93,42]},
             {sep,[{text,[6,40,78,73,76,41,44]}],0,false},
             {text,"\t*move_nx*"},
             {sep,
              [{text,
                [17,119,105,108,108,32,98,101,32,115,101,108,101,99,116,101,
                 100,46]}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             "²Given the opcode for the selected specific instruction, the loader looks up the pointer to the C code for the instruction and stores in the code area for the module being loaded."}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,
            [{text,
              "¿The loader translates each operand to a machine word and stores it in the code area. The operand type for the selected specific instruction guides the translation. For example, if the type is"}],
            0,false},
           {text,[3,42,101,42]},
           {sep,
            [{text,
              "ª, the value of the operand is an index into an arry of external functions and will be translated to a pointer to the export entry for the function to call. If the type is"}],
            0,false},
           {text,[3,42,120,42]},
           {sep,
            [{text,
              "\\, the number of the X register will be multiplied by the word size to produce a byte offset."}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{text,
             "îThe loader runs the packing engine to pack multiple operands into a single word. The packing engine is controlled by a small program, which is a string where each character is an instruction. For example, the code to pack the operands for"}],
           0,false},
          {text,"\t*move_xy*"},
          {sep,[{text,[2,105,115]}],0,false},
          {text,[7,42,34,50,50,35,34,42]},
          {sep,
           [{text,
             "~(on a 64-bit machine). That program will pack the byte offsets for both registers into the same word as the pointer to C code."}],
           0,false}],
         0,false}],
       0,false}}],
    0,false}},
  {sep,
   [{text,"5<a name=\"Running-beammakeops\">Running-beammakeops</a>"},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [23,35,35,32,82,117,110,110,105,110,103,32,98,101,97,109,95,109,97,
         107,101,111,112,115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\fbeam_makeops"}],0,false},
           {sep,[{text,"\vis found in"}],0,false},
           {text,
            [30,42,36,69,82,76,95,84,79,80,47,101,114,116,115,47,101,109,117,
             108,97,116,111,114,47,117,116,105,108,115,42]},
           {sep,
            [{text,
              [31,46,32,79,112,116,105,111,110,115,32,115,116,97,114,116,32,
               119,105,116,104,32,97,32,104,121,112,104,101,110,32,40]}],
            0,false},
           {text,[3,42,45,42]},
           {sep,
            [{text,
              "m). The options are followed by the name of the input files. By convention, all input files have the extension"}],
            0,false},
           {text,[6,42,46,116,97,98,42]},
           {sep,
            [{text,
              [24,44,32,98,117,116,32,105,115,32,110,111,116,32,101,110,102,
               111,114,99,101,100,32,98,121]}],
            0,false},
           {sep,[{text,"\fbeam_makeops"}],0,false},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,
       "Y<a name=\"Running-beammakeops_The-outdir-option\">Running-beammakeops_The-outdir-option</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [21,35,35,32,84,104,101,32,45,111,117,116,100,105,114,32,111,112,
           116,105,111,110]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\nThe option"}],0,false},
             {text,
              [19,42,45,111,117,116,100,105,114,32,68,105,114,101,99,116,111,
               114,121,42]},
             {sep,
              [{text,
                "aspecifies the output directory for the generated files. Default is the current working directory."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {sep,
     [{text,
       [127,60,97,32,110,97,109,101,61,34,82,117,110,110,105,110,103,45,98,
        101,97,109,109,97,107,101,111,112,115,95,82,117,110,110,105,110,103,
        45,98,101,97,109,109,97,107,101,111,112,115,45,102,111,114,45,116,104,
        101,45,99,111,109,112,105,108,101,114,34,62,82,117,110,110,105,110,
        103,45,98,101,97,109,109,97,107,101,111,112,115,95,82,117,110,110,105,
        110,103,45,98,101,97,109,109,97,107,101,111,112,115,45,102,111,114,45,
        116,104,101,45,99,111,109,112,105,108,101,114,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,"(## Running beam_makeops for the compiler"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [15,71,105,118,101,32,116,104,101,32,111,112,116,105,111,
                 110]}],
              0,false},
             {text,"\v*-compiler*"},
             {sep,
              [{text,
                "fto produce output files for the compiler. The following files will be written to the output directory:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [18,42,98,101,97,109,95,111,112,99,111,100,101,115,46,101,114,108,
             42]},
           {sep,
            [{text,
              [19,45,32,85,115,101,100,32,112,114,105,109,97,114,105,108,121,
               32,98,121]}],
            0,false},
           {text,"\n*beam_asm*"},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,"\f*beam_diasm*"},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [17,42,98,101,97,109,95,111,112,99,111,100,101,46,104,114,108,42]},
           {sep,[{text,"\t- Used by"}],0,false},
           {text,"\n*beam_asm*"},
           {sep,
            [{text,
              "E. It contains tag definitions used for encoding instruction operands."}],
            0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "9The input file should only contain the definition of BEAM"}],
              0,false},
             {text,"\n**FORMAT**"},
             {sep,
              [{text,
                "MNUMBER and external generic instructions. (Everything else would be ignored.)"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {sep,
     [{text,
       [127,60,97,32,110,97,109,101,61,34,82,117,110,110,105,110,103,45,98,
        101,97,109,109,97,107,101,111,112,115,95,82,117,110,110,105,110,103,
        45,98,101,97,109,109,97,107,101,111,112,115,45,102,111,114,45,116,104,
        101,45,101,109,117,108,97,116,111,114,34,62,82,117,110,110,105,110,
        103,45,98,101,97,109,109,97,107,101,111,112,115,95,82,117,110,110,105,
        110,103,45,98,101,97,109,109,97,107,101,111,112,115,45,102,111,114,45,
        116,104,101,45,101,109,117,108,97,116,111,114,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,"(## Running beam_makeops for the emulator"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [15,71,105,118,101,32,116,104,101,32,111,112,116,105,111,
                 110]}],
              0,false},
             {text,"\v*-emulator*"},
             {sep,
              [{text,
                "oto produce output files for the emulator. The following output files will be generated in the output directory."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"\f*beam_hot.h*"},
              {sep,[{text,[1,44]}],0,false},
              {text,"\r*beam_warm.h*"},
              {sep,[{text,[1,44]}],0,false},
              {text,"\f*beam_cold.*"},
              {sep,
               [{text,
                 "7h - Implementation of instructions. Included inside the"}],
               0,false},
              {text,
               [16,42,112,114,111,99,101,115,115,95,109,97,105,110,40,41,42]},
              {sep,[{text,"\vfunction in"}],0,false},
              {text,"\f*beam_emu.c*"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [16,42,98,101,97,109,95,111,112,99,111,100,101,115,46,99,42]},
              {sep,
               [{text,"*- Defines static data used by the loader ("}],
               0,false},
              {text,"\r*beam_load.c*"},
              {sep,
               [{text,
                 [149,41,46,32,68,97,116,97,32,97,98,111,117,116,32,103,101,
                  110,101,114,105,99,32,105,110,115,116,114,117,99,116,105,
                  111,110,115,44,32,115,112,101,99,105,102,105,99,32,105,110,
                  115,116,114,117,99,116,105,111,110,115,32,40,105,110,99,108,
                  117,100,105,110,103,32,104,111,119,32,116,111,32,112,97,99,
                  107,32,116,104,101,105,114,32,111,112,101,114,97,110,100,
                  115,41,44,32,97,110,100,32,116,114,97,110,115,102,111,114,
                  109,97,116,105,111,110,32,114,117,108,101,115,32,97,114,101,
                  32,97,108,108,32,112,97,114,116,32,111,102,32,116,104,105,
                  115,32,102,105,108,101,46]}],
               0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [16,42,98,101,97,109,95,111,112,99,111,100,101,115,46,104,42]},
             {sep,
              [{text,
                "7- Miscellanous preprocessor definitions, mainly used by"}],
              0,false},
             {text,"\r*beam_load.c*"},
             {sep,[{text,"\vbut also by"}],0,false},
             {text,
              [24,42,98,101,97,109,95,123,104,111,116,44,119,97,114,109,44,99,
               111,108,100,125,46,104,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [19,42,98,101,97,109,95,112,114,101,100,95,102,117,110,99,115,46,
              104,42]},
            {sep,[{text,"\r- Included by"}],0,false},
            {text,"\r*beam_load.c*"},
            {sep,
             [{text,
               "L. Contains defines needed to call guard constraints in transformation rules."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [17,42,98,101,97,109,95,116,114,95,102,117,110,99,115,46,104,42]},
           {sep,[{text,"\r- Included by"}],0,false},
           {text,"\r*beam_load.c*"},
           {sep,
            [{text,
              "U. Contains defines needed to call a C function to the right of a transformation rule."}],
            0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,[{text,"#The following options can be given:"}],0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [16,42,119,111,114,100,115,105,122,101,32,51,50,124,54,52,42]},
            {sep,[{text,"'- Defines the word size. Default is 32."}],0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [18,42,99,111,100,101,45,109,111,100,101,108,32,77,111,100,101,
              108,42]},
            {sep,
             [{text,
               [28,45,32,84,104,101,32,99,111,100,101,32,109,111,100,101,108,
                32,97,115,32,103,105,118,101,110,32,116,111]}],
             0,false},
            {text,"\n*-mcmodel*"},
            {sep,
             [{text,
               [26,111,112,116,105,111,110,32,102,111,114,32,71,67,67,46,32,
                68,101,102,97,117,108,116,32,105,115]}],
             0,false},
            {text,"\t*unknown*"},
            {sep,
             [{text,
               [22,46,32,73,102,32,116,104,101,32,99,111,100,101,32,109,111,
                100,101,108,32,105,115]}],
             0,false},
            {text,[7,42,115,109,97,108,108,42]},
            {sep,
             [{text,
               [31,40,97,110,100,32,116,104,101,32,119,111,114,100,32,115,105,
                122,101,32,105,115,32,54,52,32,98,105,116,115,41,44]}],
             0,false},
            {sep,[{text,"\fbeam_makeops"}],0,false},
            {sep,
             [{text,
               "Bwill pack operands into the upper 32 bits of the instruction word."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"\r*DSymbol=0|1*"},
           {sep,
            [{text,
              ";- Defines the value for a symbol. The symbol can be used in"}],
            0,false},
           {text,[5,42,37,105,102,42]},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,"\t*%unless*"},
           {sep,[{text,"\vdirectives."}],0,false}],
          0,false}],
        0,false}}],
     0,false}],
   0,false}},
 {sep,
  [{text,"5<a name=\"Syntax-of-tab-files\">Syntax-of-tab-files</a>"},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [23,35,35,32,83,121,110,116,97,120,32,111,102,32,46,116,97,98,32,102,
        105,108,101,115]},
      null},
     null}},
   {sep,
    [{text,
      "G<a name=\"Syntax-of-tab-files_Comments\">Syntax-of-tab-files_Comments</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\v## Comments"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [22,65,110,121,32,108,105,110,101,32,115,116,97,114,116,105,
                110,103,32,119,105,116,104]}],
             0,false},
            {text,[3,42,35,42]},
            {sep,
             [{text,
               [28,105,115,32,97,32,99,111,109,109,101,110,116,32,97,110,100,
                32,105,115,32,105,103,110,111,114,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\vA line with"}],0,false},
            {text,[4,42,47,47,42]},
            {sep,
             [{text,
               "}is also a comment. It is recommended to only use this style of comments in files that define implementations of instructions."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               ";A long line can be broken into shorter lines by a placing a"}],
             0,false},
            {text,[3,42,92,42]},
            {sep,
             [{text,
               [19,98,101,102,111,114,101,32,116,104,101,32,110,101,119,108,
                105,110,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{text,
      "_<a name=\"Syntax-of-tab-files_Variable-definitions\">Syntax-of-tab-files_Variable-definitions</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [23,35,35,32,86,97,114,105,97,98,108,101,32,100,101,102,105,110,105,
          116,105,111,110,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "kA variable definition binds a variable to a Perl variable. It is only meaningful to add a new definition if"}],
             0,false},
            {sep,[{text,"\fbeam_makeops"}],0,false},
            {sep,
             [{text,
               "Ris updated at the same time to use the variable. A variable definition looks this:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\b**name**"},
            {sep,[{text,[1,61]}],0,false},
            {text,"\t**value**"},
            {sep,[{text,[3,91,59,93]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[5,119,104,101,114,101]}],0,false},
            {text,"\b**name**"},
            {sep,[{text,"!is the name of a Perl variable in"}],0,false},
            {sep,[{text,"\fbeam_makeops"}],0,false},
            {sep,[{text,[5,44,32,97,110,100]}],0,false},
            {text,"\t**value**"},
            {sep,
             [{text,
               "Lis the value to be given to the variable. The line can optionally end with a"}],
             0,false},
            {text,[3,42,59,42]},
            {sep,
             [{text,
               "6(to avoid messing up the C indentation mode in Emacs)."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=Here follows a description of the variables that are defined."}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{text,
        [129,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,
         45,116,97,98,45,102,105,108,101,115,95,86,97,114,105,97,98,108,101,
         45,100,101,102,105,110,105,116,105,111,110,115,95,66,69,65,77,70,79,
         82,77,65,84,78,85,77,66,69,82,34,62,83,121,110,116,97,120,45,111,102,
         45,116,97,98,45,102,105,108,101,115,95,86,97,114,105,97,98,108,101,
         45,100,101,102,105,110,105,116,105,111,110,115,95,66,69,65,77,70,79,
         82,77,65,84,78,85,77,66,69,82,60,47,97,62]},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [21,35,35,32,66,69,65,77,95,70,79,82,77,65,84,95,78,85,77,66,69,
            82]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"\v*genop.tab*"},
              {sep,
               [{text,
                 [29,104,97,115,32,116,104,101,32,102,111,108,108,111,119,105,
                  110,103,32,100,101,102,105,110,105,116,105,111,110,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [22,10,66,69,65,77,95,70,79,82,77,65,84,95,78,85,77,66,69,82,
                61,48,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [336,73,116,32,100,101,102,105,110,101,115,32,116,104,101,32,
                118,101,114,115,105,111,110,32,111,102,32,116,104,101,32,105,
                110,115,116,114,117,99,116,105,111,110,32,115,101,116,32,40,
                119,104,105,99,104,32,119,105,108,108,32,98,101,32,105,110,99,
                108,117,100,101,100,32,105,110,32,116,104,101,32,99,111,100,
                101,32,104,101,97,100,101,114,32,105,110,32,116,104,101,32,66,
                69,65,77,32,99,111,100,101,41,46,32,84,104,101,111,114,101,
                116,105,99,97,108,108,121,44,32,116,104,101,32,118,101,114,
                115,105,111,110,32,99,111,117,108,100,32,98,101,32,98,117,109,
                112,101,100,44,32,97,110,100,32,97,108,108,32,105,110,115,116,
                114,117,99,116,105,111,110,115,32,99,104,97,110,103,101,100,
                46,32,73,110,32,112,114,97,99,116,105,99,101,44,32,119,101,32,
                119,111,117,108,100,32,104,97,118,101,32,116,119,111,32,115,
                117,112,112,111,114,116,32,116,119,111,32,105,110,115,116,114,
                117,99,116,105,111,110,32,115,101,116,115,32,105,110,32,116,
                104,101,32,114,117,110,116,105,109,101,32,115,121,115,116,101,
                109,32,102,111,114,32,97,116,32,108,101,97,115,116,32,116,119,
                111,32,114,101,108,101,97,115,101,115,44,32,115,111,32,105,
                116,32,119,105,108,108,32,112,114,111,98,97,98,108,121,32,110,
                101,118,101,114,32,104,97,112,112,101,110,32,105,110,32,112,
                114,97,99,116,105,99,101,46]}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {sep,
      [{text,
        "q<a name=\"Syntax-of-tab-files_Variable-definitions_GCREGEXP\">Syntax-of-tab-files_Variable-definitions_GCREGEXP</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\f## GC_REGEXP"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[2,73,110]}],0,false},
              {text,"\f*macros.tab*"},
              {sep,
               [{text,
                 [26,44,32,116,104,101,114,101,32,105,115,32,97,32,100,101,
                  102,105,110,105,116,105,111,110,32,111,102]}],
               0,false},
              {text,"\v*GC_REGEXP*"},
              {sep,
               [{text,
                 [25,46,32,73,116,32,119,105,108,108,32,98,101,32,100,101,115,
                  99,114,105,98,101,100,32,105,110]}],
               0,false},
              {text,
               "x[a later section](#Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_The-GCREGEXP-definition)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}],
    0,false},
   {sep,
    [{text,
      "K<a name=\"Syntax-of-tab-files_Directives\">Syntax-of-tab-files_Directives</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\r## Directives"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "aThere are directives to classify specific instructions depending on how frequently used they are:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[6,42,37,104,111,116,42]},
           {sep,[{text,"\"- Implementation will be placed in"}],0,false},
           {text,"\f*beam_hot.h*"},
           {sep,[{text,"#. Frequently executed instructions."}],0,false}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[7,42,37,119,97,114,109,42]},
           {sep,[{text,"\"- Implementation will be placed in"}],0,false},
           {text,"\r*beam_warm.h*"},
           {sep,
            [{text,
              [29,46,32,66,105,110,97,114,121,32,115,121,110,116,97,120,32,
               105,110,115,116,114,117,99,116,105,111,110,115,46]}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[7,42,37,99,111,108,100,42]},
          {sep,[{text,"\"- Implementation will be placed in"}],0,false},
          {text,"\r*beam_cold.h*"},
          {sep,
           [{text,
             "8. Trace instructions and infrequently used instructions."}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\nDefault is"}],0,false},
            {text,[6,42,37,104,111,116,42]},
            {sep,
             [{text,
               "m. The directives will be applied to declarations of the specific instruction that follow. Here is an example:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [28,10,37,99,111,108,100,10,105,115,95,110,117,109,98,101,114,32,
              102,63,32,120,121,10,37,104,111,116,10]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {sep,
      [{text,
        [145,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,
         45,116,97,98,45,102,105,108,101,115,95,68,105,114,101,99,116,105,118,
         101,115,95,67,111,110,100,105,116,105,111,110,97,108,45,99,111,109,
         112,105,108,97,116,105,111,110,45,100,105,114,101,99,116,105,118,101,
         115,34,62,83,121,110,116,97,120,45,111,102,45,116,97,98,45,102,105,
         108,101,115,95,68,105,114,101,99,116,105,118,101,115,95,67,111,110,
         100,105,116,105,111,110,97,108,45,99,111,109,112,105,108,97,116,105,
         111,110,45,100,105,114,101,99,116,105,118,101,115,60,47,97,62]},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"%## Conditional compilation directives"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,[5,42,37,105,102,42]},
              {sep,
               [{text,
                 "Hdirective includes a range of lines if a condition is true. For example:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,"/\n%if ARCH_64\ni_bs_get_integer_32 x f? x\n%endif\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [24,84,104,101,32,115,112,101,99,105,102,105,99,32,105,110,
                  115,116,114,117,99,116,105,111,110]}],
               0,false},
              {text,
               [21,42,105,95,98,115,95,103,101,116,95,105,110,116,101,103,101,
                114,95,51,50,42]},
              {sep,
               [{text,")will only be defined on a 64-bit machine."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"&The condition can be inverted by using"}],0,false},
              {text,"\t*%unless*"},
              {sep,[{text,"\ninstead of"}],0,false},
              {text,[5,42,37,105,102,42]},
              {sep,[{text,[1,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "X\n%unless NO_FPE_SIGNALS\nfcheckerror p => i_fcheckerror\ni_fcheckerror\nfclearerror\n%endif\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [29,73,116,32,105,115,32,97,108,115,111,32,112,111,115,115,
                  105,98,108,101,32,116,111,32,97,100,100,32,97,110]}],
               0,false},
              {text,[7,42,37,101,108,115,101,42]},
              {sep,[{text,[7,99,108,97,117,115,101,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [310,10,37,105,102,32,65,82,67,72,95,54,52,10,66,83,95,83,65,
                70,69,95,77,85,76,40,65,44,32,66,44,32,70,97,105,108,44,32,68,
                115,116,41,32,123,10,32,32,32,32,85,105,110,116,54,52,32,114,
                101,115,32,61,32,40,36,65,41,32,42,32,40,36,66,41,59,10,32,32,
                32,32,105,102,32,40,114,101,115,32,47,32,36,66,32,33,61,32,36,
                65,41,32,123,10,32,32,32,32,32,32,32,32,36,70,97,105,108,59,
                10,32,32,32,32,125,10,32,32,32,32,36,68,115,116,32,61,32,114,
                101,115,59,10,125,10,37,101,108,115,101,10,66,83,95,83,65,70,
                69,95,77,85,76,40,65,44,32,66,44,32,70,97,105,108,44,32,68,
                115,116,41,32,123,10,32,32,32,32,85,105,110,116,54,52,32,114,
                101,115,32,61,32,40,85,105,110,116,54,52,41,40,36,65,41,32,42,
                32,40,85,105,110,116,54,52,41,40,36,66,41,59,10,32,32,32,32,
                105,102,32,40,40,114,101,115,32,62,62,32,40,56,42,115,105,122,
                101,111,102,40,85,105,110,116,41,41,41,32,33,61,32,48,41,32,
                123,10,32,32,32,32,32,32,32,32,36,70,97,105,108,59,10,32,32,
                32,32,125,10,32,32,32,32,36,68,115,116,32,61,32,114,101,115,
                59,10,125,10,37,101,110,100,105,102,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {sep,
      [{text,
        [153,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,
         45,116,97,98,45,102,105,108,101,115,95,68,105,114,101,99,116,105,118,
         101,115,95,83,121,109,98,111,108,115,45,116,104,97,116,45,97,114,101,
         45,100,101,102,105,110,101,100,45,105,110,45,100,105,114,101,99,116,
         105,118,101,115,34,62,83,121,110,116,97,120,45,111,102,45,116,97,98,
         45,102,105,108,101,115,95,68,105,114,101,99,116,105,118,101,115,95,
         83,121,109,98,111,108,115,45,116,104,97,116,45,97,114,101,45,100,101,
         102,105,110,101,100,45,105,110,45,100,105,114,101,99,116,105,118,101,
         115,60,47,97,62]},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,")## Symbols that are defined in directives"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,")The following symbols are always defined."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"\t*ARCH_64*"},
            {sep,
             [{text,"-- is 1 for a 64-bit machine, and 0 otherwise."}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"\t*ARCH_32*"},
            {sep,
             [{text,"+- is 1 for 32-bit machine, and 1 otherwise."}],
             0,false}],
           0,false}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,"\n*Makefile*"},
              {sep,
               [{text,
                 "Nfor building the emulator currently defines the following symbols by using the"}],
               0,false},
              {text,[4,42,45,68,42]},
              {sep,
               [{text,
                 [30,111,112,116,105,111,110,32,111,110,32,116,104,101,32,99,
                  111,109,109,97,110,100,32,108,105,110,101,32,102,111,114]}],
               0,false},
              {sep,[{text,"\fbeam_makeops"}],0,false},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[16,42,78,79,95,70,80,69,95,83,73,71,78,65,76,83,42]},
            {sep,
             [{text,
               "A- 1 if FPE signals are not enable in runtime system, 0 otherwise."}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[15,42,85,83,69,95,86,77,95,80,82,79,66,69,83,42]},
            {sep,
             [{text,
               "f- 1 if the runtime system is compiled to use VM probes (support for dtrace or systemtap), 0 otherwise."}],
             0,false}],
           0,false}],
         0,false}}],
      0,false}],
    0,false},
   {sep,
    [{text,
      [131,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,45,
       116,97,98,45,102,105,108,101,115,95,68,101,102,105,110,105,110,103,45,
       101,120,116,101,114,110,97,108,45,103,101,110,101,114,105,99,45,105,
       110,115,116,114,117,99,116,105,111,110,115,34,62,83,121,110,116,97,120,
       45,111,102,45,116,97,98,45,102,105,108,101,115,95,68,101,102,105,110,
       105,110,103,45,101,120,116,101,114,110,97,108,45,103,101,110,101,114,
       105,99,45,105,110,115,116,114,117,99,116,105,111,110,115,60,47,97,62]},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,")## Defining external generic instructions"},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [262,69,120,116,101,114,110,97,108,32,103,101,110,101,114,105,99,
              32,66,69,65,77,32,105,110,115,116,114,117,99,116,105,111,110,
              115,32,97,114,101,32,107,110,111,119,110,32,116,111,32,98,111,
              116,104,32,116,104,101,32,99,111,109,112,105,108,101,114,32,97,
              110,100,32,116,104,101,32,114,117,110,116,105,109,101,32,115,
              121,115,116,101,109,46,32,84,104,101,121,32,114,101,109,97,105,
              110,32,115,116,97,98,108,101,32,98,101,116,119,101,101,110,32,
              114,101,108,101,97,115,101,115,46,32,65,32,110,101,119,32,109,
              97,106,111,114,32,114,101,108,101,97,115,101,32,109,97,121,32,
              97,100,100,32,109,111,114,101,32,101,120,116,101,114,110,97,108,
              32,103,101,110,101,114,105,99,32,105,110,115,116,114,117,99,116,
              105,111,110,115,44,32,98,117,116,32,109,117,115,116,32,110,111,
              116,32,99,104,97,110,103,101,32,116,104,101,32,115,101,109,97,
              110,116,105,99,115,32,102,111,114,32,97,32,112,114,101,118,105,
              111,117,115,108,121,32,100,101,102,105,110,101,100,32,105,110,
              115,116,114,117,99,116,105,111,110,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=The syntax for an external generic instruction is as follows:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\n**opcode**"},
            {sep,[{text,[5,58,32,91,45,93]}],0,false},
            {text,"\b**name**"},
            {sep,[{text,[1,47]}],0,false},
            {text,"\t**arity**"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\n**opcode**"},
            {sep,
             [{text,")is an integer greater than or equal to 1."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\b**name**"},
            {sep,
             [{text,"2is an identifier starting with a lowercase letter."}],
             0,false},
            {text,"\t**arity**"},
            {sep,
             [{text,".is an integer denoting the number of operands."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\b**name**"},
            {sep,
             [{text,
               [29,99,97,110,32,111,112,116,105,111,110,97,108,108,121,32,98,
                101,32,112,114,101,99,101,100,101,100,32,98,121]}],
             0,false},
            {text,[3,42,45,42]},
            {sep,
             [{text,
               "Çto indicate that it has been obsoleted. The compiler is not allowed to generate BEAM files that use obsolete instructions and the loader will refuse to load BEAM files that use obsolete instructions."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "GIt only makes sense to define external generic instructions in the file"}],
             0,false},
            {text,"\v*genop.tab*"},
            {sep,[{text,[2,105,110]}],0,false},
            {text,
             [18,42,108,105,98,47,99,111,109,112,105,108,101,114,47,115,114,
              99,42]},
            {sep,
             [{text,
               "A, because the compiler must know about them in order to use them."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "jNew instructions must be added at the end of the file, with higher numbers than the previous instructions."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{text,
      [131,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,45,
       116,97,98,45,102,105,108,101,115,95,68,101,102,105,110,105,110,103,45,
       105,110,116,101,114,110,97,108,45,103,101,110,101,114,105,99,45,105,
       110,115,116,114,117,99,116,105,111,110,115,34,62,83,121,110,116,97,120,
       45,111,102,45,116,97,98,45,102,105,108,101,115,95,68,101,102,105,110,
       105,110,103,45,105,110,116,101,114,110,97,108,45,103,101,110,101,114,
       105,99,45,105,110,115,116,114,117,99,116,105,111,110,115,60,47,97,62]},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,")## Defining internal generic instructions"},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [127,73,110,116,101,114,110,97,108,32,103,101,110,101,114,105,99,
              32,105,110,115,116,114,117,99,116,105,111,110,115,32,97,114,101,
              32,107,110,111,119,110,32,111,110,108,121,32,116,111,32,116,104,
              101,32,114,117,110,116,105,109,101,32,115,121,115,116,101,109,
              32,97,110,100,32,99,97,110,32,98,101,32,99,104,97,110,103,101,
              100,32,97,116,32,97,110,121,32,116,105,109,101,32,119,105,116,
              104,111,117,116,32,99,111,109,112,97,116,105,98,105,108,105,116,
              121,32,105,115,115,117,101,115,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             ";There are two ways to define internal generic instructions:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{text,
             [130,73,109,112,108,105,99,105,116,108,121,32,119,104,101,110,32,
              97,32,115,112,101,99,105,102,105,99,32,105,110,115,116,114,117,
              99,116,105,111,110,32,105,115,32,100,101,102,105,110,101,100,46,
              32,84,104,105,115,32,105,115,32,98,121,32,102,97,114,32,116,104,
              101,32,109,111,115,116,32,99,111,109,109,111,110,32,119,97,121,
              46,32,87,104,101,110,101,118,101,114,32,97,32,115,112,101,99,
              105,102,105,99,32,105,110,115,116,114,117,99,116,105,111,110,32,
              105,115,32,99,114,101,97,116,101,100,44]}],
           0,false},
          {sep,[{text,"\fbeam_makeops"}],0,false},
          {sep,
           [{text,
             "Vautomatically creates an internal generic instruction if it does not previously exist."}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           "sExplicitly. This is necessary only when a generic instruction does not have any corresponding specific instruction."}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=The syntax for an internal generic instruction is as follows:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\b**name**"},
            {sep,[{text,[1,47]}],0,false},
            {text,"\t**arity**"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"\b**name**"},
            {sep,
             [{text,"2is an identifier starting with a lowercase letter."}],
             0,false},
            {text,"\t**arity**"},
            {sep,
             [{text,".is an integer denoting the number of operands."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{text,
      [129,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,45,
       116,97,98,45,102,105,108,101,115,95,65,98,111,117,116,45,103,101,110,
       101,114,105,99,45,105,110,115,116,114,117,99,116,105,111,110,115,45,
       105,110,45,103,101,110,101,114,97,108,34,62,83,121,110,116,97,120,45,
       111,102,45,116,97,98,45,102,105,108,101,115,95,65,98,111,117,116,45,
       103,101,110,101,114,105,99,45,105,110,115,116,114,117,99,116,105,111,
       110,115,45,105,110,45,103,101,110,101,114,97,108,60,47,97,62]},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,"(## About generic instructions in general"},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [158,69,97,99,104,32,103,101,110,101,114,105,99,32,105,110,115,
                116,114,117,99,116,105,111,110,32,104,97,115,32,97,110,32,111,
                112,99,111,100,101,46,32,84,104,101,32,111,112,99,111,100,101,
                32,105,115,32,97,110,32,105,110,116,101,103,101,114,44,32,103,
                114,101,97,116,101,114,32,116,104,97,110,32,111,114,32,101,
                113,117,97,108,32,116,111,32,49,46,32,70,111,114,32,97,110,32,
                101,120,116,101,114,110,97,108,32,103,101,110,101,114,105,99,
                32,105,110,115,116,114,117,99,116,105,111,110,44,32,105,116,
                32,109,117,115,116,32,98,101,32,101,120,112,108,105,99,105,
                116,108,121,32,103,105,118,101,110]}],
             0,false},
            {text,"\v*genop.tab*"},
            {sep,
             [{text,
               "C, while internal generic instructions are automatically numbered by"}],
             0,false},
            {sep,[{text,"\fbeam_makeops"}],0,false},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÒThe identity of a generic instruction is its name combined with its arity. That means that it is allowed to define two distinct generic instructions having the same name but with different arities. For example:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [29,10,109,111,118,101,95,119,105,110,100,111,119,47,53,10,109,
              111,118,101,95,119,105,110,100,111,119,47,54,10]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "yEach operand of a generic instruction is tagged with its type. A generic instruction can have one of the following types:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,[3,42,120,42]},
                    {sep,[{text,"\r- X register."}],0,false}],
                   0,false}],
                 0,false},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,[3,42,121,42]},
                    {sep,[{text,"\r- Y register."}],0,false}],
                   0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,[3,42,108,42]},
                   {sep,
                    [{text,"!- Floating point register number."}],
                    0,false}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,[3,42,105,42]},
                  {sep,
                   [{text,
                     [25,45,32,84,97,103,103,101,100,32,108,105,116,101,114,
                      97,108,32,105,110,116,101,103,101,114,46]}],
                   0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,[3,42,97,42]},
                 {sep,
                  [{text,
                    [22,45,32,84,97,103,103,101,100,32,108,105,116,101,114,97,
                     108,32,97,116,111,109,46]}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,[3,42,110,42]},
                {sep,[{text,[7,45,32,78,73,76,32,40]}],0,false},
                {text,[4,42,91,93,42]},
                {sep,
                 [{text,
                   [18,44,32,116,104,101,32,101,109,112,116,121,32,108,105,
                    115,116,41,46]}],
                 0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,[3,42,113,42]},
               {sep,
                [{text,
                  "Ê- Literal that don't fit in a word, that is an object stored on the heap such as a list or tuple. Any heap object type is supported, even types that don't have real literals such as external references."}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,[3,42,102,42]},
              {sep,
               [{text,
                 [25,45,32,78,111,110,45,122,101,114,111,32,102,97,105,108,
                  117,114,101,32,108,97,98,101,108,46]}],
               0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[3,42,112,42]},
             {sep,
              [{text,
                [21,45,32,90,101,114,111,32,102,97,105,108,117,114,101,32,108,
                 97,98,101,108,46]}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[3,42,117,42]},
            {sep,
             [{text,
               [127,45,32,85,110,116,97,103,103,101,100,32,105,110,116,101,
                103,101,114,32,116,104,97,116,32,102,105,116,115,32,105,110,
                32,97,32,109,97,99,104,105,110,101,32,119,111,114,100,46,32,
                73,116,32,105,115,32,117,115,101,100,32,102,111,114,32,109,97,
                110,121,32,100,105,102,102,101,114,101,110,116,32,112,117,114,
                112,111,115,101,115,44,32,115,117,99,104,32,97,115,32,116,104,
                101,32,110,117,109,98,101,114,32,111,102,32,108,105,118,101,
                32,114,101,103,105,115,116,101,114,115,32,105,110]}],
             0,false},
            {text,"\r*test_heap/2*"},
            {sep,[{text,"\", as a reference to the export for"}],0,false},
            {text,"\f*call_ext/2*"},
            {sep,
             [{text,
               "â, and as the flags operand for binary syntax instructions. When the generic instruction is translated to a specific instruction, the type for the operand in the specific operation will tell the loader how to treat the operand."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[3,42,111,42]},
           {sep,
            [{text,
              [31,45,32,79,118,101,114,102,108,111,119,46,32,73,102,32,116,
               104,101,32,118,97,108,117,101,32,102,111,114,32,97,110]}],
            0,false},
           {text,[3,42,117,42]},
           {sep,
            [{text,
              "Roperand does not fit in a machine word, the type of the operand will be changed to"}],
            0,false},
           {text,[3,42,111,42]},
           {sep,
            [{text,
              "i(with no associated value). Currently only used internally in the loader in the guard constraint function"}],
            0,false},
           {text,
            [18,42,98,105,110,97,114,121,95,116,111,111,95,98,105,103,40,41,
             42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[3,42,118,42]},
          {sep,
           [{text,"2- Arity value. Only used internally in the loader."}],
           0,false}],
         0,false}],
       0,false}}],
    0,false},
   {sep,
    [{text,
      "s<a name=\"Syntax-of-tab-files_Defining-specific-instructions\">Syntax-of-tab-files_Defining-specific-instructions</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"!## Defining specific instructions"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¹The specific instructions are known only to the runtime system and are the instructions that are actually executed. They can be changed at any time without causing compatibility issues."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"3A specific instruction can have at most 6 operands."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "oA specific instruction is defined by first giving its name followed by the types for each operand. For example:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,{text,[3,96,96,96]},{sep,[{text,"\v\n move x y\n"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "kInternally, for example in the generated code and in the output from the BEAM disassembler, the instruction"}],
             0,false},
            {text,"\n*move x y*"},
            {sep,
             [{text,[14,119,105,108,108,32,98,101,32,99,97,108,108,101,100]}],
             0,false},
            {text,"\t*move_xy*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [130,84,104,101,32,110,97,109,101,32,102,111,114,32,97,32,115,
              112,101,99,105,102,105,99,32,105,110,115,116,114,117,99,116,105,
              111,110,32,105,115,32,97,110,32,105,100,101,110,116,105,102,105,
              101,114,32,115,116,97,114,116,105,110,103,32,119,105,116,104,32,
              97,32,108,111,119,101,114,99,97,115,101,32,108,101,116,116,101,
              114,46,32,65,32,116,121,112,101,32,105,115,32,97,110,32,108,111,
              119,101,114,99,97,115,101,32,111,114,32,117,112,112,101,114,99,
              97,115,101,32,108,101,116,116,101,114,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "lAll specific instructions with a given name must have the same number of operands. That is, the following is"}],
             0,false},
            {sep,[{text,[3,110,111,116]}],0,false},
            {sep,[{text,"\ballowed:"}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [25,10,32,109,111,118,101,32,120,32,120,10,32,109,111,118,101,32,
              120,32,121,32,120,32,121,10]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "kHere follows the type letters that more or less directly corresponds to the types for generic instructions."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,[3,42,120,42]},
                   {sep,
                    [{text,
                      [142,45,32,88,32,114,101,103,105,115,116,101,114,46,32,
                       87,105,108,108,32,98,101,32,108,111,97,100,101,100,32,
                       97,115,32,97,32,98,121,116,101,32,111,102,102,115,101,
                       116,32,116,111,32,116,104,101,32,88,32,114,101,103,105,
                       115,116,101,114,32,114,101,108,97,116,105,118,101,32,
                       116,111,32,116,104,101,32,98,97,115,101,32,111,102,32,
                       88,32,114,101,103,105,115,116,101,114,32,97,114,114,97,
                       121,46,32,40,67,97,110,32,98,101,32,112,97,99,107,101,
                       100,32,119,105,116,104,32,111,116,104,101,114,32,111,
                       112,101,114,97,110,100,115,46,41]}],
                    0,false}],
                  0,false}],
                0,false},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,[3,42,121,42]},
                   {sep,
                    [{text,
                      [129,45,32,89,32,114,101,103,105,115,116,101,114,46,32,
                       87,105,108,108,32,98,101,32,108,111,97,100,101,100,32,
                       97,115,32,97,32,98,121,116,101,32,111,102,102,115,101,
                       116,32,116,111,32,116,104,101,32,89,32,114,101,103,105,
                       115,116,101,114,32,114,101,108,97,116,105,118,101,32,
                       116,111,32,116,104,101,32,115,116,97,99,107,32,102,114,
                       97,109,101,46,32,40,67,97,110,32,98,101,32,112,97,99,
                       107,101,100,32,119,105,116,104,32,111,116,104,101,114,
                       32,111,112,101,114,97,110,100,115,46,41]}],
                    0,false}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,[3,42,114,42]},
                  {sep,
                   [{text,
                     "O- X register 0. An implicit operand that will not be stored in the loaded code."}],
                   0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,[3,42,108,42]},
                 {sep,
                  [{text,
                    "F- Floating point register number. (Can be packed with other operands.)"}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,[3,42,105,42]},
                {sep,
                 [{text,
                   "=- Tagged literal integer (a SMALL that will fit in one word)."}],
                 0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,[3,42,97,42]},
               {sep,
                [{text,[14,45,32,84,97,103,103,101,100,32,97,116,111,109,46]}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,[3,42,110,42]},
              {sep,
               [{text,
                 "A- NIL or the empty list. (Will not be stored in the loaded code.)"}],
               0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[3,42,113,42]},
             {sep,
              [{text,
                "±- Tagged CONS or BOXED pointer. That is, a term such as a list or tuple. Any heap object type is supported, even types that don't have real literals such as external references."}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[3,42,102,42]},
            {sep,
             [{text,
               "H- Failure label (non-zero). The target for a branch or call instruction."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[3,42,112,42]},
           {sep,
            [{text,
              [132,45,32,84,104,101,32,48,32,102,97,105,108,117,114,101,32,
               108,97,98,101,108,44,32,109,101,97,110,105,110,103,32,116,104,
               97,116,32,97,110,32,101,120,99,101,112,116,105,111,110,32,115,
               104,111,117,108,100,32,98,101,32,114,97,105,115,101,100,32,105,
               102,32,116,104,101,32,105,110,115,116,114,117,99,116,105,111,
               110,32,102,97,105,108,115,46,32,40,87,105,108,108,32,110,111,
               116,32,98,101,32,115,116,111,114,101,100,32,105,110,32,116,104,
               101,32,108,111,97,100,101,100,32,99,111,100,101,46,41]}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[3,42,99,42]},
          {sep,
           [{text,
             "µ- Any literal term; that is, immediate literals such as SMALL, and CONS or BOXED pointers to literals. (Can be used where the operand in the generic instruction has one of the types"}],
           0,false},
          {text,[3,42,105,42]},
          {sep,[{text,[1,44]}],0,false},
          {text,[3,42,97,42]},
          {sep,[{text,[1,44]}],0,false},
          {text,[3,42,110,42]},
          {sep,[{text,[4,44,32,111,114]}],0,false},
          {text,[3,42,113,42]},
          {sep,[{text,[2,46,41]}],0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [296,84,104,101,32,116,121,112,101,115,32,116,104,97,116,32,
                102,111,108,108,111,119,32,100,111,32,97,32,116,121,112,101,
                32,116,101,115,116,32,111,102,32,116,104,101,32,111,112,101,
                114,97,110,100,32,97,116,32,114,117,110,116,105,109,101,59,32,
                116,104,117,115,44,32,116,104,101,121,32,97,114,101,32,103,
                101,110,101,114,97,108,108,121,32,109,111,114,101,32,101,120,
                112,101,110,115,105,118,101,32,105,110,32,116,101,114,109,115,
                32,111,102,32,114,117,110,116,105,109,101,32,116,104,97,110,
                32,116,104,101,32,116,121,112,101,115,32,100,101,115,99,114,
                105,98,101,100,32,101,97,114,108,105,101,114,46,32,72,111,119,
                101,118,101,114,44,32,116,104,111,115,101,32,111,112,101,114,
                97,110,100,32,116,121,112,101,115,32,97,114,101,32,110,101,
                101,100,101,100,32,116,111,32,97,118,111,105,100,32,97,32,99,
                111,109,98,105,110,97,116,111,114,105,97,108,32,101,120,112,
                108,111,115,105,111,110,32,105,110,32,116,104,101,32,110,117,
                109,98,101,114,32,111,102,32,115,112,101,99,105,102,105,99,32,
                105,110,115,116,114,117,99,116,105,111,110,115,32,97,110,100,
                32,111,118,101,114,97,108,108,32,99,111,100,101,32,115,105,
                122,101,32,111,102]}],
             0,false},
            {text,
             [16,42,112,114,111,99,101,115,115,95,109,97,105,110,40,41,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[3,42,115,42]},
            {sep,
             [{text,
               [342,45,32,84,97,103,103,101,100,32,115,111,117,114,99,101,58,
                32,88,32,114,101,103,105,115,116,101,114,44,32,89,32,114,101,
                103,105,115,116,101,114,44,32,111,114,32,97,32,108,105,116,
                101,114,97,108,32,116,101,114,109,46,32,84,104,101,32,116,97,
                103,32,119,105,108,108,32,98,101,32,116,101,115,116,101,100,
                32,97,116,32,114,117,110,116,105,109,101,32,116,111,32,114,
                101,116,114,105,101,118,101,32,116,104,101,32,118,97,108,117,
                101,32,102,114,111,109,32,97,110,32,88,32,114,101,103,105,115,
                116,101,114,44,32,97,32,89,32,114,101,103,105,115,116,101,114,
                44,32,111,114,32,115,105,109,112,108,121,32,117,115,101,32,
                116,104,101,32,118,97,108,117,101,32,97,115,32,97,32,116,97,
                103,103,101,100,32,69,114,108,97,110,103,32,116,101,114,109,
                46,32,40,73,109,112,108,101,109,101,110,116,97,116,105,111,
                110,32,110,111,116,101,58,32,65,110,32,88,32,114,101,103,105,
                115,116,101,114,32,105,115,32,116,97,103,103,101,100,32,97,
                115,32,97,32,112,105,100,44,32,97,110,100,32,97,32,89,32,114,
                101,103,105,115,116,101,114,32,97,115,32,97,32,112,111,114,
                116,46,32,84,104,101,114,101,102,111,114,101,32,116,104,101,
                32,108,105,116,101,114,97,108,32,116,101,114,109,32,109,117,
                115,116,32,110,111,116,32,99,111,110,116,97,105,110,32,97,32,
                112,111,114,116,32,111,114,32,112,105,100,46,41]}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[3,42,83,42]},
            {sep,
             [{text,
               [147,45,32,84,97,103,103,101,100,32,115,111,117,114,99,101,32,
                114,101,103,105,115,116,101,114,32,40,88,32,111,114,32,89,41,
                46,32,84,104,101,32,116,97,103,32,119,105,108,108,32,98,101,
                32,116,101,115,116,101,100,32,97,116,32,114,117,110,116,105,
                109,101,32,116,111,32,114,101,116,114,105,101,118,101,32,116,
                104,101,32,118,97,108,117,101,32,102,114,111,109,32,97,110,32,
                88,32,114,101,103,105,115,116,101,114,32,111,114,32,97,32,89,
                32,114,101,103,105,115,116,101,114,46,32,83,108,105,103,104,
                108,121,32,99,104,101,97,112,101,114,32,116,104,97,110]}],
             0,false},
            {text,[3,42,115,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[3,42,100,42]},
           {sep,
            [{text,
              "¼- Tagged destination register (X or Y). The tag will be tested at runtime to set up a pointer to the destination register. If the instrution performs a garbarge collection, it must use the"}],
            0,false},
           {text,
            [21,42,36,82,69,70,82,69,83,72,95,71,69,78,95,68,69,83,84,40,41,
             42]},
           {sep,
            [{text,
              "imacro to refresh the pointer before storing to it (there are more details about that in a later section)."}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[3,42,106,42]},
          {sep,[{text,"!- A failure label (combination of"}],0,false},
          {text,[3,42,102,42]},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,[3,42,112,42]},
          {sep,
           [{text,
             [136,41,46,32,73,102,32,116,104,101,32,98,114,97,110,99,104,32,
              116,97,114,103,101,116,32,48,44,32,97,110,32,101,120,99,101,112,
              116,105,111,110,32,119,105,108,108,32,98,101,32,114,97,105,115,
              101,100,32,105,102,32,105,110,115,116,114,117,99,116,105,111,
              110,32,102,97,105,108,115,44,32,111,116,104,101,114,119,105,115,
              101,32,99,111,110,116,114,111,108,32,119,105,108,108,32,98,101,
              32,116,114,97,110,115,102,101,114,101,100,32,116,111,32,116,104,
              101,32,116,97,114,103,101,116,32,97,100,100,114,101,115,115,
              46]}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "AThe types that follows are all applied to an operand that has the"}],
             0,false},
            {text,[3,42,117,42]},
            {sep,[{text,[5,116,121,112,101,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,[3,42,116,42]},
                 {sep,
                  [{text,
                    "°- An untagged integer that will fit in 12 bits (0-4096). It can be packed with other operands in a word. Most often used as the number of live registers in instructions such as"}],
                  0,false},
                 {text,"\v*test_heap*"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,[3,42,73,42]},
                 {sep,
                  [{text,
                    "r- An untagged integer that will fit in 32 bits. It can be packed with other operands in a word on a 64-bit system."}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,[3,42,87,42]},
                {sep,
                 [{text,
                   "H- Untagged integer or pointer. Not possible to pack with other operands."}],
                 0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,[3,42,101,42]},
               {sep,
                [{text,
                  "W- Pointer to an export entry. Use by call instructions that call other modules, such as"}],
                0,false},
               {text,"\n*call_ext*"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,[3,42,76,42]},
              {sep,[{text,"\e- A label. Only used by the"}],0,false},
              {text,"\t*label/1*"},
              {sep,[{text,"\finstruction."}],0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[3,42,98,42]},
             {sep,
              [{text,
                "9- Pointer to BIF. Used by instructions that BIFs, such as"}],
              0,false},
             {text,"\n*call_bif*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[3,42,65,42]},
            {sep,
             [{text,
               "K- A tagged arityvalue. Used in instructions that test the arity of a tuple."}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[3,42,80,42]},
           {sep,
            [{text,
              [29,45,32,65,32,98,121,116,101,32,111,102,102,115,101,116,32,
               105,110,116,111,32,97,32,116,117,112,108,101,46]}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[3,42,81,42]},
          {sep,
           [{text,
             "p- A byte offset into the stack. Used for updating the frame pointer register. Can be packed with other operands."}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "·When the loader translates a generic instruction a specific instruction, it will choose the most specific instruction that will fit the types. Consider the following two instructions:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [19,10,109,111,118,101,32,99,32,120,10,109,111,118,101,32,110,32,
              120,10]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,[3,42,99,42]},
            {sep,
             [{text,
               "8operand can encode any literal value, including NIL. The"}],
             0,false},
            {text,[3,42,110,42]},
            {sep,
             [{text,
               ">operand only works for NIL. If we have the generic instruction"}],
             0,false},
            {text,
             [18,42,123,109,111,118,101,44,110,105,108,44,123,120,44,49,125,
              125,42]},
            {sep,[{text,"!, the loader will translate it to"}],0,false},
            {text,"\v*move_nx 1*"},
            {sep,[{text,[7,98,101,99,97,117,115,101]}],0,false},
            {text,"\n*move n x*"},
            {sep,
             [{text,
               [17,105,115,32,109,111,114,101,32,115,112,101,99,105,102,105,
                99,46]}],
             0,false},
            {text,"\t*move_nx*"},
            {sep,
             [{text,
               "Pcould be slightly faster or smaller (depending on the architecture), because the"}],
             0,false},
            {text,[4,42,91,93,42]},
            {sep,[{text,"'is not stored explicitly as an operand."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{text,
        "Ç<a name=\"Syntax-of-tab-files_Defining-specific-instructions_Syntactic-sugar-for-specific-instructions\">Syntax-of-tab-files_Defining-specific-instructions_Syntactic-sugar-for-specific-instructions</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,",## Syntactic sugar for specific instructions"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "YIt is possible to specify more than one type letter for each operand. Here is an example:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"\r\nmove cxy xy\n"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [28,84,104,105,115,32,105,115,32,115,121,110,116,97,99,116,105,
                99,32,115,117,103,97,114,32,102,111,114,58]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "7\nmove c x\nmove c y\nmove x x\nmove x y\nmove y x\nmove y y\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\eNote the difference between"}],0,false},
              {text,"\v*move c xy*"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"\n*move c d*"},
              {sep,[{text,"\v. Note that"}],0,false},
              {text,"\v*move c xy*"},
              {sep,
               [{text,"/is equivalent to the following two definitions:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [19,10,109,111,118,101,32,99,32,120,10,109,111,118,101,32,99,
                32,121,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [18,79,110,32,116,104,101,32,111,116,104,101,114,32,104,97,
                  110,100,44]}],
               0,false},
              {text,"\n*move c d*"},
              {sep,
               [{text,"(is a single instruction. At runtime, the"}],
               0,false},
              {text,[3,42,100,42]},
              {sep,
               [{text,
                 [127,111,112,101,114,97,110,100,32,119,105,108,108,32,98,101,
                  32,116,101,115,116,101,100,32,116,111,32,115,101,101,32,119,
                  104,101,116,104,101,114,32,105,116,32,114,101,102,101,114,
                  115,32,116,111,32,97,110,32,88,32,114,101,103,105,115,116,
                  101,114,32,111,114,32,97,32,89,32,114,101,103,105,115,116,
                  101,114,44,32,97,110,100,32,97,32,112,111,105,110,116,101,
                  114,32,116,111,32,116,104,101,32,114,101,103,105,115,116,
                  101,114,32,119,105,108,108,32,98,101,32,115,101,116,32,117,
                  112,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {sep,
      [{text,
        [153,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,
         45,116,97,98,45,102,105,108,101,115,95,68,101,102,105,110,105,110,
         103,45,115,112,101,99,105,102,105,99,45,105,110,115,116,114,117,99,
         116,105,111,110,115,95,84,104,101,45,45,116,121,112,101,45,109,111,
         100,105,102,105,101,114,34,62,83,121,110,116,97,120,45,111,102,45,
         116,97,98,45,102,105,108,101,115,95,68,101,102,105,110,105,110,103,
         45,115,112,101,99,105,102,105,99,45,105,110,115,116,114,117,99,116,
         105,111,110,115,95,84,104,101,45,45,116,121,112,101,45,109,111,100,
         105,102,105,101,114,60,47,97,62]},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [24,35,35,32,84,104,101,32,39,63,39,32,116,121,112,101,32,109,111,
            100,105,102,105,101,114]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\rThe character"}],0,false},
              {text,[3,42,63,42]},
              {sep,
               [{text,
                 [136,99,97,110,32,98,101,32,97,100,100,101,100,32,116,111,32,
                  116,104,101,32,101,110,100,32,111,102,32,97,110,32,111,112,
                  101,114,97,110,100,32,116,111,32,105,110,100,105,99,97,116,
                  101,32,116,104,97,116,32,116,104,101,32,111,112,101,114,97,
                  110,100,32,119,105,108,108,32,110,111,116,32,98,101,32,117,
                  115,101,100,32,101,118,101,114,121,32,116,105,109,101,32,
                  116,104,101,32,105,110,115,116,114,117,99,116,105,111,110,
                  32,105,115,32,101,120,101,99,117,116,101,100,46,32,70,111,
                  114,32,101,120,97,109,112,108,101,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,"*\nallocate_heap t I t?\nis_eq_exact f? x xy\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[2,73,110]}],0,false},
              {text,[15,42,97,108,108,111,99,97,116,101,95,104,101,97,112,42]},
              {sep,
               [{text,
                 [150,44,32,116,104,101,32,108,97,115,116,32,111,112,101,114,
                  97,110,100,32,105,115,32,116,104,101,32,110,117,109,98,101,
                  114,32,111,102,32,108,105,118,101,32,114,101,103,105,115,
                  116,101,114,115,46,32,73,116,32,119,105,108,108,32,111,110,
                  108,121,32,98,101,32,117,115,101,100,32,105,102,32,116,104,
                  101,114,101,32,105,115,32,110,111,116,32,101,110,111,117,
                  103,104,32,104,101,97,112,32,115,112,97,99,101,32,97,110,
                  100,32,97,32,103,97,114,98,97,103,101,32,99,111,108,108,101,
                  99,116,105,111,110,32,109,117,115,116,32,98,101,32,112,101,
                  114,102,111,114,109,101,100,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[2,73,110]}],0,false},
              {text,"\r*is_eq_exact*"},
              {sep,
               [{text,
                 "g, the failure address (the first operand) will only be used if the two register operands are not equal."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "aKnowing that an operand is not always used can improve how packing is done for some instructions."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[7,70,111,114,32,116,104,101]}],0,false},
              {text,[15,42,97,108,108,111,99,97,116,101,95,104,101,97,112,42]},
              {sep,
               [{text,
                 [24,105,110,115,116,114,117,99,116,105,111,110,44,32,119,105,
                  116,104,111,117,116,32,116,104,101]}],
               0,false},
              {text,[3,42,63,42]},
              {sep,[{text,"$the packing would be done like this:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "ö\n     +--------------------+--------------------+\nI -> |       Stack needed | &&lb_allocate_heap +\n     +--------------------+--------------------+\n     |        Heap needed | Live registers     +\n     +--------------------+--------------------+\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "g\"Stack needed\" and \"Heap needed\" are always used, but they are in different words. Thus, at runtime the"}],
               0,false},
              {text,[15,42,97,108,108,111,99,97,116,101,95,104,101,97,112,42]},
              {sep,
               [{text,
                 "ainstruction must read both words from memory even though it will not always use \"Live registers\"."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\bWith the"}],0,false},
              {text,[3,42,63,42]},
              {sep,
               [{text,"(, the operands will be packed like this:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "ö\n     +--------------------+--------------------+\nI -> |     Live registers | &&lb_allocate_heap +\n     +--------------------+--------------------+\n     |        Heap needed |       Stack needed +\n     +--------------------+--------------------+\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               ":Now \"Stack needed\" and \"Heap needed\" are in the same word."}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}],
    0,false},
   {sep,
    [{text,
      "q<a name=\"Syntax-of-tab-files_Defining-transformation-rules\">Syntax-of-tab-files_Defining-transformation-rules</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text," ## Defining transformation rules"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [418,84,114,97,110,115,102,111,114,109,97,116,105,111,110,32,114,
              117,108,101,115,32,97,114,101,32,117,115,101,100,32,116,111,32,
              114,101,119,114,105,116,101,32,103,101,110,101,114,105,99,32,
              105,110,115,116,114,117,99,116,105,111,110,115,32,116,111,32,
              111,116,104,101,114,32,103,101,110,101,114,105,99,32,105,110,
              115,116,114,117,99,116,105,111,110,115,46,32,84,104,101,32,116,
              114,97,110,115,102,111,114,109,97,116,105,111,110,115,32,114,
              117,108,101,115,32,97,114,101,32,97,112,112,108,105,101,100,32,
              114,101,112,101,97,116,101,100,108,121,32,117,110,116,105,108,
              32,110,111,32,114,117,108,101,32,109,97,116,99,104,46,32,65,116,
              32,116,104,97,116,32,112,111,105,110,116,44,32,116,104,101,32,
              102,105,114,115,116,32,105,110,115,116,114,117,99,116,105,111,
              110,32,105,110,32,116,104,101,32,114,101,115,117,108,116,105,
              110,103,32,105,110,115,116,114,117,99,116,105,111,110,32,115,
              101,113,117,101,110,99,101,32,119,105,108,108,32,98,101,32,99,
              111,110,118,101,114,116,101,100,32,116,111,32,97,32,115,112,101,
              99,105,102,105,99,32,105,110,115,116,114,117,99,116,105,111,110,
              32,97,110,100,32,97,100,100,101,100,32,116,111,32,116,104,101,
              32,99,111,100,101,32,102,111,114,32,116,104,101,32,109,111,100,
              117,108,101,32,98,101,105,110,103,32,108,111,97,100,101,100,46,
              32,84,104,101,110,32,116,104,101,32,116,114,97,110,115,102,111,
              114,109,97,116,105,111,110,32,114,117,108,101,115,32,102,111,
              114,32,116,104,101,32,114,101,109,97,105,110,105,110,103,32,105,
              110,115,116,114,117,99,116,105,111,110,115,32,97,114,101,32,114,
              117,110,32,105,110,32,116,104,101,32,115,97,109,101,32,119,97,
              121,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"0A rule is recognized by its right-pointer arrow:"}],
             0,false},
            {text,[4,42,61,62,42]},
            {sep,
             [{text,
               "L. To the left of the arrow is one or more instruction patterns, separated by"}],
             0,false},
            {text,[3,42,124,42]},
            {sep,
             [{text,
               "F. To the right of the arrow is zero or more instructions, separated by"}],
             0,false},
            {text,[3,42,124,42]},
            {sep,
             [{text,
               "Í. If the instructions from the BEAM code matches the instruction patterns on the left side, they will be replaced with instructions on the right side (or removed if there are no instructions on the right)."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{text,
        "­<a name=\"Syntax-of-tab-files_Defining-transformation-rules_Defining-instruction-patterns\">Syntax-of-tab-files_Defining-transformation-rules_Defining-instruction-patterns</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text," ## Defining instruction patterns"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "DWe will start looking at the patterns on the left side of the arrow."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [144,65,32,112,97,116,116,101,114,110,32,102,111,114,32,97,110,
                32,105,110,115,116,114,117,99,116,105,111,110,32,99,111,110,
                115,105,115,116,115,32,111,102,32,105,116,115,32,110,97,109,
                101,44,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,
                112,97,116,116,101,114,110,32,102,111,114,32,101,97,99,104,32,
                111,102,32,105,116,115,32,111,112,101,114,97,110,100,115,46,
                32,84,104,101,32,111,112,101,114,97,110,100,32,112,97,116,116,
                101,114,110,115,32,97,114,101,32,115,101,112,97,114,97,116,
                101,100,32,98,121,32,115,112,97,99,101,115,46]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "èThe simplest possible pattern is a variable. Just like in Erlang, a variable must begin with an uppercase letter. If the same variable is used in multiple operands, the pattern will only match if the operands are equal. For example:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [19,10,109,111,118,101,32,83,97,109,101,32,83,97,109,101,32,61,
                62,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,"+This pattern will match if the operands for"}],
               0,false},
              {text,[6,42,109,111,118,101,42]},
              {sep,
               [{text,
                 "¶are the same. If the pattern match, the instruction will be removed. (That used to be an actual rule a long time ago when the compiler would occasionally produce instructions such as"}],
               0,false},
              {text,
               [20,42,123,109,111,118,101,44,123,120,44,50,125,44,123,120,44,
                50,125,125,42]},
              {sep,[{text,[2,46,41]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "vVariables that have been bound on the left side can be used on the right side. For example, this rule will rewrite all"}],
               0,false},
              {text,[6,42,109,111,118,101,42]},
              {sep,
               [{text,
                 [15,105,110,115,116,114,117,99,116,105,111,110,115,32,116,
                  111]}],
               0,false},
              {text,"\b*assign*"},
              {sep,
               [{text,"'instructions with the operands swapped:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text," \nmove Src Dst => assign Dst Src\n"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "´If we only want to match operands of a certain type, we can use a type constraint. A type constraint consists of one or more lowercase letters, each specifying a type. For example:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"!\nis_integer Fail an => jump Fail\n"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\eThe second operand pattern,"}],0,false},
              {text,[4,42,97,110,42]},
              {sep,
               [{text,
                 "e, will match if the second operand is either an atom or NIL (the empty list). In case of a match, the"}],
               0,false},
              {text,[14,42,105,115,95,105,110,116,101,103,101,114,47,50,42]},
              {sep,[{text,"#instruction will be replaced with a"}],0,false},
              {text,"\b*jump/1*"},
              {sep,[{text,"\finstruction."}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "oAn operand pattern can bind a variable and constrain the type at the same time by following the variable with a"}],
               0,false},
              {text,[3,42,61,42]},
              {sep,[{text," and the constraint. For example:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "?\nis_eq_exact Fail=f R=xy C=q => i_is_eq_exact_literal Fail R C\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\bHere the"}],0,false},
              {text,"\r*is_eq_exact*"},
              {sep,
               [{text,
                 "¤instruction is replaced with a specialized instruction that only compares literals, but only if the first operand is a register and the second operand is a literal."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {sep,
      [{text,
        "­<a name=\"Syntax-of-tab-files_Defining-transformation-rules_Further-constraining-patterns\">Syntax-of-tab-files_Defining-transformation-rules_Further-constraining-patterns</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text," ## Further constraining patterns"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "eIn addition to specifying a type letter, the actual value for the type can be specified. For example:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [28,10,109,111,118,101,32,67,61,99,32,120,61,61,49,32,61,62,32,
                109,111,118,101,95,120,49,32,67,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [26,72,101,114,101,32,116,104,101,32,115,101,99,111,110,100,
                  32,111,112,101,114,97,110,100,32,111,102]}],
               0,false},
              {text,[6,42,109,111,118,101,42]},
              {sep,[{text,"\"is constrained to be X register 1."}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "qWhen specifying an atom constraint, the atom is written as it would be in the C source code. That is, it needs an"}],
               0,false},
              {text,[5,42,97,109,95,42]},
              {sep,[{text," prefix, and it must be listed in"}],0,false},
              {text,"\f*atom.names*"},
              {sep,
               [{text,[14,46,32,70,111,114,32,101,120,97,109,112,108,101,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "B\nis_boolean Fail=f a==am_true =>\nis_boolean Fail=f a==am_false =>\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "]There are several constraints available for testing whether a call is to a BIF or a function."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [14,84,104,101,32,99,111,110,115,116,114,97,105,110,116]}],
               0,false},
              {text,"\n*u$is_bif*"},
              {sep,
               [{text,
                 "Awill test whether the given operand refers to a BIF. For example:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "T\ncall_ext u Bif=u$is_bif => call_bif Bif\ncall_ext u Func         => i_call_ext Func\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,"\n*call_ext*"},
              {sep,
               [{text,
                 "pinstruction can be used to call functions written in Erlang as well as BIFs (or more properly called SNIFs). The"}],
               0,false},
              {text,"\n*u$is_bif*"},
              {sep,
               [{text,
                 "Zconstraint will match if the operand refers to a BIF (that is, if it is listed in the file"}],
               0,false},
              {text,"\t*bif.tab*"},
              {sep,[{text,"\f). Note that"}],0,false},
              {text,"\n*u$is_bif*"},
              {sep,
               [{text,
                 [141,115,104,111,117,108,100,32,111,110,108,121,32,98,101,32,
                  97,112,112,108,105,101,100,32,116,111,32,111,112,101,114,97,
                  110,100,115,32,116,104,97,116,32,97,114,101,32,107,110,111,
                  119,110,32,116,111,32,99,111,110,116,97,105,110,32,97,110,
                  32,105,110,100,101,120,32,116,111,32,116,104,101,32,105,109,
                  112,111,114,116,32,116,97,98,108,101,32,99,104,117,110,107,
                  32,105,110,32,116,104,101,32,66,69,65,77,32,102,105,108,101,
                  32,40,115,117,99,104,32,111,112,101,114,97,110,100,115,32,
                  104,97,118,101,32,116,104,101,32,116,121,112,101]}],
               0,false},
              {text,[3,42,98,42]},
              {sep,[{text,[2,111,114]}],0,false},
              {text,[3,42,101,42]},
              {sep,
               [{text,
                 "?in the corresponding specific instruction). If applied to other"}],
               0,false},
              {text,[3,42,117,42]},
              {sep,
               [{text,"3operands, it will at best return a nonsense result."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,[14,42,117,36,105,115,95,110,111,116,95,98,105,102,42]},
              {sep,
               [{text,
                 "Hconstraint matches if the operand does not refer to a BIF (not listed in"}],
               0,false},
              {text,"\t*bif.tab*"},
              {sep,
               [{text,
                 [15,41,46,32,70,111,114,32,101,120,97,109,112,108,101,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "p\nmove S X0=x==0 | line Loc | call_ext_last Ar Func=u$is_not_bif D => \\\n     move S X0 | call_ext_last Ar Func D\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,
               [25,42,117,36,98,105,102,58,77,111,100,117,108,101,58,78,97,
                109,101,47,65,114,105,116,121,42]},
              {sep,
               [{text,
                 "Nconstraint tests whether the given operand refers to a specific BIF. Note that"}],
               0,false},
              {text,
               [19,42,77,111,100,117,108,101,58,78,97,109,101,47,65,114,105,
                116,121,42]},
              {sep,[{text,[4,109,117,115,116]}],0,false},
              {sep,
               [{text,
                 [29,98,101,32,97,110,32,101,120,105,115,116,105,110,103,32,
                  66,73,70,32,100,101,102,105,110,101,100,32,105,110]}],
               0,false},
              {text,"\t*bif.tab*"},
              {sep,
               [{text,
                 [141,44,32,111,114,32,116,104,101,114,101,32,119,105,108,108,
                  32,98,101,32,97,32,99,111,109,112,105,108,97,116,105,111,
                  110,32,101,114,114,111,114,46,32,73,116,32,105,115,32,117,
                  115,101,102,117,108,32,119,104,101,110,32,97,32,99,97,108,
                  108,32,116,111,32,97,32,115,112,101,99,105,102,105,99,32,66,
                  73,70,32,115,104,111,117,108,100,32,98,101,32,114,101,112,
                  108,97,99,101,100,32,119,105,116,104,32,97,110,32,105,110,
                  115,116,114,117,99,116,105,111,110,32,97,115,32,105,110,32,
                  116,104,105,115,32,101,120,97,109,112,108,101,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Y\ngc_bif2 Fail Live u$bif:erlang:splus/2 S1 S2 Dst => \\\n     gen_plus Fail Live S1 S2 Dst\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\eHere the call to the GC BIF"}],0,false},
              {text,[7,42,39,43,39,47,50,42]},
              {sep,[{text,"%will be replaced with the instruction"}],0,false},
              {text,"\f*gen_plus/5*"},
              {sep,
               [{text,
                 "f. Note that the same name as used in the C source code must be used for the BIF, which in this case is"}],
               0,false},
              {text,[7,42,115,112,108,117,115,42]},
              {sep,
               [{text,
                 [28,46,32,73,116,32,105,115,32,100,101,102,105,110,101,100,
                  32,108,105,107,101,32,116,104,105,115,32,105,110]}],
               0,false},
              {text,"\t*bit.tab*"},
              {sep,[{text,[1,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,[{text,"\e\nubif erlang:'+'/2 splus_2\n"}],0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,
               [26,42,117,36,102,117,110,99,58,77,111,100,117,108,101,58,78,
                97,109,101,47,65,114,105,116,121,42]},
              {sep,
               [{text,
                 "Qwill test whether the given operand is a a specific function. Here is an example:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "C\nbif1 Fail u$func:erlang:is_constant/1 Src Dst => too_old_compiler\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,[15,42,105,115,95,99,111,110,115,116,97,110,116,47,49,42]},
              {sep,
               [{text,
                 "Oused to be a BIF a long time ago. The transformation replaces the call with the"}],
               0,false},
              {text,
               [18,42,116,111,111,95,111,108,100,95,99,111,109,112,105,108,
                101,114,42]},
              {sep,
               [{text,
                 "minstruction which will produce a nicer error message than the default error would be for a missing guard BIF."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {sep,
      [{text,
        "»<a name=\"Syntax-of-tab-files_Defining-transformation-rules_Type-constraints-allowed-in-patterns\">Syntax-of-tab-files_Defining-transformation-rules_Type-constraints-allowed-in-patterns</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"'## Type constraints allowed in patterns"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "UHere are all type letters that are allowed on the left side of a transformation rule."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {sep,
                      [{text,[1,42]},
                       {sep,
                        [{text,[3,42,117,42]},
                         {sep,
                          [{text,
                            "2- An untagged integer that fits in a machine word."}],
                          0,false}],
                        0,false}],
                      0,false},
                     {sep,
                      [{text,[1,42]},
                       {sep,
                        [{text,[3,42,120,42]},
                         {sep,[{text,"\r- X register."}],0,false}],
                        0,false}],
                      0,false}},
                    {sep,
                     [{text,[1,42]},
                      {sep,
                       [{text,[3,42,121,42]},
                        {sep,[{text,"\r- Y register."}],0,false}],
                       0,false}],
                     0,false}},
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{text,[3,42,108,42]},
                       {sep,
                        [{text,"!- Floating point register number."}],
                        0,false}],
                      0,false}],
                    0,false}},
                  {sep,
                   [{text,[1,42]},
                    {sep,
                     [{text,[3,42,105,42]},
                      {sep,
                       [{text,
                         [25,45,32,84,97,103,103,101,100,32,108,105,116,101,
                          114,97,108,32,105,110,116,101,103,101,114,46]}],
                       0,false}],
                     0,false}],
                   0,false}},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{text,[3,42,97,42]},
                     {sep,
                      [{text,
                        [22,45,32,84,97,103,103,101,100,32,108,105,116,101,
                         114,97,108,32,97,116,111,109,46]}],
                      0,false}],
                    0,false}],
                  0,false}},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,[3,42,110,42]},
                    {sep,[{text,[7,45,32,78,73,76,32,40]}],0,false},
                    {text,[4,42,91,93,42]},
                    {sep,
                     [{text,
                       [18,44,32,116,104,101,32,101,109,112,116,121,32,108,
                        105,115,116,41,46]}],
                     0,false}],
                   0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,[3,42,113,42]},
                   {sep,
                    [{text,
                      "<- Literals that don't fit in a word, such as list or tuples."}],
                    0,false}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,[3,42,102,42]},
                  {sep,
                   [{text,
                     [25,45,32,78,111,110,45,122,101,114,111,32,102,97,105,
                      108,117,114,101,32,108,97,98,101,108,46]}],
                   0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,[3,42,112,42]},
                 {sep,
                  [{text,
                    [25,45,32,84,104,101,32,122,101,114,111,32,102,97,105,108,
                     117,114,101,32,108,97,98,101,108,46]}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,[3,42,106,42]},
                {sep,
                 [{text,
                   [26,45,32,65,110,121,32,108,97,98,101,108,46,32,69,113,117,
                    105,118,97,108,101,110,116,32,116,111]}],
                 0,false},
                {text,[4,42,102,112,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,[3,42,99,42]},
               {sep,[{text,"!- Any literal term. Equivalent to"}],0,false},
               {text,[6,42,97,105,110,113,42]},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,[3,42,115,42]},
              {sep,
               [{text,
                 "<- X register, Y register, or any literal term. Equivalent to"}],
               0,false},
              {text,[5,42,120,121,99,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[3,42,100,42]},
             {sep,[{text," - X or Y register. Equivalent to"}],0,false},
             {text,[4,42,120,121,42]},
             {sep,
              [{text,
                [15,46,32,40,73,110,32,97,32,112,97,116,116,101,114,110]}],
              0,false},
             {text,[3,42,100,42]},
             {sep,
              [{text,
                [140,119,105,108,108,32,109,97,116,99,104,32,98,111,116,104,
                 32,115,111,117,114,99,101,32,97,110,100,32,100,101,115,116,
                 105,110,97,116,105,111,110,32,114,101,103,105,115,116,101,
                 114,115,46,32,65,115,32,97,110,32,111,112,101,114,97,110,100,
                 32,105,110,32,97,32,115,112,101,99,105,102,105,99,32,105,110,
                 115,116,114,117,99,116,105,111,110,44,32,105,116,32,109,117,
                 115,116,32,111,110,108,121,32,98,101,32,117,115,101,100,32,
                 102,111,114,32,97,32,100,101,115,116,105,110,97,116,105,111,
                 110,32,114,101,103,105,115,116,101,114,46,41]}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[3,42,111,42]},
            {sep,
             [{text,
               "D- Overflow. An untagged integer that does not fit in a machine word."}],
             0,false}],
           0,false}],
         0,false}}],
      0,false},
     {sep,
      [{text,
        [149,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,
         45,116,97,98,45,102,105,108,101,115,95,68,101,102,105,110,105,110,
         103,45,116,114,97,110,115,102,111,114,109,97,116,105,111,110,45,114,
         117,108,101,115,95,71,117,97,114,100,45,99,111,110,115,116,114,97,
         105,110,116,115,34,62,83,121,110,116,97,120,45,111,102,45,116,97,98,
         45,102,105,108,101,115,95,68,101,102,105,110,105,110,103,45,116,114,
         97,110,115,102,111,114,109,97,116,105,111,110,45,114,117,108,101,115,
         95,71,117,97,114,100,45,99,111,110,115,116,114,97,105,110,116,115,60,
         47,97,62]},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [20,35,35,32,71,117,97,114,100,32,99,111,110,115,116,114,97,105,
            110,116,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "`If the constraints described so far is not enough, additional constraints can be written in C in"}],
               0,false},
              {text,"\r*beam_load.c*"},
              {sep,
               [{text,
                 "Íand be called as a guard function on the left side of the transformation. If the guard function returns a non-zero value, the matching of the rule will continue, otherwise the match will fail. For example:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,"+\nensure_map Lit=q | literal_is_map(Lit) =>\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [14,84,104,101,32,103,117,97,114,100,32,116,101,115,116]}],
               0,false},
              {text,
               [18,42,108,105,116,101,114,97,108,95,105,115,95,109,97,112,47,
                49,42]},
              {sep,
               [{text,
                 "utests whether the given literal is a map. If the literal is a map, the instruction is unnecessary and can be removed."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [151,73,116,32,105,115,32,111,117,116,115,105,100,101,32,116,
                  104,101,32,115,99,111,112,101,32,102,111,114,32,116,104,105,
                  115,32,100,111,99,117,109,101,110,116,32,116,111,32,100,101,
                  115,99,114,105,98,101,32,105,110,32,100,101,116,97,105,108,
                  32,104,111,119,32,115,117,99,104,32,103,117,97,114,100,32,
                  102,117,110,99,116,105,111,110,115,32,97,114,101,32,119,114,
                  105,116,116,101,110,44,32,98,117,116,32,102,111,114,32,116,
                  104,101,32,99,117,114,105,111,117,115,32,104,101,114,101,32,
                  105,115,32,116,104,101,32,105,109,112,108,101,109,101,110,
                  116,97,116,105,111,110,32,111,102]}],
               0,false},
              {text,
               [18,42,108,105,116,101,114,97,108,95,105,115,95,109,97,112,40,
                41,42]},
              {sep,[{text,[1,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "°\nstatic int\nliteral_is_map(LoaderState* stp, GenOpArg Lit)\n{\n    Eterm term;\n\n    ASSERT(Lit.type == TAG_q);\n    term = stp->literals[Lit.val].term;\n    return is_map(term);\n}\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {sep,
      [{text,
        "Ý<a name=\"Syntax-of-tab-files_Defining-transformation-rules_Handling-instruction-with-variable-number-of-operands\">Syntax-of-tab-files_Defining-transformation-rules_Handling-instruction-with-variable-number-of-operands</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,"8## Handling instruction with variable number of operands"},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [26,83,111,109,101,32,105,110,115,116,114,117,99,116,105,111,
                  110,115,44,32,115,117,99,104,32,97,115]}],
               0,false},
              {text,[14,42,115,101,108,101,99,116,95,118,97,108,47,51,42]},
              {sep,
               [{text,
                 "I, essentially has a variable number of operands. Such instructions have a"}],
               0,false},
              {text,[14,42,123,108,105,115,116,44,91,46,46,46,93,125,42]},
              {sep,
               [{text,
                 "Eoperand as their last operand in the BEAM assembly code. For example:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "\\\n{select_val,{x,0},\n            {f,1},\n            {list,[{atom,b},{f,4},{atom,a},{f,5}]}}.\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [25,84,104,101,32,108,111,97,100,101,114,32,119,105,108,108,
                  32,99,111,110,118,101,114,116,32,97]}],
               0,false},
              {text,[14,42,123,108,105,115,116,44,91,46,46,46,93,125,42]},
              {sep,[{text,"\roperand to an"}],0,false},
              {text,[3,42,117,42]},
              {sep,
               [{text,
                 "°operand whose value is the number of elements in the list, followed by each element in the list. The instruction above would be translated to the following generic instruction:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               ">\n{select_val,{x,0},{f,1},{u,4},{atom,b},{f,4},{atom,a},{f,5}}\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "OTo match a variable number of arguments we need to use the special operand type"}],
               0,false},
              {text,[3,42,42,42]},
              {sep,[{text,"\nlike this:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "X\nselect_val Src=aiq Fail=f Size=u List=* => \\\n    i_const_select_val Src Fail Size List\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [29,84,104,105,115,32,116,114,97,110,115,102,111,114,109,97,
                  116,105,111,110,32,114,101,110,97,109,101,115,32,97]}],
               0,false},
              {text,[14,42,115,101,108,101,99,116,95,118,97,108,47,51,42]},
              {sep,
               [{text,"-instruction with a constant source operand to"}],
               0,false},
              {text,
               [22,42,105,95,99,111,110,115,116,95,115,101,108,101,99,116,95,
                118,97,108,47,51,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false},
     {sep,
      [{text,
        "Ñ<a name=\"Syntax-of-tab-files_Defining-transformation-rules_Constructing-new-instructions-on-the-right-side\">Syntax-of-tab-files_Defining-transformation-rules_Constructing-new-instructions-on-the-right-side</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,"2## Constructing new instructions on the right side"},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "qThe most common operand on the right side is a variable that was bound while matching the left side. For example:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [30,10,116,114,105,109,32,78,32,82,101,109,97,105,110,105,110,
                103,32,61,62,32,105,95,116,114,105,109,32,78,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [127,65,110,32,111,112,101,114,97,110,100,32,99,97,110,32,97,
                  108,115,111,32,98,101,32,97,32,116,121,112,101,32,108,101,
                  116,116,101,114,32,116,111,32,99,111,110,115,116,114,117,99,
                  116,32,97,110,32,111,112,101,114,97,110,100,32,111,102,32,
                  116,104,97,116,32,116,121,112,101,46,32,69,97,99,104,32,116,
                  121,112,101,32,104,97,115,32,97,32,100,101,102,97,117,108,
                  116,32,118,97,108,117,101,46,32,70,111,114,32,101,120,97,
                  109,112,108,101,44,32,116,104,101,32,116,121,112,101]}],
               0,false},
              {text,[3,42,120,42]},
              {sep,
               [{text,
                 "Ghas the default value 1023, which is the highest X register. That makes"}],
               0,false},
              {text,[3,42,120,42]},
              {sep,
               [{text,
                 "Pon the right side a convenient shortcut for a temporary X register. For example:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "?\nis_number Fail Literal=q => move Literal x | is_number Fail x\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [25,73,102,32,116,104,101,32,115,101,99,111,110,100,32,111,
                  112,101,114,97,110,100,32,102,111,114]}],
               0,false},
              {text,"\r*is_number/2*"},
              {sep,
               [{text,
                 "7is a literal, it will be moved to X register 1023. Then"}],
               0,false},
              {text,"\r*is_number/2*"},
              {sep,
               [{text,
                 "Bwill test whether the value stored in X register 1023 is a number."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "yThis kind of transformation is useful when it is rare that an operand can be anything else but a register. In the case of"}],
               0,false},
              {text,"\r*is_number/2*"},
              {sep,
               [{text,
                 "_, the second operand is always a register unless the compiler optimizations have been disabled."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "HIf the default value is not suitable, the type letter can be followed by"}],
               0,false},
              {text,[3,42,61,42]},
              {sep,
               [{text,
                 [139,97,110,100,32,97,32,118,97,108,117,101,46,32,77,111,115,
                  116,32,116,121,112,101,115,32,116,97,107,101,32,97,110,32,
                  105,110,116,101,103,101,114,32,118,97,108,117,101,46,32,84,
                  104,101,32,118,97,108,117,101,32,102,111,114,32,97,110,32,
                  97,116,111,109,32,105,115,32,119,114,105,116,116,101,110,32,
                  116,104,101,32,115,97,109,101,32,119,97,121,32,97,115,32,
                  105,110,32,116,104,101,32,67,32,115,111,117,114,99,101,32,
                  99,111,100,101,46,32,70,111,114,32,101,120,97,109,112,108,
                  101,44,32,116,104,101,32,97,116,111,109]}],
               0,false},
              {text,[7,42,102,97,108,115,101,42]},
              {sep,[{text,"\ris written as"}],0,false},
              {text,"\n*am_false*"},
              {sep,
               [{text,
                 [28,46,32,84,104,101,32,97,116,111,109,32,109,117,115,116,32,
                  98,101,32,108,105,115,116,101,100,32,105,110]}],
               0,false},
              {text,"\f*atom.names*"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "7Here is an example showing how values can be specified:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "z\nbs_put_utf32 Fail=j Flags=u Src=s => \\\n    i_bs_validate_unicode Fail Src | \\\n    bs_put_integer Fail i=32 u=1 Flags Src\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {sep,
      [{text,
        "¯<a name=\"Syntax-of-tab-files_Defining-transformation-rules_Type-letters-on-the-right-side\">Syntax-of-tab-files_Defining-transformation-rules_Type-letters-on-the-right-side</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"!## Type letters on the right side"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [141,72,101,114,101,32,102,111,108,108,111,119,115,32,97,108,
                108,32,116,121,112,101,115,32,116,104,97,116,32,97,114,101,32,
                97,108,108,111,119,101,100,32,116,111,32,98,101,32,117,115,
                101,100,32,105,110,32,111,112,101,114,97,110,100,115,32,102,
                111,114,32,105,110,115,116,114,117,99,116,105,111,110,115,32,
                98,101,105,110,103,32,99,111,110,115,116,114,117,99,116,101,
                100,32,111,110,32,116,104,101,32,114,105,103,104,116,32,115,
                105,100,101,32,111,102,32,97,32,116,114,97,110,115,102,111,
                114,109,97,116,105,111,110,32,114,117,108,101,46]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,[3,42,117,42]},
                 {sep,
                  [{text,
                    "8- Construct an untagged integer. The default value is 0."}],
                  0,false}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,[3,42,120,42]},
                 {sep,
                  [{text,
                    "3- X register. The default value is 1023. That makes"}],
                  0,false},
                 {text,[3,42,120,42]},
                 {sep,
                  [{text,",convenient to use as a temporary X register."}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,[3,42,121,42]},
                {sep,
                 [{text,"%- Y register. The default value is 0."}],
                 0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,[3,42,108,42]},
               {sep,
                [{text,
                  "8- Foating point register number. The default value is 0."}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,[3,42,105,42]},
              {sep,
               [{text,"1- Tagged literal integer. The default value is 0."}],
               0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[3,42,97,42]},
             {sep,
              [{text,"4- Tagged atom. The default value is the empty atom ("}],
              0,false},
             {text,"\n*am_Empty*"},
             {sep,[{text,[2,41,46]}],0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[3,42,110,42]},
            {sep,[{text,[7,45,32,78,73,76,32,40]}],0,false},
            {text,[4,42,91,93,42]},
            {sep,
             [{text,
               [18,44,32,116,104,101,32,101,109,112,116,121,32,108,105,115,
                116,41,46]}],
             0,false}],
           0,false}],
         0,false}}],
      0,false},
     {sep,
      [{text,
        "±<a name=\"Syntax-of-tab-files_Defining-transformation-rules_Function-call-on-the-right-side\">Syntax-of-tab-files_Defining-transformation-rules_Function-call-on-the-right-side</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"\"## Function call on the right side"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "|Transformations that are not possible to describe with the rule language as described here can be written as a C function in"}],
               0,false},
              {text,"\r*beam_load.c*"},
              {sep,
               [{text,
                 "çand called from the right side of a transformation. The left side of the transformation will perform the match and bind operands to variables. The variables can then be passed to a generator function on the right side. For example:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "i\nbif2 Fail=j u$bif:erlang:element/2 Index=s Tuple=xy Dst=d => \\\n    gen_element(Jump, Index, Tuple, Dst)\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,"2This transformation rule matches a call to the BIF"}],
               0,false},
              {text,"\v*element/2*"},
              {sep,
               [{text,"0. The operands will be captured and the function"}],
               0,false},
              {text,
               [15,42,103,101,110,95,101,108,101,109,101,110,116,40,41,42]},
              {sep,
               [{text,
                 [15,119,105,108,108,32,98,101,32,99,97,108,108,101,100,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [15,42,103,101,110,95,101,108,101,109,101,110,116,40,41,42]},
              {sep,
               [{text,"1will produce one of two instructions depending on"}],
               0,false},
              {text,[7,42,73,110,100,101,120,42]},
              {sep,[{text,[4,46,32,73,102]}],0,false},
              {text,[7,42,73,110,100,101,120,42]},
              {sep,
               [{text,
                 "Ois an integer in the range from 1 up to the maximum tuple size, the instruction"}],
               0,false},
              {text,
               [18,42,105,95,102,97,115,116,95,101,108,101,109,101,110,116,47,
                50,42]},
              {sep,
               [{text,"+will be produced, otherwise the instruction"}],
               0,false},
              {text,"\r*i_element/4*"},
              {sep,
               [{text,
                 ">will be produced. The corresponding specific instructions are:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,".\ni_fast_element xy j? I d\ni_element xy j? s d\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,
               [18,42,105,95,102,97,115,116,95,101,108,101,109,101,110,116,47,
                50,42]},
              {sep,
               [{text,
                 [157,105,110,115,116,114,117,99,116,105,111,110,32,105,115,
                  32,102,97,115,116,101,114,32,98,101,99,97,117,115,101,32,
                  116,104,101,32,116,117,112,108,101,32,105,115,32,97,108,114,
                  101,97,100,121,32,97,110,32,117,110,116,97,103,103,101,100,
                  32,105,110,116,101,103,101,114,46,32,73,116,32,97,108,115,
                  111,32,107,110,111,119,115,32,116,104,97,116,32,116,104,101,
                  32,105,110,100,101,120,32,105,115,32,97,116,32,108,101,97,
                  115,116,32,49,44,32,115,111,32,105,116,32,100,111,101,115,
                  32,110,111,116,32,104,97,118,101,32,116,111,32,116,101,115,
                  116,32,102,111,114,32,116,104,97,116,46,32,84,104,101]}],
               0,false},
              {text,"\r*i_element/4*"},
              {sep,
               [{text,
                 "linstruction will have to fetch the index from a register, test that it is an integer, and untag the integer."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [150,73,116,32,105,115,32,111,117,116,115,105,100,101,32,116,
                  104,101,32,115,99,111,112,101,32,111,102,32,116,104,105,115,
                  32,100,111,99,117,109,101,110,116,32,116,111,32,100,101,115,
                  99,114,105,98,101,32,105,110,32,100,101,116,97,105,108,32,
                  104,111,119,32,103,101,110,101,114,97,116,111,114,32,102,
                  117,110,99,116,105,111,110,115,32,97,114,101,32,119,114,105,
                  116,116,101,110,44,32,98,117,116,32,102,111,114,32,116,104,
                  101,32,99,117,114,105,111,117,115,44,32,104,101,114,101,32,
                  105,115,32,116,104,101,32,105,109,112,108,101,109,101,110,
                  116,97,116,105,111,110,32,111,102]}],
               0,false},
              {text,
               [15,42,103,101,110,95,101,108,101,109,101,110,116,40,41,42]},
              {sep,[{text,[1,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [693,10,115,116,97,116,105,99,32,71,101,110,79,112,42,10,103,
                101,110,95,101,108,101,109,101,110,116,40,76,111,97,100,101,
                114,83,116,97,116,101,42,32,115,116,112,44,32,71,101,110,79,
                112,65,114,103,32,70,97,105,108,44,10,32,32,32,71,101,110,79,
                112,65,114,103,32,73,110,100,101,120,44,32,71,101,110,79,112,
                65,114,103,32,84,117,112,108,101,44,32,71,101,110,79,112,65,
                114,103,32,68,115,116,41,10,123,10,32,32,32,32,71,101,110,79,
                112,42,32,111,112,59,10,10,32,32,32,32,78,69,87,95,71,69,78,
                79,80,40,115,116,112,44,32,111,112,41,59,10,32,32,32,32,111,
                112,45,62,97,114,105,116,121,32,61,32,52,59,10,32,32,32,32,
                111,112,45,62,110,101,120,116,32,61,32,78,85,76,76,59,10,10,
                32,32,32,32,105,102,32,40,73,110,100,101,120,46,116,121,112,
                101,32,61,61,32,84,65,71,95,105,32,38,38,32,73,110,100,101,
                120,46,118,97,108,32,62,32,48,32,38,38,10,32,32,32,32,32,32,
                32,73,110,100,101,120,46,118,97,108,32,60,61,32,69,82,84,83,
                95,77,65,88,95,84,85,80,76,69,95,83,73,90,69,32,38,38,10,32,
                32,32,32,32,32,32,40,84,117,112,108,101,46,116,121,112,101,32,
                61,61,32,84,65,71,95,120,32,124,124,32,84,117,112,108,101,46,
                116,121,112,101,32,61,61,32,84,65,71,95,121,41,41,32,123,10,
                32,32,32,32,32,32,32,32,111,112,45,62,111,112,32,61,32,103,
                101,110,111,112,95,105,95,102,97,115,116,95,101,108,101,109,
                101,110,116,95,52,59,10,32,32,32,32,32,32,32,32,111,112,45,62,
                97,91,48,93,32,61,32,84,117,112,108,101,59,10,32,32,32,32,32,
                32,32,32,111,112,45,62,97,91,49,93,32,61,32,70,97,105,108,59,
                10,32,32,32,32,32,32,32,32,111,112,45,62,97,91,50,93,46,116,
                121,112,101,32,61,32,84,65,71,95,117,59,10,32,32,32,32,32,32,
                32,32,111,112,45,62,97,91,50,93,46,118,97,108,32,61,32,73,110,
                100,101,120,46,118,97,108,59,10,32,32,32,32,32,32,32,32,111,
                112,45,62,97,91,51,93,32,61,32,68,115,116,59,10,32,32,32,32,
                125,32,101,108,115,101,32,123,10,32,32,32,32,32,32,32,32,111,
                112,45,62,111,112,32,61,32,103,101,110,111,112,95,105,95,101,
                108,101,109,101,110,116,95,52,59,10,32,32,32,32,32,32,32,32,
                111,112,45,62,97,91,48,93,32,61,32,84,117,112,108,101,59,10,
                32,32,32,32,32,32,32,32,111,112,45,62,97,91,49,93,32,61,32,70,
                97,105,108,59,10,32,32,32,32,32,32,32,32,111,112,45,62,97,91,
                50,93,32,61,32,73,110,100,101,120,59,10,32,32,32,32,32,32,32,
                32,111,112,45,62,97,91,51,93,32,61,32,68,115,116,59,10,32,32,
                32,32,125,10,10,32,32,32,32,114,101,116,117,114,110,32,111,
                112,59,10,125,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false}],
    0,false},
   {sep,
    [{text,
      "m<a name=\"Syntax-of-tab-files_Defining-the-implementation\">Syntax-of-tab-files_Defining-the-implementation</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [30,35,35,32,68,101,102,105,110,105,110,103,32,116,104,101,32,105,
          109,112,108,101,109,101,110,116,97,116,105,111,110]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "=The actual implementation of instructions are also defined in"}],
             0,false},
            {text,[6,42,46,116,97,98,42]},
            {sep,
             [{text,
               [18,102,105,108,101,115,32,112,114,111,99,101,115,115,101,100,
                32,98,121]}],
             0,false},
            {sep,[{text,"\fbeam_makeops"}],0,false},
            {sep,
             [{text,
               "|. For practical reasons, instruction definitions are stored in several files, at the time of writing in the following files:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [140,10,98,105,102,95,105,110,115,116,114,115,46,116,97,98,10,97,
              114,105,116,104,95,105,110,115,116,114,115,46,116,97,98,10,98,
              115,95,105,110,115,116,114,115,46,116,97,98,10,102,108,111,97,
              116,95,105,110,115,116,114,115,46,116,97,98,10,105,110,115,116,
              114,115,46,116,97,98,10,109,97,112,95,105,110,115,116,114,115,
              46,116,97,98,10,109,115,103,95,105,110,115,116,114,115,46,116,
              97,98,10,115,101,108,101,99,116,95,105,110,115,116,114,115,46,
              116,97,98,10,116,114,97,99,101,95,105,110,115,116,114,115,46,
              116,97,98,10]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             ":There is also a file that only contains macro definitions:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,{text,[3,96,96,96]},{sep,[{text,"\f\nmacros.tab\n"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "KThe syntax of each file is similar to C code. In fact, most of the contents"}],
             0,false},
            {text,[6,42,42,105,115,42,42]},
            {sep,
             [{text,",C code, interspersed with macro invocations."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "QTo allow Emacs to auto-indent the code, each file starts with the following line:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,[14,10,47,47,32,45,42,45,32,99,32,45,42,45,10]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "UTo avoid messing up the indentation, all comments are written as C++ style comments ("}],
             0,false},
            {text,[4,42,47,47,42]},
            {sep,[{text,"\f) instead of"}],0,false},
            {text,[3,42,35,42]},
            {sep,
             [{text,
               "<. Note that a comment must start at the beginning of a line."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "lThe meat of an instruction definition file are macro definitions. We have seen this macro definition before:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,[{text,"%\nmove(Src, Dst) {\n    $Dst = $Src;\n}\n"}],0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [260,65,32,109,97,99,114,111,32,100,101,102,105,110,105,116,105,
              111,110,115,32,109,117,115,116,32,115,116,97,114,116,32,97,116,
              32,116,104,101,32,98,101,103,105,110,110,105,110,103,32,111,102,
              32,116,104,101,32,108,105,110,101,32,40,110,111,32,115,112,97,
              99,101,115,32,97,108,108,111,119,101,100,41,44,32,116,104,101,
              32,111,112,101,110,105,110,103,32,99,117,114,108,121,32,98,114,
              97,99,107,101,116,32,109,117,115,116,32,98,101,32,111,110,32,
              116,104,101,32,115,97,109,101,32,108,105,110,101,44,32,97,110,
              100,32,116,104,101,32,102,105,110,105,115,104,105,110,103,32,99,
              117,114,108,121,32,98,114,97,99,107,101,116,32,109,117,115,116,
              32,98,101,32,97,116,32,116,104,101,32,98,101,103,105,110,110,
              105,110,103,32,111,102,32,97,32,108,105,110,101,46,32,73,116,32,
              105,115,32,114,101,99,111,109,109,101,110,100,101,100,32,116,
              104,97,116,32,116,104,101,32,109,97,99,114,111,32,98,111,100,
              121,32,105,115,32,112,114,111,112,101,114,108,121,32,105,110,
              100,101,110,116,101,100,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [156,65,115,32,97,32,99,111,110,118,101,110,116,105,111,110,44,
                32,116,104,101,32,109,97,99,114,111,32,97,114,103,117,109,101,
                110,116,115,32,105,110,32,116,104,101,32,104,101,97,100,32,97,
                108,108,32,115,116,97,114,116,32,119,105,116,104,32,97,110,32,
                117,112,112,101,114,99,97,115,101,32,108,101,116,116,101,114,
                46,32,73,110,32,116,104,101,32,98,111,100,121,44,32,116,104,
                101,32,109,97,99,114,111,32,97,114,103,117,109,101,110,116,
                115,32,99,97,110,32,98,101,32,101,120,112,97,110,100,101,100,
                32,98,121,32,112,114,101,99,101,100,105,110,103,32,116,104,
                101,109,32,119,105,116,104]}],
             0,false},
            {text,[3,42,36,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [138,65,32,109,97,99,114,111,32,100,101,102,105,110,105,116,105,
              111,110,32,119,104,111,115,101,32,110,97,109,101,32,97,110,100,
              32,97,114,105,116,121,32,109,97,116,99,104,101,115,32,97,32,102,
              97,109,105,108,121,32,111,102,32,115,112,101,99,105,102,105,99,
              32,105,110,115,116,114,117,99,116,105,111,110,115,32,105,115,32,
              97,115,115,117,109,101,100,32,116,111,32,98,101,32,116,104,101,
              32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,
              111,102,32,116,104,97,116,32,105,110,115,116,114,117,99,116,105,
              111,110,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "CA macro can also be invoked from within another macro. For example,"}],
             0,false},
            {text,
             [26,42,109,111,118,101,95,100,101,97,108,108,111,99,97,116,101,
              95,114,101,116,117,114,110,47,50,42]},
            {sep,[{text,"!avoids repeating code by invoking"}],0,false},
            {text,
             [22,42,36,100,101,97,108,108,111,99,97,116,101,95,114,101,116,
              117,114,110,40,41,42]},
            {sep,[{text,"\vas a macro:"}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "c\nmove_deallocate_return(Src, Deallocate) {\n    x(0) = $Src;\n    $deallocate_return($Deallocate);\n}\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [25,72,101,114,101,32,105,115,32,116,104,101,32,100,101,102,
                105,110,105,116,105,111,110,32,111,102]}],
             0,false},
            {text,
             [21,42,100,101,97,108,108,111,99,97,116,101,95,114,101,116,117,
              114,110,47,49,42]},
            {sep,[{text,[1,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "Ñ\ndeallocate_return(Deallocate) {\n    //| -no_next\n    int words_to_pop = $Deallocate;\n    SET_I((BeamInstr *) cp_val(*E));\n    E = ADD_BYTE_OFFSET(E, words_to_pop);\n    CHECK_TERM(x(0));\n    DispatchReturn;\n}\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [21,84,104,101,32,101,120,112,97,110,100,101,100,32,99,111,100,
                101,32,102,111,114]}],
             0,false},
            {text,
             [24,42,109,111,118,101,95,100,101,97,108,108,111,99,97,116,101,
              95,114,101,116,117,114,110,42]},
            {sep,
             [{text,
               [15,119,105,108,108,32,108,111,111,107,32,116,104,105,115,58]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "ö\nOpCase(move_deallocate_return_cQ):\n{\n  x(0) = I[1];\n  do {\n    int words_to_pop = Qb(BeamExtraData(I[0]));\n    SET_I((BeamInstr *) cp_val(*E));\n    E = ADD_BYTE_OFFSET(E, words_to_pop);\n    CHECK_TERM(x(0));\n    DispatchReturn;\n  } while (0);\n}\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [22,87,104,101,110,32,101,120,112,97,110,100,105,110,103,32,
                109,97,99,114,111,115,44]}],
             0,false},
            {sep,[{text,"\fbeam_makeops"}],0,false},
            {sep,
             [{text,
               [24,119,114,97,112,115,32,116,104,101,32,101,120,112,97,110,
                115,105,111,110,32,105,110,32,97]}],
             0,false},
            {text,[4,42,100,111,42]},
            {sep,[{text,[1,47]}],0,false},
            {text,[7,42,119,104,105,108,101,42]},
            {sep,
             [{text,
               [14,119,114,97,112,112,101,114,32,117,110,108,101,115,115]}],
             0,false},
            {sep,[{text,"\fbeam_makeops"}],0,false},
            {sep,
             [{text,
               "Ocan clearly see that no wrapper is needed. In this case, the wrapper is needed."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "`Note that arguments for macros cannot be complex expressions, because the arguments are split on"}],
             0,false},
            {text,[3,42,44,42]},
            {sep,
             [{text,"3. For example, the following would not work because"}],
             0,false},
            {sep,[{text,"\fbeam_makeops"}],0,false},
            {sep,
             [{text,".would split the expression into two arguments:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "7\n$deallocate_return(get_deallocation(y, $Deallocate));\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {sep,
      [{text,
        "£<a name=\"Syntax-of-tab-files_Defining-the-implementation_Code-generation-directives\">Syntax-of-tab-files_Defining-the-implementation_Code-generation-directives</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [29,35,35,32,67,111,100,101,32,103,101,110,101,114,97,116,105,111,
            110,32,100,105,114,101,99,116,105,118,101,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [25,87,105,116,104,105,110,32,109,97,99,114,111,32,100,101,
                  102,105,110,105,116,105,111,110,115,44]}],
               0,false},
              {text,[4,42,47,47,42]},
              {sep,
               [{text,
                 [143,99,111,109,109,101,110,116,115,32,97,114,101,32,105,110,
                  32,103,101,110,101,114,97,108,32,110,111,116,32,116,114,101,
                  97,116,101,100,32,115,112,101,99,105,97,108,108,121,46,32,
                  84,104,101,121,32,119,105,108,108,32,98,101,32,99,111,112,
                  105,101,100,32,116,111,32,116,104,101,32,102,105,108,101,32,
                  119,105,116,104,32,116,104,101,32,103,101,110,101,114,97,
                  116,101,100,32,99,111,100,101,32,97,108,111,110,103,32,119,
                  105,116,104,32,116,104,101,32,114,101,115,116,32,111,102,32,
                  99,111,100,101,32,105,110,32,116,104,101,32,98,111,100,121,
                  46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "iHowever, there is an exception. Within a macro definition, a line that starts with whitespace followed by"}],
               0,false},
              {text,[5,42,47,47,124,42]},
              {sep,
               [{text,
                 "gis treated specially. The rest of the line is assumed to contain directives to control code generation."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "9Currently, two code generation directives are recognized:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {sep,
         [{text,[1,42]},
          {text,[14,42,45,110,111,95,112,114,101,102,101,116,99,104,42]}],
         0,false},
        {sep,[{text,[1,42]},{text,"\n*-no_next*"}],0,false}},
       {sep,
        [{text,
          "Õ<a name=\"Syntax-of-tab-files_Defining-the-implementation_Code-generation-directives_The-noprefetch-directive\">Syntax-of-tab-files_Defining-the-implementation_Code-generation-directives_The-noprefetch-directive</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [29,35,35,32,84,104,101,32,45,110,111,95,112,114,101,102,101,116,
              99,104,32,100,105,114,101,99,116,105,118,101]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\vTo see what"}],0,false},
                {text,[14,42,45,110,111,95,112,114,101,102,101,116,99,104,42]},
                {sep,
                 [{text,
                   "Udoes, let's first look at the default code generation. Here is the code generated for"}],
                 0,false},
                {text,"\t*move_cx*"},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [159,10,79,112,67,97,115,101,40,109,111,118,101,95,99,120,41,
                  58,10,123,10,32,32,66,101,97,109,73,110,115,116,114,32,110,
                  101,120,116,95,112,102,32,61,32,66,101,97,109,67,111,100,
                  101,65,100,100,114,40,73,91,50,93,41,59,10,32,32,120,98,40,
                  66,101,97,109,69,120,116,114,97,68,97,116,97,40,73,91,48,93,
                  41,41,32,61,32,73,91,49,93,59,10,32,32,73,32,43,61,32,50,59,
                  10,32,32,65,83,83,69,82,84,40,86,65,76,73,68,95,73,78,83,84,
                  82,40,110,101,120,116,95,112,102,41,41,59,10,32,32,71,111,
                  116,111,80,70,40,110,101,120,116,95,112,102,41,59,10,125,
                  10]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [136,78,111,116,101,32,116,104,97,116,32,116,104,101,32,118,
                  101,114,121,32,102,105,114,115,116,32,116,104,105,110,103,
                  32,100,111,110,101,32,105,115,32,116,111,32,102,101,116,99,
                  104,32,116,104,101,32,97,100,100,114,101,115,115,32,116,111,
                  32,116,104,101,32,110,101,120,116,32,105,110,115,116,114,
                  117,99,116,105,111,110,46,32,84,104,101,32,114,101,97,115,
                  111,110,32,105,115,32,116,104,97,116,32,105,116,32,117,115,
                  117,97,108,108,121,32,105,109,112,114,111,118,101,115,32,
                  112,101,114,102,111,114,109,97,110,99,101,46]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"%Just as a demonstration, we can add a"}],
                 0,false},
                {text,[14,42,45,110,111,95,112,114,101,102,101,116,99,104,42]},
                {sep,
                 [{text,
                   [16,100,105,114,101,99,116,105,118,101,32,116,111,32,116,
                    104,101]}],
                 0,false},
                {text,"\b*move/2*"},
                {sep,[{text,"\finstruction:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 ":\nmove(Src, Dst) {\n    //| -no_prefetch\n    $Dst = $Src;\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"/We can see that the prefetch is no longer done:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "i\nOpCase(move_cx):\n{\n  xb(BeamExtraData(I[0])) = I[1];\n  I += 2;\n  ASSERT(VALID_INSTR(*I));\n  Goto(*I);\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "8When would we want to turn off the prefetch in practice?"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "OIn instructions that will not always execute the next instruction. For example:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "®\nis_atom(Fail, Src) {\n    if (is_not_atom($Src)) {\n        $FAIL($Fail);\n    }\n}\n\n// From macros.tab\nFAIL(Fail) {\n    //| -no_prefetch\n    $SET_I_REL($Fail);\n    Goto(*I);\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\v*is_atom/2*"},
                {sep,
                 [{text,
                   "jmay either execute the next instruction (if the second operand is an atom) or branch to the failure label."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,[{text,"#The generated code looks like this:"}],0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "â\nOpCase(is_atom_fx):\n{\n  if (is_not_atom(xb(I[1]))) {\n    ASSERT(VALID_INSTR(*(I + (fb(BeamExtraData(I[0]))) + 0)));\n    I += fb(BeamExtraData(I[0])) + 0;;\n    Goto(*I);;\n  }\n  I += 2;\n  ASSERT(VALID_INSTR(*I));\n  Goto(*I);\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{text,
          "Í<a name=\"Syntax-of-tab-files_Defining-the-implementation_Code-generation-directives_The-nonext-directive\">Syntax-of-tab-files_Defining-the-implementation_Code-generation-directives_The-nonext-directive</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [25,35,35,32,84,104,101,32,45,110,111,95,110,101,120,116,32,100,
              105,114,101,99,116,105,118,101]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [29,78,101,120,116,32,119,101,32,119,105,108,108,32,108,
                    111,111,107,32,97,116,32,119,104,101,110,32,116,104,101]}],
                 0,false},
                {text,"\n*-no_next*"},
                {sep,[{text,"\"directive can be used. Here is the"}],0,false},
                {text,"\b*jump/1*"},
                {sep,[{text,"\finstruction:"}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "{\njump(Fail) {\n    $JUMP($Fail);\n}\n\n// From macros.tab\nJUMP(Fail) {\n    //| -no_next\n    $SET_I_REL($Fail);\n    Goto(*I);\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,[{text,"#The generated code looks like this:"}],0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [132,10,79,112,67,97,115,101,40,106,117,109,112,95,102,41,58,
                  10,123,10,32,32,65,83,83,69,82,84,40,86,65,76,73,68,95,73,
                  78,83,84,82,40,42,40,73,32,43,32,40,102,98,40,66,101,97,109,
                  69,120,116,114,97,68,97,116,97,40,73,91,48,93,41,41,41,32,
                  43,32,48,41,41,41,59,10,32,32,73,32,43,61,32,102,98,40,66,
                  101,97,109,69,120,116,114,97,68,97,116,97,40,73,91,48,93,41,
                  41,32,43,32,48,59,59,10,32,32,71,111,116,111,40,42,73,41,59,
                  59,10,125,10]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [16,73,102,32,119,101,32,114,101,109,111,118,101,32,116,
                    104,101]}],
                 0,false},
                {text,"\n*-no_next*"},
                {sep,
                 [{text,")directive, the code would look like this:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "ë\nOpCase(jump_f):\n{\n  BeamInstr next_pf = BeamCodeAddr(I[1]);\n  ASSERT(VALID_INSTR(*(I + (fb(BeamExtraData(I[0]))) + 0)));\n  I += fb(BeamExtraData(I[0])) + 0;;\n  Goto(*I);;\n  I += 1;\n  ASSERT(VALID_INSTR(next_pf));\n  GotoPF(next_pf);\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "³In the end, the C compiler will probably optimize this code to the same native code as the first version, but the first version is certainly much easier to read for human readers."}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,
      [{text,
        "§<a name=\"Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file\">Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text," ## Macros in the macros.tab file"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\bThe file"}],0,false},
              {text,"\f*macros.tab*"},
              {sep,
               [{text,
                 "ccontains many useful macros. When implementing new instructions it is good practice to look through"}],
               0,false},
              {text,"\f*macros.tab*"},
              {sep,
               [{text,
                 "Pto see if any of existing macros can be used rather than re-inventing the wheel."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "6We will describe a few of the most useful macros here."}],
             0,false}],
           0,true},
          null},
         null}},
       {sep,
        [{text,
          "×<a name=\"Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_The-GCREGEXP-definition\">Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_The-GCREGEXP-definition</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\e## The GC_REGEXP definition"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "xThe following line defines a regular expression that will recognize a call to a function that does a garbage collection:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "8\n GC_REGEXP=erts_garbage_collect|erts_gc|GcBifFunction;\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [19,84,104,101,32,112,117,114,112,111,115,101,32,105,115,
                    32,116,104,97,116]}],
                 0,false},
                {sep,[{text,"\fbeam_makeops"}],0,false},
                {sep,
                 [{text,
                   "Hcan verify that an instruction that does a garbage collection and has an"}],
                 0,false},
                {text,[3,42,100,42]},
                {sep,
                 [{text,
                   [16,111,112,101,114,97,110,100,32,117,115,101,115,32,116,
                    104,101]}],
                 0,false},
                {text,
                 [21,42,36,82,69,70,82,69,83,72,95,71,69,78,95,68,69,83,84,40,
                  41,42]},
                {sep,[{text,[6,109,97,99,114,111,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "`If you need to define a new function that does garbage collection, you should give it the prefix"}],
                 0,false},
                {text,"\n*erts_gc_*"},
                {sep,
                 [{text,
                   "k. If that is not possible you should update the regular expression so that it will match your new function."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false},
       {sep,
        [{text,
          "¹<a name=\"Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_FAILFail\">Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_FAILFail</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\r## FAIL(Fail)"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\tBranch to"}],0,false},
                {text,[7,42,36,70,97,105,108,42]},
                {sep,
                 [{text,
                   [26,46,32,87,105,108,108,32,115,117,112,112,114,101,115,
                    115,32,112,114,101,102,101,116,99,104,32,40]}],
                 0,false},
                {text,[14,42,45,110,111,95,112,114,101,102,101,116,99,104,42]},
                {sep,
                 [{text,
                   [15,41,46,32,84,121,112,105,99,97,108,32,117,115,101,58]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Z\nis_nonempty_list(Fail, Src) {\n    if (is_not_list($Src)) {\n        $FAIL($Fail);\n    }\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{text,
          "¹<a name=\"Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_JUMPFail\">Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_JUMPFail</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\r## JUMP(Fail)"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\tBranch to"}],0,false},
                {text,[7,42,36,70,97,105,108,42]},
                {sep,
                 [{text,
                   "=. Suppresses generation of dispatch of the next instruction ("}],
                 0,false},
                {text,"\n*-no_next*"},
                {sep,
                 [{text,
                   [15,41,46,32,84,121,112,105,99,97,108,32,117,115,101,58]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,"\"\njump(Fail) {\n    $JUMP($Fail);\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{text,
          "ã<a name=\"Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_GCTESTNeedStack-NeedHeap-Live\">Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_GCTESTNeedStack-NeedHeap-Live</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,{text,"%## GC_TEST(NeedStack, NeedHeap, Live)"},null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"%*$GC_TEST(NeedStack, NeedHeap, Live)*"},
                {sep,
                 [{text,
                   "xtests that given amount of stack space and heap space is available. If not it will do a garbage collection. Typical use:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "6\ntest_heap(Nh, Live) {\n    $GC_TEST(0, $Nh, $Live);\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false},
       {sep,
        [{text,
          "Û<a name=\"Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_AHNeedStack-NeedHeap-Live\">Syntax-of-tab-files_Defining-the-implementation_Macros-in-the-macrostab-file_AHNeedStack-NeedHeap-Live</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,{text," ## AH(NeedStack, NeedHeap, Live)"},null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [31,42,65,72,40,78,101,101,100,83,116,97,99,107,44,32,78,101,
                  101,100,72,101,97,112,44,32,76,105,118,101,41,42]},
                {sep,
                 [{text,
                   "=allocates a stack frame and optionally additional heap space."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,
      [{text,
        "­<a name=\"Syntax-of-tab-files_Defining-the-implementation_Predefined-macros-and-variables\">Syntax-of-tab-files_Defining-the-implementation_Predefined-macros-and-variables</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"### Pre-defined macros and variables"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\fbeam_makeops"}],0,false},
              {sep,
               [{text,
                 "8defines several built-in macros and pre-bound variables."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {sep,
        [{text,
          "ù<a name=\"Syntax-of-tab-files_Defining-the-implementation_Predefined-macros-and-variables_The-NEXTINSTRUCTION-prebound-variable\">Syntax-of-tab-files_Defining-the-implementation_Predefined-macros-and-variables_The-NEXTINSTRUCTION-prebound-variable</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,{text,"*## The NEXT_INSTRUCTION pre-bound variable"},null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [134,84,104,101,32,78,69,88,84,95,73,78,83,84,82,85,67,84,73,
                  79,78,32,105,115,32,97,32,112,114,101,45,98,111,117,110,100,
                  32,118,97,114,105,97,98,108,101,32,116,104,97,116,32,105,
                  115,32,97,118,97,105,108,97,98,108,101,32,105,110,32,97,108,
                  108,32,105,110,115,116,114,117,99,116,105,111,110,115,46,32,
                  73,116,32,101,120,112,97,110,100,115,32,116,111,32,116,104,
                  101,32,97,100,100,114,101,115,115,32,111,102,32,116,104,101,
                  32,110,101,120,116,32,105,110,115,116,114,117,99,116,105,
                  111,110,46]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [19,72,101,114,101,32,105,115,32,97,110,32,101,120,97,109,
                  112,108,101,58]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "X\ni_call(CallDest) {\n    SET_CP(c_p, $NEXT_INSTRUCTION);\n    $DISPATCH_REL($CallDest);\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   ">When calling a function, the return address is first stored in"}],
                 0,false},
                {text,"\t*c_p->cp*"},
                {sep,[{text,"\n(using the"}],0,false},
                {text,"\n*SET_CP()*"},
                {sep,
                 [{text,
                   [16,109,97,99,114,111,32,100,101,102,105,110,101,100,32,
                    105,110]}],
                 0,false},
                {text,"\f*beam_emu.c*"},
                {sep,
                 [{text,
                   "M), and then control is transferred to the callee. Here is the generated code:"}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "Ï\nOpCase(i_call_f):\n{\n  SET_CP(c_p, I+1);\n  ASSERT(VALID_INSTR(*(I + (fb(BeamExtraData(I[0]))) + 0)));\n  I += fb(BeamExtraData(I[0])) + 0;;\n  DTRACE_LOCAL_CALL(c_p, erts_code_to_codemfa(I));\n  Dispatch();;\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [20,87,101,32,99,97,110,32,115,101,101,32,116,104,97,116,
                    32,116,104,97,116]}],
                 0,false},
                {text,
                 [19,42,36,78,69,88,84,95,73,78,83,84,82,85,67,84,73,79,78,
                  42]},
                {sep,
                 [{text,
                   [20,104,97,115,32,98,101,101,110,32,101,120,112,97,110,100,
                    101,100,32,116,111]}],
                 0,false},
                {text,[5,42,73,43,49,42]},
                {sep,
                 [{text,"(. That makes sense since the size of the"}],
                 0,false},
                {text,"\f*i_call_f/1*"},
                {sep,
                 [{text,
                   [24,105,110,115,116,114,117,99,116,105,111,110,32,105,115,
                    32,111,110,101,32,119,111,114,100,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false},
       {sep,
        [{text,
          "ó<a name=\"Syntax-of-tab-files_Defining-the-implementation_Predefined-macros-and-variables_The-IPADJUSTMENT-prebound-variable\">Syntax-of-tab-files_Defining-the-implementation_Predefined-macros-and-variables_The-IPADJUSTMENT-prebound-variable</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,{text,"'## The IP_ADJUSTMENT pre-bound variable"},null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,[16,42,36,73,80,95,65,68,74,85,83,84,77,69,78,84,42]},
                {sep,
                 [{text,
                   "jis usually 0. In a few combined instructions (described below) it can be non-zero. It is used like this in"}],
                 0,false},
                {text,"\f*macros.tab*"},
                {sep,[{text,[1,58]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "v\nSET_I_REL(Offset) {\n    ASSERT(VALID_INSTR(*(I + ($Offset) + $IP_ADJUSTMENT)));\n    I += $Offset + $IP_ADJUSTMENT;\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"\vAvoid using"}],0,false},
                {text,[15,42,73,80,95,65,68,74,85,83,84,77,69,78,84,42]},
                {sep,[{text,"\rdirectly. Use"}],0,false},
                {text,"\r*SET_I_REL()*"},
                {sep,
                 [{text,"(or one of the macros that invoke such as"}],
                 0,false},
                {text,"\b*FAIL()*"},
                {sep,[{text,[2,111,114]}],0,false},
                {text,"\b*JUMP()*"},
                {sep,[{text,"\ndefined in"}],0,false},
                {text,"\f*macros.tab*"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,
      [{text,
        "£<a name=\"Syntax-of-tab-files_Defining-the-implementation_Predefined-macro-functions\">Syntax-of-tab-files_Defining-the-implementation_Predefined-macro-functions</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [30,35,35,32,80,114,101,45,100,101,102,105,110,101,100,32,109,97,
            99,114,111,32,102,117,110,99,116,105,111,110,115]},
          null},
         null}},
       {sep,
        [{text,
          "½<a name=\"Syntax-of-tab-files_Defining-the-implementation_Predefined-macro-functions_The-IF-macro\">Syntax-of-tab-files_Defining-the-implementation_Predefined-macro-functions_The-IF-macro</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [17,35,35,32,84,104,101,32,73,70,40,41,32,109,97,99,114,111]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [28,42,36,73,70,40,69,120,112,114,44,32,73,102,84,114,117,
                  101,44,32,73,102,70,97,108,115,101,41,42]},
                {sep,[{text,"\tevaluates"}],0,false},
                {text,[6,42,69,120,112,114,42]},
                {sep,
                 [{text,
                   "l, which must be a valid Perl expression (which for simple numeric expressions have the same syntax as C). If"}],
                 0,false},
                {text,[6,42,69,120,112,114,42]},
                {sep,
                 [{text,
                   [26,101,118,97,108,117,97,116,101,115,32,116,111,32,48,44,
                    32,116,104,101,32,101,110,116,105,114,101]}],
                 0,false},
                {text,[6,42,73,70,40,41,42]},
                {sep,[{text," expression will be replaced with"}],0,false},
                {text,"\t*IfFalse*"},
                {sep,[{text,"$, otherwise it will be replaced with"}],0,false},
                {text,"\b*IfTrue*"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [22,83,101,101,32,116,104,101,32,100,101,115,99,114,105,
                    112,116,105,111,110,32,111,102]}],
                 0,false},
                {text,
                 [20,42,79,80,69,82,65,78,68,95,80,79,83,73,84,73,79,78,40,41,
                  42]},
                {sep,
                 [{text,
                   [15,102,111,114,32,97,110,32,101,120,97,109,112,108,101,
                    46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false},
       {sep,
        [{text,
          "×<a name=\"Syntax-of-tab-files_Defining-the-implementation_Predefined-macro-functions_The-OPERANDPOSITION-macro\">Syntax-of-tab-files_Defining-the-implementation_Predefined-macro-functions_The-OPERANDPOSITION-macro</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [31,35,35,32,84,104,101,32,79,80,69,82,65,78,68,95,80,79,83,73,
              84,73,79,78,40,41,32,109,97,99,114,111]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [25,42,36,79,80,69,82,65,78,68,95,80,79,83,73,84,73,79,78,40,
                  69,120,112,114,41,42]},
                {sep,
                 [{text,
                   [24,114,101,116,117,114,110,115,32,116,104,101,32,112,111,
                    115,105,116,105,111,110,32,102,111,114]}],
                 0,false},
                {text,[6,42,69,120,112,114,42]},
                {sep,[{text,[4,44,32,105,102]}],0,false},
                {text,[6,42,69,120,112,114,42]},
                {sep,
                 [{text,
                   "Eis an operand that is not packed. The first operand is at position 1."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [20,82,101,116,117,114,110,115,32,48,32,111,116,104,101,114,
                  119,105,115,101,46]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 ":This macro could be used like this in order to share code:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [268,10,70,65,73,76,40,70,97,105,108,41,32,123,10,32,32,32,
                  32,47,47,124,32,45,110,111,95,112,114,101,102,101,116,99,
                  104,10,32,32,32,32,36,73,70,40,36,79,80,69,82,65,78,68,95,
                  80,79,83,73,84,73,79,78,40,36,70,97,105,108,41,32,61,61,32,
                  49,32,38,38,32,36,73,80,95,65,68,74,85,83,84,77,69,78,84,32,
                  61,61,32,48,44,10,32,32,32,32,32,32,32,32,103,111,116,111,
                  32,99,111,109,109,111,110,95,106,117,109,112,44,10,32,32,32,
                  32,32,32,32,32,36,68,79,95,74,85,77,80,40,36,70,97,105,108,
                  41,41,59,10,125,10,10,68,79,95,74,85,77,80,40,70,97,105,108,
                  41,32,123,10,32,32,32,32,36,83,69,84,95,73,95,82,69,76,40,
                  36,70,97,105,108,41,59,10,32,32,32,32,71,111,116,111,40,42,
                  73,41,41,59,10,125,10,10,47,47,32,73,110,32,98,101,97,109,
                  95,101,109,117,46,99,58,10,99,111,109,109,111,110,95,106,
                  117,109,112,58,10,32,32,32,73,32,43,61,32,73,91,49,93,59,10,
                  32,32,32,71,111,116,111,40,42,73,41,41,59,10]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}}],
        0,false}],
      0,false},
     {sep,
      [{text,
        [159,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,
         45,116,97,98,45,102,105,108,101,115,95,68,101,102,105,110,105,110,
         103,45,116,104,101,45,105,109,112,108,101,109,101,110,116,97,116,105,
         111,110,95,84,104,101,45,82,69,70,82,69,83,72,71,69,78,68,69,83,84,
         45,109,97,99,114,111,34,62,83,121,110,116,97,120,45,111,102,45,116,
         97,98,45,102,105,108,101,115,95,68,101,102,105,110,105,110,103,45,
         116,104,101,45,105,109,112,108,101,109,101,110,116,97,116,105,111,
         110,95,84,104,101,45,82,69,70,82,69,83,72,71,69,78,68,69,83,84,45,
         109,97,99,114,111,60,47,97,62]},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text," ## The $REFRESH_GEN_DEST() macro"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"!When a specific instruction has a"}],0,false},
              {text,[3,42,100,42]},
              {sep,
               [{text,
                 "~operand, early during execution of the instruction, a pointer will be initialized to point to the X or Y register in question."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "\\If there is a garbage collection before the result is stored, the stack will move and if the"}],
               0,false},
              {text,[3,42,100,42]},
              {sep,
               [{text,
                 "loperand refered to a Y register, the pointer will no longer be valid. (Y registers are stored on the stack.)"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [23,73,110,32,116,104,111,115,101,32,99,105,114,99,117,109,
                  115,116,97,110,99,101,115,44]}],
               0,false},
              {text,
               [21,42,36,82,69,70,82,69,83,72,95,71,69,78,95,68,69,83,84,40,
                41,42]},
              {sep,
               [{text,",must be invoked to set up the pointer again."}],
               0,false},
              {sep,[{text,"\fbeam_makeops"}],0,false},
              {sep,
               [{text,
                 "Owill notice if there is a call to a function that does a garbage collection and"}],
               0,false},
              {text,
               [21,42,36,82,69,70,82,69,83,72,95,71,69,78,95,68,69,83,84,40,
                41,42]},
              {sep,
               [{text,
                 [14,105,115,32,110,111,116,32,99,97,108,108,101,100,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [31,72,101,114,101,32,105,115,32,97,32,99,111,109,112,108,
                  101,116,101,32,101,120,97,109,112,108,101,46,32,84,104,
                  101]}],
               0,false},
              {text,"\t*new_map*"},
              {sep,[{text,"!instruction is defined like this:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,[15,10,110,101,119,95,109,97,112,32,100,32,116,32,73,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [28,73,116,32,105,115,32,105,109,112,108,101,109,101,110,116,
                101,100,32,108,105,107,101,32,116,104,105,115,58]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Ý\nnew_map(Dst, Live, N) {\n    Eterm res;\n\n    HEAVY_SWAPOUT;\n    res = erts_gc_new_map(c_p, reg, $Live, $N, $NEXT_INSTRUCTION);\n    HEAVY_SWAPIN;\n    $REFRESH_GEN_DEST();\n    $Dst = res;\n    $NEXT($NEXT_INSTRUCTION+$N);\n}\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [24,73,102,32,119,101,32,104,97,118,101,32,102,111,114,103,
                  111,116,116,101,110,32,116,104,101]}],
               0,false},
              {text,
               [21,42,36,82,69,70,82,69,83,72,95,71,69,78,95,68,69,83,84,40,
                41,42]},
              {sep,
               [{text,")there would be a message similar to this:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [136,10,112,111,105,110,116,101,114,32,116,111,32,100,101,115,
                116,105,110,97,116,105,111,110,32,114,101,103,105,115,116,101,
                114,32,105,115,32,105,110,118,97,108,105,100,32,97,102,116,
                101,114,32,71,67,32,45,45,32,117,115,101,32,36,82,69,70,82,69,
                83,72,95,71,69,78,95,68,69,83,84,40,41,10,46,46,46,32,102,114,
                111,109,32,116,104,101,32,98,111,100,121,32,111,102,32,110,
                101,119,95,109,97,112,32,97,116,32,98,101,97,109,47,109,97,
                112,95,105,110,115,116,114,115,46,116,97,98,40,51,48,41,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false},
     {sep,
      [{text,
        [153,60,97,32,110,97,109,101,61,34,83,121,110,116,97,120,45,111,102,
         45,116,97,98,45,102,105,108,101,115,95,68,101,102,105,110,105,110,
         103,45,116,104,101,45,105,109,112,108,101,109,101,110,116,97,116,105,
         111,110,95,67,111,109,98,105,110,101,100,45,105,110,115,116,114,117,
         99,116,105,111,110,115,34,62,83,121,110,116,97,120,45,111,102,45,116,
         97,98,45,102,105,108,101,115,95,68,101,102,105,110,105,110,103,45,
         116,104,101,45,105,109,112,108,101,109,101,110,116,97,116,105,111,
         110,95,67,111,109,98,105,110,101,100,45,105,110,115,116,114,117,99,
         116,105,111,110,115,60,47,97,62]},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [24,35,35,32,67,111,109,98,105,110,101,100,32,105,110,115,116,114,
            117,99,116,105,111,110,115]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[7,80,114,111,98,108,101,109]}],0,false},
              {sep,
               [{text,
                 "S: For frequently executed instructions we want to use \"fast\" operands types such as"}],
               0,false},
              {text,[3,42,120,42]},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,[3,42,121,42]},
              {sep,
               [{text,
                 [15,44,32,97,115,32,111,112,112,111,115,101,100,32,116,111]}],
               0,false},
              {text,[3,42,115,42]},
              {sep,[{text,[2,111,114]}],0,false},
              {text,[3,42,83,42]},
              {sep,
               [{text,
                 [146,46,32,84,111,32,97,118,111,105,100,32,97,110,32,101,120,
                  112,108,111,115,105,111,110,32,105,110,32,99,111,100,101,32,
                  115,105,122,101,44,32,119,101,32,119,97,110,116,32,116,111,
                  32,115,104,97,114,101,32,109,111,115,116,32,111,102,32,116,
                  104,101,32,105,109,112,108,101,109,101,110,116,97,116,105,
                  111,110,32,98,101,116,119,101,101,110,32,116,104,101,32,105,
                  110,115,116,114,117,99,116,105,111,110,115,46,32,72,101,114,
                  101,32,97,114,101,32,116,104,101,32,115,112,101,99,105,102,
                  105,99,32,105,110,115,116,114,117,99,116,105,111,110,115,32,
                  102,111,114]}],
               0,false},
              {text,
               [15,42,105,95,105,110,99,114,101,109,101,110,116,47,53,42]},
              {sep,[{text,[1,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "=\ni_increment r W t d\ni_increment x W t d\ni_increment y W t d\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,"\r*i_increment*"},
              {sep,[{text,"%instruction is implemented like this:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [811,10,105,95,105,110,99,114,101,109,101,110,116,40,83,111,
                117,114,99,101,44,32,73,110,99,114,101,109,101,110,116,86,97,
                108,44,32,76,105,118,101,44,32,68,115,116,41,32,123,10,32,32,
                32,32,69,116,101,114,109,32,105,110,99,114,101,109,101,110,
                116,95,114,101,103,95,115,111,117,114,99,101,32,61,32,36,83,
                111,117,114,99,101,59,10,32,32,32,32,69,116,101,114,109,32,
                105,110,99,114,101,109,101,110,116,95,118,97,108,32,61,32,36,
                73,110,99,114,101,109,101,110,116,86,97,108,59,10,32,32,32,32,
                85,105,110,116,32,108,105,118,101,59,10,32,32,32,32,69,116,
                101,114,109,32,114,101,115,117,108,116,59,10,10,32,32,32,32,
                105,102,32,40,69,82,84,83,95,76,73,75,69,76,89,40,105,115,95,
                115,109,97,108,108,40,105,110,99,114,101,109,101,110,116,95,
                114,101,103,95,118,97,108,41,41,41,32,123,10,32,32,32,32,32,
                32,32,32,83,105,110,116,32,105,32,61,32,115,105,103,110,101,
                100,95,118,97,108,40,105,110,99,114,101,109,101,110,116,95,
                114,101,103,95,118,97,108,41,32,43,32,105,110,99,114,101,109,
                101,110,116,95,118,97,108,59,10,32,32,32,32,32,32,32,32,105,
                102,32,40,69,82,84,83,95,76,73,75,69,76,89,40,73,83,95,83,83,
                77,65,76,76,40,105,41,41,41,32,123,10,32,32,32,32,32,32,32,32,
                32,32,32,32,36,68,115,116,32,61,32,109,97,107,101,95,115,109,
                97,108,108,40,105,41,59,10,32,32,32,32,32,32,32,32,32,32,32,
                32,36,78,69,88,84,48,40,41,59,10,32,32,32,32,32,32,32,32,125,
                10,32,32,32,32,125,10,32,32,32,32,108,105,118,101,32,61,32,36,
                76,105,118,101,59,10,32,32,32,32,72,69,65,86,89,95,83,87,65,
                80,79,85,84,59,10,32,32,32,32,114,101,103,91,108,105,118,101,
                93,32,61,32,105,110,99,114,101,109,101,110,116,95,114,101,103,
                95,118,97,108,59,10,32,32,32,32,114,101,103,91,108,105,118,
                101,43,49,93,32,61,32,109,97,107,101,95,115,109,97,108,108,40,
                105,110,99,114,101,109,101,110,116,95,118,97,108,41,59,10,32,
                32,32,32,114,101,115,117,108,116,32,61,32,101,114,116,115,95,
                103,99,95,109,105,120,101,100,95,112,108,117,115,40,99,95,112,
                44,32,114,101,103,44,32,108,105,118,101,41,59,10,32,32,32,32,
                72,69,65,86,89,95,83,87,65,80,73,78,59,10,32,32,32,32,69,82,
                84,83,95,72,79,76,69,95,67,72,69,67,75,40,99,95,112,41,59,10,
                32,32,32,32,105,102,32,40,69,82,84,83,95,76,73,75,69,76,89,40,
                105,115,95,118,97,108,117,101,40,114,101,115,117,108,116,41,
                41,41,32,123,10,32,32,32,32,32,32,32,32,36,82,69,70,82,69,83,
                72,95,71,69,78,95,68,69,83,84,40,41,59,10,32,32,32,32,32,32,
                32,32,36,68,115,116,32,61,32,114,101,115,117,108,116,59,10,32,
                32,32,32,32,32,32,32,36,78,69,88,84,48,40,41,59,10,32,32,32,
                32,125,10,32,32,32,32,65,83,83,69,82,84,40,99,95,112,45,62,
                102,114,101,97,115,111,110,32,33,61,32,66,65,68,77,65,84,67,
                72,32,124,124,32,105,115,95,118,97,108,117,101,40,99,95,112,
                45,62,102,118,97,108,117,101,41,41,59,10,32,32,32,32,103,111,
                116,111,32,102,105,110,100,95,102,117,110,99,95,105,110,102,
                111,59,10,125,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "xThere will be three almost identical copies of the code. Given the size of the code, that could be too high cost to pay."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "RTo avoid the three copies of the code, we could use only one specific instruction:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [21,10,105,95,105,110,99,114,101,109,101,110,116,32,83,32,87,
                32,116,32,100,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"-(The same implementation as above will work.)"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,"1That reduces the code size, but is slower because"}],
               0,false},
              {text,[3,42,83,42]},
              {sep,
               [{text,
                 "hmeans that there will be extra code to test whether the operand refers to an X register or a Y register."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\bSolution"}],0,false},
              {sep,
               [{text,
                 [136,58,32,87,101,32,99,97,110,32,117,115,101,32,34,99,111,
                  109,98,105,110,101,100,32,105,110,115,116,114,117,99,116,
                  105,111,110,115,34,46,32,67,111,109,98,105,110,101,100,32,
                  105,110,115,116,114,117,99,116,105,111,110,115,32,97,114,
                  101,32,99,111,109,98,105,110,101,100,32,102,114,111,109,32,
                  105,110,115,116,114,117,99,116,105,111,110,32,102,114,97,
                  103,109,101,110,116,115,46,32,84,104,101,32,98,117,108,107,
                  32,111,102,32,116,104,101,32,99,111,100,101,32,99,97,110,32,
                  98,101,32,115,104,97,114,101,100,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [21,72,101,114,101,32,119,101,32,119,105,108,108,32,115,104,
                  111,119,32,104,111,119]}],
               0,false},
              {text,"\r*i_increment*"},
              {sep,
               [{text,
                 "Þcan be implemented as a combined instruction. We will show each individual fragment first, and then show how to connect them together. First we will need a variable that we can store the value fetched from the register in:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "3\nincrement.head() {\n    Eterm increment_reg_val;\n}\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\bThe name"}],0,false},
              {text,"\v*increment*"},
              {sep,
               [{text,
                 [153,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,
                  116,104,101,32,103,114,111,117,112,32,116,104,97,116,32,116,
                  104,101,32,102,114,97,103,109,101,110,116,32,98,101,108,111,
                  110,103,115,32,116,111,46,32,78,111,116,101,32,116,104,97,
                  116,32,105,116,32,100,111,101,115,32,110,111,116,32,110,101,
                  101,100,32,116,111,32,104,97,118,101,32,116,104,101,32,115,
                  97,109,101,32,110,97,109,101,32,97,115,32,116,104,101,32,
                  105,110,115,116,114,117,99,116,105,111,110,46,32,84,104,101,
                  32,103,114,111,117,112,32,110,97,109,101,32,105,115,32,102,
                  111,108,108,111,119,101,100,32,98,121]}],
               0,false},
              {text,[3,42,46,42]},
              {sep,[{text,"&and the name of the fragment. The name"}],0,false},
              {text,[6,42,104,101,97,100,42]},
              {sep,
               [{text,
                 "|is pre-defined. The code in it will be placed at the beginning of a block, so that all fragments in the group can access it."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "aNext we define the fragment that will pick up the value from the register from the first operand:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "8\nincrement.fetch(Src) {\n    increment_reg_val = $Src;\n}\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [21,87,101,32,99,97,108,108,32,116,104,105,115,32,102,114,97,
                  103,109,101,110,116]}],
               0,false},
              {text,[7,42,102,101,116,99,104,42]},
              {sep,
               [{text,
                 "Y. This fragment will be duplicated three times, one for each value of the first operand ("}],
               0,false},
              {text,[3,42,114,42]},
              {sep,[{text,[1,44]}],0,false},
              {text,[3,42,120,42]},
              {sep,[{text,[5,44,32,97,110,100]}],0,false},
              {text,[3,42,121,42]},
              {sep,[{text,[2,41,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "INext we define the main part of the code that do the actual incrementing."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [767,10,105,110,99,114,101,109,101,110,116,46,101,120,101,99,
                117,116,101,40,73,110,99,114,101,109,101,110,116,86,97,108,44,
                32,76,105,118,101,44,32,68,115,116,41,32,123,10,32,32,32,32,
                69,116,101,114,109,32,105,110,99,114,101,109,101,110,116,95,
                118,97,108,32,61,32,36,73,110,99,114,101,109,101,110,116,86,
                97,108,59,10,32,32,32,32,85,105,110,116,32,108,105,118,101,59,
                10,32,32,32,32,69,116,101,114,109,32,114,101,115,117,108,116,
                59,10,10,32,32,32,32,105,102,32,40,69,82,84,83,95,76,73,75,69,
                76,89,40,105,115,95,115,109,97,108,108,40,105,110,99,114,101,
                109,101,110,116,95,114,101,103,95,118,97,108,41,41,41,32,123,
                10,32,32,32,32,32,32,32,32,83,105,110,116,32,105,32,61,32,115,
                105,103,110,101,100,95,118,97,108,40,105,110,99,114,101,109,
                101,110,116,95,114,101,103,95,118,97,108,41,32,43,32,105,110,
                99,114,101,109,101,110,116,95,118,97,108,59,10,32,32,32,32,32,
                32,32,32,105,102,32,40,69,82,84,83,95,76,73,75,69,76,89,40,73,
                83,95,83,83,77,65,76,76,40,105,41,41,41,32,123,10,32,32,32,32,
                32,32,32,32,32,32,32,32,36,68,115,116,32,61,32,109,97,107,101,
                95,115,109,97,108,108,40,105,41,59,10,32,32,32,32,32,32,32,32,
                32,32,32,32,36,78,69,88,84,48,40,41,59,10,32,32,32,32,32,32,
                32,32,125,10,32,32,32,32,125,10,32,32,32,32,108,105,118,101,
                32,61,32,36,76,105,118,101,59,10,32,32,32,32,72,69,65,86,89,
                95,83,87,65,80,79,85,84,59,10,32,32,32,32,114,101,103,91,108,
                105,118,101,93,32,61,32,105,110,99,114,101,109,101,110,116,95,
                114,101,103,95,118,97,108,59,10,32,32,32,32,114,101,103,91,
                108,105,118,101,43,49,93,32,61,32,109,97,107,101,95,115,109,
                97,108,108,40,105,110,99,114,101,109,101,110,116,95,118,97,
                108,41,59,10,32,32,32,32,114,101,115,117,108,116,32,61,32,101,
                114,116,115,95,103,99,95,109,105,120,101,100,95,112,108,117,
                115,40,99,95,112,44,32,114,101,103,44,32,108,105,118,101,41,
                59,10,32,32,32,32,72,69,65,86,89,95,83,87,65,80,73,78,59,10,
                32,32,32,32,69,82,84,83,95,72,79,76,69,95,67,72,69,67,75,40,
                99,95,112,41,59,10,32,32,32,32,105,102,32,40,69,82,84,83,95,
                76,73,75,69,76,89,40,105,115,95,118,97,108,117,101,40,114,101,
                115,117,108,116,41,41,41,32,123,10,32,32,32,32,32,32,32,32,36,
                82,69,70,82,69,83,72,95,71,69,78,95,68,69,83,84,40,41,59,10,
                32,32,32,32,32,32,32,32,36,68,115,116,32,61,32,114,101,115,
                117,108,116,59,10,32,32,32,32,32,32,32,32,36,78,69,88,84,48,
                40,41,59,10,32,32,32,32,125,10,32,32,32,32,65,83,83,69,82,84,
                40,99,95,112,45,62,102,114,101,97,115,111,110,32,33,61,32,66,
                65,68,77,65,84,67,72,32,124,124,32,105,115,95,118,97,108,117,
                101,40,99,95,112,45,62,102,118,97,108,117,101,41,41,59,10,32,
                32,32,32,103,111,116,111,32,102,105,110,100,95,102,117,110,99,
                95,105,110,102,111,59,10,125,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [21,87,101,32,99,97,108,108,32,116,104,105,115,32,102,114,97,
                  103,109,101,110,116]}],
               0,false},
              {text,"\t*execute*"},
              {sep,
               [{text,"/. It will handle the three remaining operands ("}],
               0,false},
              {text,[7,42,87,32,116,32,100,42]},
              {sep,
               [{text,"0). There will only be one copy of this fragment."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "9Now that we have defined the fragments, we need to inform"}],
               0,false},
              {sep,[{text,"\fbeam_makeops"}],0,false},
              {sep,
               [{text,
                 [29,104,111,119,32,116,104,101,121,32,115,104,111,117,108,
                  100,32,98,101,32,99,111,110,110,101,99,116,101,100,58]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,")\ni_increment := increment.fetch.execute;\n"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [18,84,111,32,116,104,101,32,108,101,102,116,32,111,102,32,
                  116,104,101]}],
               0,false},
              {text,[4,42,58,61,42]},
              {sep,
               [{text,
                 "ais the name of the specific instruction that should be implemented by the fragments, in this case"}],
               0,false},
              {text,"\r*i_increment*"},
              {sep,
               [{text,
                 [17,46,32,84,111,32,116,104,101,32,114,105,103,104,116,32,
                  111,102]}],
               0,false},
              {text,[4,42,58,61,42]},
              {sep,
               [{text,
                 ":is the name of the group with the fragments, followed by a"}],
               0,false},
              {text,[3,42,46,42]},
              {sep,
               [{text,
                 "l. Then the name of the fragments in the group are listed in the order they should be executed. Note that the"}],
               0,false},
              {text,[6,42,104,101,97,100,42]},
              {sep,
               [{text,
                 [23,102,114,97,103,109,101,110,116,32,105,115,32,110,111,116,
                  32,108,105,115,116,101,100,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [16,84,104,101,32,108,105,110,101,32,101,110,100,115,32,105,
                  110]}],
               0,false},
              {text,[3,42,59,42]},
              {sep,
               [{text,"/(to avoid messing up the indentation in Emacs)."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [26,40,78,111,116,101,32,116,104,97,116,32,105,110,32,112,
                  114,97,99,116,105,99,101,32,116,104,101]}],
               0,false},
              {text,[4,42,58,61,42]},
              {sep,
               [{text,"-line is usually placed before the fragments.)"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,[{text,"#The generated code looks like this:"}],0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [450,10,123,10,32,32,69,116,101,114,109,32,105,110,99,114,101,
                109,101,110,116,95,114,101,103,95,118,97,108,59,10,32,32,79,
                112,67,97,115,101,40,105,95,105,110,99,114,101,109,101,110,
                116,95,114,87,116,100,41,58,10,32,32,123,10,32,32,32,32,105,
                110,99,114,101,109,101,110,116,95,114,101,103,95,118,97,108,
                32,61,32,114,40,48,41,59,10,32,32,125,10,32,32,103,111,116,
                111,32,105,110,99,114,101,109,101,110,116,95,95,101,120,101,
                99,117,116,101,59,10,10,32,32,79,112,67,97,115,101,40,105,95,
                105,110,99,114,101,109,101,110,116,95,120,87,116,100,41,58,10,
                32,32,123,10,32,32,32,32,105,110,99,114,101,109,101,110,116,
                95,114,101,103,95,118,97,108,32,61,32,120,98,40,66,101,97,109,
                69,120,116,114,97,68,97,116,97,40,73,91,48,93,41,41,59,10,32,
                32,125,10,32,32,103,111,116,111,32,105,110,99,114,101,109,101,
                110,116,95,95,101,120,101,99,117,116,101,59,10,10,32,32,79,
                112,67,97,115,101,40,105,95,105,110,99,114,101,109,101,110,
                116,95,121,87,116,100,41,58,10,32,32,123,10,32,32,32,32,105,
                110,99,114,101,109,101,110,116,95,114,101,103,95,118,97,108,
                32,61,32,121,98,40,66,101,97,109,69,120,116,114,97,68,97,116,
                97,40,73,91,48,93,41,41,59,10,32,32,125,10,32,32,103,111,116,
                111,32,105,110,99,114,101,109,101,110,116,95,95,101,120,101,
                99,117,116,101,59,10,10,32,32,105,110,99,114,101,109,101,110,
                116,95,95,101,120,101,99,117,116,101,58,10,32,32,123,10,32,32,
                32,32,47,47,32,72,101,114,101,32,102,111,108,108,111,119,115,
                32,116,104,101,32,99,111,100,101,32,102,114,111,109,32,105,
                110,99,114,101,109,101,110,116,46,101,120,101,99,117,116,101,
                40,41,10,32,32,32,32,46,10,32,32,32,32,46,10,32,32,32,32,46,
                10,125,10]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {sep,
        [{text,
          "ç<a name=\"Syntax-of-tab-files_Defining-the-implementation_Combined-instructions_Some-notes-about-combined-instructions\">Syntax-of-tab-files_Defining-the-implementation_Combined-instructions_Some-notes-about-combined-instructions</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,{text,")## Some notes about combined instructions"},null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "·The operands that are different must be at the beginning of the instruction. All operands in the last fragment must have the same operands in all variants of the specific instruction."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "cAs an example, the following specific instructions cannot be implemented as a combined instruction:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 ":\ni_times j? t x x d\ni_times j? t x y d\ni_times j? t s s d\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "oWe would have to change the order of the operands so that the two operands that are different are placed first:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 ":\ni_times x x j? t d\ni_times x y j? t d\ni_times s s j? t d\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [19,87,101,32,99,97,110,32,116,104,101,110,32,100,101,102,
                  105,110,101,58]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "×\ni_times := times.fetch.execute;\n\ntimes.head {\n    Eterm op1, op2;\n}\n\ntimes.fetch(Src1, Src2) {\n    op1 = $Src1;\n    op2 = $Src2;\n}\n\ntimes.execute(Fail, Live, Dst) {\n    // Multiply op1 and op2.\n    .\n    .\n    .\n}\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "ÂSeveral instructions can share a group. As an example, the following instructions have different names, but in the end they all create a binary. The last two operands are common for all of them:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [129,10,105,95,98,115,95,105,110,105,116,95,102,97,105,108,
                  32,32,32,32,32,32,32,120,121,32,106,63,32,116,63,32,120,10,
                  105,95,98,115,95,105,110,105,116,95,102,97,105,108,95,104,
                  101,97,112,32,115,32,73,32,106,63,32,116,63,32,120,10,105,
                  95,98,115,95,105,110,105,116,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,87,32,116,63,32,120,10,105,95,98,115,95,
                  105,110,105,116,95,104,101,97,112,32,32,32,32,32,32,32,32,
                  32,87,32,73,32,116,63,32,120,10]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "QThe instructions are defined like this (formatted with extra spaces for clarity):"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 "ý\ni_bs_init_fail_heap := bs_init . fail_heap . verify . execute;\ni_bs_init_fail      := bs_init . fail      . verify . execute;\ni_bs_init           := bs_init .           .  plain . execute;\ni_bs_init_heap      := bs_init .               heap . execute;\n"}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "~Note that the first two instruction have three fragments, while the other two only have two fragments. Here are the fragments:"}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [648,10,98,115,95,105,110,105,116,95,98,105,116,115,46,104,
                  101,97,100,40,41,32,123,10,32,32,32,32,69,116,101,114,109,
                  32,110,117,109,95,98,105,116,115,95,116,101,114,109,59,10,
                  32,32,32,32,85,105,110,116,32,110,117,109,95,98,105,116,115,
                  59,10,32,32,32,32,85,105,110,116,32,97,108,108,111,99,59,10,
                  125,10,10,98,115,95,105,110,105,116,95,98,105,116,115,46,
                  112,108,97,105,110,40,78,117,109,66,105,116,115,41,32,123,
                  10,32,32,32,32,110,117,109,95,98,105,116,115,32,61,32,36,78,
                  117,109,66,105,116,115,59,10,32,32,32,32,97,108,108,111,99,
                  32,61,32,48,59,10,125,10,10,98,115,95,105,110,105,116,95,98,
                  105,116,115,46,104,101,97,112,40,78,117,109,66,105,116,115,
                  44,32,65,108,108,111,99,41,32,123,10,32,32,32,32,110,117,
                  109,95,98,105,116,115,32,61,32,36,78,117,109,66,105,116,115,
                  59,10,32,32,32,32,97,108,108,111,99,32,61,32,36,65,108,108,
                  111,99,59,10,125,10,10,98,115,95,105,110,105,116,95,98,105,
                  116,115,46,102,97,105,108,40,78,117,109,66,105,116,115,84,
                  101,114,109,41,32,123,10,32,32,32,32,110,117,109,95,98,105,
                  116,115,95,116,101,114,109,32,61,32,36,78,117,109,66,105,
                  116,115,84,101,114,109,59,10,32,32,32,32,97,108,108,111,99,
                  32,61,32,48,59,10,125,10,10,98,115,95,105,110,105,116,95,98,
                  105,116,115,46,102,97,105,108,95,104,101,97,112,40,78,117,
                  109,66,105,116,115,84,101,114,109,44,32,65,108,108,111,99,
                  41,32,123,10,32,32,32,32,110,117,109,95,98,105,116,115,95,
                  116,101,114,109,32,61,32,36,78,117,109,66,105,116,115,84,
                  101,114,109,59,10,32,32,32,32,97,108,108,111,99,32,61,32,36,
                  65,108,108,111,99,59,10,125,10,10,98,115,95,105,110,105,116,
                  95,98,105,116,115,46,118,101,114,105,102,121,40,70,97,105,
                  108,41,32,123,10,32,32,32,32,47,47,32,86,101,114,105,102,
                  121,32,116,104,101,32,110,117,109,95,98,105,116,115,95,116,
                  101,114,109,44,32,102,97,105,108,32,117,115,105,110,103,32,
                  36,70,65,73,76,10,32,32,32,32,47,47,32,105,102,32,116,104,
                  101,114,101,32,105,115,32,97,32,112,114,111,98,108,101,109,
                  46,10,46,10,46,10,46,10,125,10,10,98,115,95,105,110,105,116,
                  95,98,105,116,115,46,101,120,101,99,117,116,101,40,76,105,
                  118,101,44,32,68,115,116,41,32,123,10,32,32,32,47,47,32,76,
                  111,110,103,32,99,111,109,112,108,105,99,97,116,101,100,32,
                  99,111,100,101,32,116,111,32,97,32,99,114,101,97,116,101,32,
                  97,32,98,105,110,97,114,121,46,10,32,32,32,46,10,32,32,32,
                  46,10,32,32,32,46,10,125,10]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   ":The full definitions of those instructions can be found in"}],
                 0,false},
                {text,
                 [15,42,98,115,95,105,110,115,116,114,115,46,116,97,98,42]},
                {sep,[{text,"$. The generated code can be found in"}],0,false},
                {text,"\r*beam_warm.h*"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false}],
    0,false}],
  0,false}}
