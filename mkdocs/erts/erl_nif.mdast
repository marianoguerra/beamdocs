{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,"\t# erl_nif"},null},null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,{above,{text,"\t# erl_nif"},null},null}}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"(API functions for an Erlang NIF library."}],
             0,false}],
           0,true},
          null},
         null}}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     [508,65,32,78,73,70,32,108,105,98,114,97,114,121,32,99,
                      111,110,116,97,105,110,115,32,110,97,116,105,118,101,32,
                      105,109,112,108,101,109,101,110,116,97,116,105,111,110,
                      32,111,102,32,115,111,109,101,32,102,117,110,99,116,105,
                      111,110,115,32,111,102,32,97,110,32,69,114,108,97,110,
                      103,32,109,111,100,117,108,101,46,32,84,104,101,32,110,
                      97,116,105,118,101,32,105,109,112,108,101,109,101,110,
                      116,101,100,32,102,117,110,99,116,105,111,110,115,32,40,
                      78,73,70,115,41,32,97,114,101,32,99,97,108,108,101,100,
                      32,108,105,107,101,32,97,110,121,32,111,116,104,101,114,
                      32,102,117,110,99,116,105,111,110,115,32,119,105,116,
                      104,111,117,116,32,97,110,121,32,100,105,102,102,101,
                      114,101,110,99,101,32,116,111,32,116,104,101,32,99,97,
                      108,108,101,114,46,32,69,97,99,104,32,78,73,70,32,109,
                      117,115,116,32,104,97,118,101,32,97,110,32,105,109,112,
                      108,101,109,101,110,116,97,116,105,111,110,32,105,110,
                      32,69,114,108,97,110,103,32,116,104,97,116,32,105,115,
                      32,105,110,118,111,107,101,100,32,105,102,32,116,104,
                      101,32,102,117,110,99,116,105,111,110,32,105,115,32,99,
                      97,108,108,101,100,32,98,101,102,111,114,101,32,116,104,
                      101,32,78,73,70,32,108,105,98,114,97,114,121,32,105,115,
                      32,115,117,99,99,101,115,115,102,117,108,108,121,32,108,
                      111,97,100,101,100,46,32,65,32,116,121,112,105,99,97,
                      108,32,115,117,99,104,32,115,116,117,98,32,105,109,112,
                      108,101,109,101,110,116,97,116,105,111,110,32,105,115,
                      32,116,111,32,116,104,114,111,119,32,97,110,32,101,120,
                      99,101,112,116,105,111,110,46,32,66,117,116,32,105,116,
                      32,99,97,110,32,97,108,115,111,32,98,101,32,117,115,101,
                      100,32,97,115,32,97,32,102,97,108,108,98,97,99,107,32,
                      105,109,112,108,101,109,101,110,116,97,116,105,111,110,
                      32,105,102,32,116,104,101,32,78,73,70,32,108,105,98,114,
                      97,114,121,32,105,115,32,110,111,116,32,105,109,112,108,
                      101,109,101,110,116,101,100,32,102,111,114,32,115,111,
                      109,101,32,97,114,99,104,105,116,101,99,116,117,114,101,
                      46]}],
                   0,false}],
                 0,true},
                null},
               null}},
             {sep,
              [{text,
                [29,60,97,32,110,97,109,101,61,34,87,65,82,78,73,78,71,34,62,
                 87,65,82,78,73,78,71,60,47,97,62]},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,"-**Use this functionality with extreme care.**"}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [133,65,32,110,97,116,105,118,101,32,102,117,110,99,
                          116,105,111,110,32,105,115,32,101,120,101,99,117,
                          116,101,100,32,97,115,32,97,32,100,105,114,101,99,
                          116,32,101,120,116,101,110,115,105,111,110,32,111,
                          102,32,116,104,101,32,110,97,116,105,118,101,32,99,
                          111,100,101,32,111,102,32,116,104,101,32,86,77,46,
                          32,69,120,101,99,117,116,105,111,110,32,105,115,32,
                          110,111,116,32,109,97,100,101,32,105,110,32,97,32,
                          115,97,102,101,32,101,110,118,105,114,111,110,109,
                          101,110,116,46,32,84,104,101,32,86,77]}],
                       0,false},
                      {text,"\n**cannot**"},
                      {sep,
                       [{text,
                         "Àprovide the same services as provided when executing Erlang code, such as pre-emptive scheduling or memory protection. If the native function does not behave well, the whole VM will misbehave."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{text,
                      "5A native function that crash will crash the whole VM."}],
                    0,false}],
                  0,false},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{text,
                      "ÖAn erroneously implemented native function can cause a VM internal state inconsistency, which can cause a crash of the VM, or miscellaneous misbehaviors of the VM at any point after the call to the native function."}],
                    0,false}],
                  0,false}},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{sep,
                     [{text,
                       [23,65,32,110,97,116,105,118,101,32,102,117,110,99,116,
                        105,111,110,32,100,111,105,110,103]}],
                     0,false},
                    {text,
                     [29,91,108,101,110,103,116,104,121,32,119,111,114,107,93,
                      40,35,108,101,110,103,116,104,121,95,119,111,114,107,
                      41]},
                    {sep,
                     [{text,
                       [319,98,101,102,111,114,101,32,114,101,116,117,114,110,
                        105,110,103,32,100,101,103,114,97,100,101,115,32,114,
                        101,115,112,111,110,115,105,118,101,110,101,115,115,
                        32,111,102,32,116,104,101,32,86,77,44,32,97,110,100,
                        32,99,97,110,32,99,97,117,115,101,32,109,105,115,99,
                        101,108,108,97,110,101,111,117,115,32,115,116,114,97,
                        110,103,101,32,98,101,104,97,118,105,111,114,115,46,
                        32,83,117,99,104,32,115,116,114,97,110,103,101,32,98,
                        101,104,97,118,105,111,114,115,32,105,110,99,108,117,
                        100,101,44,32,98,117,116,32,97,114,101,32,110,111,116,
                        32,108,105,109,105,116,101,100,32,116,111,44,32,101,
                        120,116,114,101,109,101,32,109,101,109,111,114,121,32,
                        117,115,97,103,101,44,32,97,110,100,32,98,97,100,32,
                        108,111,97,100,32,98,97,108,97,110,99,105,110,103,32,
                        98,101,116,119,101,101,110,32,115,99,104,101,100,117,
                        108,101,114,115,46,32,83,116,114,97,110,103,101,32,98,
                        101,104,97,118,105,111,114,115,32,116,104,97,116,32,
                        99,97,110,32,111,99,99,117,114,32,98,101,99,97,117,
                        115,101,32,111,102,32,108,101,110,103,116,104,121,32,
                        119,111,114,107,32,99,97,110,32,97,108,115,111,32,118,
                        97,114,121,32,98,101,116,119,101,101,110,32,69,114,
                        108,97,110,103,47,79,84,80,32,114,101,108,101,97,115,
                        101,115,46]}],
                     0,false}],
                   0,false}],
                 0,false}}],
              0,false},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "7A minimal example of a NIF library can look as follows:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     [302,10,47,42,32,110,105,102,116,101,115,116,46,99,32,42,
                      47,10,35,105,110,99,108,117,100,101,32,60,101,114,108,
                      95,110,105,102,46,104,62,10,10,115,116,97,116,105,99,32,
                      69,82,76,95,78,73,70,95,84,69,82,77,32,104,101,108,108,
                      111,40,69,114,108,78,105,102,69,110,118,42,32,101,110,
                      118,44,32,105,110,116,32,97,114,103,99,44,32,99,111,110,
                      115,116,32,69,82,76,95,78,73,70,95,84,69,82,77,32,97,
                      114,103,118,91,93,41,10,123,10,32,32,32,32,114,101,116,
                      117,114,110,32,101,110,105,102,95,109,97,107,101,95,115,
                      116,114,105,110,103,40,101,110,118,44,32,34,72,101,108,
                      108,111,32,119,111,114,108,100,33,34,44,32,69,82,76,95,
                      78,73,70,95,76,65,84,73,78,49,41,59,10,125,10,10,115,
                      116,97,116,105,99,32,69,114,108,78,105,102,70,117,110,
                      99,32,110,105,102,95,102,117,110,99,115,91,93,32,61,10,
                      123,10,32,32,32,32,123,34,104,101,108,108,111,34,44,32,
                      48,44,32,104,101,108,108,111,125,10,125,59,10,10,69,82,
                      76,95,78,73,70,95,73,78,73,84,40,110,105,102,116,101,
                      115,116,44,110,105,102,95,102,117,110,99,115,44,78,85,
                      76,76,44,78,85,76,76,44,78,85,76,76,44,78,85,76,76,41]}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,"&The Erlang module can look as follows:"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     [141,10,45,109,111,100,117,108,101,40,110,105,102,116,
                      101,115,116,41,46,10,10,45,101,120,112,111,114,116,40,
                      91,105,110,105,116,47,48,44,32,104,101,108,108,111,47,
                      48,93,41,46,10,10,105,110,105,116,40,41,32,45,62,10,32,
                      32,32,32,32,32,101,114,108,97,110,103,58,108,111,97,100,
                      95,110,105,102,40,34,46,47,110,105,102,116,101,115,116,
                      34,44,32,48,41,46,10,10,104,101,108,108,111,40,41,32,45,
                      62,10,32,32,32,32,32,32,34,78,73,70,32,108,105,98,114,
                      97,114,121,32,110,111,116,32,108,111,97,100,101,100,34,
                      46]}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "0Compile and test can look as follows (on Linux):"}],
                   0,false}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {above,
                 {above,
                  {text,[3,96,96,96]},
                  {sep,
                   [{text,
                     "Ñ\n$> gcc -fPIC -shared -o niftest.so niftest.c -I $ERL_ROOT/usr/include/\n$> erl\n\n1> c(niftest).\n{ok,niftest}\n2> niftest:hello().\n\"NIF library not loaded\"\n3> niftest:init().\nok\n4> niftest:hello().\n\"Hello world!\""}],
                   0,true}},
                 {text,[3,96,96,96]}},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{sep,
                     [{text,
                       "MA better solution for a real module is to take advantage of the new directive"}],
                     0,false},
                    {text,"\t*on_load*"},
                    {sep,[{text,"\f(see section"}],0,false},
                    {text,
                     "Z[Running a Function When a Module is Loaded](../doc/reference_manual/code_loading#on_load)"},
                    {sep,
                     [{text,
                       "`in the Erlang Reference Manual) to load the NIF library automatically when the module is loaded."}],
                     0,false}],
                   0,false}],
                 0,true},
                null},
               null}},
             {sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "»A NIF does not have to be exported, it can be local to the module. However, unused local stub functions will be optimized away by the compiler, causing loading of the NIF library to fail."}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{sep,
                   [{text,
                     "}Once loaded, a NIF library is persistent. It will not be unloaded until the module code version that it belongs to is purged."}],
                   0,false}],
                 0,true},
                null},
               null}}],
            0,false}],
          0,true},
         null},
        null}}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [16,35,35,32,70,117,110,99,116,105,111,110,97,108,105,116,121]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [154,65,108,108,32,105,110,116,101,114,97,99,116,105,111,110,
                32,98,101,116,119,101,101,110,32,78,73,70,32,99,111,100,101,
                32,97,110,100,32,116,104,101,32,69,114,108,97,110,103,32,114,
                117,110,116,105,109,101,32,115,121,115,116,101,109,32,105,115,
                32,112,101,114,102,111,114,109,101,100,32,98,121,32,99,97,108,
                108,105,110,103,32,78,73,70,32,65,80,73,32,102,117,110,99,116,
                105,111,110,115,46,32,70,117,110,99,116,105,111,110,115,32,
                101,120,105,115,116,32,102,111,114,32,116,104,101,32,102,111,
                108,108,111,119,105,110,103,32,102,117,110,99,116,105,111,110,
                97,108,105,116,121,58]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,
         {text,[4,60,100,108,62]},
         {nest,4,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{text,[4,60,100,116,62]},
                                {sep,
                                 [{text,"\eRead and write Erlang terms"}],
                                 0,false},
                                {text,[5,60,47,100,116,62]}],
                               0,true},
                              null},
                             null}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{text,[4,60,100,100,62]},
                                {sep,
                                 [{above,
                                   {above,{above,{text,[0]},null},null},
                                   {above,
                                    {above,
                                     {sep,
                                      [{sep,
                                        [{sep,
                                          [{text,
                                            [128,65,110,121,32,69,114,108,97,
                                             110,103,32,116,101,114,109,115,
                                             32,99,97,110,32,98,101,32,112,97,
                                             115,115,101,100,32,116,111,32,97,
                                             32,78,73,70,32,97,115,32,102,117,
                                             110,99,116,105,111,110,32,97,114,
                                             103,117,109,101,110,116,115,32,
                                             97,110,100,32,98,101,32,114,101,
                                             116,117,114,110,101,100,32,97,
                                             115,32,102,117,110,99,116,105,
                                             111,110,32,114,101,116,117,114,
                                             110,32,118,97,108,117,101,115,46,
                                             32,84,104,101,32,116,101,114,109,
                                             115,32,97,114,101,32,111,102,32,
                                             67,45,116,121,112,101]}],
                                          0,false},
                                         {text,"\fERL_NIF_TERM"},
                                         {sep,
                                          [{text,
                                            "nand can only be read or written using API functions. Most functions to read the content of a term are prefixed"}],
                                          0,false},
                                         {text,"\tenif_get_"},
                                         {sep,
                                          [{text,
                                            [18,97,110,100,32,117,115,117,97,
                                             108,108,121,32,114,101,116,117,
                                             114,110]}],
                                          0,false},
                                         {text,[4,116,114,117,101]},
                                         {sep,[{text,[3,40,111,114]}],0,false},
                                         {text,[5,102,97,108,115,101]},
                                         {sep,
                                          [{text,
                                            "]) if the term is of the expected type (or not). The functions to write terms are all prefixed"}],
                                          0,false},
                                         {text,"\nenif_make_"},
                                         {sep,
                                          [{text,
                                            [30,97,110,100,32,117,115,117,97,
                                             108,108,121,32,114,101,116,117,
                                             114,110,32,116,104,101,32,99,114,
                                             101,97,116,101,100]}],
                                          0,false},
                                         {text,"\fERL_NIF_TERM"},
                                         {sep,
                                          [{text,
                                            "4. There are also some functions to query terms, like"}],
                                          0,false},
                                         {text,"\fenif_is_atom"},
                                         {sep,[{text,[1,44]}],0,false},
                                         {text,
                                          [17,101,110,105,102,95,105,115,95,
                                           105,100,101,110,116,105,99,97,108]},
                                         {sep,
                                          [{text,[5,44,32,97,110,100]}],
                                          0,false},
                                         {text,"\fenif_compare"},
                                         {sep,[{text,[1,46]}],0,false}],
                                        0,false}],
                                      0,true},
                                     null},
                                    null}},
                                  {above,
                                   {above,{above,{text,[0]},null},null},
                                   {above,
                                    {above,
                                     {sep,
                                      [{sep,
                                        [{sep,
                                          [{text,
                                            [17,65,108,108,32,116,101,114,109,
                                             115,32,111,102,32,116,121,112,
                                             101]}],
                                          0,false},
                                         {text,"\fERL_NIF_TERM"},
                                         {sep,
                                          [{text,
                                            " belong to an environment of type"}],
                                          0,false},
                                         {text,"\tErlNifEnv"},
                                         {sep,
                                          [{text,
                                            "É. The lifetime of a term is controlled by the lifetime of its environment object. All API functions that read or write terms has the environment that the term belongs to as the first function argument."}],
                                          0,false}],
                                        0,false}],
                                      0,true},
                                     null},
                                    null}}],
                                 0,false},
                                {text,[5,60,47,100,100,62]}],
                               0,true},
                              null},
                             null}}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,116,62]},
                               {sep,[{text,"\bBinaries"}],0,false},
                               {text,[5,60,47,100,116,62]}],
                              0,true},
                             null},
                            null}}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,100,62]},
                              {sep,
                               [{above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{sep,
                                      [{sep,
                                        [{text,
                                          ">Terms of type binary are accessed with the help of struct type"}],
                                        0,false},
                                       {text,"\fErlNifBinary"},
                                       {sep,
                                        [{text,
                                          [28,44,32,119,104,105,99,104,32,99,
                                           111,110,116,97,105,110,115,32,97,
                                           32,112,111,105,110,116,101,114,32,
                                           40]}],
                                        0,false},
                                       {text,[4,100,97,116,97]},
                                       {sep,
                                        [{text,
                                          ")) to the raw binary data and the length ("}],
                                        0,false},
                                       {text,[4,115,105,122,101]},
                                       {sep,
                                        [{text,
                                          [28,41,32,111,102,32,116,104,101,32,
                                           100,97,116,97,32,105,110,32,98,121,
                                           116,101,115,46,32,66,111,116,104]}],
                                        0,false},
                                       {text,[4,100,97,116,97]},
                                       {sep,[{text,[3,97,110,100]}],0,false},
                                       {text,[4,115,105,122,101]},
                                       {sep,
                                        [{text,
                                          "Sare read-only and are only to be written using calls to API functions. Instances of"}],
                                        0,false},
                                       {text,"\fErlNifBinary"},
                                       {sep,
                                        [{text,
                                          "Hare, however, always allocated by the user (usually as local variables)."}],
                                        0,false}],
                                      0,false}],
                                    0,true},
                                   null},
                                  null}},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{sep,
                                      [{sep,
                                        [{text,
                                          [26,84,104,101,32,114,97,119,32,100,
                                           97,116,97,32,112,111,105,110,116,
                                           101,100,32,116,111,32,98,121]}],
                                        0,false},
                                       {text,[4,100,97,116,97]},
                                       {sep,
                                        [{text,
                                          [31,105,115,32,111,110,108,121,32,
                                           109,117,116,97,98,108,101,32,97,
                                           102,116,101,114,32,97,32,99,97,108,
                                           108,32,116,111]}],
                                        0,false},
                                       {text,
                                        [17,101,110,105,102,95,97,108,108,111,
                                         99,95,98,105,110,97,114,121]},
                                       {sep,[{text,[2,111,114]}],0,false},
                                       {text,
                                        [19,101,110,105,102,95,114,101,97,108,
                                         108,111,99,95,98,105,110,97,114,121]},
                                       {sep,
                                        [{text,
                                          [129,46,32,65,108,108,32,111,116,
                                           104,101,114,32,102,117,110,99,116,
                                           105,111,110,115,32,116,104,97,116,
                                           32,111,112,101,114,97,116,101,32,
                                           111,110,32,97,32,98,105,110,97,114,
                                           121,32,108,101,97,118,101,32,116,
                                           104,101,32,100,97,116,97,32,97,115,
                                           32,114,101,97,100,45,111,110,108,
                                           121,46,32,65,32,109,117,116,97,98,
                                           108,101,32,98,105,110,97,114,121,
                                           32,109,117,115,116,32,105,110,32,
                                           116,104,101,32,101,110,100,32,101,
                                           105,116,104,101,114,32,98,101,32,
                                           102,114,101,101,100,32,119,105,116,
                                           104]}],
                                        0,false},
                                       {text,
                                        [19,101,110,105,102,95,114,101,108,
                                         101,97,115,101,95,98,105,110,97,114,
                                         121]},
                                       {sep,
                                        [{text,
                                          ";or made read-only by transferring it to an Erlang term with"}],
                                        0,false},
                                       {text,
                                        [16,101,110,105,102,95,109,97,107,101,
                                         95,98,105,110,97,114,121]},
                                       {sep,
                                        [{text,
                                          "i. However, it does not have to occur in the same NIF call. Read-only binaries do not have to be released."}],
                                        0,false}],
                                      0,false}],
                                    0,true},
                                   null},
                                  null}},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{sep,
                                      [{text,
                                        [20,101,110,105,102,95,109,97,107,101,
                                         95,110,101,119,95,98,105,110,97,114,
                                         121]},
                                       {sep,
                                        [{text,
                                          "Ocan be used as a shortcut to allocate and return a binary in the same NIF call."}],
                                        0,false}],
                                      0,false}],
                                    0,true},
                                   null},
                                  null}},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{sep,
                                      [{text,
                                        "cBinaries are sequences of whole bytes. Bitstrings with an arbitrary bit length have no support yet."}],
                                      0,false}],
                                    0,true},
                                   null},
                                  null}}],
                               0,false},
                              {text,[5,60,47,100,100,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,
                              [{sep,
                                [{text,
                                  [16,114,101,115,111,117,114,99,101,95,111,
                                   98,106,101,99,116,115]},
                                 {sep,
                                  [{text,
                                    [16,82,101,115,111,117,114,99,101,32,111,
                                     98,106,101,99,116,115]}],
                                  0,false}],
                                0,false}],
                              0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {sep,
                             [{above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{sep,
                                      [{text,
                                        [157,84,104,101,32,117,115,101,32,111,
                                         102,32,114,101,115,111,117,114,99,
                                         101,32,111,98,106,101,99,116,115,32,
                                         105,115,32,97,32,115,97,102,101,32,
                                         119,97,121,32,116,111,32,114,101,116,
                                         117,114,110,32,112,111,105,110,116,
                                         101,114,115,32,116,111,32,110,97,116,
                                         105,118,101,32,100,97,116,97,32,115,
                                         116,114,117,99,116,117,114,101,115,
                                         32,102,114,111,109,32,97,32,78,73,70,
                                         46,32,65,32,114,101,115,111,117,114,
                                         99,101,32,111,98,106,101,99,116,32,
                                         105,115,32,111,110,108,121,32,97,32,
                                         98,108,111,99,107,32,111,102,32,109,
                                         101,109,111,114,121,32,97,108,108,
                                         111,99,97,116,101,100,32,119,105,116,
                                         104]}],
                                      0,false},
                                     {text,
                                      [19,101,110,105,102,95,97,108,108,111,
                                       99,95,114,101,115,111,117,114,99,101]},
                                     {sep,
                                      [{text,
                                        "]. A handle (\"safe pointer\") to this memory block can then be returned to Erlang by the use of"}],
                                      0,false},
                                     {text,
                                      [18,101,110,105,102,95,109,97,107,101,
                                       95,114,101,115,111,117,114,99,101]},
                                     {sep,
                                      [{text,
                                        [22,46,32,84,104,101,32,116,101,114,
                                         109,32,114,101,116,117,114,110,101,
                                         100,32,98,121]}],
                                      0,false},
                                     {text,
                                      [18,101,110,105,102,95,109,97,107,101,
                                       95,114,101,115,111,117,114,99,101]},
                                     {sep,
                                      [{text,
                                        "¡is opaque in nature. It can be stored and passed between processes, but the only real end usage is to pass it back as an argument to a NIF. The NIF can then call"}],
                                      0,false},
                                     {text,
                                      [17,101,110,105,102,95,103,101,116,95,
                                       114,101,115,111,117,114,99,101]},
                                     {sep,
                                      [{text,
                                        "Óand get back a pointer to the memory block, which is guaranteed to still be valid. A resource object is not deallocated until the last handle term is garbage collected by the VM and the resource is released with"}],
                                      0,false},
                                     {text,
                                      [21,101,110,105,102,95,114,101,108,101,
                                       97,115,101,95,114,101,115,111,117,114,
                                       99,101]},
                                     {sep,
                                      [{text,
                                        " (not necessarily in that order)."}],
                                      0,false}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{sep,
                                      [{text,
                                        "5All resource objects are created as instances of some"}],
                                      0,false},
                                     {text,"\rresource type"},
                                     {sep,
                                      [{text,
                                        "j. This makes resources from different modules to be distinguishable. A resource type is created by calling"}],
                                      0,false},
                                     {text,
                                      [23,101,110,105,102,95,111,112,101,110,
                                       95,114,101,115,111,117,114,99,101,95,
                                       116,121,112,101]},
                                     {sep,
                                      [{text,
                                        "Wwhen a library is loaded. Objects of that resource type can then later be allocated and"}],
                                      0,false},
                                     {text,
                                      [17,101,110,105,102,95,103,101,116,95,
                                       114,101,115,111,117,114,99,101]},
                                     {sep,
                                      [{text,
                                        "Üverifies that the resource is of the expected type. A resource type can have a user-supplied destructor function, which is automatically called when resources of that type are released (by either the garbage collector or"}],
                                      0,false},
                                     {text,
                                      [21,101,110,105,102,95,114,101,108,101,
                                       97,115,101,95,114,101,115,111,117,114,
                                       99,101]},
                                     {sep,
                                      [{text,
                                        "l). Resource types are uniquely identified by a supplied name string and the name of the implementing module."}],
                                      0,false}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {text,
                               [21,101,110,105,102,95,114,101,115,111,117,114,
                                99,101,95,101,120,97,109,112,108,101]},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{text,
                                      "RThe following is a template example of how to create and return a resource object."}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {above,
                                  {above,
                                   {text,[3,96,96,96]},
                                   {sep,
                                    [{text,
                                      [377,10,69,82,76,95,78,73,70,95,84,69,
                                       82,77,32,116,101,114,109,59,10,77,121,
                                       83,116,114,117,99,116,42,32,111,98,106,
                                       32,61,32,101,110,105,102,95,97,108,108,
                                       111,99,95,114,101,115,111,117,114,99,
                                       101,40,109,121,95,114,101,115,111,117,
                                       114,99,101,95,116,121,112,101,44,32,
                                       115,105,122,101,111,102,40,77,121,83,
                                       116,114,117,99,116,41,41,59,10,10,47,
                                       42,32,105,110,105,116,105,97,108,105,
                                       122,101,32,115,116,114,117,99,116,32,
                                       46,46,46,32,42,47,10,10,116,101,114,
                                       109,32,61,32,101,110,105,102,95,109,97,
                                       107,101,95,114,101,115,111,117,114,99,
                                       101,40,101,110,118,44,32,111,98,106,41,
                                       59,10,10,105,102,32,40,107,101,101,112,
                                       95,97,95,114,101,102,101,114,101,110,
                                       99,101,95,111,102,95,111,117,114,95,
                                       111,119,110,41,32,123,10,32,32,32,32,
                                       47,42,32,115,116,111,114,101,32,39,111,
                                       98,106,39,32,105,110,32,115,116,97,116,
                                       105,99,32,118,97,114,105,97,98,108,101,
                                       44,32,112,114,105,118,97,116,101,32,
                                       100,97,116,97,32,111,114,32,111,116,
                                       104,101,114,32,114,101,115,111,117,114,
                                       99,101,32,111,98,106,101,99,116,32,42,
                                       47,10,125,10,101,108,115,101,32,123,10,
                                       32,32,32,32,101,110,105,102,95,114,101,
                                       108,101,97,115,101,95,114,101,115,111,
                                       117,114,99,101,40,111,98,106,41,59,10,
                                       32,32,32,32,47,42,32,114,101,115,111,
                                       117,114,99,101,32,110,111,119,32,111,
                                       110,108,121,32,111,119,110,101,100,32,
                                       98,121,32,34,69,114,108,97,110,103,34,
                                       32,42,47,10,125,10,114,101,116,117,114,
                                       110,32,116,101,114,109,59]}],
                                    0,true}},
                                  {text,[3,96,96,96]}},
                                 null},
                                null}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{sep,
                                      [{text,
                                        [16,78,111,116,105,99,101,32,116,104,
                                         97,116,32,111,110,99,101]}],
                                      0,false},
                                     {text,
                                      [18,101,110,105,102,95,109,97,107,101,
                                       95,114,101,115,111,117,114,99,101]},
                                     {sep,
                                      [{text,
                                        [278,99,114,101,97,116,101,115,32,116,
                                         104,101,32,116,101,114,109,32,116,
                                         111,32,114,101,116,117,114,110,32,
                                         116,111,32,69,114,108,97,110,103,44,
                                         32,116,104,101,32,99,111,100,101,32,
                                         99,97,110,32,99,104,111,111,115,101,
                                         32,116,111,32,101,105,116,104,101,
                                         114,32,107,101,101,112,32,105,116,
                                         115,32,111,119,110,32,110,97,116,105,
                                         118,101,32,112,111,105,110,116,101,
                                         114,32,116,111,32,116,104,101,32,97,
                                         108,108,111,99,97,116,101,100,32,115,
                                         116,114,117,99,116,32,97,110,100,32,
                                         114,101,108,101,97,115,101,32,105,
                                         116,32,108,97,116,101,114,44,32,111,
                                         114,32,114,101,108,101,97,115,101,32,
                                         105,116,32,105,109,109,101,100,105,
                                         97,116,101,108,121,32,97,110,100,32,
                                         114,101,108,121,32,111,110,108,121,
                                         32,111,110,32,116,104,101,32,103,97,
                                         114,98,97,103,101,32,99,111,108,108,
                                         101,99,116,111,114,32,116,111,32,100,
                                         101,97,108,108,111,99,97,116,101,32,
                                         116,104,101,32,114,101,115,111,117,
                                         114,99,101,32,111,98,106,101,99,116,
                                         32,101,118,101,110,116,117,97,108,
                                         108,121,32,119,104,101,110,32,105,
                                         116,32,99,111,108,108,101,99,116,115,
                                         32,116,104,101,32,116,101,114,109,
                                         46]}],
                                      0,false}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{sep,
                                      [{text,
                                        "^Another use of resource objects is to create binary terms with user-defined memory management."}],
                                      0,false},
                                     {text,
                                      [25,101,110,105,102,95,109,97,107,101,
                                       95,114,101,115,111,117,114,99,101,95,
                                       98,105,110,97,114,121]},
                                     {sep,
                                      [{text,
                                        "ýcreates a binary term that is connected to a resource object. The destructor of the resource is called when the binary is garbage collected, at which time the binary data can be released. An example of this can be a binary term consisting of data from a"}],
                                      0,false},
                                     {text,[4,109,109,97,112]},
                                     {sep,
                                      [{text,
                                        "$'ed file. The destructor can then do"}],
                                      0,false},
                                     {text,[6,109,117,110,109,97,112]},
                                     {sep,
                                      [{text,
                                        [29,116,111,32,114,101,108,101,97,115,
                                         101,32,116,104,101,32,109,101,109,
                                         111,114,121,32,114,101,103,105,111,
                                         110,46]}],
                                      0,false}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{text,
                                      [573,82,101,115,111,117,114,99,101,32,
                                       116,121,112,101,115,32,115,117,112,112,
                                       111,114,116,32,117,112,103,114,97,100,
                                       101,32,105,110,32,114,117,110,116,105,
                                       109,101,32,98,121,32,97,108,108,111,
                                       119,105,110,103,32,97,32,108,111,97,
                                       100,101,100,32,78,73,70,32,108,105,98,
                                       114,97,114,121,32,116,111,32,116,97,
                                       107,101,32,111,118,101,114,32,97,110,
                                       32,97,108,114,101,97,100,121,32,101,
                                       120,105,115,116,105,110,103,32,114,101,
                                       115,111,117,114,99,101,32,116,121,112,
                                       101,32,97,110,100,32,98,121,32,116,104,
                                       97,116,32,34,105,110,104,101,114,105,
                                       116,34,32,97,108,108,32,101,120,105,
                                       115,116,105,110,103,32,111,98,106,101,
                                       99,116,115,32,111,102,32,116,104,97,
                                       116,32,116,121,112,101,46,32,84,104,
                                       101,32,100,101,115,116,114,117,99,116,
                                       111,114,32,111,102,32,116,104,101,32,
                                       110,101,119,32,108,105,98,114,97,114,
                                       121,32,105,115,32,116,104,101,114,101,
                                       97,102,116,101,114,32,99,97,108,108,
                                       101,100,32,102,111,114,32,116,104,101,
                                       32,105,110,104,101,114,105,116,101,100,
                                       32,111,98,106,101,99,116,115,32,97,110,
                                       100,32,116,104,101,32,108,105,98,114,
                                       97,114,121,32,119,105,116,104,32,116,
                                       104,101,32,111,108,100,32,100,101,115,
                                       116,114,117,99,116,111,114,32,102,117,
                                       110,99,116,105,111,110,32,99,97,110,32,
                                       98,101,32,115,97,102,101,108,121,32,
                                       117,110,108,111,97,100,101,100,46,32,
                                       69,120,105,115,116,105,110,103,32,114,
                                       101,115,111,117,114,99,101,32,111,98,
                                       106,101,99,116,115,44,32,111,102,32,97,
                                       32,109,111,100,117,108,101,32,116,104,
                                       97,116,32,105,115,32,117,112,103,114,
                                       97,100,101,100,44,32,109,117,115,116,
                                       32,101,105,116,104,101,114,32,98,101,
                                       32,100,101,108,101,116,101,100,32,111,
                                       114,32,116,97,107,101,110,32,111,118,
                                       101,114,32,98,121,32,116,104,101,32,
                                       110,101,119,32,78,73,70,32,108,105,98,
                                       114,97,114,121,46,32,84,104,101,32,117,
                                       110,108,111,97,100,105,110,103,32,111,
                                       102,32,97,32,108,105,98,114,97,114,121,
                                       32,105,115,32,112,111,115,116,112,111,
                                       110,101,100,32,97,115,32,108,111,110,
                                       103,32,97,115,32,116,104,101,114,101,
                                       32,101,120,105,115,116,32,114,101,115,
                                       111,117,114,99,101,32,111,98,106,101,
                                       99,116,115,32,119,105,116,104,32,97,32,
                                       100,101,115,116,114,117,99,116,111,114,
                                       32,102,117,110,99,116,105,111,110,32,
                                       105,110,32,116,104,101,32,108,105,98,
                                       114,97,114,121,46]}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}}],
                             0,false},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,
                            [{text,
                              [30,77,111,100,117,108,101,32,117,112,103,114,
                               97,100,101,32,97,110,100,32,115,116,97,116,105,
                               99,32,100,97,116,97]}],
                            0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    [609,65,32,108,111,97,100,101,100,32,78,
                                     73,70,32,108,105,98,114,97,114,121,32,
                                     105,115,32,116,105,101,100,32,116,111,32,
                                     116,104,101,32,69,114,108,97,110,103,32,
                                     109,111,100,117,108,101,32,105,110,115,
                                     116,97,110,99,101,32,116,104,97,116,32,
                                     108,111,97,100,101,100,32,105,116,46,32,
                                     73,102,32,116,104,101,32,109,111,100,117,
                                     108,101,32,105,115,32,117,112,103,114,97,
                                     100,101,100,44,32,116,104,101,32,110,101,
                                     119,32,109,111,100,117,108,101,32,105,
                                     110,115,116,97,110,99,101,32,110,101,101,
                                     100,115,32,116,111,32,108,111,97,100,32,
                                     105,116,115,32,111,119,110,32,78,73,70,
                                     32,108,105,98,114,97,114,121,32,40,111,
                                     114,32,109,97,121,98,101,32,99,104,111,
                                     111,115,101,32,110,111,116,32,116,111,41,
                                     46,32,84,104,101,32,110,101,119,32,109,
                                     111,100,117,108,101,32,105,110,115,116,
                                     97,110,99,101,32,99,97,110,44,32,104,111,
                                     119,101,118,101,114,44,32,99,104,111,111,
                                     115,101,32,116,111,32,108,111,97,100,32,
                                     116,104,101,32,101,120,97,99,116,32,115,
                                     97,109,101,32,78,73,70,32,108,105,98,114,
                                     97,114,121,32,97,115,32,116,104,101,32,
                                     111,108,100,32,99,111,100,101,32,105,102,
                                     32,105,116,32,119,97,110,116,115,32,116,
                                     111,46,32,83,104,97,114,105,110,103,32,
                                     116,104,101,32,100,121,110,97,109,105,99,
                                     32,108,105,98,114,97,114,121,32,109,101,
                                     97,110,115,32,116,104,97,116,32,115,116,
                                     97,116,105,99,32,100,97,116,97,32,100,
                                     101,102,105,110,101,100,32,98,121,32,116,
                                     104,101,32,108,105,98,114,97,114,121,32,
                                     105,115,32,115,104,97,114,101,100,32,97,
                                     115,32,119,101,108,108,46,32,84,111,32,
                                     97,118,111,105,100,32,117,110,105,110,
                                     116,101,110,116,105,111,110,97,108,108,
                                     121,32,115,104,97,114,101,100,32,115,116,
                                     97,116,105,99,32,100,97,116,97,32,98,101,
                                     116,119,101,101,110,32,109,111,100,117,
                                     108,101,32,105,110,115,116,97,110,99,101,
                                     115,44,32,101,97,99,104,32,69,114,108,97,
                                     110,103,32,109,111,100,117,108,101,32,
                                     118,101,114,115,105,111,110,32,99,97,110,
                                     32,107,101,101,112,32,105,116,115,32,111,
                                     119,110,32,112,114,105,118,97,116,101,32,
                                     100,97,116,97,46,32,84,104,105,115,32,
                                     112,114,105,118,97,116,101,32,100,97,116,
                                     97,32,99,97,110,32,98,101,32,115,101,116,
                                     32,119,104,101,110,32,116,104,101,32,78,
                                     73,70,32,108,105,98,114,97,114,121,32,
                                     105,115,32,108,111,97,100,101,100,32,97,
                                     110,100,32,108,97,116,101,114,32,114,101,
                                     116,114,105,101,118,101,100,32,98,121,32,
                                     99,97,108,108,105,110,103]}],
                                  0,false},
                                 {text,
                                  [14,101,110,105,102,95,112,114,105,118,95,
                                   100,97,116,97]},
                                 {sep,[{text,[1,46]}],0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,
                          [{text,
                            [23,84,104,114,101,97,100,115,32,97,110,100,32,99,
                             111,110,99,117,114,114,101,110,99,121]}],
                          0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {sep,
                         [{above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    "ÊA NIF is thread-safe without any explicit synchronization as long as it acts as a pure function and only reads the supplied arguments. When you write to a shared state either through static variables or"}],
                                  0,false},
                                 {text,
                                  [14,101,110,105,102,95,112,114,105,118,95,
                                   100,97,116,97]},
                                 {sep,
                                  [{text,
                                    "Ü, you need to supply your own explicit synchronization. This includes terms in process independent environments that are shared between threads. Resource objects also require synchronization if you treat them as mutable."}],
                                  0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{sep,
                                  [{text,
                                    "$The library initialization callbacks"}],
                                  0,false},
                                 {text,[4,108,111,97,100]},
                                 {sep,[{text,[3,97,110,100]}],0,false},
                                 {text,[7,117,112,103,114,97,100,101]},
                                 {sep,
                                  [{text,
                                    "+are thread-safe even for shared state data."}],
                                  0,false}],
                                0,false}],
                              0,true},
                             null},
                            null}}],
                         0,false},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,
                        [{sep,
                          [{text,
                            [18,118,101,114,115,105,111,110,95,109,97,110,97,
                             103,101,109,101,110,116]},
                           {sep,
                            [{text,
                              [18,86,101,114,115,105,111,110,32,77,97,110,97,
                               103,101,109,101,110,116]}],
                            0,false}],
                          0,false}],
                        0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {sep,
                       [{above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{sep,
                                [{text,
                                  "ÇWhen a NIF library is built, information about the NIF API version is compiled into the library. When a NIF library is loaded, the runtime system verifies that the library is of a compatible version."}],
                                0,false},
                               {text,"\terl_nif.h"},
                               {sep,
                                [{text,
                                  [22,100,101,102,105,110,101,115,32,116,104,
                                   101,32,102,111,108,108,111,119,105,110,103,
                                   58]}],
                                0,false}],
                              0,false}],
                            0,true},
                           null},
                          null}},
                        {above,
                         {above,
                          {text,[4,60,100,108,62]},
                          {nest,4,
                           {above,
                            {above,
                             {above,
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,116,62]},
                                   {sep,
                                    [{text,
                                      [21,69,82,76,95,78,73,70,95,77,65,74,79,
                                       82,95,86,69,82,83,73,79,78]}],
                                    0,false},
                                   {text,[5,60,47,100,116,62]}],
                                  0,true},
                                 null},
                                null}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,100,62]},
                                   {above,
                                    {above,{above,{text,[0]},null},null},
                                    {above,
                                     {above,
                                      {sep,
                                       [{sep,
                                         [{sep,
                                           [{text,
                                             [147,73,110,99,114,101,109,101,
                                              110,116,101,100,32,119,104,101,
                                              110,32,78,73,70,32,108,105,98,
                                              114,97,114,121,32,105,110,99,
                                              111,109,112,97,116,105,98,108,
                                              101,32,99,104,97,110,103,101,
                                              115,32,97,114,101,32,109,97,100,
                                              101,32,116,111,32,116,104,101,
                                              32,69,114,108,97,110,103,32,114,
                                              117,110,116,105,109,101,32,115,
                                              121,115,116,101,109,46,32,78,
                                              111,114,109,97,108,108,121,32,
                                              105,116,32,115,117,102,102,105,
                                              99,101,115,32,116,111,32,114,
                                              101,99,111,109,112,105,108,101,
                                              32,116,104,101,32,78,73,70,32,
                                              108,105,98,114,97,114,121,32,
                                              119,104,101,110,32,116,104,
                                              101]}],
                                           0,false},
                                          {text,
                                           [21,69,82,76,95,78,73,70,95,77,65,
                                            74,79,82,95,86,69,82,83,73,79,78]},
                                          {sep,
                                           [{text,
                                             [143,104,97,115,32,99,104,97,110,
                                              103,101,100,44,32,98,117,116,32,
                                              105,116,32,99,97,110,44,32,117,
                                              110,100,101,114,32,114,97,114,
                                              101,32,99,105,114,99,117,109,
                                              115,116,97,110,99,101,115,44,32,
                                              109,101,97,110,32,116,104,97,
                                              116,32,78,73,70,32,108,105,98,
                                              114,97,114,105,101,115,32,109,
                                              117,115,116,32,98,101,32,115,
                                              108,105,103,104,116,108,121,32,
                                              109,111,100,105,102,105,101,100,
                                              46,32,73,102,32,115,111,44,32,
                                              116,104,105,115,32,119,105,108,
                                              108,32,111,102,32,99,111,117,
                                              114,115,101,32,98,101,32,100,
                                              111,99,117,109,101,110,116,101,
                                              100,46]}],
                                           0,false}],
                                         0,false}],
                                       0,true},
                                      null},
                                     null}},
                                   {text,[5,60,47,100,100,62]}],
                                  0,true},
                                 null},
                                null}}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{text,[4,60,100,116,62]},
                                  {sep,
                                   [{text,
                                     [21,69,82,76,95,78,73,70,95,77,73,78,79,
                                      82,95,86,69,82,83,73,79,78]}],
                                   0,false},
                                  {text,[5,60,47,100,116,62]}],
                                 0,true},
                                null},
                               null}}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,100,62]},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{sep,
                                       [{text,
                                         "uIncremented when new features are added. The runtime system uses the minor version to determine what features to use."}],
                                       0,false}],
                                     0,true},
                                    null},
                                   null}},
                                 {text,[5,60,47,100,100,62]}],
                                0,true},
                               null},
                              null}}}}},
                         {text,[5,60,47,100,108,62]}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{text,
                                [443,84,104,101,32,114,117,110,116,105,109,
                                 101,32,115,121,115,116,101,109,32,110,111,
                                 114,109,97,108,108,121,32,114,101,102,117,
                                 115,101,115,32,116,111,32,108,111,97,100,32,
                                 97,32,78,73,70,32,108,105,98,114,97,114,121,
                                 32,105,102,32,116,104,101,32,109,97,106,111,
                                 114,32,118,101,114,115,105,111,110,115,32,
                                 100,105,102,102,101,114,44,32,111,114,32,105,
                                 102,32,116,104,101,32,109,97,106,111,114,32,
                                 118,101,114,115,105,111,110,115,32,97,114,
                                 101,32,101,113,117,97,108,32,97,110,100,32,
                                 116,104,101,32,109,105,110,111,114,32,118,
                                 101,114,115,105,111,110,32,117,115,101,100,
                                 32,98,121,32,116,104,101,32,78,73,70,32,108,
                                 105,98,114,97,114,121,32,105,115,32,103,114,
                                 101,97,116,101,114,32,116,104,97,110,32,116,
                                 104,101,32,111,110,101,32,117,115,101,100,32,
                                 98,121,32,116,104,101,32,114,117,110,116,105,
                                 109,101,32,115,121,115,116,101,109,46,32,79,
                                 108,100,32,78,73,70,32,108,105,98,114,97,114,
                                 105,101,115,32,119,105,116,104,32,108,111,
                                 119,101,114,32,109,97,106,111,114,32,118,101,
                                 114,115,105,111,110,115,32,97,114,101,44,32,
                                 104,111,119,101,118,101,114,44,32,97,108,108,
                                 111,119,101,100,32,97,102,116,101,114,32,97,
                                 32,98,117,109,112,32,111,102,32,116,104,101,
                                 32,109,97,106,111,114,32,118,101,114,115,105,
                                 111,110,32,100,117,114,105,110,103,32,97,32,
                                 116,114,97,110,115,105,116,105,111,110,32,
                                 112,101,114,105,111,100,32,111,102,32,116,
                                 119,111,32,109,97,106,111,114,32,114,101,108,
                                 101,97,115,101,115,46,32,83,117,99,104,32,
                                 111,108,100,32,78,73,70,32,108,105,98,114,97,
                                 114,105,101,115,32,99,97,110,32,104,111,119,
                                 101,118,101,114,32,102,97,105,108,32,105,102,
                                 32,100,101,112,114,101,99,97,116,101,100,32,
                                 102,101,97,116,117,114,101,115,32,97,114,101,
                                 32,117,115,101,100,46]}],
                              0,false}],
                            0,true},
                           null},
                          null}}],
                       0,false},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{sep,
                        [{text,
                          [16,116,105,109,101,95,109,101,97,115,117,114,101,
                           109,101,110,116]},
                         {sep,
                          [{text,
                            [16,84,105,109,101,32,77,101,97,115,117,114,101,
                             109,101,110,116]}],
                          0,false}],
                        0,false}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {sep,
                     [{above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{text,
                              ".Support for time measurement in NIF libraries:"}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {above,
                       {above,
                        {above,
                         {above,
                          {sep,[{text,[1,42]},{text,"\nErlNifTime"}],0,false},
                          {sep,
                           [{text,[1,42]},
                            {text,
                             [14,69,114,108,78,105,102,84,105,109,101,85,110,
                              105,116]}],
                           0,false}},
                         {sep,
                          [{text,[1,42]},
                           {text,
                            [19,101,110,105,102,95,109,111,110,111,116,111,
                             110,105,99,95,116,105,109,101]}],
                          0,false}},
                        {sep,
                         [{text,[1,42]},
                          {text,
                           [16,101,110,105,102,95,116,105,109,101,95,111,102,
                            102,115,101,116]}],
                         0,false}},
                       {sep,
                        [{text,[1,42]},
                         {text,
                          [22,101,110,105,102,95,99,111,110,118,101,114,116,
                           95,116,105,109,101,95,117,110,105,116]}],
                        0,false}}],
                     0,false},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,
                    [{sep,
                      [{text,"\benif_ioq"},
                       {sep,[{text,"\nI/O Queues"}],0,false}],
                      0,false}],
                    0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {sep,
                   [{above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{sep,
                            [{text,
                              "lThe Erlang nif library contains function for easily working with I/O vectors as used by the unix system call"}],
                            0,false},
                           {text,[6,119,114,105,116,101,118]},
                           {sep,
                            [{text,
                              "[. The I/O Queue is not thread safe, so some other synchronization mechanism has to be used."}],
                            0,false}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,
                            {above,
                             {above,
                              {sep,
                               [{text,[1,42]},{text,"\bSysIOVec"}],
                               0,false},
                              {sep,
                               [{text,[1,42]},{text,"\vErlNifIOVec"}],
                               0,false}},
                             {sep,
                              [{text,[1,42]},
                               {text,
                                [15,101,110,105,102,95,105,111,113,95,99,114,
                                 101,97,116,101]}],
                              0,false}},
                            {sep,
                             [{text,[1,42]},
                              {text,
                               [16,101,110,105,102,95,105,111,113,95,100,101,
                                115,116,114,111,121]}],
                             0,false}},
                           {sep,
                            [{text,[1,42]},
                             {text,
                              [19,101,110,105,102,95,105,111,113,95,101,110,
                               113,95,98,105,110,97,114,121]}],
                            0,false}},
                          {sep,
                           [{text,[1,42]},{text,"\renif_ioq_enqv"}],
                           0,false}},
                         {sep,
                          [{text,[1,42]},{text,"\fenif_ioq_deq"}],
                          0,false}},
                        {sep,
                         [{text,[1,42]},{text,"\renif_ioq_peek"}],
                         0,false}},
                       {sep,
                        [{text,[1,42]},
                         {text,
                          [18,101,110,105,102,95,105,111,113,95,112,101,101,
                           107,95,104,101,97,100]}],
                        0,false}},
                      {sep,
                       [{text,[1,42]},
                        {text,
                         [18,101,110,105,102,95,105,110,115,112,101,99,116,95,
                          105,111,118,101,99]}],
                       0,false}},
                     {sep,
                      [{text,[1,42]},
                       {text,
                        [15,101,110,105,102,95,102,114,101,101,95,105,111,118,
                         101,99]}],
                      0,false}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,
                            "@Typical usage when writing to a file descriptor looks like this:"}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {above,
                        {above,
                         {text,[3,96,96,96]},
                         {sep,
                          [{text,
                            [1340,10,105,110,116,32,119,114,105,116,101,105,
                             111,118,101,99,40,69,114,108,78,105,102,69,110,
                             118,32,42,101,110,118,44,32,69,82,76,95,78,73,70,
                             95,84,69,82,77,32,116,101,114,109,44,32,69,82,76,
                             95,78,73,70,95,84,69,82,77,32,42,116,97,105,108,
                             44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                             32,69,114,108,78,105,102,73,79,81,117,101,117,
                             101,32,42,113,44,32,105,110,116,32,102,100,41,32,
                             123,10,10,32,32,32,32,69,114,108,78,105,102,73,
                             79,86,101,99,32,118,101,99,44,32,42,105,111,118,
                             101,99,32,61,32,38,118,101,99,59,10,32,32,32,32,
                             83,121,115,73,79,86,101,99,32,42,115,121,115,105,
                             111,118,101,99,59,10,32,32,32,32,105,110,116,32,
                             115,97,118,101,100,95,101,114,114,110,111,59,10,
                             32,32,32,32,105,110,116,32,105,111,118,99,110,
                             116,44,32,110,59,10,10,32,32,32,32,105,102,32,40,
                             33,101,110,105,102,95,105,110,115,112,101,99,116,
                             95,105,111,118,101,99,40,101,110,118,44,32,54,52,
                             44,32,116,101,114,109,44,32,116,97,105,108,44,32,
                             38,105,111,118,101,99,41,41,10,32,32,32,32,32,32,
                             32,32,114,101,116,117,114,110,32,45,50,59,10,10,
                             32,32,32,32,105,102,32,40,101,110,105,102,95,105,
                             111,113,95,115,105,122,101,40,113,41,32,62,32,48,
                             41,32,123,10,32,32,32,32,32,32,32,32,47,42,32,73,
                             102,32,116,104,101,32,73,47,79,32,113,117,101,
                             117,101,32,99,111,110,116,97,105,110,115,32,100,
                             97,116,97,32,119,101,32,101,110,113,117,101,117,
                             101,32,116,104,101,32,105,111,118,101,99,32,97,
                             110,100,10,32,32,32,32,32,32,32,32,32,32,32,116,
                             104,101,110,32,112,101,101,107,32,116,104,101,32,
                             100,97,116,97,32,116,111,32,119,114,105,116,101,
                             32,111,117,116,32,111,102,32,116,104,101,32,113,
                             117,101,117,101,46,32,42,47,10,32,32,32,32,32,32,
                             32,32,105,102,32,40,33,101,110,105,102,95,105,
                             111,113,95,101,110,113,118,40,113,44,32,105,111,
                             118,101,99,44,32,48,41,41,10,32,32,32,32,32,32,
                             32,32,32,32,32,32,114,101,116,117,114,110,32,45,
                             51,59,10,10,32,32,32,32,32,32,32,32,115,121,115,
                             105,111,118,101,99,32,61,32,101,110,105,102,95,
                             105,111,113,95,112,101,101,107,40,113,44,32,38,
                             105,111,118,99,110,116,41,59,10,32,32,32,32,125,
                             32,101,108,115,101,32,123,10,32,32,32,32,32,32,
                             32,32,47,42,32,73,102,32,116,104,101,32,73,47,79,
                             32,113,117,101,117,101,32,105,115,32,101,109,112,
                             116,121,32,119,101,32,115,107,105,112,32,116,104,
                             101,32,116,114,105,112,32,116,104,114,111,117,
                             103,104,32,105,116,46,32,42,47,10,32,32,32,32,32,
                             32,32,32,105,111,118,99,110,116,32,61,32,105,111,
                             118,101,99,45,62,105,111,118,99,110,116,59,10,32,
                             32,32,32,32,32,32,32,115,121,115,105,111,118,101,
                             99,32,61,32,105,111,118,101,99,45,62,105,111,118,
                             59,10,32,32,32,32,125,10,10,32,32,32,32,47,42,32,
                             65,116,116,101,109,112,116,32,116,111,32,119,114,
                             105,116,101,32,116,104,101,32,100,97,116,97,32,
                             42,47,10,32,32,32,32,110,32,61,32,119,114,105,
                             116,101,118,40,102,100,44,32,115,121,115,105,111,
                             118,101,99,44,32,105,111,118,99,110,116,41,59,10,
                             32,32,32,32,115,97,118,101,100,95,101,114,114,
                             110,111,32,61,32,101,114,114,110,111,59,10,10,32,
                             32,32,32,105,102,32,40,101,110,105,102,95,105,
                             111,113,95,115,105,122,101,40,113,41,32,61,61,32,
                             48,41,32,123,10,32,32,32,32,32,32,32,32,47,42,32,
                             73,102,32,116,104,101,32,73,47,79,32,113,117,101,
                             117,101,32,119,97,115,32,105,110,105,116,105,97,
                             108,108,121,32,101,109,112,116,121,32,119,101,32,
                             101,110,113,117,101,117,101,32,97,110,121,10,32,
                             32,32,32,32,32,32,32,32,32,32,114,101,109,97,105,
                             110,105,110,103,32,100,97,116,97,32,105,110,116,
                             111,32,116,104,101,32,113,117,101,117,101,32,102,
                             111,114,32,119,114,105,116,105,110,103,32,108,97,
                             116,101,114,46,32,42,47,10,32,32,32,32,32,32,32,
                             32,105,102,32,40,110,32,62,61,32,48,32,38,38,32,
                             33,101,110,105,102,95,105,111,113,95,101,110,113,
                             118,40,113,44,32,105,111,118,101,99,44,32,110,41,
                             41,10,32,32,32,32,32,32,32,32,32,32,32,32,114,
                             101,116,117,114,110,32,45,51,59,10,32,32,32,32,
                             125,32,101,108,115,101,32,123,10,32,32,32,32,32,
                             32,32,32,47,42,32,68,101,113,117,101,117,101,32,
                             97,110,121,32,100,97,116,97,32,116,104,97,116,32,
                             119,97,115,32,119,114,105,116,116,101,110,32,102,
                             114,111,109,32,116,104,101,32,113,117,101,117,
                             101,46,32,42,47,10,32,32,32,32,32,32,32,32,105,
                             102,32,40,110,32,62,32,48,32,38,38,32,33,101,110,
                             105,102,95,105,111,113,95,100,101,113,40,113,44,
                             32,110,44,32,78,85,76,76,41,41,10,32,32,32,32,32,
                             32,32,32,32,32,32,32,114,101,116,117,114,110,32,
                             45,52,59,10,32,32,32,32,125,10,10,32,32,32,32,47,
                             42,32,114,101,116,117,114,110,32,110,44,32,119,
                             104,105,99,104,32,105,115,32,101,105,116,104,101,
                             114,32,110,117,109,98,101,114,32,111,102,32,98,
                             121,116,101,115,32,119,114,105,116,116,101,110,
                             32,111,114,32,45,49,32,105,102,10,32,32,32,32,32,
                             32,32,115,111,109,101,32,101,114,114,111,114,32,
                             104,97,112,112,101,110,101,100,32,42,47,10,32,32,
                             32,32,101,114,114,110,111,32,61,32,115,97,118,
                             101,100,95,101,114,114,110,111,59,10,32,32,32,32,
                             114,101,116,117,114,110,32,110,59,10,125]}],
                          0,true}},
                        {text,[3,96,96,96]}},
                       null},
                      null}}],
                   0,false},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{sep,
                    [{text,"\flengthy_work"},
                     {sep,
                      [{text,
                        [17,76,111,110,103,45,114,117,110,110,105,110,103,32,
                         78,73,70,115]}],
                      0,false}],
                    0,false}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            [19,65,115,32,109,101,110,116,105,111,110,101,100,
                             32,105,110,32,116,104,101]}],
                          0,false},
                         {text,[7,119,97,114,110,105,110,103]},
                         {sep,
                          [{text,
                            "3text at the beginning of this manual page, it is of"}],
                          0,false},
                         {text,
                          [16,118,105,116,97,108,32,105,109,112,111,114,116,
                           97,110,99,101]},
                         {sep,
                          [{text,
                            [563,116,104,97,116,32,97,32,110,97,116,105,118,
                             101,32,102,117,110,99,116,105,111,110,32,114,101,
                             116,117,114,110,115,32,114,101,108,97,116,105,
                             118,101,108,121,32,102,97,115,116,46,32,73,116,
                             32,105,115,32,100,105,102,102,105,99,117,108,116,
                             32,116,111,32,103,105,118,101,32,97,110,32,101,
                             120,97,99,116,32,109,97,120,105,109,117,109,32,
                             97,109,111,117,110,116,32,111,102,32,116,105,109,
                             101,32,116,104,97,116,32,97,32,110,97,116,105,
                             118,101,32,102,117,110,99,116,105,111,110,32,105,
                             115,32,97,108,108,111,119,101,100,32,116,111,32,
                             119,111,114,107,44,32,98,117,116,32,117,115,117,
                             97,108,108,121,32,97,32,119,101,108,108,45,98,
                             101,104,97,118,105,110,103,32,110,97,116,105,118,
                             101,32,102,117,110,99,116,105,111,110,32,105,115,
                             32,116,111,32,114,101,116,117,114,110,32,116,111,
                             32,105,116,115,32,99,97,108,108,101,114,32,119,
                             105,116,104,105,110,32,49,32,109,105,108,108,105,
                             115,101,99,111,110,100,46,32,84,104,105,115,32,
                             99,97,110,32,98,101,32,97,99,104,105,101,118,101,
                             100,32,117,115,105,110,103,32,100,105,102,102,
                             101,114,101,110,116,32,97,112,112,114,111,97,99,
                             104,101,115,46,32,73,102,32,121,111,117,32,104,
                             97,118,101,32,102,117,108,108,32,99,111,110,116,
                             114,111,108,32,111,118,101,114,32,116,104,101,32,
                             99,111,100,101,32,116,111,32,101,120,101,99,117,
                             116,101,32,105,110,32,116,104,101,32,110,97,116,
                             105,118,101,32,102,117,110,99,116,105,111,110,44,
                             32,116,104,101,32,98,101,115,116,32,97,112,112,
                             114,111,97,99,104,32,105,115,32,116,111,32,100,
                             105,118,105,100,101,32,116,104,101,32,119,111,
                             114,107,32,105,110,116,111,32,109,117,108,116,
                             105,112,108,101,32,99,104,117,110,107,115,32,111,
                             102,32,119,111,114,107,32,97,110,100,32,99,97,
                             108,108,32,116,104,101,32,110,97,116,105,118,101,
                             32,102,117,110,99,116,105,111,110,32,109,117,108,
                             116,105,112,108,101,32,116,105,109,101,115,46,32,
                             84,104,105,115,32,105,115,44,32,104,111,119,101,
                             118,101,114,44,32,110,111,116,32,97,108,119,97,
                             121,115,32,112,111,115,115,105,98,108,101,44,32,
                             102,111,114,32,101,120,97,109,112,108,101,32,119,
                             104,101,110,32,99,97,108,108,105,110,103,32,116,
                             104,105,114,100,45,112,97,114,116,121,32,108,105,
                             98,114,97,114,105,101,115,46]}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,[{text,[3,84,104,101]}],0,false},
                         {text,
                          [22,101,110,105,102,95,99,111,110,115,117,109,101,
                           95,116,105,109,101,115,108,105,99,101]},
                         {sep,
                          [{text,
                            [152,102,117,110,99,116,105,111,110,32,99,97,110,
                             32,98,101,32,117,115,101,100,32,116,111,32,105,
                             110,102,111,114,109,32,116,104,101,32,114,117,
                             110,116,105,109,101,32,115,121,115,116,101,109,
                             32,97,98,111,117,116,32,116,104,101,32,108,101,
                             110,103,116,104,32,111,102,32,116,104,101,32,78,
                             73,70,32,99,97,108,108,46,32,73,116,32,105,115,
                             32,116,121,112,105,99,97,108,108,121,32,97,108,
                             119,97,121,115,32,116,111,32,98,101,32,117,115,
                             101,100,32,117,110,108,101,115,115,32,116,104,
                             101,32,78,73,70,32,101,120,101,99,117,116,101,
                             115,32,118,101,114,121,32,102,97,115,116,46]}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "³If the NIF call is too lengthy, this must be handled in one of the following ways to avoid degraded responsiveness, scheduler load balancing problems, and other strange behaviors:"}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,
                    {text,[4,60,100,108,62]},
                    {nest,4,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,116,62]},
                               {sep,[{text,"\fYielding NIF"}],0,false},
                               {text,[5,60,47,100,116,62]}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,100,62]},
                               {sep,
                                [{above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{sep,
                                       [{text,
                                         " If the functionality of a long-running NIF can be split so that its work can be achieved through a series of shorter NIF calls, the application has two options:"}],
                                       0,false}],
                                     0,true},
                                    null},
                                   null}},
                                 {above,
                                  {sep,
                                   [{text,[1,42]},
                                    {sep,
                                     [{text,
                                       "4Make that series of NIF calls from the Erlang level."}],
                                     0,false}],
                                   0,false},
                                  {sep,
                                   [{text,[1,42]},
                                    {sep,
                                     [{sep,
                                       [{text,
                                         "DCall a NIF that first performs a chunk of the work, then invokes the"}],
                                       0,false},
                                      {text,
                                       [17,101,110,105,102,95,115,99,104,101,
                                        100,117,108,101,95,110,105,102]},
                                      {sep,
                                       [{text,
                                         [140,102,117,110,99,116,105,111,110,
                                          32,116,111,32,115,99,104,101,100,
                                          117,108,101,32,97,110,111,116,104,
                                          101,114,32,78,73,70,32,99,97,108,
                                          108,32,116,111,32,112,101,114,102,
                                          111,114,109,32,116,104,101,32,110,
                                          101,120,116,32,99,104,117,110,107,
                                          46,32,84,104,101,32,102,105,110,97,
                                          108,32,99,97,108,108,32,115,99,104,
                                          101,100,117,108,101,100,32,105,110,
                                          32,116,104,105,115,32,109,97,110,
                                          110,101,114,32,99,97,110,32,116,104,
                                          101,110,32,114,101,116,117,114,110,
                                          32,116,104,101,32,111,118,101,114,
                                          97,108,108,32,114,101,115,117,108,
                                          116,46]}],
                                       0,false}],
                                     0,false}],
                                   0,false}},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{sep,
                                       [{text,
                                         "nBreaking up a long-running function in this manner enables the VM to regain control between calls to the NIFs."}],
                                       0,false}],
                                     0,true},
                                    null},
                                   null}},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{sep,
                                       [{text,
                                         "¡This approach is always preferred over the other alternatives described below. This both from a performance perspective and a system characteristics perspective."}],
                                       0,false}],
                                     0,true},
                                    null},
                                   null}}],
                                0,false},
                               {text,[5,60,47,100,100,62]}],
                              0,true},
                             null},
                            null}}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,116,62]},
                              {sep,[{text,"\fThreaded NIF"}],0,false},
                              {text,[5,60,47,100,116,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,100,62]},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{sep,
                                     [{text,
                                       "ÈThis is accomplished by dispatching the work to another thread managed by the NIF library, return from the NIF, and wait for the result. The thread can send the result back to the Erlang process using"}],
                                     0,false},
                                    {text,"\tenif_send"},
                                    {sep,
                                     [{text,
                                       "8. Information about thread primitives is provided below."}],
                                     0,false}],
                                   0,false}],
                                 0,true},
                                null},
                               null}},
                             {text,[5,60,47,100,100,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,116,62]},
                            {sep,
                             [{sep,
                               [{text,"\ndirty_nifs"},
                                {sep,[{text,"\tDirty NIF"}],0,false}],
                               0,false}],
                             0,false},
                            {text,[5,60,47,100,116,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,100,62]},
                           {sep,
                            [{sep,
                              [{above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{sep,
                                     [{sep,
                                       [{text,
                                         "ûDirty NIF support is available only when the emulator is configured with dirty scheduler support. As of ERTS version 9.0, dirty scheduler support is enabled by default on the runtime system with SMP support. The Erlang runtime without SMP support does"}],
                                       0,false},
                                      {text,[3,110,111,116]},
                                      {sep,
                                       [{text,
                                         "§support dirty schedulers even when the dirty scheduler support is explicitly enabled. To check at runtime for the presence of dirty scheduler threads, code can use the"}],
                                       0,false},
                                      {text,
                                       [16,101,110,105,102,95,115,121,115,116,
                                        101,109,95,105,110,102,111]},
                                      {sep,
                                       [{text,"\rAPI function."}],
                                       0,false}],
                                     0,false}],
                                   0,true},
                                  null},
                                 null}}],
                              0,false},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{text,
                                     [534,65,32,78,73,70,32,116,104,97,116,32,
                                      99,97,110,110,111,116,32,98,101,32,115,
                                      112,108,105,116,32,97,110,100,32,99,97,
                                      110,110,111,116,32,101,120,101,99,117,
                                      116,101,32,105,110,32,97,32,109,105,108,
                                      108,105,115,101,99,111,110,100,32,111,
                                      114,32,108,101,115,115,32,105,115,32,99,
                                      97,108,108,101,100,32,97,32,34,100,105,
                                      114,116,121,32,78,73,70,34,44,32,97,115,
                                      32,105,116,32,112,101,114,102,111,114,
                                      109,115,32,119,111,114,107,32,116,104,
                                      97,116,32,116,104,101,32,111,114,100,
                                      105,110,97,114,121,32,115,99,104,101,
                                      100,117,108,101,114,115,32,111,102,32,
                                      116,104,101,32,69,114,108,97,110,103,32,
                                      114,117,110,116,105,109,101,32,115,121,
                                      115,116,101,109,32,99,97,110,110,111,
                                      116,32,104,97,110,100,108,101,32,99,108,
                                      101,97,110,108,121,46,32,65,112,112,108,
                                      105,99,97,116,105,111,110,115,32,116,
                                      104,97,116,32,109,97,107,101,32,117,115,
                                      101,32,111,102,32,115,117,99,104,32,102,
                                      117,110,99,116,105,111,110,115,32,109,
                                      117,115,116,32,105,110,100,105,99,97,
                                      116,101,32,116,111,32,116,104,101,32,
                                      114,117,110,116,105,109,101,32,116,104,
                                      97,116,32,116,104,101,32,102,117,110,99,
                                      116,105,111,110,115,32,97,114,101,32,
                                      100,105,114,116,121,32,115,111,32,116,
                                      104,101,121,32,99,97,110,32,98,101,32,
                                      104,97,110,100,108,101,100,32,115,112,
                                      101,99,105,97,108,108,121,46,32,84,104,
                                      105,115,32,105,115,32,104,97,110,100,
                                      108,101,100,32,98,121,32,101,120,101,99,
                                      117,116,105,110,103,32,100,105,114,116,
                                      121,32,106,111,98,115,32,111,110,32,97,
                                      32,115,101,112,97,114,97,116,101,32,115,
                                      101,116,32,111,102,32,115,99,104,101,
                                      100,117,108,101,114,115,32,99,97,108,
                                      108,101,100,32,100,105,114,116,121,32,
                                      115,99,104,101,100,117,108,101,114,115,
                                      46,32,65,32,100,105,114,116,121,32,78,
                                      73,70,32,101,120,101,99,117,116,105,110,
                                      103,32,111,110,32,97,32,100,105,114,116,
                                      121,32,115,99,104,101,100,117,108,101,
                                      114,32,100,111,101,115,32,110,111,116,
                                      32,104,97,118,101,32,116,104,101,32,115,
                                      97,109,101,32,100,117,114,97,116,105,
                                      111,110,32,114,101,115,116,114,105,99,
                                      116,105,111,110,32,97,115,32,97,32,110,
                                      111,114,109,97,108,32,78,73,70,46]}],
                                   0,false}],
                                 0,true},
                                null},
                               null}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{text,
                                     [371,73,116,32,105,115,32,105,109,112,
                                      111,114,116,97,110,116,32,116,111,32,99,
                                      108,97,115,115,105,102,121,32,116,104,
                                      101,32,100,105,114,116,121,32,106,111,
                                      98,32,99,111,114,114,101,99,116,46,32,
                                      65,110,32,73,47,79,32,98,111,117,110,
                                      100,32,106,111,98,32,115,104,111,117,
                                      108,100,32,98,101,32,99,108,97,115,115,
                                      105,102,105,101,100,32,97,115,32,115,
                                      117,99,104,44,32,97,110,100,32,97,32,67,
                                      80,85,32,98,111,117,110,100,32,106,111,
                                      98,32,115,104,111,117,108,100,32,98,101,
                                      32,99,108,97,115,115,105,102,105,101,
                                      100,32,97,115,32,115,117,99,104,46,32,
                                      73,102,32,121,111,117,32,115,104,111,
                                      117,108,100,32,99,108,97,115,115,105,
                                      102,121,32,67,80,85,32,98,111,117,110,
                                      100,32,106,111,98,115,32,97,115,32,73,
                                      47,79,32,98,111,117,110,100,32,106,111,
                                      98,115,44,32,100,105,114,116,121,32,73,
                                      47,79,32,115,99,104,101,100,117,108,101,
                                      114,115,32,109,105,103,104,116,32,115,
                                      116,97,114,118,101,32,111,114,100,105,
                                      110,97,114,121,32,115,99,104,101,100,
                                      117,108,101,114,115,46,32,73,47,79,32,
                                      98,111,117,110,100,32,106,111,98,115,32,
                                      97,114,101,32,101,120,112,101,99,116,
                                      101,100,32,116,111,32,101,105,116,104,
                                      101,114,32,98,108,111,99,107,32,119,97,
                                      105,116,105,110,103,32,102,111,114,32,
                                      73,47,79,44,32,97,110,100,47,111,114,32,
                                      115,112,101,110,100,32,97,32,108,105,
                                      109,105,116,101,100,32,97,109,111,117,
                                      110,116,32,111,102,32,116,105,109,101,
                                      32,109,111,118,105,110,103,32,100,97,
                                      116,97,46]}],
                                   0,false}],
                                 0,true},
                                null},
                               null}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{text,
                                     "GTo schedule a dirty NIF for execution, the application has two options:"}],
                                   0,false}],
                                 0,true},
                                null},
                               null}},
                             {above,
                              {sep,
                               [{text,[1,42]},
                                {sep,
                                 [{sep,
                                   [{text,
                                     "8Set the appropriate flags value for the dirty NIF in its"}],
                                   0,false},
                                  {text,"\nErlNifFunc"},
                                  {sep,
                                   [{text,[6,101,110,116,114,121,46]}],
                                   0,false}],
                                 0,false}],
                               0,false},
                              {sep,
                               [{text,[1,42]},
                                {sep,
                                 [{sep,[{text,[4,67,97,108,108]}],0,false},
                                  {text,
                                   [17,101,110,105,102,95,115,99,104,101,100,
                                    117,108,101,95,110,105,102]},
                                  {sep,
                                   [{text,
                                     "R, pass to it a pointer to the dirty NIF to be executed, and indicate with argument"}],
                                   0,false},
                                  {text,[5,102,108,97,103,115]},
                                  {sep,
                                   [{text,
                                     ">whether it expects the operation to be CPU-bound or I/O-bound."}],
                                   0,false}],
                                 0,false}],
                               0,false}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{sep,
                                     [{text,
                                       "_A job that alternates between I/O bound and CPU bound can be reclassified and rescheduled using"}],
                                     0,false},
                                    {text,
                                     [17,101,110,105,102,95,115,99,104,101,
                                      100,117,108,101,95,110,105,102]},
                                    {sep,
                                     [{text,
                                       "zso that it executes on the correct type of dirty scheduler at all times. For more information see the documentation of the"}],
                                     0,false},
                                    {text,[6,101,114,108,40,49,41]},
                                    {sep,
                                     [{text,
                                       [22,99,111,109,109,97,110,100,32,108,
                                        105,110,101,32,97,114,103,117,109,101,
                                        110,116,115]}],
                                     0,false},
                                    {text,"\nerl#+SDcpu"},
                                    {sep,
                                     [{text,[5,44,32,97,110,100]}],
                                     0,false},
                                    {text,"\terl#+SDio"},
                                    {sep,[{text,[1,46]}],0,false}],
                                   0,false}],
                                 0,true},
                                null},
                               null}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{sep,
                                     [{text,
                                       [378,87,104,105,108,101,32,97,32,112,
                                        114,111,99,101,115,115,32,101,120,101,
                                        99,117,116,101,115,32,97,32,100,105,
                                        114,116,121,32,78,73,70,44,32,115,111,
                                        109,101,32,111,112,101,114,97,116,105,
                                        111,110,115,32,116,104,97,116,32,99,
                                        111,109,109,117,110,105,99,97,116,101,
                                        32,119,105,116,104,32,105,116,32,99,
                                        97,110,32,116,97,107,101,32,97,32,118,
                                        101,114,121,32,108,111,110,103,32,116,
                                        105,109,101,32,116,111,32,99,111,109,
                                        112,108,101,116,101,46,32,83,117,115,
                                        112,101,110,100,32,111,114,32,103,97,
                                        114,98,97,103,101,32,99,111,108,108,
                                        101,99,116,105,111,110,32,111,102,32,
                                        97,32,112,114,111,99,101,115,115,32,
                                        101,120,101,99,117,116,105,110,103,32,
                                        97,32,100,105,114,116,121,32,78,73,70,
                                        32,99,97,110,110,111,116,32,98,101,32,
                                        100,111,110,101,32,117,110,116,105,
                                        108,32,116,104,101,32,100,105,114,116,
                                        121,32,78,73,70,32,104,97,115,32,114,
                                        101,116,117,114,110,101,100,46,32,84,
                                        104,117,115,44,32,111,116,104,101,114,
                                        32,112,114,111,99,101,115,115,101,115,
                                        32,119,97,105,116,105,110,103,32,102,
                                        111,114,32,115,117,99,104,32,111,112,
                                        101,114,97,116,105,111,110,115,32,116,
                                        111,32,99,111,109,112,108,101,116,101,
                                        32,109,105,103,104,116,32,104,97,118,
                                        101,32,116,111,32,119,97,105,116,32,
                                        102,111,114,32,97,32,118,101,114,121,
                                        32,108,111,110,103,32,116,105,109,101,
                                        46,32,66,108,111,99,107,105,110,103,
                                        32,109,117,108,116,105,45,115,99,104,
                                        101,100,117,108,105,110,103,44,32,116,
                                        104,97,116,32,105,115,44,32,99,97,108,
                                        108,105,110,103]}],
                                     0,false},
                                    {text,
                                     "#erlang#system_flag_multi_scheduling"},
                                    {sep,
                                     [{text,
                                       "©, can also take a very long time to complete. This is because all ongoing dirty operations on all dirty schedulers must complete before the block operation can complete."}],
                                     0,false}],
                                   0,false}],
                                 0,true},
                                null},
                               null}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{sep,
                                     [{text,
                                       "¯Many operations communicating with a process executing a dirty NIF can, however, complete while it executes the dirty NIF. For example, retrieving information about it through"}],
                                     0,false},
                                    {text,
                                     [21,101,114,108,97,110,103,35,112,114,
                                      111,99,101,115,115,95,105,110,102,111,
                                      47,49]},
                                    {sep,
                                     [{text,
                                       "D, setting its group leader, register/unregister its name, and so on."}],
                                     0,false}],
                                   0,false}],
                                 0,true},
                                null},
                               null}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{sep,
                                   [{sep,
                                     [{text,
                                       [283,84,101,114,109,105,110,97,116,105,
                                        111,110,32,111,102,32,97,32,112,114,
                                        111,99,101,115,115,32,101,120,101,99,
                                        117,116,105,110,103,32,97,32,100,105,
                                        114,116,121,32,78,73,70,32,99,97,110,
                                        32,111,110,108,121,32,98,101,32,99,
                                        111,109,112,108,101,116,101,100,32,
                                        117,112,32,116,111,32,97,32,99,101,
                                        114,116,97,105,110,32,112,111,105,110,
                                        116,32,119,104,105,108,101,32,105,116,
                                        32,101,120,101,99,117,116,101,115,32,
                                        116,104,101,32,100,105,114,116,121,32,
                                        78,73,70,46,32,65,108,108,32,69,114,
                                        108,97,110,103,32,114,101,115,111,117,
                                        114,99,101,115,44,32,115,117,99,104,
                                        32,97,115,32,105,116,115,32,114,101,
                                        103,105,115,116,101,114,101,100,32,
                                        110,97,109,101,32,97,110,100,32,105,
                                        116,115,32,69,84,83,32,116,97,98,108,
                                        101,115,44,32,97,114,101,32,114,101,
                                        108,101,97,115,101,100,46,32,65,108,
                                        108,32,108,105,110,107,115,32,97,110,
                                        100,32,109,111,110,105,116,111,114,
                                        115,32,97,114,101,32,116,114,105,103,
                                        103,101,114,101,100,46,32,84,104,101,
                                        32,101,120,101,99,117,116,105,111,110,
                                        32,111,102,32,116,104,101,32,78,73,70,
                                        32,105,115,44,32,104,111,119,101,118,
                                        101,114,44]}],
                                     0,false},
                                    {text,[3,110,111,116]},
                                    {sep,
                                     [{text,
                                       "Ístopped. The NIF can safely continue execution, allocate heap memory, and so on, but it is of course better to stop executing as soon as possible. The NIF can check whether a current process is alive using"}],
                                     0,false},
                                    {text,
                                     [29,101,110,105,102,95,105,115,95,99,117,
                                      114,114,101,110,116,95,112,114,111,99,
                                      101,115,115,95,97,108,105,118,101]},
                                    {sep,
                                     [{text,
                                       [21,46,32,67,111,109,109,117,110,105,
                                        99,97,116,105,111,110,32,117,115,105,
                                        110,103]}],
                                     0,false},
                                    {text,"\tenif_send"},
                                    {sep,[{text,[3,97,110,100]}],0,false},
                                    {text,
                                     [17,101,110,105,102,95,112,111,114,116,
                                      95,99,111,109,109,97,110,100]},
                                    {sep,
                                     [{text,
                                       "Àis also dropped when the sending process is not alive. Deallocation of certain internal resources, such as process heap and process control block, is delayed until the dirty NIF has completed."}],
                                     0,false}],
                                   0,false}],
                                 0,true},
                                null},
                               null}}],
                            0,false},
                           {text,[5,60,47,100,100,62]}],
                          0,true},
                         null},
                        null}}}}},
                   {text,[5,60,47,100,108,62]}}],
                 0,false},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}}}},
        {text,[5,60,47,100,108,62]}}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,
          [17,35,35,32,73,110,105,116,105,97,108,105,122,97,116,105,111,110]},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{sep,
                        [{text,"\fERL_NIF_INIT"},
                         {text,
                          "EERL_NIF_INIT(MODULE, ErlNifFunc funcs[], load, NULL, upgrade, unload)"}],
                        0,false}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {sep,
                      [{above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,
                               "`This is the magic macro to initialize a NIF library. It is to be evaluated in global file scope."}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,[6,77,79,68,85,76,69]},
                              {sep,
                               [{text,
                                 "lis the name of the Erlang module as an identifier without string quotations. It is stringified by the macro."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,[5,102,117,110,99,115]},
                              {sep,
                               [{text,
                                 "Wis a static array of function descriptors for all the implemented NIFs in this library."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,[4,108,111,97,100]},
                              {sep,[{text,[1,44]}],0,false},
                              {text,[7,117,112,103,114,97,100,101]},
                              {sep,[{text,[3,97,110,100]}],0,false},
                              {text,[6,117,110,108,111,97,100]},
                              {sep,
                               [{text,"!are pointers to functions. One of"}],
                               0,false},
                              {text,[4,108,111,97,100]},
                              {sep,[{text,[2,111,114]}],0,false},
                              {text,[7,117,112,103,114,97,100,101]},
                              {sep,
                               [{text,
                                 "$is called to initialize the library."}],
                               0,false},
                              {text,[6,117,110,108,111,97,100]},
                              {sep,
                               [{text,
                                 "Gis called to release the library. All are described individually below."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 [19,84,104,101,32,102,111,117,114,116,104,32,
                                  97,114,103,117,109,101,110,116]}],
                               0,false},
                              {text,[4,78,85,76,76]},
                              {sep,
                               [{text,
                                 "2is ignored. It was earlier used for the deprecated"}],
                               0,false},
                              {text,[6,114,101,108,111,97,100]},
                              {sep,
                               [{text,
                                 "3callback which is no longer supported since OTP 20."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "/If compiling a NIF for static inclusion through"}],
                               0,false},
                              {text,
                               [20,45,45,101,110,97,98,108,101,45,115,116,97,
                                116,105,99,45,110,105,102,115]},
                              {sep,
                               [{text,
                                 [17,44,32,121,111,117,32,109,117,115,116,32,
                                  100,101,102,105,110,101]}],
                               0,false},
                              {text,
                               [17,83,84,65,84,73,67,95,69,82,76,65,78,71,95,
                                78,73,70]},
                              {sep,[{text,"\nbefore the"}],0,false},
                              {text,"\fERL_NIF_INIT"},
                              {sep,[{text,"\fdeclaration."}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}}],
                      0,false},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{sep,
                       [{text,[4,108,111,97,100]},
                        {text,
                         "Lint (*load)(ErlNifEnv* caller_env, void** priv_data, ERL_NIF_TERM load_info)"}],
                       0,false}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {sep,
                    [{above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{text,[4,108,111,97,100]},
                            {sep,
                             [{text,
                               "ais called when the NIF library is loaded and no previously loaded library exists for this module."}],
                             0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{text,"\n*priv_data"},
                            {sep,
                             [{text,
                               "`can be set to point to some private data if the library needs to keep a state between NIF calls."}],
                             0,false},
                            {text,
                             [14,101,110,105,102,95,112,114,105,118,95,100,97,
                              116,97]},
                            {sep,
                             [{text,
                               [21,114,101,116,117,114,110,115,32,116,104,105,
                                115,32,112,111,105,110,116,101,114,46]}],
                             0,false},
                            {text,"\n*priv_data"},
                            {sep,
                             [{text,
                               [17,105,115,32,105,110,105,116,105,97,108,105,
                                122,101,100,32,116,111]}],
                             0,false},
                            {text,[4,78,85,76,76]},
                            {sep,[{text,[4,119,104,101,110]}],0,false},
                            {text,[4,108,111,97,100]},
                            {sep,[{text,"\nis called."}],0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{text,"\tload_info"},
                            {sep,
                             [{text,
                               [25,105,115,32,116,104,101,32,115,101,99,111,
                                110,100,32,97,114,103,117,109,101,110,116,32,
                                116,111]}],
                             0,false},
                            {text,
                             [17,101,114,108,97,110,103,35,108,111,97,100,95,
                              110,105,102,45,50]},
                            {sep,[{text,[1,46]}],0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{sep,
                             [{text,
                               [28,84,104,101,32,108,105,98,114,97,114,121,32,
                                102,97,105,108,115,32,116,111,32,108,111,97,
                                100,32,105,102]}],
                             0,false},
                            {text,[4,108,111,97,100]},
                            {sep,
                             [{text,"\ereturns anything other than"}],
                             0,false},
                            {text,[1,48]},
                            {sep,[{text,[1,46]}],0,false},
                            {text,[4,108,111,97,100]},
                            {sep,[{text,[6,99,97,110,32,98,101]}],0,false},
                            {text,[4,78,85,76,76]},
                            {sep,
                             [{text," if initialization is not needed."}],
                             0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}}],
                    0,false},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,
                   [{sep,
                     [{text,[7,117,112,103,114,97,100,101]},
                      {text,
                       "eint (*upgrade)(ErlNifEnv* caller_env, void** priv_data, void** old_priv_data, ERL_NIF_TERM load_info)"}],
                     0,false}],
                   0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {sep,
                  [{above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{text,[7,117,112,103,114,97,100,101]},
                          {sep,
                           [{text,
                             "his called when the NIF library is loaded and there is old code of this module with a loaded NIF library."}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,[{text,"\bWorks as"}],0,false},
                          {text,[4,108,111,97,100]},
                          {sep,[{text,"\r, except that"}],0,false},
                          {text,
                           [14,42,111,108,100,95,112,114,105,118,95,100,97,
                            116,97]},
                          {sep,
                           [{text,
                             "2already contains the value set by the last call to"}],
                           0,false},
                          {text,[4,108,111,97,100]},
                          {sep,[{text,[2,111,114]}],0,false},
                          {text,[7,117,112,103,114,97,100,101]},
                          {sep,
                           [{text,
                             [24,102,111,114,32,116,104,101,32,111,108,100,32,
                              109,111,100,117,108,101,32,99,111,100,101,46]}],
                           0,false},
                          {text,"\n*priv_data"},
                          {sep,
                           [{text,
                             [17,105,115,32,105,110,105,116,105,97,108,105,
                              122,101,100,32,116,111]}],
                           0,false},
                          {text,[4,78,85,76,76]},
                          {sep,[{text,[4,119,104,101,110]}],0,false},
                          {text,[7,117,112,103,114,97,100,101]},
                          {sep,
                           [{text,
                             ")is called. It is allowed to write to both"}],
                           0,false},
                          {text,"\n*priv_data"},
                          {sep,[{text,[3,97,110,100]}],0,false},
                          {text,
                           [15,42,111,108,100,95,112,114,105,118,95,100,97,
                            116,97,46]}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,
                           [{text,
                             [28,84,104,101,32,108,105,98,114,97,114,121,32,
                              102,97,105,108,115,32,116,111,32,108,111,97,100,
                              32,105,102]}],
                           0,false},
                          {text,[7,117,112,103,114,97,100,101]},
                          {sep,
                           [{text,"\ereturns anything other than"}],
                           0,false},
                          {text,[1,48]},
                          {sep,[{text,[5,111,114,32,105,102]}],0,false},
                          {text,[7,117,112,103,114,97,100,101]},
                          {sep,[{text,[2,105,115]}],0,false},
                          {text,[4,78,85,76,76]},
                          {sep,[{text,[1,46]}],0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}}],
                  0,false},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,
                 [{sep,
                   [{text,[6,117,110,108,111,97,100]},
                    {text,
                     "6void (*unload)(ErlNifEnv* caller_env, void* priv_data)"}],
                   0,false}],
                 0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,[6,117,110,108,111,97,100]},
                      {sep,
                       [{text,
                         [130,105,115,32,99,97,108,108,101,100,32,119,104,101,
                          110,32,116,104,101,32,109,111,100,117,108,101,32,99,
                          111,100,101,32,116,104,97,116,32,116,104,101,32,78,
                          73,70,32,108,105,98,114,97,114,121,32,98,101,108,
                          111,110,103,115,32,116,111,32,105,115,32,112,117,
                          114,103,101,100,32,97,115,32,111,108,100,46,32,78,
                          101,119,32,99,111,100,101,32,111,102,32,116,104,101,
                          32,115,97,109,101,32,109,111,100,117,108,101,32,109,
                          97,121,32,111,114,32,109,97,121,32,110,111,116,32,
                          101,120,105,115,116,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\r## Data Types"},null},null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,
                            {above,
                             {above,
                              {above,
                               {above,
                                {above,
                                 {above,
                                  {above,
                                   {above,
                                    {above,
                                     {above,
                                      {above,
                                       {above,
                                        {above,
                                         {above,
                                          {above,
                                           {above,
                                            {above,
                                             {above,
                                              {above,
                                               {above,
                                                {above,
                                                 {above,
                                                  {above,
                                                   {above,
                                                    {above,
                                                     {above,
                                                      {above,
                                                       {above,
                                                        {above,
                                                         {above,
                                                          {text,[0]},
                                                          null},
                                                         null},
                                                        {above,
                                                         {above,
                                                          {sep,
                                                           [{text,
                                                             [4,60,100,116,
                                                              62]},
                                                            {sep,
                                                             [{sep,
                                                               [{text,
                                                                 "\fERL_NIF_TERM"},
                                                                {text,
                                                                 "\fERL_NIF_TERM"}],
                                                               0,false}],
                                                             0,false},
                                                            {text,
                                                             [5,60,47,100,116,
                                                              62]}],
                                                           0,true},
                                                          null},
                                                         null}},
                                                       {above,
                                                        {above,
                                                         {above,
                                                          {text,[0]},
                                                          null},
                                                         null},
                                                        {above,
                                                         {above,
                                                          {sep,
                                                           [{text,
                                                             [4,60,100,100,
                                                              62]},
                                                            {above,
                                                             {above,
                                                              {above,
                                                               {text,[0]},
                                                               null},
                                                              null},
                                                             {above,
                                                              {above,
                                                               {sep,
                                                                [{sep,
                                                                  [{sep,
                                                                    [{text,
                                                                      [17,86,
                                                                       97,114,
                                                                       105,97,
                                                                       98,108,
                                                                       101,
                                                                       115,32,
                                                                       111,
                                                                       102,32,
                                                                       116,
                                                                       121,
                                                                       112,
                                                                       101]}],
                                                                    0,false},
                                                                   {text,
                                                                    "\fERL_NIF_TERM"},
                                                                   {sep,
                                                                    [{text,
                                                                      [158,99,
                                                                       97,110,
                                                                       32,114,
                                                                       101,
                                                                       102,
                                                                       101,
                                                                       114,32,
                                                                       116,
                                                                       111,32,
                                                                       97,110,
                                                                       121,32,
                                                                       69,114,
                                                                       108,97,
                                                                       110,
                                                                       103,32,
                                                                       116,
                                                                       101,
                                                                       114,
                                                                       109,46,
                                                                       32,84,
                                                                       104,
                                                                       105,
                                                                       115,32,
                                                                       105,
                                                                       115,32,
                                                                       97,110,
                                                                       32,111,
                                                                       112,97,
                                                                       113,
                                                                       117,
                                                                       101,32,
                                                                       116,
                                                                       121,
                                                                       112,
                                                                       101,32,
                                                                       97,110,
                                                                       100,32,
                                                                       118,97,
                                                                       108,
                                                                       117,
                                                                       101,
                                                                       115,32,
                                                                       111,
                                                                       102,32,
                                                                       105,
                                                                       116,32,
                                                                       99,97,
                                                                       110,32,
                                                                       111,
                                                                       110,
                                                                       108,
                                                                       121,32,
                                                                       98,121,
                                                                       32,117,
                                                                       115,
                                                                       101,
                                                                       100,32,
                                                                       101,
                                                                       105,
                                                                       116,
                                                                       104,
                                                                       101,
                                                                       114,32,
                                                                       97,115,
                                                                       32,97,
                                                                       114,
                                                                       103,
                                                                       117,
                                                                       109,
                                                                       101,
                                                                       110,
                                                                       116,
                                                                       115,32,
                                                                       116,
                                                                       111,32,
                                                                       65,80,
                                                                       73,32,
                                                                       102,
                                                                       117,
                                                                       110,99,
                                                                       116,
                                                                       105,
                                                                       111,
                                                                       110,
                                                                       115,32,
                                                                       111,
                                                                       114,32,
                                                                       97,115,
                                                                       32,114,
                                                                       101,
                                                                       116,
                                                                       117,
                                                                       114,
                                                                       110,32,
                                                                       118,97,
                                                                       108,
                                                                       117,
                                                                       101,
                                                                       115,32,
                                                                       102,
                                                                       114,
                                                                       111,
                                                                       109,32,
                                                                       78,73,
                                                                       70,115,
                                                                       46,32,
                                                                       65,108,
                                                                       108]}],
                                                                    0,false},
                                                                   {text,
                                                                    "\fERL_NIF_TERM"},
                                                                   {sep,
                                                                    [{text,
                                                                      [28,115,
                                                                       32,98,
                                                                       101,
                                                                       108,
                                                                       111,
                                                                       110,
                                                                       103,32,
                                                                       116,
                                                                       111,32,
                                                                       97,110,
                                                                       32,101,
                                                                       110,
                                                                       118,
                                                                       105,
                                                                       114,
                                                                       111,
                                                                       110,
                                                                       109,
                                                                       101,
                                                                       110,
                                                                       116,32,
                                                                       40]}],
                                                                    0,false},
                                                                   {text,
                                                                    "\tErlNifEnv"},
                                                                   {sep,
                                                                    [{text,
                                                                      "]). A term cannot be destructed individually, it is valid until its environment is destructed."}],
                                                                    0,false}],
                                                                  0,false}],
                                                                0,true},
                                                               null},
                                                              null}},
                                                            {text,
                                                             [5,60,47,100,100,
                                                              62]}],
                                                           0,true},
                                                          null},
                                                         null}}},
                                                      {above,
                                                       {above,
                                                        {above,
                                                         {text,[0]},
                                                         null},
                                                        null},
                                                       {above,
                                                        {above,
                                                         {sep,
                                                          [{text,
                                                            [4,60,100,116,62]},
                                                           {sep,
                                                            [{sep,
                                                              [{text,
                                                                "\tErlNifEnv"},
                                                               {text,
                                                                "\tErlNifEnv"}],
                                                              0,false}],
                                                            0,false},
                                                           {text,
                                                            [5,60,47,100,116,
                                                             62]}],
                                                          0,true},
                                                         null},
                                                        null}}},
                                                     {above,
                                                      {above,
                                                       {above,{text,[0]},null},
                                                       null},
                                                      {above,
                                                       {above,
                                                        {sep,
                                                         [{text,
                                                           [4,60,100,100,62]},
                                                          {sep,
                                                           [{above,
                                                             {above,
                                                              {above,
                                                               {text,[0]},
                                                               null},
                                                              null},
                                                             {above,
                                                              {above,
                                                               {sep,
                                                                [{sep,
                                                                  [{text,
                                                                    "\tErlNifEnv"},
                                                                   {sep,
                                                                    [{text,
                                                                      [128,
                                                                       114,
                                                                       101,
                                                                       112,
                                                                       114,
                                                                       101,
                                                                       115,
                                                                       101,
                                                                       110,
                                                                       116,
                                                                       115,32,
                                                                       97,110,
                                                                       32,101,
                                                                       110,
                                                                       118,
                                                                       105,
                                                                       114,
                                                                       111,
                                                                       110,
                                                                       109,
                                                                       101,
                                                                       110,
                                                                       116,32,
                                                                       116,
                                                                       104,97,
                                                                       116,32,
                                                                       99,97,
                                                                       110,32,
                                                                       104,
                                                                       111,
                                                                       115,
                                                                       116,32,
                                                                       69,114,
                                                                       108,97,
                                                                       110,
                                                                       103,32,
                                                                       116,
                                                                       101,
                                                                       114,
                                                                       109,
                                                                       115,46,
                                                                       32,65,
                                                                       108,
                                                                       108,32,
                                                                       116,
                                                                       101,
                                                                       114,
                                                                       109,
                                                                       115,32,
                                                                       105,
                                                                       110,32,
                                                                       97,110,
                                                                       32,101,
                                                                       110,
                                                                       118,
                                                                       105,
                                                                       114,
                                                                       111,
                                                                       110,
                                                                       109,
                                                                       101,
                                                                       110,
                                                                       116,32,
                                                                       97,114,
                                                                       101,32,
                                                                       118,97,
                                                                       108,
                                                                       105,
                                                                       100,32,
                                                                       97,115,
                                                                       32,108,
                                                                       111,
                                                                       110,
                                                                       103,32,
                                                                       97,115,
                                                                       32,116,
                                                                       104,
                                                                       101,32,
                                                                       101,
                                                                       110,
                                                                       118,
                                                                       105,
                                                                       114,
                                                                       111,
                                                                       110,
                                                                       109,
                                                                       101,
                                                                       110,
                                                                       116,32,
                                                                       105,
                                                                       115,32,
                                                                       118,97,
                                                                       108,
                                                                       105,
                                                                       100,
                                                                       46]}],
                                                                    0,false},
                                                                   {text,
                                                                    "\tErlNifEnv"},
                                                                   {sep,
                                                                    [{text,
                                                                      "lis an opaque type; pointers to it can only be passed on to API functions. Three types of environments exist:"}],
                                                                    0,false}],
                                                                  0,false}],
                                                                0,true},
                                                               null},
                                                              null}},
                                                            {above,
                                                             {above,
                                                              {text,
                                                               [4,60,100,108,
                                                                62]},
                                                              {nest,4,
                                                               {above,
                                                                {above,
                                                                 {above,
                                                                  {above,
                                                                   {above,
                                                                    {above,
                                                                     {above,
                                                                      {above,
                                                                       {text,
                                                                        [0]},
                                                                       null},
                                                                      null},
                                                                     {above,
                                                                      {above,
                                                                       {sep,
                                                                        [{text,
                                                                          [4,
                                                                           60,
                                                                           100,
                                                                           116,
                                                                           62]},
                                                                         {sep,
                                                                          [{text,
                                                                            [25,
                                                                             80,
                                                                             114,
                                                                             111,
                                                                             99,
                                                                             101,
                                                                             115,
                                                                             115,
                                                                             32,
                                                                             98,
                                                                             111,
                                                                             117,
                                                                             110,
                                                                             100,
                                                                             32,
                                                                             101,
                                                                             110,
                                                                             118,
                                                                             105,
                                                                             114,
                                                                             111,
                                                                             110,
                                                                             109,
                                                                             101,
                                                                             110,
                                                                             116]}],
                                                                          0,
                                                                          false},
                                                                         {text,
                                                                          [5,
                                                                           60,
                                                                           47,
                                                                           100,
                                                                           116,
                                                                           62]}],
                                                                        0,
                                                                        true},
                                                                       null},
                                                                      null}},
                                                                    {above,
                                                                     {above,
                                                                      {above,
                                                                       {text,
                                                                        [0]},
                                                                       null},
                                                                      null},
                                                                     {above,
                                                                      {above,
                                                                       {sep,
                                                                        [{text,
                                                                          [4,
                                                                           60,
                                                                           100,
                                                                           100,
                                                                           62]},
                                                                         {sep,
                                                                          [{above,
                                                                            {above,
                                                                             {above,
                                                                              {text,
                                                                               [0]},
                                                                              null},
                                                                             null},
                                                                            {above,
                                                                             {above,
                                                                              {sep,
                                                                               [{sep,
                                                                                 [{text,
                                                                                   "¿Passed as the first argument to all NIFs. All function arguments passed to a NIF belong to that environment. The return value from a NIF must also be a term belonging to the same environment."}],
                                                                                 0,
                                                                                 false}],
                                                                               0,
                                                                               true},
                                                                              null},
                                                                             null}},
                                                                           {above,
                                                                            {above,
                                                                             {above,
                                                                              {text,
                                                                               [0]},
                                                                              null},
                                                                             null},
                                                                            {above,
                                                                             {above,
                                                                              {sep,
                                                                               [{sep,
                                                                                 [{text,
                                                                                   [293,
                                                                                    65,
                                                                                    32,
                                                                                    112,
                                                                                    114,
                                                                                    111,
                                                                                    99,
                                                                                    101,
                                                                                    115,
                                                                                    115,
                                                                                    32,
                                                                                    98,
                                                                                    111,
                                                                                    117,
                                                                                    110,
                                                                                    100,
                                                                                    32,
                                                                                    101,
                                                                                    110,
                                                                                    118,
                                                                                    105,
                                                                                    114,
                                                                                    111,
                                                                                    110,
                                                                                    109,
                                                                                    101,
                                                                                    110,
                                                                                    116,
                                                                                    32,
                                                                                    99,
                                                                                    111,
                                                                                    110,
                                                                                    116,
                                                                                    97,
                                                                                    105,
                                                                                    110,
                                                                                    115,
                                                                                    32,
                                                                                    116,
                                                                                    114,
                                                                                    97,
                                                                                    110,
                                                                                    115,
                                                                                    105,
                                                                                    101,
                                                                                    110,
                                                                                    116,
                                                                                    32,
                                                                                    105,
                                                                                    110,
                                                                                    102,
                                                                                    111,
                                                                                    114,
                                                                                    109,
                                                                                    97,
                                                                                    116,
                                                                                    105,
                                                                                    111,
                                                                                    110,
                                                                                    32,
                                                                                    97,
                                                                                    98,
                                                                                    111,
                                                                                    117,
                                                                                    116,
                                                                                    32,
                                                                                    116,
                                                                                    104,
                                                                                    101,
                                                                                    32,
                                                                                    99,
                                                                                    97,
                                                                                    108,
                                                                                    108,
                                                                                    105,
                                                                                    110,
                                                                                    103,
                                                                                    32,
                                                                                    69,
                                                                                    114,
                                                                                    108,
                                                                                    97,
                                                                                    110,
                                                                                    103,
                                                                                    32,
                                                                                    112,
                                                                                    114,
                                                                                    111,
                                                                                    99,
                                                                                    101,
                                                                                    115,
                                                                                    115,
                                                                                    46,
                                                                                    32,
                                                                                    84,
                                                                                    104,
                                                                                    101,
                                                                                    32,
                                                                                    101,
                                                                                    110,
                                                                                    118,
                                                                                    105,
                                                                                    114,
                                                                                    111,
                                                                                    110,
                                                                                    109,
                                                                                    101,
                                                                                    110,
                                                                                    116,
                                                                                    32,
                                                                                    105,
                                                                                    115,
                                                                                    32,
                                                                                    111,
                                                                                    110,
                                                                                    108,
                                                                                    121,
                                                                                    32,
                                                                                    118,
                                                                                    97,
                                                                                    108,
                                                                                    105,
                                                                                    100,
                                                                                    32,
                                                                                    105,
                                                                                    110,
                                                                                    32,
                                                                                    116,
                                                                                    104,
                                                                                    101,
                                                                                    32,
                                                                                    116,
                                                                                    104,
                                                                                    114,
                                                                                    101,
                                                                                    97,
                                                                                    100,
                                                                                    32,
                                                                                    119,
                                                                                    104,
                                                                                    101,
                                                                                    114,
                                                                                    101,
                                                                                    32,
                                                                                    105,
                                                                                    116,
                                                                                    32,
                                                                                    119,
                                                                                    97,
                                                                                    115,
                                                                                    32,
                                                                                    115,
                                                                                    117,
                                                                                    112,
                                                                                    112,
                                                                                    108,
                                                                                    105,
                                                                                    101,
                                                                                    100,
                                                                                    32,
                                                                                    97,
                                                                                    115,
                                                                                    32,
                                                                                    97,
                                                                                    114,
                                                                                    103,
                                                                                    117,
                                                                                    109,
                                                                                    101,
                                                                                    110,
                                                                                    116,
                                                                                    32,
                                                                                    117,
                                                                                    110,
                                                                                    116,
                                                                                    105,
                                                                                    108,
                                                                                    32,
                                                                                    116,
                                                                                    104,
                                                                                    101,
                                                                                    32,
                                                                                    78,
                                                                                    73,
                                                                                    70,
                                                                                    32,
                                                                                    114,
                                                                                    101,
                                                                                    116,
                                                                                    117,
                                                                                    114,
                                                                                    110,
                                                                                    115,
                                                                                    46,
                                                                                    32,
                                                                                    73,
                                                                                    116,
                                                                                    32,
                                                                                    105,
                                                                                    115,
                                                                                    32,
                                                                                    116,
                                                                                    104,
                                                                                    117,
                                                                                    115,
                                                                                    32,
                                                                                    117,
                                                                                    115,
                                                                                    101,
                                                                                    108,
                                                                                    101,
                                                                                    115,
                                                                                    115,
                                                                                    32,
                                                                                    97,
                                                                                    110,
                                                                                    100,
                                                                                    32,
                                                                                    100,
                                                                                    97,
                                                                                    110,
                                                                                    103,
                                                                                    101,
                                                                                    114,
                                                                                    111,
                                                                                    117,
                                                                                    115,
                                                                                    32,
                                                                                    116,
                                                                                    111,
                                                                                    32,
                                                                                    115,
                                                                                    116,
                                                                                    111,
                                                                                    114,
                                                                                    101,
                                                                                    32,
                                                                                    112,
                                                                                    111,
                                                                                    105,
                                                                                    110,
                                                                                    116,
                                                                                    101,
                                                                                    114,
                                                                                    115,
                                                                                    32,
                                                                                    116,
                                                                                    111,
                                                                                    32,
                                                                                    112,
                                                                                    114,
                                                                                    111,
                                                                                    99,
                                                                                    101,
                                                                                    115,
                                                                                    115,
                                                                                    32,
                                                                                    98,
                                                                                    111,
                                                                                    117,
                                                                                    110,
                                                                                    100,
                                                                                    32,
                                                                                    101,
                                                                                    110,
                                                                                    118,
                                                                                    105,
                                                                                    114,
                                                                                    111,
                                                                                    110,
                                                                                    109,
                                                                                    101,
                                                                                    110,
                                                                                    116,
                                                                                    115,
                                                                                    32,
                                                                                    98,
                                                                                    101,
                                                                                    116,
                                                                                    119,
                                                                                    101,
                                                                                    101,
                                                                                    110,
                                                                                    32,
                                                                                    78,
                                                                                    73,
                                                                                    70,
                                                                                    32,
                                                                                    99,
                                                                                    97,
                                                                                    108,
                                                                                    108,
                                                                                    115,
                                                                                    46]}],
                                                                                 0,
                                                                                 false}],
                                                                               0,
                                                                               true},
                                                                              null},
                                                                             null}}],
                                                                          0,
                                                                          false},
                                                                         {text,
                                                                          [5,
                                                                           60,
                                                                           47,
                                                                           100,
                                                                           100,
                                                                           62]}],
                                                                        0,
                                                                        true},
                                                                       null},
                                                                      null}}},
                                                                   {above,
                                                                    {above,
                                                                     {above,
                                                                      {text,
                                                                       [0]},
                                                                      null},
                                                                     null},
                                                                    {above,
                                                                     {above,
                                                                      {sep,
                                                                       [{text,
                                                                         [4,
                                                                          60,
                                                                          100,
                                                                          116,
                                                                          62]},
                                                                        {sep,
                                                                         [{text,
                                                                           [20,
                                                                            67,
                                                                            97,
                                                                            108,
                                                                            108,
                                                                            98,
                                                                            97,
                                                                            99,
                                                                            107,
                                                                            32,
                                                                            101,
                                                                            110,
                                                                            118,
                                                                            105,
                                                                            114,
                                                                            111,
                                                                            110,
                                                                            109,
                                                                            101,
                                                                            110,
                                                                            116]}],
                                                                         0,
                                                                         false},
                                                                        {text,
                                                                         [5,
                                                                          60,
                                                                          47,
                                                                          100,
                                                                          116,
                                                                          62]}],
                                                                       0,true},
                                                                      null},
                                                                     null}}},
                                                                  {above,
                                                                   {above,
                                                                    {above,
                                                                     {text,
                                                                      [0]},
                                                                     null},
                                                                    null},
                                                                   {above,
                                                                    {above,
                                                                     {sep,
                                                                      [{text,
                                                                        [4,60,
                                                                         100,
                                                                         100,
                                                                         62]},
                                                                       {above,
                                                                        {above,
                                                                         {above,
                                                                          {text,
                                                                           [0]},
                                                                          null},
                                                                         null},
                                                                        {above,
                                                                         {above,
                                                                          {sep,
                                                                           [{sep,
                                                                             [{sep,
                                                                               [{text,
                                                                                 "DPassed as the first argument to all the non-NIF callback functions ("}],
                                                                               0,
                                                                               false},
                                                                              {text,
                                                                               [4,
                                                                                108,
                                                                                111,
                                                                                97,
                                                                                100]},
                                                                              {sep,
                                                                               [{text,
                                                                                 [1,
                                                                                  44]}],
                                                                               0,
                                                                               false},
                                                                              {text,
                                                                               [7,
                                                                                117,
                                                                                112,
                                                                                103,
                                                                                114,
                                                                                97,
                                                                                100,
                                                                                101]},
                                                                              {sep,
                                                                               [{text,
                                                                                 [1,
                                                                                  44]}],
                                                                               0,
                                                                               false},
                                                                              {text,
                                                                               [6,
                                                                                117,
                                                                                110,
                                                                                108,
                                                                                111,
                                                                                97,
                                                                                100]},
                                                                              {sep,
                                                                               [{text,
                                                                                 [1,
                                                                                  44]}],
                                                                               0,
                                                                               false},
                                                                              {text,
                                                                               [18,
                                                                                69,
                                                                                114,
                                                                                108,
                                                                                78,
                                                                                105,
                                                                                102,
                                                                                82,
                                                                                101,
                                                                                115,
                                                                                111,
                                                                                117,
                                                                                114,
                                                                                99,
                                                                                101,
                                                                                68,
                                                                                116,
                                                                                111,
                                                                                114]},
                                                                              {sep,
                                                                               [{text,
                                                                                 [1,
                                                                                  44]}],
                                                                               0,
                                                                               false},
                                                                              {text,
                                                                               [18,
                                                                                69,
                                                                                114,
                                                                                108,
                                                                                78,
                                                                                105,
                                                                                102,
                                                                                82,
                                                                                101,
                                                                                115,
                                                                                111,
                                                                                117,
                                                                                114,
                                                                                99,
                                                                                101,
                                                                                68,
                                                                                111,
                                                                                119,
                                                                                110]},
                                                                              {sep,
                                                                               [{text,
                                                                                 [3,
                                                                                  97,
                                                                                  110,
                                                                                  100]}],
                                                                               0,
                                                                               false},
                                                                              {text,
                                                                               [18,
                                                                                69,
                                                                                114,
                                                                                108,
                                                                                78,
                                                                                105,
                                                                                102,
                                                                                82,
                                                                                101,
                                                                                115,
                                                                                111,
                                                                                117,
                                                                                114,
                                                                                99,
                                                                                101,
                                                                                83,
                                                                                116,
                                                                                111,
                                                                                112]},
                                                                              {sep,
                                                                               [{text,
                                                                                 "Þ). Works like a process bound environment but with a temporary pseudo process that \"terminates\" when the callback has returned. Terms may be created in this environment but they will only be accessible during the callback."}],
                                                                               0,
                                                                               false}],
                                                                             0,
                                                                             false}],
                                                                           0,
                                                                           true},
                                                                          null},
                                                                         null}},
                                                                       {text,
                                                                        [5,60,
                                                                         47,
                                                                         100,
                                                                         100,
                                                                         62]}],
                                                                      0,true},
                                                                     null},
                                                                    null}}},
                                                                 {above,
                                                                  {above,
                                                                   {above,
                                                                    {text,[0]},
                                                                    null},
                                                                   null},
                                                                  {above,
                                                                   {above,
                                                                    {sep,
                                                                     [{text,
                                                                       [4,60,
                                                                        100,
                                                                        116,
                                                                        62]},
                                                                      {sep,
                                                                       [{text,
                                                                         [31,
                                                                          80,
                                                                          114,
                                                                          111,
                                                                          99,
                                                                          101,
                                                                          115,
                                                                          115,
                                                                          32,
                                                                          105,
                                                                          110,
                                                                          100,
                                                                          101,
                                                                          112,
                                                                          101,
                                                                          110,
                                                                          100,
                                                                          101,
                                                                          110,
                                                                          116,
                                                                          32,
                                                                          101,
                                                                          110,
                                                                          118,
                                                                          105,
                                                                          114,
                                                                          111,
                                                                          110,
                                                                          109,
                                                                          101,
                                                                          110,
                                                                          116]}],
                                                                       0,
                                                                       false},
                                                                      {text,
                                                                       [5,60,
                                                                        47,
                                                                        100,
                                                                        116,
                                                                        62]}],
                                                                     0,true},
                                                                    null},
                                                                   null}}},
                                                                {above,
                                                                 {above,
                                                                  {above,
                                                                   {text,[0]},
                                                                   null},
                                                                  null},
                                                                 {above,
                                                                  {above,
                                                                   {sep,
                                                                    [{text,
                                                                      [4,60,
                                                                       100,
                                                                       100,
                                                                       62]},
                                                                     {above,
                                                                      {above,
                                                                       {above,
                                                                        {text,
                                                                         [0]},
                                                                        null},
                                                                       null},
                                                                      {above,
                                                                       {above,
                                                                        {sep,
                                                                         [{sep,
                                                                           [{sep,
                                                                             [{text,
                                                                               [18,
                                                                                67,
                                                                                114,
                                                                                101,
                                                                                97,
                                                                                116,
                                                                                101,
                                                                                100,
                                                                                32,
                                                                                98,
                                                                                121,
                                                                                32,
                                                                                99,
                                                                                97,
                                                                                108,
                                                                                108,
                                                                                105,
                                                                                110,
                                                                                103]}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             [14,
                                                                              101,
                                                                              110,
                                                                              105,
                                                                              102,
                                                                              95,
                                                                              97,
                                                                              108,
                                                                              108,
                                                                              111,
                                                                              99,
                                                                              95,
                                                                              101,
                                                                              110,
                                                                              118]},
                                                                            {sep,
                                                                             [{text,
                                                                               "V. This environment can be used to store terms between NIF calls and to send terms with"}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             "\tenif_send"},
                                                                            {sep,
                                                                             [{text,
                                                                               "g. A process independent environment with all its terms is valid until you explicitly invalidate it with"}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             "\renif_free_env"},
                                                                            {sep,
                                                                             [{text,
                                                                               [2,
                                                                                111,
                                                                                114]}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             "\tenif_send"},
                                                                            {sep,
                                                                             [{text,
                                                                               [1,
                                                                                46]}],
                                                                             0,
                                                                             false}],
                                                                           0,
                                                                           false}],
                                                                         0,
                                                                         true},
                                                                        null},
                                                                       null}},
                                                                     {text,
                                                                      [5,60,
                                                                       47,100,
                                                                       100,
                                                                       62]}],
                                                                    0,true},
                                                                   null},
                                                                  null}}}}},
                                                             {text,
                                                              [5,60,47,100,
                                                               108,62]}},
                                                            {above,
                                                             {above,
                                                              {above,
                                                               {text,[0]},
                                                               null},
                                                              null},
                                                             {above,
                                                              {above,
                                                               {sep,
                                                                [{sep,
                                                                  [{sep,
                                                                    [{text,
                                                                      [151,65,
                                                                       108,
                                                                       108,32,
                                                                       99,111,
                                                                       110,
                                                                       116,97,
                                                                       105,
                                                                       110,
                                                                       101,
                                                                       100,32,
                                                                       116,
                                                                       101,
                                                                       114,
                                                                       109,
                                                                       115,32,
                                                                       111,
                                                                       102,32,
                                                                       97,32,
                                                                       108,
                                                                       105,
                                                                       115,
                                                                       116,47,
                                                                       116,
                                                                       117,
                                                                       112,
                                                                       108,
                                                                       101,47,
                                                                       109,97,
                                                                       112,32,
                                                                       109,
                                                                       117,
                                                                       115,
                                                                       116,32,
                                                                       98,101,
                                                                       108,
                                                                       111,
                                                                       110,
                                                                       103,32,
                                                                       116,
                                                                       111,32,
                                                                       116,
                                                                       104,
                                                                       101,32,
                                                                       115,97,
                                                                       109,
                                                                       101,32,
                                                                       101,
                                                                       110,
                                                                       118,
                                                                       105,
                                                                       114,
                                                                       111,
                                                                       110,
                                                                       109,
                                                                       101,
                                                                       110,
                                                                       116,32,
                                                                       97,115,
                                                                       32,116,
                                                                       104,
                                                                       101,32,
                                                                       108,
                                                                       105,
                                                                       115,
                                                                       116,47,
                                                                       116,
                                                                       117,
                                                                       112,
                                                                       108,
                                                                       101,47,
                                                                       109,97,
                                                                       112,32,
                                                                       105,
                                                                       116,
                                                                       115,
                                                                       101,
                                                                       108,
                                                                       102,46,
                                                                       32,84,
                                                                       101,
                                                                       114,
                                                                       109,
                                                                       115,32,
                                                                       99,97,
                                                                       110,32,
                                                                       98,101,
                                                                       32,99,
                                                                       111,
                                                                       112,
                                                                       105,
                                                                       101,
                                                                       100,32,
                                                                       98,101,
                                                                       116,
                                                                       119,
                                                                       101,
                                                                       101,
                                                                       110,32,
                                                                       101,
                                                                       110,
                                                                       118,
                                                                       105,
                                                                       114,
                                                                       111,
                                                                       110,
                                                                       109,
                                                                       101,
                                                                       110,
                                                                       116,
                                                                       115,32,
                                                                       119,
                                                                       105,
                                                                       116,
                                                                       104]}],
                                                                    0,false},
                                                                   {text,
                                                                    [14,101,
                                                                     110,105,
                                                                     102,95,
                                                                     109,97,
                                                                     107,101,
                                                                     95,99,
                                                                     111,112,
                                                                     121]},
                                                                   {sep,
                                                                    [{text,
                                                                      [1,46]}],
                                                                    0,false}],
                                                                  0,false}],
                                                                0,true},
                                                               null},
                                                              null}}],
                                                           0,false},
                                                          {text,
                                                           [5,60,47,100,100,
                                                            62]}],
                                                         0,true},
                                                        null},
                                                       null}}},
                                                    {above,
                                                     {above,
                                                      {above,{text,[0]},null},
                                                      null},
                                                     {above,
                                                      {above,
                                                       {sep,
                                                        [{text,
                                                          [4,60,100,116,62]},
                                                         {sep,
                                                          [{sep,
                                                            [{text,
                                                              "\nErlNifFunc"},
                                                             {text,
                                                              "\nErlNifFunc"}],
                                                            0,false}],
                                                          0,false},
                                                         {text,
                                                          [5,60,47,100,116,
                                                           62]}],
                                                        0,true},
                                                       null},
                                                      null}}},
                                                   {above,
                                                    {above,
                                                     {above,{text,[0]},null},
                                                     null},
                                                    {above,
                                                     {above,
                                                      {sep,
                                                       [{text,
                                                         [4,60,100,100,62]},
                                                        {sep,
                                                         [{above,
                                                           {above,
                                                            {above,
                                                             {text,[0]},
                                                             null},
                                                            null},
                                                           {above,
                                                            {above,
                                                             {above,
                                                              {above,
                                                               {text,
                                                                [3,96,96,96]},
                                                               {sep,
                                                                [{text,
                                                                  "¬\ntypedef struct {\n    const char* name;\n    unsigned arity;\n    ERL_NIF_TERM (*fptr)(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n    unsigned flags;\n} ErlNifFunc;"}],
                                                                0,true}},
                                                              {text,
                                                               [3,96,96,96]}},
                                                             null},
                                                            null}},
                                                          {above,
                                                           {above,
                                                            {above,
                                                             {text,[0]},
                                                             null},
                                                            null},
                                                           {above,
                                                            {above,
                                                             {sep,
                                                              [{sep,
                                                                [{text,
                                                                  "7Describes a NIF by its name, arity, and implementation."}],
                                                                0,false}],
                                                              0,true},
                                                             null},
                                                            null}},
                                                          {above,
                                                           {above,
                                                            {text,
                                                             [4,60,100,108,
                                                              62]},
                                                            {nest,4,
                                                             {above,
                                                              {above,
                                                               {above,
                                                                {above,
                                                                 {above,
                                                                  {above,
                                                                   {above,
                                                                    {above,
                                                                     {above,
                                                                      {above,
                                                                       {text,
                                                                        [0]},
                                                                       null},
                                                                      null},
                                                                     {above,
                                                                      {above,
                                                                       {sep,
                                                                        [{text,
                                                                          [4,
                                                                           60,
                                                                           100,
                                                                           116,
                                                                           62]},
                                                                         {sep,
                                                                          [{text,
                                                                            [4,
                                                                             102,
                                                                             112,
                                                                             116,
                                                                             114]}],
                                                                          0,
                                                                          false},
                                                                         {text,
                                                                          [5,
                                                                           60,
                                                                           47,
                                                                           100,
                                                                           116,
                                                                           62]}],
                                                                        0,
                                                                        true},
                                                                       null},
                                                                      null}},
                                                                    {above,
                                                                     {above,
                                                                      {above,
                                                                       {text,
                                                                        [0]},
                                                                       null},
                                                                      null},
                                                                     {above,
                                                                      {above,
                                                                       {sep,
                                                                        [{text,
                                                                          [4,
                                                                           60,
                                                                           100,
                                                                           100,
                                                                           62]},
                                                                         {above,
                                                                          {above,
                                                                           {above,
                                                                            {text,
                                                                             [0]},
                                                                            null},
                                                                           null},
                                                                          {above,
                                                                           {above,
                                                                            {sep,
                                                                             [{sep,
                                                                               [{text,
                                                                                 "2A pointer to the function that implements the NIF."}],
                                                                               0,
                                                                               false}],
                                                                             0,
                                                                             true},
                                                                            null},
                                                                           null}},
                                                                         {text,
                                                                          [5,
                                                                           60,
                                                                           47,
                                                                           100,
                                                                           100,
                                                                           62]}],
                                                                        0,
                                                                        true},
                                                                       null},
                                                                      null}}},
                                                                   {above,
                                                                    {above,
                                                                     {above,
                                                                      {text,
                                                                       [0]},
                                                                      null},
                                                                     null},
                                                                    {above,
                                                                     {above,
                                                                      {sep,
                                                                       [{text,
                                                                         [4,
                                                                          60,
                                                                          100,
                                                                          116,
                                                                          62]},
                                                                        {sep,
                                                                         [{text,
                                                                           [4,
                                                                            97,
                                                                            114,
                                                                            103,
                                                                            118]}],
                                                                         0,
                                                                         false},
                                                                        {text,
                                                                         [5,
                                                                          60,
                                                                          47,
                                                                          100,
                                                                          116,
                                                                          62]}],
                                                                       0,true},
                                                                      null},
                                                                     null}}},
                                                                  {above,
                                                                   {above,
                                                                    {above,
                                                                     {text,
                                                                      [0]},
                                                                     null},
                                                                    null},
                                                                   {above,
                                                                    {above,
                                                                     {sep,
                                                                      [{text,
                                                                        [4,60,
                                                                         100,
                                                                         100,
                                                                         62]},
                                                                       {above,
                                                                        {above,
                                                                         {above,
                                                                          {text,
                                                                           [0]},
                                                                          null},
                                                                         null},
                                                                        {above,
                                                                         {above,
                                                                          {sep,
                                                                           [{sep,
                                                                             [{text,
                                                                               "2Contains the function arguments passed to the NIF."}],
                                                                             0,
                                                                             false}],
                                                                           0,
                                                                           true},
                                                                          null},
                                                                         null}},
                                                                       {text,
                                                                        [5,60,
                                                                         47,
                                                                         100,
                                                                         100,
                                                                         62]}],
                                                                      0,true},
                                                                     null},
                                                                    null}}},
                                                                 {above,
                                                                  {above,
                                                                   {above,
                                                                    {text,[0]},
                                                                    null},
                                                                   null},
                                                                  {above,
                                                                   {above,
                                                                    {sep,
                                                                     [{text,
                                                                       [4,60,
                                                                        100,
                                                                        116,
                                                                        62]},
                                                                      {sep,
                                                                       [{text,
                                                                         [4,
                                                                          97,
                                                                          114,
                                                                          103,
                                                                          99]}],
                                                                       0,
                                                                       false},
                                                                      {text,
                                                                       [5,60,
                                                                        47,
                                                                        100,
                                                                        116,
                                                                        62]}],
                                                                     0,true},
                                                                    null},
                                                                   null}}},
                                                                {above,
                                                                 {above,
                                                                  {above,
                                                                   {text,[0]},
                                                                   null},
                                                                  null},
                                                                 {above,
                                                                  {above,
                                                                   {sep,
                                                                    [{text,
                                                                      [4,60,
                                                                       100,
                                                                       100,
                                                                       62]},
                                                                     {above,
                                                                      {above,
                                                                       {above,
                                                                        {text,
                                                                         [0]},
                                                                        null},
                                                                       null},
                                                                      {above,
                                                                       {above,
                                                                        {sep,
                                                                         [{sep,
                                                                           [{sep,
                                                                             [{text,
                                                                               ".The array length, that is, the function arity."}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             "\targv[N-1]"},
                                                                            {sep,
                                                                             [{text,
                                                                               "Bthus denotes the Nth argument to the NIF. Notice that the argument"}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             [4,
                                                                              97,
                                                                              114,
                                                                              103,
                                                                              99]},
                                                                            {sep,
                                                                             [{text,
                                                                               "|allows for the same C function to implement several Erlang functions with different arity (but probably with the same name)."}],
                                                                             0,
                                                                             false}],
                                                                           0,
                                                                           false}],
                                                                         0,
                                                                         true},
                                                                        null},
                                                                       null}},
                                                                     {text,
                                                                      [5,60,
                                                                       47,100,
                                                                       100,
                                                                       62]}],
                                                                    0,true},
                                                                   null},
                                                                  null}}},
                                                               {above,
                                                                {above,
                                                                 {above,
                                                                  {text,[0]},
                                                                  null},
                                                                 null},
                                                                {above,
                                                                 {above,
                                                                  {sep,
                                                                   [{text,
                                                                     [4,60,
                                                                      100,116,
                                                                      62]},
                                                                    {sep,
                                                                     [{text,
                                                                       [5,102,
                                                                        108,
                                                                        97,
                                                                        103,
                                                                        115]}],
                                                                     0,false},
                                                                    {text,
                                                                     [5,60,47,
                                                                      100,116,
                                                                      62]}],
                                                                   0,true},
                                                                  null},
                                                                 null}}},
                                                              {above,
                                                               {above,
                                                                {above,
                                                                 {text,[0]},
                                                                 null},
                                                                null},
                                                               {above,
                                                                {above,
                                                                 {sep,
                                                                  [{text,
                                                                    [4,60,100,
                                                                     100,62]},
                                                                   {sep,
                                                                    [{above,
                                                                      {above,
                                                                       {above,
                                                                        {text,
                                                                         [0]},
                                                                        null},
                                                                       null},
                                                                      {above,
                                                                       {above,
                                                                        {sep,
                                                                         [{sep,
                                                                           [{sep,
                                                                             [{text,
                                                                               [2,
                                                                                73,
                                                                                115]}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             [1,
                                                                              48]},
                                                                            {sep,
                                                                             [{text,
                                                                               "Mfor a regular NIF (and so its value can be omitted for statically initialized"}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             "\nErlNifFunc"},
                                                                            {sep,
                                                                             [{text,
                                                                               "\vinstances)."}],
                                                                             0,
                                                                             false}],
                                                                           0,
                                                                           false}],
                                                                         0,
                                                                         true},
                                                                        null},
                                                                       null}},
                                                                     {above,
                                                                      {above,
                                                                       {above,
                                                                        {text,
                                                                         [0]},
                                                                        null},
                                                                       null},
                                                                      {above,
                                                                       {above,
                                                                        {sep,
                                                                         [{sep,
                                                                           [{text,
                                                                             [5,
                                                                              102,
                                                                              108,
                                                                              97,
                                                                              103,
                                                                              115]},
                                                                            {sep,
                                                                             [{text,
                                                                               ")can be used to indicate that the NIF is a"}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             "\tdirty NIF"},
                                                                            {sep,
                                                                             [{text,
                                                                               "3that is to be executed on a dirty scheduler thread."}],
                                                                             0,
                                                                             false}],
                                                                           0,
                                                                           false}],
                                                                         0,
                                                                         true},
                                                                        null},
                                                                       null}},
                                                                     {above,
                                                                      {above,
                                                                       {above,
                                                                        {text,
                                                                         [0]},
                                                                        null},
                                                                       null},
                                                                      {above,
                                                                       {above,
                                                                        {sep,
                                                                         [{sep,
                                                                           [{sep,
                                                                             [{text,
                                                                               "1If the dirty NIF is expected to be CPU-bound, its"}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             [5,
                                                                              102,
                                                                              108,
                                                                              97,
                                                                              103,
                                                                              115]},
                                                                            {sep,
                                                                             [{text,
                                                                               [21,
                                                                                102,
                                                                                105,
                                                                                101,
                                                                                108,
                                                                                100,
                                                                                32,
                                                                                105,
                                                                                115,
                                                                                32,
                                                                                116,
                                                                                111,
                                                                                32,
                                                                                98,
                                                                                101,
                                                                                32,
                                                                                115,
                                                                                101,
                                                                                116,
                                                                                32,
                                                                                116,
                                                                                111]}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             "\eERL_NIF_DIRTY_JOB_CPU_BOUND"},
                                                                            {sep,
                                                                             [{text,
                                                                               [2,
                                                                                111,
                                                                                114]}],
                                                                             0,
                                                                             false},
                                                                            {text,
                                                                             [26,
                                                                              69,
                                                                              82,
                                                                              76,
                                                                              95,
                                                                              78,
                                                                              73,
                                                                              70,
                                                                              95,
                                                                              68,
                                                                              73,
                                                                              82,
                                                                              84,
                                                                              89,
                                                                              95,
                                                                              74,
                                                                              79,
                                                                              66,
                                                                              95,
                                                                              73,
                                                                              79,
                                                                              95,
                                                                              66,
                                                                              79,
                                                                              85,
                                                                              78,
                                                                              68]},
                                                                            {sep,
                                                                             [{text,
                                                                               [1,
                                                                                46]}],
                                                                             0,
                                                                             false}],
                                                                           0,
                                                                           false}],
                                                                         0,
                                                                         true},
                                                                        null},
                                                                       null}},
                                                                     {sep,
                                                                      [{above,
                                                                        {above,
                                                                         {above,
                                                                          {text,
                                                                           [0]},
                                                                          null},
                                                                         null},
                                                                        {above,
                                                                         {above,
                                                                          {sep,
                                                                           [{sep,
                                                                             [{sep,
                                                                               [{text,
                                                                                 "\rIf one of the"}],
                                                                               0,
                                                                               false},
                                                                              {text,
                                                                               [25,
                                                                                69,
                                                                                82,
                                                                                76,
                                                                                95,
                                                                                78,
                                                                                73,
                                                                                70,
                                                                                95,
                                                                                68,
                                                                                73,
                                                                                82,
                                                                                84,
                                                                                89,
                                                                                95,
                                                                                74,
                                                                                79,
                                                                                66,
                                                                                95,
                                                                                42,
                                                                                95,
                                                                                66,
                                                                                79,
                                                                                85,
                                                                                78,
                                                                                68]},
                                                                              {sep,
                                                                               [{text,
                                                                                 "}flags is set, and the runtime system has no support for dirty schedulers, the runtime system refuses to load the NIF library."}],
                                                                               0,
                                                                               false}],
                                                                             0,
                                                                             false}],
                                                                           0,
                                                                           true},
                                                                          null},
                                                                         null}}],
                                                                      0,
                                                                      false}],
                                                                    0,false},
                                                                   {text,
                                                                    [5,60,47,
                                                                     100,100,
                                                                     62]}],
                                                                  0,true},
                                                                 null},
                                                                null}}}}},
                                                           {text,
                                                            [5,60,47,100,108,
                                                             62]}}],
                                                         0,false},
                                                        {text,
                                                         [5,60,47,100,100,
                                                          62]}],
                                                       0,true},
                                                      null},
                                                     null}}},
                                                  {above,
                                                   {above,
                                                    {above,{text,[0]},null},
                                                    null},
                                                   {above,
                                                    {above,
                                                     {sep,
                                                      [{text,
                                                        [4,60,100,116,62]},
                                                       {sep,
                                                        [{sep,
                                                          [{text,
                                                            "\fErlNifBinary"},
                                                           {text,
                                                            "\fErlNifBinary"}],
                                                          0,false}],
                                                        0,false},
                                                       {text,
                                                        [5,60,47,100,116,62]}],
                                                      0,true},
                                                     null},
                                                    null}}},
                                                 {above,
                                                  {above,
                                                   {above,{text,[0]},null},
                                                   null},
                                                  {above,
                                                   {above,
                                                    {sep,
                                                     [{text,[4,60,100,100,62]},
                                                      {sep,
                                                       [{above,
                                                         {above,
                                                          {above,
                                                           {text,[0]},
                                                           null},
                                                          null},
                                                         {above,
                                                          {above,
                                                           {above,
                                                            {above,
                                                             {text,
                                                              [3,96,96,96]},
                                                             {sep,
                                                              [{text,
                                                                "M\ntypedef struct {\n    unsigned size;\n    unsigned char* data;\n} ErlNifBinary;"}],
                                                              0,true}},
                                                            {text,
                                                             [3,96,96,96]}},
                                                           null},
                                                          null}},
                                                        {above,
                                                         {above,
                                                          {above,
                                                           {text,[0]},
                                                           null},
                                                          null},
                                                         {above,
                                                          {above,
                                                           {sep,
                                                            [{sep,
                                                              [{text,
                                                                "\fErlNifBinary"},
                                                               {sep,
                                                                [{text,
                                                                  ">contains transient information about an inspected binary term."}],
                                                                0,false},
                                                               {text,
                                                                [4,100,97,116,
                                                                 97]},
                                                               {sep,
                                                                [{text,
                                                                  "\eis a pointer to a buffer of"}],
                                                                0,false},
                                                               {text,
                                                                [4,115,105,
                                                                 122,101]},
                                                               {sep,
                                                                [{text,
                                                                  ")bytes with the raw content of the binary."}],
                                                                0,false}],
                                                              0,false}],
                                                            0,true},
                                                           null},
                                                          null}},
                                                        {above,
                                                         {above,
                                                          {above,
                                                           {text,[0]},
                                                           null},
                                                          null},
                                                         {above,
                                                          {above,
                                                           {sep,
                                                            [{sep,
                                                              [{sep,
                                                                [{text,
                                                                  "\vNotice that"}],
                                                                0,false},
                                                               {text,
                                                                "\fErlNifBinary"},
                                                               {sep,
                                                                [{text,
                                                                  "=is a semi-opaque type and you are only allowed to read fields"}],
                                                                0,false},
                                                               {text,
                                                                [4,115,105,
                                                                 122,101]},
                                                               {sep,
                                                                [{text,
                                                                  [3,97,110,
                                                                   100]}],
                                                                0,false},
                                                               {text,
                                                                [4,100,97,116,
                                                                 97]},
                                                               {sep,
                                                                [{text,
                                                                  [1,46]}],
                                                                0,false}],
                                                              0,false}],
                                                            0,true},
                                                           null},
                                                          null}}],
                                                       0,false},
                                                      {text,
                                                       [5,60,47,100,100,62]}],
                                                     0,true},
                                                    null},
                                                   null}}},
                                                {above,
                                                 {above,
                                                  {above,{text,[0]},null},
                                                  null},
                                                 {above,
                                                  {above,
                                                   {sep,
                                                    [{text,[4,60,100,116,62]},
                                                     {sep,
                                                      [{sep,
                                                        [{text,
                                                          [18,69,114,108,78,
                                                           105,102,66,105,110,
                                                           97,114,121,84,111,
                                                           84,101,114,109]},
                                                         {text,
                                                          [18,69,114,108,78,
                                                           105,102,66,105,110,
                                                           97,114,121,84,111,
                                                           84,101,114,109]}],
                                                        0,false}],
                                                      0,false},
                                                     {text,
                                                      [5,60,47,100,116,62]}],
                                                    0,true},
                                                   null},
                                                  null}}},
                                               {above,
                                                {above,
                                                 {above,{text,[0]},null},
                                                 null},
                                                {above,
                                                 {above,
                                                  {sep,
                                                   [{text,[4,60,100,100,62]},
                                                    {sep,
                                                     [{above,
                                                       {above,
                                                        {above,
                                                         {text,[0]},
                                                         null},
                                                        null},
                                                       {above,
                                                        {above,
                                                         {sep,
                                                          [{sep,
                                                            [{sep,
                                                              [{text,
                                                                "6An enumeration of the options that can be specified to"}],
                                                              0,false},
                                                             {text,
                                                              [19,101,110,105,
                                                               102,95,98,105,
                                                               110,97,114,121,
                                                               95,116,111,95,
                                                               116,101,114,
                                                               109]},
                                                             {sep,
                                                              [{text,
                                                                "!. For default behavior, use value"}],
                                                              0,false},
                                                             {text,[1,48]},
                                                             {sep,
                                                              [{text,[1,46]}],
                                                              0,false}],
                                                            0,false}],
                                                          0,true},
                                                         null},
                                                        null}},
                                                      {above,
                                                       {above,
                                                        {above,
                                                         {text,[0]},
                                                         null},
                                                        null},
                                                       {above,
                                                        {above,
                                                         {sep,
                                                          [{sep,
                                                            [{sep,
                                                              [{text,
                                                                "6When receiving data from untrusted sources, use option"}],
                                                              0,false},
                                                             {text,
                                                              [21,69,82,76,95,
                                                               78,73,70,95,66,
                                                               73,78,50,84,69,
                                                               82,77,95,83,65,
                                                               70,69]},
                                                             {sep,
                                                              [{text,[1,46]}],
                                                              0,false}],
                                                            0,false}],
                                                          0,true},
                                                         null},
                                                        null}}],
                                                     0,false},
                                                    {text,
                                                     [5,60,47,100,100,62]}],
                                                   0,true},
                                                  null},
                                                 null}}},
                                              {above,
                                               {above,
                                                {above,{text,[0]},null},
                                                null},
                                               {above,
                                                {above,
                                                 {sep,
                                                  [{text,[4,60,100,116,62]},
                                                   {sep,
                                                    [{sep,
                                                      [{text,
                                                        "\rErlNifMonitor"},
                                                       {text,
                                                        "\rErlNifMonitor"}],
                                                      0,false}],
                                                    0,false},
                                                   {text,
                                                    [5,60,47,100,116,62]}],
                                                  0,true},
                                                 null},
                                                null}}},
                                             {above,
                                              {above,
                                               {above,{text,[0]},null},
                                               null},
                                              {above,
                                               {above,
                                                {sep,
                                                 [{text,[4,60,100,100,62]},
                                                  {sep,
                                                   [{above,
                                                     {above,
                                                      {above,{text,[0]},null},
                                                      null},
                                                     {above,
                                                      {above,
                                                       {sep,
                                                        [{sep,
                                                          [{text,
                                                            "6This is an opaque data type that identifies a monitor."}],
                                                          0,false}],
                                                        0,true},
                                                       null},
                                                      null}},
                                                    {above,
                                                     {above,
                                                      {above,{text,[0]},null},
                                                      null},
                                                     {above,
                                                      {above,
                                                       {sep,
                                                        [{sep,
                                                          [{sep,
                                                            [{text,
                                                              "LThe nif writer is to provide the memory for storing the monitor when calling"}],
                                                            0,false},
                                                           {text,
                                                            [20,101,110,105,
                                                             102,95,109,111,
                                                             110,105,116,111,
                                                             114,95,112,114,
                                                             111,99,101,115,
                                                             115]},
                                                           {sep,
                                                            [{text,
                                                              "A. The address of the data is not stored by the runtime system, so"}],
                                                            0,false},
                                                           {text,
                                                            "\rErlNifMonitor"},
                                                           {sep,
                                                            [{text,
                                                              "pcan be used as any other data, it can be copied, moved in memory, forgotten, and so on. To compare two monitors,"}],
                                                            0,false},
                                                           {text,
                                                            [21,101,110,105,
                                                             102,95,99,111,
                                                             109,112,97,114,
                                                             101,95,109,111,
                                                             110,105,116,111,
                                                             114,115]},
                                                           {sep,
                                                            [{text,
                                                              "\rmust be used."}],
                                                            0,false}],
                                                          0,false}],
                                                        0,true},
                                                       null},
                                                      null}}],
                                                   0,false},
                                                  {text,[5,60,47,100,100,62]}],
                                                 0,true},
                                                null},
                                               null}}},
                                            {above,
                                             {above,
                                              {above,{text,[0]},null},
                                              null},
                                             {above,
                                              {above,
                                               {sep,
                                                [{text,[4,60,100,116,62]},
                                                 {sep,
                                                  [{sep,
                                                    [{text,"\tErlNifPid"},
                                                     {text,"\tErlNifPid"}],
                                                    0,false}],
                                                  0,false},
                                                 {text,[5,60,47,100,116,62]}],
                                                0,true},
                                               null},
                                              null}}},
                                           {above,
                                            {above,
                                             {above,{text,[0]},null},
                                             null},
                                            {above,
                                             {above,
                                              {sep,
                                               [{text,[4,60,100,100,62]},
                                                {above,
                                                 {above,
                                                  {above,{text,[0]},null},
                                                  null},
                                                 {above,
                                                  {above,
                                                   {sep,
                                                    [{sep,
                                                      [{sep,
                                                        [{text,
                                                          "BA process identifier (pid). In contrast to pid terms (instances of"}],
                                                        0,false},
                                                       {text,"\fERL_NIF_TERM"},
                                                       {sep,
                                                        [{text,[2,41,44]}],
                                                        0,false},
                                                       {text,"\tErlNifPid"},
                                                       {sep,
                                                        [{text,
                                                          ")s are self-contained and not bound to any"}],
                                                        0,false},
                                                       {text,"\venvironment"},
                                                       {sep,
                                                        [{text,[1,46]}],
                                                        0,false},
                                                       {text,"\tErlNifPid"},
                                                       {sep,
                                                        [{text,
                                                          "Kis an opaque type. It can be copied, moved in memory, forgotten, and so on."}],
                                                        0,false}],
                                                      0,false}],
                                                    0,true},
                                                   null},
                                                  null}},
                                                {text,[5,60,47,100,100,62]}],
                                               0,true},
                                              null},
                                             null}}},
                                          {above,
                                           {above,
                                            {above,{text,[0]},null},
                                            null},
                                           {above,
                                            {above,
                                             {sep,
                                              [{text,[4,60,100,116,62]},
                                               {sep,
                                                [{sep,
                                                  [{text,"\nErlNifPort"},
                                                   {text,"\nErlNifPort"}],
                                                  0,false}],
                                                0,false},
                                               {text,[5,60,47,100,116,62]}],
                                              0,true},
                                             null},
                                            null}}},
                                         {above,
                                          {above,{above,{text,[0]},null},null},
                                          {above,
                                           {above,
                                            {sep,
                                             [{text,[4,60,100,100,62]},
                                              {above,
                                               {above,
                                                {above,{text,[0]},null},
                                                null},
                                               {above,
                                                {above,
                                                 {sep,
                                                  [{sep,
                                                    [{sep,
                                                      [{text,
                                                        "=A port identifier. In contrast to port ID terms (instances of"}],
                                                      0,false},
                                                     {text,"\fERL_NIF_TERM"},
                                                     {sep,
                                                      [{text,[2,41,44]}],
                                                      0,false},
                                                     {text,"\nErlNifPort"},
                                                     {sep,
                                                      [{text,
                                                        ")s are self-contained and not bound to any"}],
                                                      0,false},
                                                     {text,"\venvironment"},
                                                     {sep,
                                                      [{text,[1,46]}],
                                                      0,false},
                                                     {text,"\nErlNifPort"},
                                                     {sep,
                                                      [{text,
                                                        "Kis an opaque type. It can be copied, moved in memory, forgotten, and so on."}],
                                                      0,false}],
                                                    0,false}],
                                                  0,true},
                                                 null},
                                                null}},
                                              {text,[5,60,47,100,100,62]}],
                                             0,true},
                                            null},
                                           null}}},
                                        {above,
                                         {above,{above,{text,[0]},null},null},
                                         {above,
                                          {above,
                                           {sep,
                                            [{text,[4,60,100,116,62]},
                                             {sep,
                                              [{sep,
                                                [{text,
                                                  [18,69,114,108,78,105,102,
                                                   82,101,115,111,117,114,99,
                                                   101,84,121,112,101]},
                                                 {text,
                                                  [18,69,114,108,78,105,102,
                                                   82,101,115,111,117,114,99,
                                                   101,84,121,112,101]}],
                                                0,false}],
                                              0,false},
                                             {text,[5,60,47,100,116,62]}],
                                            0,true},
                                           null},
                                          null}}},
                                       {above,
                                        {above,{above,{text,[0]},null},null},
                                        {above,
                                         {above,
                                          {sep,
                                           [{text,[4,60,100,100,62]},
                                            {above,
                                             {above,
                                              {above,{text,[0]},null},
                                              null},
                                             {above,
                                              {above,
                                               {sep,
                                                [{sep,
                                                  [{sep,
                                                    [{text,
                                                      [16,69,97,99,104,32,105,
                                                       110,115,116,97,110,99,
                                                       101,32,111,102]}],
                                                    0,false},
                                                   {text,
                                                    [18,69,114,108,78,105,102,
                                                     82,101,115,111,117,114,
                                                     99,101,84,121,112,101]},
                                                   {sep,
                                                    [{text,
                                                      "Érepresents a class of memory-managed resource objects that can be garbage collected. Each resource type has a unique name and a destructor function that is called when objects of its type are released."}],
                                                    0,false}],
                                                  0,false}],
                                                0,true},
                                               null},
                                              null}},
                                            {text,[5,60,47,100,100,62]}],
                                           0,true},
                                          null},
                                         null}}},
                                      {above,
                                       {above,{above,{text,[0]},null},null},
                                       {above,
                                        {above,
                                         {sep,
                                          [{text,[4,60,100,116,62]},
                                           {sep,
                                            [{sep,
                                              [{text,
                                                [22,69,114,108,78,105,102,82,
                                                 101,115,111,117,114,99,101,
                                                 84,121,112,101,73,110,105,
                                                 116]},
                                               {text,
                                                [22,69,114,108,78,105,102,82,
                                                 101,115,111,117,114,99,101,
                                                 84,121,112,101,73,110,105,
                                                 116]}],
                                              0,false}],
                                            0,false},
                                           {text,[5,60,47,100,116,62]}],
                                          0,true},
                                         null},
                                        null}}},
                                     {above,
                                      {above,{above,{text,[0]},null},null},
                                      {above,
                                       {above,
                                        {sep,
                                         [{text,[4,60,100,100,62]},
                                          {sep,
                                           [{above,
                                             {above,
                                              {above,{text,[0]},null},
                                              null},
                                             {above,
                                              {above,
                                               {above,
                                                {above,
                                                 {text,[3,96,96,96]},
                                                 {sep,
                                                  [{text,
                                                    [133,10,116,121,112,101,
                                                     100,101,102,32,115,116,
                                                     114,117,99,116,32,123,10,
                                                     32,32,32,32,69,114,108,
                                                     78,105,102,82,101,115,
                                                     111,117,114,99,101,68,
                                                     116,111,114,42,32,100,
                                                     116,111,114,59,10,32,32,
                                                     32,32,69,114,108,78,105,
                                                     102,82,101,115,111,117,
                                                     114,99,101,83,116,111,
                                                     112,42,32,115,116,111,
                                                     112,59,10,32,32,32,32,69,
                                                     114,108,78,105,102,82,
                                                     101,115,111,117,114,99,
                                                     101,68,111,119,110,42,32,
                                                     100,111,119,110,59,10,
                                                     125,32,69,114,108,78,105,
                                                     102,82,101,115,111,117,
                                                     114,99,101,84,121,112,
                                                     101,73,110,105,116,59]}],
                                                  0,true}},
                                                {text,[3,96,96,96]}},
                                               null},
                                              null}},
                                            {above,
                                             {above,
                                              {above,{text,[0]},null},
                                              null},
                                             {above,
                                              {above,
                                               {sep,
                                                [{sep,
                                                  [{sep,
                                                    [{text,
                                                      " Initialization structure read by"}],
                                                    0,false},
                                                   {text,
                                                    [25,101,110,105,102,95,
                                                     111,112,101,110,95,114,
                                                     101,115,111,117,114,99,
                                                     101,95,116,121,112,101,
                                                     95,120]},
                                                   {sep,
                                                    [{text,[1,46]}],
                                                    0,false}],
                                                  0,false}],
                                                0,true},
                                               null},
                                              null}}],
                                           0,false},
                                          {text,[5,60,47,100,100,62]}],
                                         0,true},
                                        null},
                                       null}}},
                                    {above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{text,[4,60,100,116,62]},
                                         {sep,
                                          [{sep,
                                            [{text,
                                              [18,69,114,108,78,105,102,82,
                                               101,115,111,117,114,99,101,68,
                                               116,111,114]},
                                             {text,
                                              [18,69,114,108,78,105,102,82,
                                               101,115,111,117,114,99,101,68,
                                               116,111,114]}],
                                            0,false}],
                                          0,false},
                                         {text,[5,60,47,100,116,62]}],
                                        0,true},
                                       null},
                                      null}}},
                                   {above,
                                    {above,{above,{text,[0]},null},null},
                                    {above,
                                     {above,
                                      {sep,
                                       [{text,[4,60,100,100,62]},
                                        {sep,
                                         [{above,
                                           {above,
                                            {above,{text,[0]},null},
                                            null},
                                           {above,
                                            {above,
                                             {above,
                                              {above,
                                               {text,[3,96,96,96]},
                                               {sep,
                                                [{text,
                                                  "C\ntypedef void ErlNifResourceDtor(ErlNifEnv* caller_env, void* obj);"}],
                                                0,true}},
                                              {text,[3,96,96,96]}},
                                             null},
                                            null}},
                                          {above,
                                           {above,
                                            {above,{text,[0]},null},
                                            null},
                                           {above,
                                            {above,
                                             {sep,
                                              [{sep,
                                                [{text,
                                                  "9The function prototype of a resource destructor function."}],
                                                0,false}],
                                              0,true},
                                             null},
                                            null}},
                                          {above,
                                           {above,
                                            {above,{text,[0]},null},
                                            null},
                                           {above,
                                            {above,
                                             {sep,
                                              [{sep,
                                                [{sep,
                                                  [{text,[3,84,104,101]}],
                                                  0,false},
                                                 {text,[3,111,98,106]},
                                                 {sep,
                                                  [{text,
                                                    "âargument is a pointer to the resource. The only allowed use for the resource in the destructor is to access its user data one final time. The destructor is guaranteed to be the last callback before the resource is deallocated."}],
                                                  0,false}],
                                                0,false}],
                                              0,true},
                                             null},
                                            null}}],
                                         0,false},
                                        {text,[5,60,47,100,100,62]}],
                                       0,true},
                                      null},
                                     null}}},
                                  {above,
                                   {above,{above,{text,[0]},null},null},
                                   {above,
                                    {above,
                                     {sep,
                                      [{text,[4,60,100,116,62]},
                                       {sep,
                                        [{sep,
                                          [{text,
                                            [18,69,114,108,78,105,102,82,101,
                                             115,111,117,114,99,101,68,111,
                                             119,110]},
                                           {text,
                                            [18,69,114,108,78,105,102,82,101,
                                             115,111,117,114,99,101,68,111,
                                             119,110]}],
                                          0,false}],
                                        0,false},
                                       {text,[5,60,47,100,116,62]}],
                                      0,true},
                                     null},
                                    null}}},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{text,[4,60,100,100,62]},
                                      {sep,
                                       [{above,
                                         {above,{above,{text,[0]},null},null},
                                         {above,
                                          {above,
                                           {above,
                                            {above,
                                             {text,[3,96,96,96]},
                                             {sep,
                                              [{text,
                                                "g\ntypedef void ErlNifResourceDown(ErlNifEnv* caller_env, void* obj, ErlNifPid* pid, ErlNifMonitor* mon);"}],
                                              0,true}},
                                            {text,[3,96,96,96]}},
                                           null},
                                          null}},
                                        {above,
                                         {above,{above,{text,[0]},null},null},
                                         {above,
                                          {above,
                                           {sep,
                                            [{sep,
                                              [{sep,
                                                [{text,
                                                  "KThe function prototype of a resource down function, called on the behalf of"}],
                                                0,false},
                                               {text,
                                                [20,101,110,105,102,95,109,
                                                 111,110,105,116,111,114,95,
                                                 112,114,111,99,101,115,115]},
                                               {sep,[{text,[1,46]}],0,false},
                                               {text,[3,111,98,106]},
                                               {sep,
                                                [{text,
                                                  [16,105,115,32,116,104,101,
                                                   32,114,101,115,111,117,114,
                                                   99,101,44]}],
                                                0,false},
                                               {text,[3,112,105,100]},
                                               {sep,
                                                [{text,
                                                  "=is the identity of the monitored process that is exiting, and"}],
                                                0,false},
                                               {text,[3,109,111,110]},
                                               {sep,
                                                [{text,
                                                  [31,105,115,32,116,104,101,
                                                   32,105,100,101,110,116,105,
                                                   116,121,32,111,102,32,116,
                                                   104,101,32,109,111,110,105,
                                                   116,111,114,46]}],
                                                0,false}],
                                              0,false}],
                                            0,true},
                                           null},
                                          null}}],
                                       0,false},
                                      {text,[5,60,47,100,100,62]}],
                                     0,true},
                                    null},
                                   null}}},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{text,[4,60,100,116,62]},
                                     {sep,
                                      [{sep,
                                        [{text,
                                          [18,69,114,108,78,105,102,82,101,
                                           115,111,117,114,99,101,83,116,111,
                                           112]},
                                         {text,
                                          [18,69,114,108,78,105,102,82,101,
                                           115,111,117,114,99,101,83,116,111,
                                           112]}],
                                        0,false}],
                                      0,false},
                                     {text,[5,60,47,100,116,62]}],
                                    0,true},
                                   null},
                                  null}}},
                               {above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{text,[4,60,100,100,62]},
                                    {sep,
                                     [{above,
                                       {above,{above,{text,[0]},null},null},
                                       {above,
                                        {above,
                                         {above,
                                          {above,
                                           {text,[3,96,96,96]},
                                           {sep,
                                            [{text,
                                              "j\ntypedef void ErlNifResourceStop(ErlNifEnv* caller_env, void* obj, ErlNifEvent event, int is_direct_call);"}],
                                            0,true}},
                                          {text,[3,96,96,96]}},
                                         null},
                                        null}},
                                      {above,
                                       {above,{above,{text,[0]},null},null},
                                       {above,
                                        {above,
                                         {sep,
                                          [{sep,
                                            [{sep,
                                              [{text,
                                                "KThe function prototype of a resource stop function, called on the behalf of"}],
                                              0,false},
                                             {text,"\venif_select"},
                                             {sep,[{text,[1,46]}],0,false},
                                             {text,[3,111,98,106]},
                                             {sep,
                                              [{text,
                                                [16,105,115,32,116,104,101,32,
                                                 114,101,115,111,117,114,99,
                                                 101,44]}],
                                              0,false},
                                             {text,[5,101,118,101,110,116]},
                                             {sep,
                                              [{text,"\fis OS event,"}],
                                              0,false},
                                             {text,
                                              [14,105,115,95,100,105,114,101,
                                               99,116,95,99,97,108,108]},
                                             {sep,
                                              [{text,
                                                ")is true if the call is made directly from"}],
                                              0,false},
                                             {text,"\venif_select"},
                                             {sep,
                                              [{text,
                                                "Eor false if it is a scheduled call (potentially from another thread)."}],
                                              0,false}],
                                            0,false}],
                                          0,true},
                                         null},
                                        null}}],
                                     0,false},
                                    {text,[5,60,47,100,100,62]}],
                                   0,true},
                                  null},
                                 null}}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,116,62]},
                                   {sep,
                                    [{sep,
                                      [{text,
                                        [18,69,114,108,78,105,102,67,104,97,
                                         114,69,110,99,111,100,105,110,103]},
                                       {text,
                                        [18,69,114,108,78,105,102,67,104,97,
                                         114,69,110,99,111,100,105,110,103]}],
                                      0,false}],
                                    0,false},
                                   {text,[5,60,47,100,116,62]}],
                                  0,true},
                                 null},
                                null}}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{text,[4,60,100,100,62]},
                                  {sep,
                                   [{above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {above,
                                        {above,
                                         {text,[3,96,96,96]},
                                         {sep,
                                          [{text,
                                            "7\ntypedef enum {\n    ERL_NIF_LATIN1\n}ErlNifCharEncoding;"}],
                                          0,true}},
                                        {text,[3,96,96,96]}},
                                       null},
                                      null}},
                                    {above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{sep,
                                          [{sep,
                                            [{text,
                                              "PThe character encoding used in strings and atoms. The only supported encoding is"}],
                                            0,false},
                                           {text,
                                            [14,69,82,76,95,78,73,70,95,76,65,
                                             84,73,78,49]},
                                           {sep,
                                            [{text,
                                              [30,102,111,114,32,73,83,79,32,
                                               76,97,116,105,110,45,49,32,40,
                                               56,45,98,105,116,32,65,83,67,
                                               73,73,41,46]}],
                                            0,false}],
                                          0,false}],
                                        0,true},
                                       null},
                                      null}}],
                                   0,false},
                                  {text,[5,60,47,100,100,62]}],
                                 0,true},
                                null},
                               null}}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,116,62]},
                                 {sep,
                                  [{sep,
                                    [{text,"\rErlNifSysInfo"},
                                     {text,"\rErlNifSysInfo"}],
                                    0,false}],
                                  0,false},
                                 {text,[5,60,47,100,116,62]}],
                                0,true},
                               null},
                              null}}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{text,[4,60,100,100,62]},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{sep,
                                      [{sep,
                                        [{text,[7,85,115,101,100,32,98,121]}],
                                        0,false},
                                       {text,
                                        [16,101,110,105,102,95,115,121,115,
                                         116,101,109,95,105,110,102,111]},
                                       {sep,
                                        [{text,
                                          "Lto return information about the runtime system. Contains the same content as"}],
                                        0,false},
                                       {text,
                                        [24,101,114,108,95,100,114,105,118,
                                         101,114,35,69,114,108,68,114,118,83,
                                         121,115,73,110,102,111]},
                                       {sep,[{text,[1,46]}],0,false}],
                                      0,false}],
                                    0,true},
                                   null},
                                  null}},
                                {text,[5,60,47,100,100,62]}],
                               0,true},
                              null},
                             null}}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,116,62]},
                               {sep,
                                [{sep,
                                  [{text,"\fErlNifSInt64"},
                                   {text,"\fErlNifSInt64"}],
                                  0,false}],
                                0,false},
                               {text,[5,60,47,100,116,62]}],
                              0,true},
                             null},
                            null}}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,100,62]},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{sep,
                                    [{text,
                                      "$A native signed 64-bit integer type."}],
                                    0,false}],
                                  0,true},
                                 null},
                                null}},
                              {text,[5,60,47,100,100,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,116,62]},
                             {sep,
                              [{sep,
                                [{text,"\fErlNifUInt64"},
                                 {text,"\fErlNifUInt64"}],
                                0,false}],
                              0,false},
                             {text,[5,60,47,100,116,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,
                                  [{text,
                                    "&A native unsigned 64-bit integer type."}],
                                  0,false}],
                                0,true},
                               null},
                              null}},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,
                            [{sep,
                              [{text,"\nErlNifTime"},{text,"\nErlNifTime"}],
                              0,false}],
                            0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  "8A signed 64-bit integer type for representation of time."}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,
                          [{sep,
                            [{text,
                              [14,69,114,108,78,105,102,84,105,109,101,85,110,
                               105,116]},
                             {text,
                              [14,69,114,108,78,105,102,84,105,109,101,85,110,
                               105,116]}],
                            0,false}],
                          0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {sep,
                         [{above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  "6An enumeration of time units supported by the NIF API:"}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {above,
                           {above,
                            {text,[4,60,100,108,62]},
                            {nest,4,
                             {above,
                              {above,
                               {above,
                                {above,
                                 {above,
                                  {above,
                                   {above,
                                    {above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{text,[4,60,100,116,62]},
                                         {sep,
                                          [{text,"\vERL_NIF_SEC"}],
                                          0,false},
                                         {text,[5,60,47,100,116,62]}],
                                        0,true},
                                       null},
                                      null}},
                                    {above,
                                     {above,{above,{text,[0]},null},null},
                                     {above,
                                      {above,
                                       {sep,
                                        [{text,[4,60,100,100,62]},
                                         {text,[7,83,101,99,111,110,100,115]},
                                         {text,[5,60,47,100,100,62]}],
                                        0,true},
                                       null},
                                      null}}},
                                   {above,
                                    {above,{above,{text,[0]},null},null},
                                    {above,
                                     {above,
                                      {sep,
                                       [{text,[4,60,100,116,62]},
                                        {sep,
                                         [{text,"\fERL_NIF_MSEC"}],
                                         0,false},
                                        {text,[5,60,47,100,116,62]}],
                                       0,true},
                                      null},
                                     null}}},
                                  {above,
                                   {above,{above,{text,[0]},null},null},
                                   {above,
                                    {above,
                                     {sep,
                                      [{text,[4,60,100,100,62]},
                                       {text,"\fMilliseconds"},
                                       {text,[5,60,47,100,100,62]}],
                                      0,true},
                                     null},
                                    null}}},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{text,[4,60,100,116,62]},
                                      {sep,[{text,"\fERL_NIF_USEC"}],0,false},
                                      {text,[5,60,47,100,116,62]}],
                                     0,true},
                                    null},
                                   null}}},
                                {above,
                                 {above,{above,{text,[0]},null},null},
                                 {above,
                                  {above,
                                   {sep,
                                    [{text,[4,60,100,100,62]},
                                     {text,"\fMicroseconds"},
                                     {text,[5,60,47,100,100,62]}],
                                    0,true},
                                   null},
                                  null}}},
                               {above,
                                {above,{above,{text,[0]},null},null},
                                {above,
                                 {above,
                                  {sep,
                                   [{text,[4,60,100,116,62]},
                                    {sep,[{text,"\fERL_NIF_NSEC"}],0,false},
                                    {text,[5,60,47,100,116,62]}],
                                   0,true},
                                  null},
                                 null}}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,100,62]},
                                   {text,"\vNanoseconds"},
                                   {text,[5,60,47,100,100,62]}],
                                  0,true},
                                 null},
                                null}}}}},
                           {text,[5,60,47,100,108,62]}}],
                         0,false},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,
                        [{sep,
                          [{text,
                            [19,69,114,108,78,105,102,85,110,105,113,117,101,
                             73,110,116,101,103,101,114]},
                           {text,
                            [19,69,114,108,78,105,102,85,110,105,113,117,101,
                             73,110,116,101,103,101,114]}],
                          0,false}],
                        0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {sep,
                       [{above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{sep,
                                [{text,
                                  ";An enumeration of the properties that can be requested from"}],
                                0,false},
                               {text,
                                [24,101,110,105,102,95,109,97,107,101,95,117,
                                 110,105,113,117,101,95,105,110,116,101,103,
                                 101,114]},
                               {sep,
                                [{text,
                                  "#. For default properties, use value"}],
                                0,false},
                               {text,[1,48]},
                               {sep,[{text,[1,46]}],0,false}],
                              0,false}],
                            0,true},
                           null},
                          null}},
                        {above,
                         {above,
                          {text,[4,60,100,108,62]},
                          {nest,4,
                           {above,
                            {above,
                             {above,
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,116,62]},
                                   {sep,
                                    [{text,
                                      [23,69,82,76,95,78,73,70,95,85,78,73,81,
                                       85,69,95,80,79,83,73,84,73,86,69]}],
                                    0,false},
                                   {text,[5,60,47,100,116,62]}],
                                  0,true},
                                 null},
                                null}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,100,62]},
                                   {above,
                                    {above,{above,{text,[0]},null},null},
                                    {above,
                                     {above,
                                      {sep,
                                       [{sep,
                                         [{text,
                                           [30,82,101,116,117,114,110,32,111,
                                            110,108,121,32,112,111,115,105,
                                            116,105,118,101,32,105,110,116,
                                            101,103,101,114,115,46]}],
                                         0,false}],
                                       0,true},
                                      null},
                                     null}},
                                   {text,[5,60,47,100,100,62]}],
                                  0,true},
                                 null},
                                null}}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{text,[4,60,100,116,62]},
                                  {sep,
                                   [{text,
                                     [24,69,82,76,95,78,73,70,95,85,78,73,81,
                                      85,69,95,77,79,78,79,84,79,78,73,67]}],
                                   0,false},
                                  {text,[5,60,47,100,116,62]}],
                                 0,true},
                                null},
                               null}}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,100,62]},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{sep,
                                       [{sep,[{text,"\vReturn only"}],0,false},
                                        {text,
                                         "!strictly monotonically increasing"},
                                        {sep,
                                         [{text,
                                           "'integer corresponding to creation time."}],
                                         0,false}],
                                       0,false}],
                                     0,true},
                                    null},
                                   null}},
                                 {text,[5,60,47,100,100,62]}],
                                0,true},
                               null},
                              null}}}}},
                         {text,[5,60,47,100,108,62]}}],
                       0,false},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{sep,
                        [{text,"\nErlNifHash"},{text,"\nErlNifHash"}],
                        0,false}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {sep,
                     [{above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{sep,
                              [{text,
                                "FAn enumeration of the supported hash types that can be generated using"}],
                              0,false},
                             {text,"\tenif_hash"},
                             {sep,[{text,[1,46]}],0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {above,
                       {above,
                        {text,[4,60,100,108,62]},
                        {nest,4,
                         {above,
                          {above,
                           {above,
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,116,62]},
                                 {sep,
                                  [{text,
                                    [21,69,82,76,95,78,73,70,95,73,78,84,69,
                                     82,78,65,76,95,72,65,83,72]}],
                                  0,false},
                                 {text,[5,60,47,100,116,62]}],
                                0,true},
                               null},
                              null}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,100,62]},
                                 {sep,
                                  [{above,
                                    {above,{above,{text,[0]},null},null},
                                    {above,
                                     {above,
                                      {sep,
                                       [{sep,
                                         [{text,
                                           "nNon-portable hash function that only guarantees the same hash for the same term within one Erlang VM instance."}],
                                         0,false}],
                                       0,true},
                                      null},
                                     null}},
                                   {above,
                                    {above,{above,{text,[0]},null},null},
                                    {above,
                                     {above,
                                      {sep,
                                       [{sep,
                                         [{sep,
                                           [{text,
                                             "7It takes 32-bit salt values and generates hashes within"}],
                                           0,false},
                                          {text,"\t0..2^32-1"},
                                          {sep,[{text,[1,46]}],0,false}],
                                         0,false}],
                                       0,true},
                                      null},
                                     null}}],
                                  0,false},
                                 {text,[5,60,47,100,100,62]}],
                                0,true},
                               null},
                              null}}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{text,[4,60,100,116,62]},
                                {sep,
                                 [{text,
                                   [14,69,82,76,95,78,73,70,95,80,72,65,83,72,
                                    50]}],
                                 0,false},
                                {text,[5,60,47,100,116,62]}],
                               0,true},
                              null},
                             null}}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,100,62]},
                               {sep,
                                [{above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{sep,
                                       [{text,
                                         "}Portable hash function that gives the same hash for the same Erlang term regardless of machine architecture and ERTS version."}],
                                       0,false}],
                                     0,true},
                                    null},
                                   null}},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{sep,
                                       [{text,
                                         [22,73,116,32,105,103,110,111,114,
                                          101,115,32,115,97,108,116,32,118,97,
                                          108,117,101,115]},
                                        {sep,
                                         [{text,
                                           "\eand generates hashes within"}],
                                         0,false},
                                        {text,"\t0..2^27-1"},
                                        {sep,[{text,[1,46]}],0,false}],
                                       0,false}],
                                     0,true},
                                    null},
                                   null}},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{sep,
                                       [{sep,[{text,"\vSlower than"}],0,false},
                                        {text,
                                         [22,69,82,76,95,78,73,70,95,73,78,84,
                                          69,82,78,65,76,95,72,65,83,72,46]},
                                        {sep,
                                         [{text,
                                           [17,73,116,32,99,111,114,114,101,
                                            115,112,111,110,100,115,32,116,
                                            111]}],
                                         0,false},
                                        {text,
                                         [15,101,114,108,97,110,103,35,112,
                                          104,97,115,104,50,45,49]},
                                        {sep,[{text,[1,46]}],0,false}],
                                       0,false}],
                                     0,true},
                                    null},
                                   null}}],
                                0,false},
                               {text,[5,60,47,100,100,62]}],
                              0,true},
                             null},
                            null}}}}},
                       {text,[5,60,47,100,108,62]}}],
                     0,false},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,
                    [{sep,[{text,"\bSysIOVec"},{text,"\bSysIOVec"}],0,false}],
                    0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            [31,65,32,115,121,115,116,101,109,32,73,47,79,32,
                             118,101,99,116,111,114,44,32,97,115,32,117,115,
                             101,100,32,98,121]}],
                          0,false},
                         {text,[6,119,114,105,116,101,118]},
                         {sep,[{text,"\von Unix and"}],0,false},
                         {text,[7,87,83,65,83,101,110,100]},
                         {sep,
                          [{text,
                            [23,111,110,32,87,105,110,51,50,46,32,73,116,32,
                             105,115,32,117,115,101,100,32,105,110]}],
                          0,false},
                         {text,"\vErlNifIOVec"},
                         {sep,[{text,[6,97,110,100,32,98,121]}],0,false},
                         {text,"\renif_ioq_peek"},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{sep,
                    [{text,"\vErlNifIOVec"},{text,"\vErlNifIOVec"}],
                    0,false}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {above,
                      {above,
                       {text,[3,96,96,96]},
                       {sep,
                        [{text,
                          "N\ntypedef struct {\n  int iovcnt;\n  size_t size;\n  SysIOVec* iov;\n} ErlNifIOVec;"}],
                        0,true}},
                      {text,[3,96,96,96]}},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            [24,65,110,32,73,47,79,32,118,101,99,116,111,114,
                             32,99,111,110,116,97,105,110,105,110,103]}],
                          0,false},
                         {text,[6,105,111,118,99,110,116]},
                         {text,"\bSysIOVec"},
                         {sep,
                          [{text,"%s pointing to the data. It is used by"}],
                          0,false},
                         {text,
                          [18,101,110,105,102,95,105,110,115,112,101,99,116,
                           95,105,111,118,101,99]},
                         {sep,[{text,[3,97,110,100]}],0,false},
                         {text,"\renif_ioq_enqv"},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,
                [{sep,
                  [{text,
                    [17,69,114,108,78,105,102,73,79,81,117,101,117,101,79,112,
                     116,115]},
                   {text,
                    [17,69,114,108,78,105,102,73,79,81,117,101,117,101,79,112,
                     116,115]}],
                  0,false}],
                0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {sep,
               [{sep,
                 [{text,
                   [22,79,112,116,105,111,110,115,32,116,111,32,99,111,110,
                    102,105,103,117,114,101,32,97]}],
                 0,false},
                {text,"\rErlNifIOQueue"},
                {sep,[{text,[1,46]}],0,false},
                {above,
                 {above,
                  {text,[4,60,100,108,62]},
                  {nest,4,
                   {above,
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,
                          [{text,
                            [18,69,82,76,95,78,73,70,95,73,79,81,95,78,79,82,
                             77,65,76]}],
                          0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,100,62]},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{text,
                                 [25,67,114,101,97,116,101,32,97,32,110,111,
                                  114,109,97,108,32,73,47,79,32,81,117,101,
                                  117,101]}],
                               0,false}],
                             0,true},
                            null},
                           null}},
                         {text,[5,60,47,100,100,62]}],
                        0,true},
                       null},
                      null}}}}},
                 {text,[5,60,47,100,108,62]}}],
               0,false},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## enif_alloc(size_t size):void *"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [24,65,108,108,111,99,97,116,101,32,100,121,110,97,109,105,99,32,
             109,101,109,111,114,121,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,65,108,108,111,99,97,116,101,115,32,109,101,109,111,114,
                 121,32,111,102]}],
              0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,[{text,[6,98,121,116,101,115,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                [24,105,102,32,116,104,101,32,97,108,108,111,99,97,116,105,
                 111,110,32,102,97,105,108,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "`The returned pointer is suitably aligned for any built-in type that fit in the allocated memory."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"8## enif_alloc_binary(size_t size, ErlNifBinary* bin):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [20,67,114,101,97,116,101,32,97,32,110,101,119,32,98,105,110,97,
             114,121,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [30,65,108,108,111,99,97,116,101,115,32,97,32,110,101,119,32,
                 98,105,110,97,114,121,32,111,102,32,115,105,122,101]}],
              0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,
              [{text,".bytes. Initializes the structure pointed to by"}],
              0,false},
             {text,[5,42,98,105,110,42]},
             {sep,
              [{text,
                "Gto refer to the allocated binary. The binary must either be released by"}],
              0,false},
             {text,"+[enif_release_binary](#enif_release_binary)"},
             {sep,
              [{text,"/or ownership transferred to an Erlang term with"}],
              0,false},
             {text,"%[enif_make_binary](#enif_make_binary)"},
             {sep,
              [{text,
                [26,46,32,65,110,32,97,108,108,111,99,97,116,101,100,32,40,97,
                 110,100,32,111,119,110,101,100,41]}],
              0,false},
             {text,[14,42,69,114,108,78,105,102,66,105,110,97,114,121,42]},
             {sep,
              [{text,
                [30,99,97,110,32,98,101,32,107,101,112,116,32,98,101,116,119,
                 101,101,110,32,78,73,70,32,99,97,108,108,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "XIf you do not need to reallocate or keep the data alive across NIF calls, consider using"}],
              0,false},
             {text,"-[enif_make_new_binary](#enif_make_new_binary)"},
             {sep,
              [{text,
                "Minstead as it will allocate small binaries on the process heap when possible."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [20,105,102,32,97,108,108,111,99,97,116,105,111,110,32,102,97,
                 105,108,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [31,35,35,32,101,110,105,102,95,97,108,108,111,99,95,101,110,118,40,
         41,58,69,114,108,78,105,102,69,110,118,32,42]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [25,67,114,101,97,116,101,32,97,32,110,101,119,32,101,110,118,105,
             114,111,110,109,101,110,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ºAllocates a new process independent environment. The environment can be used to hold terms that are not bound to any process. Such terms can later be copied to a process environment with"}],
              0,false},
             {text,"![enif_make_copy](#enif_make_copy)"},
             {sep,
              [{text,")or be sent to a process as a message with"}],
              0,false},
             {text,
              [23,91,101,110,105,102,95,115,101,110,100,93,40,35,101,110,105,
               102,95,115,101,110,100,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,[{text,"'Returns pointer to the new environment."}],0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "N## enif_alloc_resource(ErlNifResourceType*\n        type, unsigned size):void *"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"*Allocate a memory-managed resource object."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"2Allocates a memory-managed resource object of type"}],
              0,false},
             {text,[6,42,116,121,112,101,42]},
             {sep,[{text,"\band size"}],0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,[{text,[6,98,121,116,101,115,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [146,35,35,32,101,110,105,102,95,98,105,110,97,114,121,95,116,111,95,
         116,101,114,109,40,69,114,108,78,105,102,69,110,118,32,42,101,110,
         118,44,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,117,110,115,
         105,103,110,101,100,32,99,104,97,114,42,32,100,97,116,97,44,32,115,
         105,122,101,95,116,32,115,105,122,101,44,32,69,82,76,95,78,73,70,95,
         84,69,82,77,32,42,116,101,114,109,44,10,32,32,32,32,32,32,32,32,69,
         114,108,78,105,102,66,105,110,97,114,121,84,111,84,101,114,109,32,
         111,112,116,115,41,58,115,105,122,101,95,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"'Create a term from the external format."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "@Creates a term that is the result of decoding the binary data at"}],
              0,false},
             {text,[6,42,100,97,116,97,42]},
             {sep,
              [{text,
                "R, which must be encoded according to the Erlang external term format. No more than"}],
              0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,
              [{text,
                [19,98,121,116,101,115,32,97,114,101,32,114,101,97,100,32,102,
                 114,111,109]}],
              0,false},
             {text,[6,42,100,97,116,97,42]},
             {sep,[{text,"\n. Argument"}],0,false},
             {text,[6,42,111,112,116,115,42]},
             {sep,[{text,"%corresponds to the second argument to"}],0,false},
             {text,"4[erlang#binary_to_term-2](./erlang#binary_to_term-2)"},
             {sep,
              [{text,
                [18,97,110,100,32,109,117,115,116,32,98,101,32,101,105,116,
                 104,101,114]}],
              0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,
              [23,42,69,82,76,95,78,73,70,95,66,73,78,50,84,69,82,77,95,83,65,
               70,69,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"(On success, stores the resulting term at"}],
              0,false},
             {text,[7,42,42,116,101,114,109,42]},
             {sep,
              [{text,"-and returns the number of bytes read. Returns"}],
              0,false},
             {text,[3,42,48,42]},
             {sep,
              [{text,
                [23,105,102,32,100,101,99,111,100,105,110,103,32,102,97,105,
                 108,115,32,111,114,32,105,102]}],
              0,false},
             {text,[6,42,111,112,116,115,42]},
             {sep,[{text,"\vis invalid."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,")[ErlNifBinaryToTerm](#ErlNifBinaryToTerm)"},
             {sep,[{text,[1,44]}],0,false},
             {text,"4[erlang#binary_to_term-2](./erlang#binary_to_term-2)"},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,"+[enif_term_to_binary](#enif_term_to_binary)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"&## enif_clear_env(ErlNifEnv* env):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,67,108,101,97,114,32,97,110,32,101,110,118,105,114,111,110,
             109,101,110,116,32,102,111,114,32,114,101,117,115,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "hFrees all terms in an environment and clears it for reuse. The environment must have been allocated with"}],
              0,false},
             {text,"![enif_alloc_env](#enif_alloc_env)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"7## enif_compare(ERL_NIF_TERM lhs, ERL_NIF_TERM rhs):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [18,67,111,109,112,97,114,101,32,116,119,111,32,116,101,114,109,
             115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [20,82,101,116,117,114,110,115,32,97,110,32,105,110,116,101,
                 103,101,114,32,60]}],
              0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[5,42,108,104,115,42]},
             {sep,[{text,[1,60]}],0,false},
             {text,[5,42,114,104,115,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[5,42,108,104,115,42]},
             {sep,[{text,[1,61]}],0,false},
             {text,[5,42,114,104,115,42]},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {sep,[{text,[1,62]}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[5,42,108,104,115,42]},
             {sep,[{text,[1,62]}],0,false},
             {text,[5,42,114,104,115,42]},
             {sep,[{text,"%. Corresponds to the Erlang operators"}],0,false},
             {text,[4,42,61,61,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[4,42,47,61,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[4,42,61,60,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[3,42,60,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,[4,42,62,61,42]},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,[3,42,62,42]},
             {sep,[{text,[4,40,98,117,116]}],0,false},
             {text,[7,42,42,110,111,116,42,42]},
             {text,[5,42,61,58,61,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,[5,42,61,47,61,42]},
             {sep,[{text,[2,41,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "b## enif_compare_monitors(const ErlNifMonitor\n        *monitor1, const ErlNifMonitor *monitor2):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,67,111,109,112,97,114,101,32,116,119,111,32,109,111,110,105,
             116,111,114,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"9<a name=\"enif_compare_monitors\">enif_compare_monitors</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\fCompares two"}],0,false},
             {text,
              [31,91,69,114,108,78,105,102,77,111,110,105,116,111,114,93,40,
               35,69,114,108,78,105,102,77,111,110,105,116,111,114,41]},
             {sep,
              [{text,
                "Ts. Can also be used to imply some artificial order on monitors, for whatever reason."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\n*monitor1*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\n*monitor2*"},
             {sep,[{text,"\nare equal,"}],0,false},
             {sep,[{text,[1,60]}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\n*monitor1*"},
             {sep,[{text,[1,60]}],0,false},
             {text,"\n*monitor2*"},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {sep,[{text,[1,62]}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\n*monitor1*"},
             {sep,[{text,[1,62]}],0,false},
             {text,"\n*monitor2*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "G## enif_compare_pids(const ErlNifPid *pid1, const ErlNifPid *pid2)\n:int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [17,67,111,109,112,97,114,101,32,116,119,111,32,112,105,100,115,
             46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\fCompares two"}],0,false},
             {text,
              [23,91,69,114,108,78,105,102,80,105,100,93,40,35,69,114,108,78,
               105,102,80,105,100,41]},
             {sep,
              [{text,
                [26,115,32,97,99,99,111,114,100,105,110,103,32,116,111,32,116,
                 101,114,109,32,111,114,100,101,114,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,112,105,100,49,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[6,42,112,105,100,50,42]},
             {sep,[{text,"\nare equal,"}],0,false},
             {sep,[{text,[1,60]}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,112,105,100,49,42]},
             {sep,[{text,[1,60]}],0,false},
             {text,[6,42,112,105,100,50,42]},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {sep,[{text,[1,62]}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,112,105,100,49,42]},
             {sep,[{text,[1,62]}],0,false},
             {text,[6,42,112,105,100,50,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,",## enif_cond_broadcast(ErlNifCond *cnd):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "H[erl_driver#erl_drv_cond_broadcast](./erl_driver#erl_drv_cond_broadcast)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,",## enif_cond_create(char *name):ErlNifCond *"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "B[erl_driver#erl_drv_cond_create](./erl_driver#erl_drv_cond_create)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## enif_cond_destroy(ErlNifCond *cnd):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "D[erl_driver#erl_drv_cond_destroy](./erl_driver#erl_drv_cond_destroy)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"(## enif_cond_name(ErlNifCond* cnd):char*"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              ">[erl_driver#erl_drv_cond_name](./erl_driver#erl_drv_cond_name)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,")## enif_cond_signal(ErlNifCond *cnd):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "B[erl_driver#erl_drv_cond_signal](./erl_driver#erl_drv_cond_signal)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"9## enif_cond_wait(ErlNifCond *cnd, ErlNifMutex *mtx):void"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              ">[erl_driver#erl_drv_cond_wait](./erl_driver#erl_drv_cond_wait)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## enif_consume_timeslice(ErlNifEnv *env, int percent):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [455,71,105,118,101,115,32,116,104,101,32,114,117,110,116,105,
               109,101,32,115,121,115,116,101,109,32,97,32,104,105,110,116,32,
               97,98,111,117,116,32,104,111,119,32,109,117,99,104,32,67,80,85,
               32,116,105,109,101,32,116,104,101,32,99,117,114,114,101,110,
               116,32,78,73,70,32,99,97,108,108,32,104,97,115,32,99,111,110,
               115,117,109,101,100,32,115,105,110,99,101,32,116,104,101,32,
               108,97,115,116,32,104,105,110,116,44,32,111,114,32,115,105,110,
               99,101,32,116,104,101,32,115,116,97,114,116,32,111,102,32,116,
               104,101,32,78,73,70,32,105,102,32,110,111,32,112,114,101,118,
               105,111,117,115,32,104,105,110,116,32,104,97,115,32,98,101,101,
               110,32,115,112,101,99,105,102,105,101,100,46,32,84,104,101,32,
               116,105,109,101,32,105,115,32,115,112,101,99,105,102,105,101,
               100,32,97,115,32,97,32,112,101,114,99,101,110,116,32,111,102,
               32,116,104,101,32,116,105,109,101,115,108,105,99,101,32,116,
               104,97,116,32,97,32,112,114,111,99,101,115,115,32,105,115,32,
               97,108,108,111,119,101,100,32,116,111,32,101,120,101,99,117,
               116,101,32,69,114,108,97,110,103,32,99,111,100,101,32,117,110,
               116,105,108,32,105,116,32,99,97,110,32,98,101,32,115,117,115,
               112,101,110,100,101,100,32,116,111,32,103,105,118,101,32,116,
               105,109,101,32,102,111,114,32,111,116,104,101,114,32,114,117,
               110,110,97,98,108,101,32,112,114,111,99,101,115,115,101,115,46,
               32,84,104,101,32,115,99,104,101,100,117,108,105,110,103,32,116,
               105,109,101,115,108,105,99,101,32,105,115,32,110,111,116,32,97,
               110,32,101,120,97,99,116,32,101,110,116,105,116,121,44,32,98,
               117,116,32,99,97,110,32,117,115,117,97,108,108,121,32,98,101,
               32,97,112,112,114,111,120,105,109,97,116,101,100,32,116,111,32,
               97,98,111,117,116,32,49,32,109,105,108,108,105,115,101,99,111,
               110,100,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "èNotice that it is up to the runtime system to determine if and how to use this information. Implementations on some platforms can use other means to determine consumed CPU time. Lengthy NIFs should regardless of this frequently call"}],
              0,false},
             {text,
              [24,42,101,110,105,102,95,99,111,110,115,117,109,101,95,116,105,
               109,101,115,108,105,99,101,42]},
             {sep,
              [{text,"4to determine if it is allowed to continue execution."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,"\t*percent*"},
             {sep,
              [{text,
                "omust be an integer between 1 and 100. This function must only be called from a NIF-calling thread, and argument"}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,
              [{text,"/must be the environment of the calling process."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[3,42,49,42]},
             {sep,
              [{text,"(if the timeslice is exhausted, otherwise"}],
              0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[4,46,32,73,102]}],0,false},
             {text,[3,42,49,42]},
             {sep,
              [{text,
                "Xis returned, the NIF is to return as soon as possible in order for the process to yield."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ãThis function is provided to better support co-operative scheduling, improve system responsiveness, and make it easier to prevent misbehaviors of the VM because of a NIF monopolizing a scheduler thread. It can be used to divide"}],
              0,false},
             {text,
              [28,91,108,101,110,103,116,104,32,119,111,114,107,93,40,35,108,
               101,110,103,116,104,121,95,119,111,114,107,41]},
             {sep,
              [{text,
                "Ginto a number of repeated NIF calls without the need to create threads."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\fSee also the"}],0,false},
             {text,
              [19,91,119,97,114,110,105,110,103,93,40,35,87,65,82,78,73,78,71,
               41]},
             {sep,
              [{text,"*text at the beginning of this manual page."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "d## enif_convert_time_unit(ErlNifTime\n        val, ErlNifTimeUnit from, ErlNifTimeUnit to):ErlNifTime"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"\"Convert time unit of a time value."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,";<a name=\"enif_convert_time_unit\">enif_convert_time_unit</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\fConverts the"}],0,false},
             {text,[5,42,118,97,108,42]},
             {sep,
              [{text,
                [18,118,97,108,117,101,32,111,102,32,116,105,109,101,32,117,
                 110,105,116]}],
              0,false},
             {text,[6,42,102,114,111,109,42]},
             {sep,[{text,"'to the corresponding value of time unit"}],0,false},
             {text,[4,42,116,111,42]},
             {sep,
              [{text,"1. The result is rounded using the floor function."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,[3,118,97,108]}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {text,
                    [31,86,97,108,117,101,32,116,111,32,99,111,110,118,101,
                     114,116,32,116,105,109,101,32,117,110,105,116,32,102,111,
                     114,46]},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,[4,102,114,111,109]}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {sep,
                  [{sep,[{text,"\fTime unit of"}],0,false},
                   {text,[3,118,97,108]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,[2,116,111]}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {text,
                [28,84,105,109,101,32,117,110,105,116,32,111,102,32,114,101,
                 116,117,114,110,101,100,32,118,97,108,117,101,46]},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,
              [20,42,69,82,76,95,78,73,70,95,84,73,77,69,95,69,82,82,79,82,
               42]},
             {sep,
              [{text,"-if called with an invalid time unit argument."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,
              [25,91,69,114,108,78,105,102,84,105,109,101,93,40,35,69,114,108,
               78,105,102,84,105,109,101,41]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"![ErlNifTimeUnit](#ErlNifTimeUnit)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## enif_cpu_time(ErlNifEnv *):ERL_NIF_TERM"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"*Returns the CPU time in the same format as"}],
              0,false},
             {text,"*[erlang#timestamp-0](./erlang#timestamp-0)"},
             {sep,
              [{text,
                [158,46,32,84,104,101,32,67,80,85,32,116,105,109,101,32,105,
                 115,32,116,104,101,32,116,105,109,101,32,116,104,101,32,99,
                 117,114,114,101,110,116,32,108,111,103,105,99,97,108,32,67,
                 80,85,32,104,97,115,32,115,112,101,110,116,32,101,120,101,99,
                 117,116,105,110,103,32,115,105,110,99,101,32,115,111,109,101,
                 32,97,114,98,105,116,114,97,114,121,32,112,111,105,110,116,
                 32,105,110,32,116,104,101,32,112,97,115,116,46,32,73,102,32,
                 116,104,101,32,79,83,32,100,111,101,115,32,110,111,116,32,
                 115,117,112,112,111,114,116,32,102,101,116,99,104,105,110,
                 103,32,116,104,105,115,32,118,97,108,117,101,44]}],
              0,false},
             {text,
              [15,42,101,110,105,102,95,99,112,117,95,116,105,109,101,42]},
             {sep,[{text,[7,105,110,118,111,107,101,115]}],0,false},
             {text,"%[enif_make_badarg](#enif_make_badarg)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "_## enif_demonitor_process(ErlNifEnv* caller_env,\n      void* obj, const ErlNifMonitor* mon):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [25,67,97,110,99,101,108,32,97,32,112,114,111,99,101,115,115,32,
             109,111,110,105,116,111,114,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,";<a name=\"enif_demonitor_process\">enif_demonitor_process</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"&Cancels a monitor created earlier with"}],0,false},
             {text,"-[enif_monitor_process](#enif_monitor_process)"},
             {sep,[{text,"\n. Argument"}],0,false},
             {text,[5,42,111,98,106,42]},
             {sep,
              [{text,"4is a pointer to the resource holding the monitor and"}],
              0,false},
             {text,[6,42,42,109,111,110,42]},
             {sep,
              [{text,
                [23,105,100,101,110,116,105,102,105,101,115,32,116,104,101,32,
                 109,111,110,105,116,111,114,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,"\f*caller_env*"},
             {sep,
              [{text,
                "iis the environment of the calling process or callback. Must only be NULL if calling from a custom thread."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[3,42,48,42]},
             {sep,
              [{text,
                [146,105,102,32,116,104,101,32,109,111,110,105,116,111,114,32,
                 119,97,115,32,115,117,99,99,101,115,115,102,117,108,108,121,
                 32,105,100,101,110,116,105,102,105,101,100,32,97,110,100,32,
                 114,101,109,111,118,101,100,46,32,82,101,116,117,114,110,115,
                 32,97,32,110,111,110,45,122,101,114,111,32,118,97,108,117,
                 101,32,105,102,32,116,104,101,32,109,111,110,105,116,111,114,
                 32,99,111,117,108,100,32,110,111,116,32,98,101,32,105,100,
                 101,110,116,105,102,105,101,100,44,32,119,104,105,99,104,32,
                 109,101,97,110,115,32,105,116,32,119,97,115,32,101,105,116,
                 104,101,114]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {text,
            [31,110,101,118,101,114,32,99,114,101,97,116,101,100,32,102,111,
             114,32,116,104,105,115,32,114,101,115,111,117,114,99,101]}],
          0,false},
         {sep,
          [{text,[1,42]},
           {text,
            [17,97,108,114,101,97,100,121,32,99,97,110,99,101,108,108,101,
             100]}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {text,
           [17,97,108,114,101,97,100,121,32,116,114,105,103,103,101,114,101,
            100]}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {text,"1just about to be triggered by a concurrent thread"}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [146,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
               115,32,111,110,108,121,32,116,104,114,101,97,100,45,115,97,102,
               101,32,119,104,101,110,32,116,104,101,32,101,109,117,108,97,
               116,111,114,32,119,105,116,104,32,83,77,80,32,115,117,112,112,
               111,114,116,32,105,115,32,117,115,101,100,46,32,73,116,32,99,
               97,110,32,111,110,108,121,32,98,101,32,117,115,101,100,32,105,
               110,32,97,32,110,111,110,45,83,77,80,32,101,109,117,108,97,116,
               111,114,32,102,114,111,109,32,97,32,78,73,70,45,99,97,108,108,
               105,110,103,32,116,104,114,101,97,100,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"6## enif_equal_tids(ErlNifTid tid1, ErlNifTid tid2):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "@[erl_driver#erl_drv_equal_tids](./erl_driver#erl_drv_equal_tids)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## enif_fprintf(FILE *stream, const char *format, ...):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Format strings and Erlang terms."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\nSimilar to"}],0,false},
             {text,"\t*fprintf*"},
             {sep,[{text,"#but this format string also accepts"}],0,false},
             {text,[6,42,34,37,84,34,42]},
             {sep,[{text,"$, which formats Erlang terms of type"}],0,false},
             {text,
              [29,91,69,82,76,95,78,73,70,95,84,69,82,77,93,40,35,69,82,76,95,
               78,73,70,95,84,69,82,77,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "oThis function is primarily intended for debugging purpose. It is not recommended to print very large terms with"}],
              0,false},
             {text,[4,42,37,84,42]},
             {sep,
              [{text,
                [25,46,32,84,104,101,32,102,117,110,99,116,105,111,110,32,109,
                 97,121,32,99,104,97,110,103,101]}],
              0,false},
             {text,[7,42,101,114,114,110,111,42]},
             {sep,
              [{text,
                [21,44,32,101,118,101,110,32,105,102,32,115,117,99,99,101,115,
                 115,102,117,108,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [28,35,35,32,101,110,105,102,95,102,114,101,101,40,118,111,105,100,42,
         32,112,116,114,41,58,118,111,105,100]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [20,70,114,101,101,32,100,121,110,97,109,105,99,32,109,101,109,
             111,114,121,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [25,70,114,101,101,115,32,109,101,109,111,114,121,32,97,108,
                 108,111,99,97,116,101,100,32,98,121]}],
              0,false},
             {text,
              [25,91,101,110,105,102,95,97,108,108,111,99,93,40,35,101,110,
               105,102,95,97,108,108,111,99,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"%## enif_free_env(ErlNifEnv* env):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"2Free an environment allocated with enif_alloc_env."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"#Frees an environment allocated with"}],0,false},
             {text,"![enif_alloc_env](#enif_alloc_env)"},
             {sep,
              [{text,
                "9. All terms created in the environment are freed as well."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,")## enif_free_iovec(ErlNifIOvec* iov):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,[16,70,114,101,101,32,97,110,32,69,114,108,73,79,86,101,99]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text," Frees an io vector returned from"}],0,false},
             {text,")[enif_inspect_iovec](#enif_inspect_iovec)"},
             {sep,
              [{text,
                [26,46,32,84,104,105,115,32,105,115,32,110,101,101,100,101,
                 100,32,111,110,108,121,32,105,102,32,97]}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                [24,101,110,118,105,114,111,110,109,101,110,116,32,105,115,32,
                 112,97,115,115,101,100,32,116,111]}],
              0,false},
             {text,")[enif_inspect_iovec](#enif_inspect_iovec)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [278,10,69,114,108,78,105,102,73,79,86,101,99,32,42,105,111,118,
               101,99,32,61,32,78,85,76,76,59,10,115,105,122,101,95,116,32,
               109,97,120,95,101,108,101,109,101,110,116,115,32,61,32,49,50,
               56,59,10,69,82,76,95,78,73,70,95,84,69,82,77,32,116,97,105,108,
               59,10,105,102,32,40,33,101,110,105,102,95,105,110,115,112,101,
               99,116,95,105,111,118,101,99,40,78,85,76,76,44,32,109,97,120,
               95,101,108,101,109,101,110,116,115,44,32,116,101,114,109,44,32,
               38,116,97,105,108,44,32,38,105,111,118,101,99,41,41,10,32,32,
               114,101,116,117,114,110,32,48,59,10,10,47,47,32,68,111,32,116,
               104,105,110,103,115,32,119,105,116,104,32,116,104,101,32,105,
               111,118,101,99,10,10,47,42,32,70,114,101,101,32,116,104,101,32,
               105,111,118,101,99,116,111,114,44,32,112,111,115,115,105,98,
               108,121,32,105,110,32,97,110,111,116,104,101,114,32,116,104,
               114,101,97,100,32,111,114,32,110,105,102,32,102,117,110,99,116,
               105,111,110,32,99,97,108,108,32,42,47,10,101,110,105,102,95,
               102,114,101,101,95,105,111,118,101,99,40,105,111,118,101,99,41,
               59]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "t## enif_get_atom(ErlNifEnv* env, ERL_NIF_TERM\n        term, char* buf, unsigned size, ErlNifCharEncoding encode):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Get the text representation of an atom term."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bWrites a"}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,".-terminated string in the buffer pointed to by"}],
              0,false},
             {text,[5,42,98,117,102,42]},
             {sep,[{text,[7,111,102,32,115,105,122,101]}],0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,
              [{text,
                "5, consisting of the string representation of the atom"}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\rwith encoding"}],0,false},
             {text,
              [29,91,101,110,99,111,100,101,93,40,35,69,114,108,78,105,102,67,
               104,97,114,69,110,99,111,100,105,110,103,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                ":Returns the number of bytes written (including terminating"}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,[{text,"\rcharacter) or"}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"%is not an atom with maximum length of"}],0,false},
             {text,"\b*size-1*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "p## enif_get_atom_length(ErlNifEnv* env,\n        ERL_NIF_TERM term, unsigned* len, ErlNifCharEncoding encode):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [22,71,101,116,32,116,104,101,32,108,101,110,103,116,104,32,111,
               102,32,97,116,111,109]}],
            0,false},
           {text,[6,42,116,101,114,109,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[6,42,42,108,101,110,42]},
             {sep,
              [{text,"4to the length (number of bytes excluding terminating"}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                [22,99,104,97,114,97,99,116,101,114,41,32,111,102,32,116,104,
                 101,32,97,116,111,109]}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\rwith encoding"}],0,false},
             {text,"\b*encode*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [15,105,115,32,110,111,116,32,97,110,32,97,116,111,109,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "M## enif_get_double(ErlNifEnv* env,\n        ERL_NIF_TERM term, double* dp):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"\"Read a floating-point number term."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[5,42,42,100,112,42]},
             {sep,
              [{text,
                [30,116,111,32,116,104,101,32,102,108,111,97,116,105,110,103,
                 45,112,111,105,110,116,32,118,97,108,117,101,32,111,102]}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [15,105,115,32,110,111,116,32,97,32,102,108,111,97,116,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "G## enif_get_int(ErlNifEnv* env, ERL_NIF_TERM\n        term, int* ip):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,82,101,97,100,32,97,110,32,105,110,116,101,103,101,114,32,116,
             101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[5,42,42,105,112,42]},
             {sep,
              [{text,
                [23,116,111,32,116,104,101,32,105,110,116,101,103,101,114,32,
                 118,97,108,117,101,32,111,102]}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,"2is not an integer or is outside the bounds of type"}],
              0,false},
             {text,[5,42,105,110,116,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "R## enif_get_int64(ErlNifEnv* env, ERL_NIF_TERM\n        term, ErlNifSInt64* ip):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,[{sep,[{text,"\eRead a 64-bit integer term."}],0,false}],0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[5,42,42,105,112,42]},
             {sep,
              [{text,
                [23,116,111,32,116,104,101,32,105,110,116,101,103,101,114,32,
                 118,97,108,117,101,32,111,102]}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                "Fis not an integer or is outside the bounds of a signed 64-bit integer."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "T## enif_get_local_pid(ErlNifEnv* env,\n        ERL_NIF_TERM term, ErlNifPid* pid):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,82,101,97,100,32,97,32,108,111,99,97,108,32,112,105,100,32,
             116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[2,73,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                "Nis the pid of a node local process, this function initializes the pid variable"}],
              0,false},
             {text,[6,42,42,112,105,100,42]},
             {sep,
              [{text,
                [19,102,114,111,109,32,105,116,32,97,110,100,32,114,101,116,
                 117,114,110,115]}],
              0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                [19,46,32,79,116,104,101,114,119,105,115,101,32,114,101,116,
                 117,114,110,115]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,"2. No check is done to see if the process is alive."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         [20,42,101,110,105,102,95,103,101,116,95,108,111,99,
                          97,108,95,112,105,100,42]},
                        {sep,
                         [{text,
                           [29,119,105,108,108,32,114,101,116,117,114,110,32,
                            102,97,108,115,101,32,105,102,32,97,114,103,117,
                            109,101,110,116]}],
                         0,false},
                        {text,[6,42,116,101,114,109,42]},
                        {sep,[{text,"\vis the atom"}],0,false},
                        {text,
                         [31,91,101,110,105,102,95,109,97,107,101,95,112,105,
                          100,93,40,35,101,110,105,102,95,109,97,107,101,95,
                          112,105,100,41]},
                        {sep,[{text,[1,46]}],0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Z## enif_get_local_port(ErlNifEnv* env,\n        ERL_NIF_TERM term, ErlNifPort* port_id):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [23,82,101,97,100,32,97,32,108,111,99,97,108,32,112,111,114,116,
             32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[2,73,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                "Iidentifies a node local port, this function initializes the port variable"}],
              0,false},
             {text,"\n**port_id*"},
             {sep,
              [{text,
                [19,102,114,111,109,32,105,116,32,97,110,100,32,114,101,116,
                 117,114,110,115]}],
              0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                [19,46,32,79,116,104,101,114,119,105,115,101,32,114,101,116,
                 117,114,110,115]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,"/. No check is done to see if the port is alive."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "l## enif_get_list_cell(ErlNifEnv* env,\n        ERL_NIF_TERM list, ERL_NIF_TERM* head, ERL_NIF_TERM* tail):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [30,71,101,116,32,104,101,97,100,32,97,110,100,32,116,97,105,108,
             32,102,114,111,109,32,97,32,108,105,115,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[7,42,42,104,101,97,100,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[7,42,42,116,97,105,108,42]},
             {sep,[{text,"\tfrom list"}],0,false},
             {text,[6,42,108,105,115,116,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,")if it is not a list or the list is empty."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "U## enif_get_list_length(ErlNifEnv* env,\n        ERL_NIF_TERM term, unsigned* len):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [22,71,101,116,32,116,104,101,32,108,101,110,103,116,104,32,111,
               102,32,108,105,115,116]}],
            0,false},
           {text,[6,42,116,101,114,109,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[6,42,42,108,101,110,42]},
             {sep,
              [{text,
                [21,116,111,32,116,104,101,32,108,101,110,103,116,104,32,111,
                 102,32,108,105,115,116]}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [21,105,115,32,110,111,116,32,97,32,112,114,111,112,101,114,
                 32,108,105,115,116,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "M## enif_get_long(ErlNifEnv* env, ERL_NIF_TERM\n        term, long int* ip):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [25,82,101,97,100,32,97,32,108,111,110,103,32,105,110,116,101,103,
             101,114,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[5,42,42,105,112,42]},
             {sep,
              [{text,
                [28,116,111,32,116,104,101,32,108,111,110,103,32,105,110,116,
                 101,103,101,114,32,118,97,108,117,101,32,111,102]}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,"2is not an integer or is outside the bounds of type"}],
              0,false},
             {text,"\n*long int*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Q## enif_get_map_size(ErlNifEnv* env,\n        ERL_NIF_TERM term, size_t *size):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [28,82,101,97,100,32,116,104,101,32,115,105,122,101,32,111,102,32,
             97,32,109,97,112,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[7,42,42,115,105,122,101,42]},
             {sep,
              [{text,"+to the number of key-value pairs in the map"}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\ris not a map."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "j## enif_get_map_value(ErlNifEnv* env,\n        ERL_NIF_TERM map, ERL_NIF_TERM key, ERL_NIF_TERM* value):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Get the value of a key in a map."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,"\b**value*"},
             {sep,
              [{text,
                [28,116,111,32,116,104,101,32,118,97,108,117,101,32,97,115,
                 115,111,99,105,97,116,101,100,32,119,105,116,104]}],
              0,false},
             {text,[5,42,107,101,121,42]},
             {sep,[{text,"\nin the map"}],0,false},
             {text,[5,42,109,97,112,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[5,42,109,97,112,42]},
             {sep,
              [{text,
                [18,105,115,32,110,111,116,32,97,32,109,97,112,32,111,114,32,
                 105,102]}],
              0,false},
             {text,[5,42,109,97,112,42]},
             {sep,
              [{text,
                [16,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,
                 110]}],
              0,false},
             {text,[5,42,107,101,121,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "j## enif_get_resource(ErlNifEnv* env,\n        ERL_NIF_TERM term, ErlNifResourceType* type, void** objp):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"%Get the pointer to a resource object."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[7,42,42,111,98,106,112,42]},
             {sep,
              [{text,".to point to the resource object referred to by"}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,",is not a handle to a resource object of type"}],
              0,false},
             {text,[6,42,116,121,112,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "~## enif_get_string(ErlNifEnv* env,\n        ERL_NIF_TERM list, char* buf, unsigned size,\n        ErlNifCharEncoding encode):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,[{sep,[{text,"\eGet a C-string from a list."}],0,false}],0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bWrites a"}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,".-terminated string in the buffer pointed to by"}],
              0,false},
             {text,[5,42,98,117,102,42]},
             {sep,[{text,"\twith size"}],0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,
              [{text,",, consisting of the characters in the string"}],
              0,false},
             {text,[6,42,108,105,115,116,42]},
             {sep,
              [{text,"+. The characters are written using encoding"}],
              0,false},
             {text,
              [29,91,101,110,99,111,100,101,93,40,35,69,114,108,78,105,102,67,
               104,97,114,69,110,99,111,100,105,110,103,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [29,82,101,116,117,114,110,115,32,111,110,101,32,111,102,32,116,
               104,101,32,102,111,108,108,111,119,105,110,103,58]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{text,"2The number of bytes written (including terminating"}],
             0,false},
            {text,[6,42,78,85,76,76,42]},
            {sep,[{text,"\ncharacter)"}],0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[7,42,45,115,105,122,101,42]},
            {sep,
             [{text,"3if the string was truncated because of buffer space"}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[3,42,48,42]},
           {sep,[{text,[2,105,102]}],0,false},
           {text,[6,42,108,105,115,116,42]},
           {sep,[{text,"(is not a string that can be encoded with"}],0,false},
           {text,"\b*encode*"},
           {sep,[{text,[5,111,114,32,105,102]}],0,false},
           {text,[6,42,115,105,122,101,42]},
           {sep,[{text,[3,119,97,115]}],0,false},
           {sep,[{text,[1,60]}],0,false},
           {text,[3,42,49,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [28,84,104,101,32,119,114,105,116,116,101,110,32,115,116,114,
                 105,110,103,32,105,115,32,97,108,119,97,121,115]}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                [26,45,116,101,114,109,105,110,97,116,101,100,44,32,117,110,
                 108,101,115,115,32,98,117,102,102,101,114]}],
              0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,[{text,[2,105,115]}],0,false},
             {sep,[{text,[1,60]}],0,false},
             {text,[3,42,49,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "h## enif_get_tuple(ErlNifEnv* env, ERL_NIF_TERM\n        term, int* arity, const ERL_NIF_TERM** array):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Inspect the elements of a tuple."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[2,73,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [30,105,115,32,97,32,116,117,112,108,101,44,32,116,104,105,
                 115,32,102,117,110,99,116,105,111,110,32,115,101,116,115]}],
              0,false},
             {text,"\b**array*"},
             {sep,
              [{text,
                "Cto point to an array containing the elements of the tuple, and sets"}],
              0,false},
             {text,"\b**arity*"},
             {sep,
              [{text,
                "Ato the number of elements. Notice that the array is read-only and"}],
              0,false},
             {text,[15,42,40,42,97,114,114,97,121,41,91,78,45,49,93,42]},
             {sep,[{text," is the Nth element of the tuple."}],0,false},
             {text,"\b**array*"},
             {sep,
              [{text,"/is undefined if the arity of the tuple is zero."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [15,105,115,32,110,111,116,32,97,32,116,117,112,108,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Q## enif_get_uint(ErlNifEnv* env, ERL_NIF_TERM\n        term, unsigned int* ip):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [30,82,101,97,100,32,97,110,32,117,110,115,105,103,110,101,100,32,
             105,110,116,101,103,101,114,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[5,42,42,105,112,42]},
             {sep,[{text," to the unsigned integer value of"}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                ";is not an unsigned integer or is outside the bounds of type"}],
              0,false},
             {text,[14,42,117,110,115,105,103,110,101,100,32,105,110,116,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "S## enif_get_uint64(ErlNifEnv* env,\n        ERL_NIF_TERM term, ErlNifUInt64* ip):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"%Read an unsigned 64-bit integer term."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[5,42,42,105,112,42]},
             {sep,[{text," to the unsigned integer value of"}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                "Ris not an unsigned integer or is outside the bounds of an unsigned 64-bit integer."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "S## enif_get_ulong(ErlNifEnv* env, ERL_NIF_TERM\n        term, unsigned long* ip):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [30,82,101,97,100,32,97,110,32,117,110,115,105,103,110,101,100,32,
             105,110,116,101,103,101,114,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,[5,42,42,105,112,42]},
             {sep,[{text,"%to the unsigned long integer value of"}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                ";is not an unsigned integer or is outside the bounds of type"}],
              0,false},
             {text,
              [15,42,117,110,115,105,103,110,101,100,32,108,111,110,103,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "L## enif_getenv(const char* key, char* value,\n        size_t *value_size):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,")Get the value of an environment variable."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "8[erl_driver#erl_drv_getenv](./erl_driver#erl_drv_getenv)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "O## enif_has_pending_exception(ErlNifEnv* env,\n        ERL_NIF_TERM* reason):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"&Check if an exception has been raised."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                "9if a pending exception is associated with the environment"}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,[{text,[4,46,32,73,102]}],0,false},
             {text,"\b*reason*"},
             {sep,[{text,[4,105,115,32,97]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                "Epointer, ignore it. Otherwise, if a pending exception associated with"}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,[{text,"\vexists, set"}],0,false},
             {text,"\t**reason*"},
             {sep,
              [{text,"3to the value of the exception term. For example, if"}],
              0,false},
             {text,"%[enif_make_badarg](#enif_make_badarg)"},
             {sep,
              [{text,
                [26,105,115,32,99,97,108,108,101,100,32,116,111,32,115,101,
                 116,32,97,32,112,101,110,100,105,110,103]}],
              0,false},
             {text,"\b*badarg*"},
             {sep,
              [{text,
                [26,101,120,99,101,112,116,105,111,110,44,32,97,32,108,97,116,
                 101,114,32,99,97,108,108,32,116,111]}],
              0,false},
             {text,"**enif_has_pending_exception(env, &reason)*"},
             {sep,[{text,[4,115,101,116,115]}],0,false},
             {text,"\t**reason*"},
             {sep,[{text,"\vto the atom"}],0,false},
             {text,"\b*badarg*"},
             {sep,[{text,"\r, then return"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,"%[enif_make_badarg](#enif_make_badarg)"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"-[enif_raise_exception](#enif_raise_exception)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "P## enif_hash(ErlNifHash type, ERL_NIF_TERM term, ErlNifUInt64 salt):ErlNifUInt64"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{sep,[{sep,[{text,"\vHash terms."}],0,false}],0,true},null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[6,72,97,115,104,101,115]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [26,97,99,99,111,114,100,105,110,103,32,116,111,32,116,104,
                 101,32,115,112,101,99,105,102,105,101,100]}],
              0,false},
             {text,
              [25,91,69,114,108,78,105,102,72,97,115,104,93,40,35,69,114,108,
               78,105,102,72,97,115,104,41]},
             {text,[6,42,116,121,112,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "IRanges of taken salt (if any) and returned value depend on the hash type."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "\\## enif_inspect_binary(ErlNifEnv* env,\n        ERL_NIF_TERM bin_term, ErlNifBinary* bin):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Inspect the content of a binary."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"'Initializes the structure pointed to by"}],0,false},
             {text,[5,42,98,105,110,42]},
             {sep,[{text,"\"with information about binary term"}],0,false},
             {text,"\n*bin_term*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\n*bin_term*"},
             {sep,
              [{text,
                [16,105,115,32,110,111,116,32,97,32,98,105,110,97,114,121,
                 46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "b## enif_inspect_iolist_as_binary(ErlNifEnv*\n        env, ERL_NIF_TERM term, ErlNifBinary* bin):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"!Inspect the content of an iolist."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"'Initializes the structure pointed to by"}],0,false},
             {text,[5,42,98,105,110,42]},
             {sep,
              [{text,
                "6with a continuous buffer with the same byte content as"}],
              0,false},
             {text,"\b*iolist*"},
             {sep,[{text,"\t. As with"}],0,false},
             {text,
              [16,42,105,110,115,112,101,99,116,95,98,105,110,97,114,121,42]},
             {sep,
              [{text,
                [24,44,32,116,104,101,32,100,97,116,97,32,112,111,105,110,116,
                 101,100,32,116,111,32,98,121]}],
              0,false},
             {text,[5,42,98,105,110,42]},
             {sep,
              [{text,".is transient and does not need to be released."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\b*iolist*"},
             {sep,
              [{text,
                [17,105,115,32,110,111,116,32,97,110,32,105,111,108,105,115,
                 116,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [144,35,35,32,101,110,105,102,95,105,110,115,112,101,99,116,95,105,
         111,118,101,99,40,69,114,108,78,105,102,69,110,118,42,10,32,32,32,32,
         32,32,32,32,101,110,118,44,32,115,105,122,101,95,116,32,109,97,120,
         95,101,108,101,109,101,110,116,115,44,32,69,82,76,95,78,73,70,95,84,
         69,82,77,32,105,111,118,101,99,95,116,101,114,109,44,32,69,82,76,95,
         78,73,70,95,84,69,82,77,42,32,116,97,105,108,44,10,32,32,32,32,32,32,
         32,32,69,114,108,78,105,102,73,79,86,101,99,42,42,32,105,111,118,101,
         99,41,58,105,110,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"-Inspect a list of binaries as an ErlNifIOVec."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[5,70,105,108,108,115]}],0,false},
             {text,[7,42,105,111,118,101,99,42]},
             {sep,[{text,"%with the list of binaries provided in"}],0,false},
             {text,"\f*iovec_term*"},
             {sep,
              [{text,
                ":. The number of elements handled in the call is limited to"}],
              0,false},
             {text,[14,42,109,97,120,95,101,108,101,109,101,110,116,115,42]},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,[6,42,116,97,105,108,42]},
             {sep,
              [{text,
                "Lis set to the remainder of the list. Note that the output may be longer than"}],
              0,false},
             {text,[14,42,109,97,120,95,101,108,101,109,101,110,116,115,42]},
             {sep,
              [{text,
                [18,111,110,32,115,111,109,101,32,112,108,97,116,102,111,114,
                 109,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                ":To create a list of binaries from an arbitrary iolist, use"}],
              0,false},
             {text,
              "A[erts/erlang#iolist_to_iovec/1](../erts/erlang#iolist_to_iovec/1)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\eWhen calling this function,"}],0,false},
             {text,[7,42,105,111,118,101,99,42]},
             {sep,[{text,"\eshould contain a pointer to"}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                "@or a ErlNifIOVec structure that should be used if possible. e.g."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [307,10,47,42,32,68,111,110,39,116,32,117,115,101,32,97,32,112,
               114,101,45,97,108,108,111,99,97,116,101,100,32,115,116,114,117,
               99,116,117,114,101,32,42,47,10,69,114,108,78,105,102,73,79,86,
               101,99,32,42,105,111,118,101,99,32,61,32,78,85,76,76,59,10,101,
               110,105,102,95,105,110,115,112,101,99,116,95,105,111,118,101,
               99,40,101,110,118,44,32,109,97,120,95,101,108,101,109,101,110,
               116,115,44,32,116,101,114,109,44,32,38,116,97,105,108,44,32,38,
               105,111,118,101,99,41,59,10,10,47,42,32,85,115,101,32,97,32,
               115,116,97,99,107,45,97,108,108,111,99,97,116,101,100,32,118,
               101,99,116,111,114,32,97,115,32,97,110,32,111,112,116,105,109,
               105,122,97,116,105,111,110,32,102,111,114,32,118,101,99,116,
               111,114,115,32,119,105,116,104,32,102,101,119,32,101,108,101,
               109,101,110,116,115,32,42,47,10,69,114,108,78,105,102,73,79,86,
               101,99,32,118,101,99,44,32,42,105,111,118,101,99,32,61,32,38,
               118,101,99,59,10,101,110,105,102,95,105,110,115,112,101,99,116,
               95,105,111,118,101,99,40,101,110,118,44,32,109,97,120,95,101,
               108,101,109,101,110,116,115,44,32,116,101,114,109,44,32,38,116,
               97,105,108,44,32,38,105,111,118,101,99,41,59,10]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,84,104,101,32,99,111,110,116,101,110,116,115,32,111,102,
                 32,116,104,101]}],
              0,false},
             {text,[7,42,105,111,118,101,99,42]},
             {sep,
              [{text,
                "6is valid until the called nif function returns. If the"}],
              0,false},
             {text,[7,42,105,111,118,101,99,42]},
             {sep,
              [{text,
                "Wshould be valid after the nif call returns, it is possible to call this function with a"}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,"+environment. If no environment is given the"}],
              0,false},
             {text,[7,42,105,111,118,101,99,42]},
             {sep,
              [{text,
                "Cowns the data in the vector and it has to be explicitly freed using"}],
              0,false},
             {text,"#[enif_free_iovec](#enif_free_iovec)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\f*iovec_term*"},
             {sep,[{text,"\rnot an iovec."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## enif_ioq_create(ErlNifIOQueueOpts opts):ErlNifIOQueue *"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,67,114,101,97,116,101,32,97,32,110,101,119,32,73,79,32,81,117,
             101,117,101]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "6Create a new I/O Queue that can be used to store data."}],
              0,false},
             {text,[6,42,111,112,116,115,42]},
             {sep,
              [{text,
                [16,104,97,115,32,116,111,32,98,101,32,115,101,116,32,116,
                 111]}],
              0,false},
             {text,
              [20,42,69,82,76,95,78,73,70,95,73,79,81,95,78,79,82,77,65,76,
               42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## enif_ioq_destroy(ErlNifIOQueue *q):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,")Destroy an IO Queue and free it's content"}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"3Destroy the I/O queue and free all of it's contents"}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "A## enif_ioq_deq(ErlNifIOQueue *q, size_t count, size_t *size):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"%Dequeue count bytes from the IO Queue"}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,68,101,113,117,101,117,101]}],0,false},
             {text,[7,42,99,111,117,110,116,42]},
             {sep,
              [{text,
                [28,98,121,116,101,115,32,102,114,111,109,32,116,104,101,32,
                 73,47,79,32,113,117,101,117,101,46,32,73,102]}],
              0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,[{text,[6,105,115,32,110,111,116]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,",, the new size of the queue is placed there."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,"\eif the I/O does not contain"}],0,false},
             {text,[7,42,99,111,117,110,116,42]},
             {sep,
              [{text,"/bytes. On failure the queue is left un-altered."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "L## enif_ioq_enq_binary(ErlNifIOQueue *q, ErlNifBinary *bin, size_t skip):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"$Enqueue the binary into the IO Queue"}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\vEnqueue the"}],0,false},
             {text,[5,42,98,105,110,42]},
             {sep,[{text,[4,105,110,116,111]}],0,false},
             {text,[3,42,113,42]},
             {sep,
              [{text,
                [18,115,107,105,112,112,105,110,103,32,116,104,101,32,102,105,
                 114,115,116]}],
              0,false},
             {text,[6,42,115,107,105,112,42]},
             {sep,[{text,[6,98,121,116,101,115,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,115,107,105,112,42]},
             {sep,[{text,"\eis greater than the size of"}],0,false},
             {text,[5,42,98,105,110,42]},
             {sep,
              [{text,
                "B. Any ownership of the binary data is transferred to the queue and"}],
              0,false},
             {text,[5,42,98,105,110,42]},
             {sep,
              [{text,
                "Pis to be considered read-only for the rest of the NIF call and then as released."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "G## enif_ioq_enqv(ErlNifIOQueue *q, ErlNifIOVec *iovec, size_t skip):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"#Enqueue the iovec into the IO Queue"}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\vEnqueue the"}],0,false},
             {text,[7,42,105,111,118,101,99,42]},
             {sep,[{text,[4,105,110,116,111]}],0,false},
             {text,[3,42,113,42]},
             {sep,
              [{text,
                [18,115,107,105,112,112,105,110,103,32,116,104,101,32,102,105,
                 114,115,116]}],
              0,false},
             {text,[6,42,115,107,105,112,42]},
             {sep,[{text,[6,98,121,116,101,115,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,115,107,105,112,42]},
             {sep,[{text,"\eis greater than the size of"}],0,false},
             {text,[7,42,105,111,118,101,99,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## enif_ioq_peek(ErlNifIOQueue *q, int *iovlen):SysIOVec *"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [24,80,101,101,107,32,105,110,115,105,100,101,32,116,104,101,32,
             73,79,32,81,117,101,117,101]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"-Get the I/O queue as a pointer to an array of"}],
              0,false},
             {text,"\n*SysIOVec*"},
             {sep,
              [{text,",s. It also returns the number of elements in"}],
              0,false},
             {text,"\b*iovlen*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "JNothing is removed from the queue by this function, that must be done with"}],
              0,false},
             {text,
              [29,91,101,110,105,102,95,105,111,113,95,100,101,113,93,40,35,
               101,110,105,102,95,105,111,113,95,100,101,113,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "?The returned array is suitable to use with the Unix system call"}],
              0,false},
             {text,"\b*writev*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "a## enif_ioq_peek_head(ErlNifEnv *env, ErlNifIOQueue *q, size_t *size, ERL_NIF_TERM *bin_term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [30,80,101,101,107,32,116,104,101,32,104,101,97,100,32,111,102,32,
             116,104,101,32,73,79,32,81,117,101,117,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,".Get the head of the IO Queue as a binary term."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[2,73,102]}],0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,[{text,[6,105,115,32,110,111,116]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,"', the size of the head is placed there."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "JNothing is removed from the queue by this function, that must be done with"}],
              0,false},
             {text,
              [29,91,101,110,105,102,95,105,111,113,95,100,101,113,93,40,35,
               101,110,105,102,95,105,111,113,95,100,101,113,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [22,105,102,32,116,104,101,32,113,117,101,117,101,32,105,115,
                 32,101,109,112,116,121,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,")## enif_ioq_size(ErlNifIOQueue *q):size_t"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"$Get the current size of the IO Queue"}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [15,71,101,116,32,116,104,101,32,115,105,122,101,32,111,102]}],
              0,false},
             {text,[3,42,113,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"6## enif_is_atom(ErlNifEnv* env, ERL_NIF_TERM term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,68,101,116,101,114,109,105,110,101,32,105,102,32,97,32,116,
             101,114,109,32,105,115,32,97,110,32,97,116,111,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\vis an atom."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"8## enif_is_binary(ErlNifEnv* env, ERL_NIF_TERM term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Determine if a term is a binary."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\fis a binary."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"4## enif_is_current_process_alive(ErlNifEnv* env):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"2Determine if currently executing process is alive."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                "@if the currently executing process is currently alive, otherwise"}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [129,84,104,105,115,32,102,117,110,99,116,105,111,110,32,99,97,
               110,32,111,110,108,121,32,98,101,32,117,115,101,100,32,102,114,
               111,109,32,97,32,78,73,70,45,99,97,108,108,105,110,103,32,116,
               104,114,101,97,100,44,32,97,110,100,32,119,105,116,104,32,97,
               110,32,101,110,118,105,114,111,110,109,101,110,116,32,99,111,
               114,114,101,115,112,111,110,100,105,110,103,32,116,111,32,99,
               117,114,114,101,110,116,108,121,32,101,120,101,99,117,116,105,
               110,103,32,112,114,111,99,101,115,115,101,115,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "D## enif_is_empty_list(ErlNifEnv* env,\n        ERL_NIF_TERM term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"%Determine if a term is an empty list."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [17,105,115,32,97,110,32,101,109,112,116,121,32,108,105,115,
                 116,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "C## enif_is_exception(ErlNifEnv* env,\n        ERL_NIF_TERM term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"$Determine if a term is an exception."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"1<a name=\"enif_is_exception\">enif_is_exception</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [14,82,101,116,117,114,110,32,116,114,117,101,32,105,102]}],
              0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [16,105,115,32,97,110,32,101,120,99,101,112,116,105,111,110,
                 46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "=## enif_is_fun(ErlNifEnv* env, ERL_NIF_TERM\n        term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,68,101,116,101,114,109,105,110,101,32,105,102,32,97,32,116,
             101,114,109,32,105,115,32,97,32,102,117,110,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\tis a fun."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "D## enif_is_identical(ERL_NIF_TERM lhs,\n        ERL_NIF_TERM rhs):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [20,69,114,108,97,110,103,32,111,112,101,114,97,116,111,114,32,61,
             58,61,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                "Cif the two terms are identical. Corresponds to the Erlang operators"}],
              0,false},
             {text,[5,42,61,58,61,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[5,42,61,47,61,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"6## enif_is_list(ErlNifEnv* env, ERL_NIF_TERM term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [30,68,101,116,101,114,109,105,110,101,32,105,102,32,97,32,116,
             101,114,109,32,105,115,32,97,32,108,105,115,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\nis a list."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "=## enif_is_map(ErlNifEnv* env, ERL_NIF_TERM\n        term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,68,101,116,101,114,109,105,110,101,32,105,102,32,97,32,116,
             101,114,109,32,105,115,32,97,32,109,97,112,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [19,105,115,32,97,32,109,97,112,44,32,111,116,104,101,114,119,
                 105,115,101]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "@## enif_is_number(ErlNifEnv* env, ERL_NIF_TERM\n        term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"3Determine if a term is a number (integer or float)."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\fis a number."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"5## enif_is_pid(ErlNifEnv* env, ERL_NIF_TERM term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,68,101,116,101,114,109,105,110,101,32,105,102,32,97,32,116,
             101,114,109,32,105,115,32,97,32,112,105,100,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\tis a pid."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"2## enif_is_pid_undefined(const ErlNifPid* pid):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [30,68,101,116,101,114,109,105,110,101,32,105,102,32,112,105,100,
             32,105,115,32,117,110,100,101,102,105,110,101,100,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[5,42,112,105,100,42]},
             {sep,
              [{text,
                [28,104,97,115,32,98,101,101,110,32,115,101,116,32,97,115,32,
                 117,110,100,101,102,105,110,101,100,32,98,121]}],
              0,false},
             {text,"1[enif_set_pid_undefined](#enif_set_pid_undefined)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"6## enif_is_port(ErlNifEnv* env, ERL_NIF_TERM term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [30,68,101,116,101,114,109,105,110,101,32,105,102,32,97,32,116,
             101,114,109,32,105,115,32,97,32,112,111,114,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\nis a port."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "F## enif_is_port_alive(ErlNifEnv* env,\n        ErlNifPort *port_id):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"#Determine if a local port is alive."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\t*port_id*"},
             {sep,[{text,"\tis alive."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [146,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
               115,32,111,110,108,121,32,116,104,114,101,97,100,45,115,97,102,
               101,32,119,104,101,110,32,116,104,101,32,101,109,117,108,97,
               116,111,114,32,119,105,116,104,32,83,77,80,32,115,117,112,112,
               111,114,116,32,105,115,32,117,115,101,100,46,32,73,116,32,99,
               97,110,32,111,110,108,121,32,98,101,32,117,115,101,100,32,105,
               110,32,97,32,110,111,110,45,83,77,80,32,101,109,117,108,97,116,
               111,114,32,102,114,111,109,32,97,32,78,73,70,45,99,97,108,108,
               105,110,103,32,116,104,114,101,97,100,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "D## enif_is_process_alive(ErlNifEnv* env,\n        ErlNifPid *pid):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"&Determine if a local process is alive."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[5,42,112,105,100,42]},
             {sep,[{text,"\tis alive."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [146,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
               115,32,111,110,108,121,32,116,104,114,101,97,100,45,115,97,102,
               101,32,119,104,101,110,32,116,104,101,32,101,109,117,108,97,
               116,111,114,32,119,105,116,104,32,83,77,80,32,115,117,112,112,
               111,114,116,32,105,115,32,117,115,101,100,46,32,73,116,32,99,
               97,110,32,111,110,108,121,32,98,101,32,117,115,101,100,32,105,
               110,32,97,32,110,111,110,45,83,77,80,32,101,109,117,108,97,116,
               111,114,32,102,114,111,109,32,97,32,78,73,70,45,99,97,108,108,
               105,110,103,32,116,104,114,101,97,100,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"5## enif_is_ref(ErlNifEnv* env, ERL_NIF_TERM term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"#Determine if a term is a reference."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,
                [15,105,115,32,97,32,114,101,102,101,114,101,110,99,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"7## enif_is_tuple(ErlNifEnv* env, ERL_NIF_TERM term):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,68,101,116,101,114,109,105,110,101,32,105,102,32,97,32,116,
             101,114,109,32,105,115,32,97,32,116,117,112,108,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,[{text,"\vis a tuple."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"$## enif_keep_resource(void* obj):int"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"%Add a reference to a resource object."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"#Adds a reference to resource object"}],0,false},
             {text,[5,42,111,98,106,42]},
             {sep,[{text,"\robtained from"}],0,false},
             {text,"+[enif_alloc_resource](#enif_alloc_resource)"},
             {sep,
              [{text,[14,46,32,69,97,99,104,32,99,97,108,108,32,116,111]}],
              0,false},
             {text,
              [20,42,101,110,105,102,95,107,101,101,112,95,114,101,115,111,
               117,114,99,101,42]},
             {sep,
              [{text,"+for an object must be balanced by a call to"}],
              0,false},
             {text,"/[enif_release_resource](#enif_release_resource)"},
             {sep,[{text," before the object is destructed."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "@## enif_make_atom(ErlNifEnv* env, const char* name):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [20,67,114,101,97,116,101,32,97,110,32,97,116,111,109,32,116,101,
             114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [29,67,114,101,97,116,101,115,32,97,110,32,97,116,111,109,32,
                 116,101,114,109,32,102,114,111,109,32,116,104,101]}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                [20,45,116,101,114,109,105,110,97,116,101,100,32,67,45,115,
                 116,114,105,110,103]}],
              0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,
              [{text,"+with ISO Latin-1 encoding. If the length of"}],
              0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,
              [{text,
                "@exceeds the maximum length allowed for an atom (255 characters),"}],
              0,false},
             {text,
              [16,42,101,110,105,102,95,109,97,107,101,95,97,116,111,109,42]},
             {sep,[{text,[7,105,110,118,111,107,101,115]}],0,false},
             {text,"%[enif_make_badarg](#enif_make_badarg)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "X## enif_make_atom_len(ErlNifEnv* env,\n        const char* name, size_t len):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [20,67,114,101,97,116,101,32,97,110,32,97,116,111,109,32,116,101,
             114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"#Create an atom term from the string"}],0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,[{text,"\vwith length"}],0,false},
             {text,[5,42,108,101,110,42]},
             {sep,[{text,[1,46]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,"2characters are treated as any other characters. If"}],
              0,false},
             {text,[5,42,108,101,110,42]},
             {sep,
              [{text,
                "@exceeds the maximum length allowed for an atom (255 characters),"}],
              0,false},
             {text,
              [16,42,101,110,105,102,95,109,97,107,101,95,97,116,111,109,42]},
             {sep,[{text,[7,105,110,118,111,107,101,115]}],0,false},
             {text,"%[enif_make_badarg](#enif_make_badarg)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"0## enif_make_badarg(ErlNifEnv* env):ERL_NIF_TERM"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [24,77,97,107,101,32,97,32,98,97,100,97,114,103,32,101,120,99,101,
             112,116,105,111,110,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,77,97,107,101,115,32,97]}],0,false},
             {text,"\b*badarg*"},
             {sep,
              [{text,
                "Gexception to be returned from a NIF, and associates it with environment"}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,
              [{text,"-. Once a NIF or any function it calls invokes"}],
              0,false},
             {text,
              [18,42,101,110,105,102,95,109,97,107,101,95,98,97,100,97,114,
               103,42]},
             {sep,
              [{text,
                [28,44,32,116,104,101,32,114,117,110,116,105,109,101,32,101,
                 110,115,117,114,101,115,32,116,104,97,116,32,97]}],
              0,false},
             {text,"\b*badarg*"},
             {sep,
              [{text,
                "jexception is raised when the NIF returns, even if the NIF attempts to return a non-exception term instead."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [21,84,104,101,32,114,101,116,117,114,110,32,118,97,108,117,
                 101,32,102,114,111,109]}],
              0,false},
             {text,
              [18,42,101,110,105,102,95,109,97,107,101,95,98,97,100,97,114,
               103,42]},
             {sep,
              [{text,
                "jcan be used only as the return value from the NIF that invoked it (directly or indirectly) or be passed to"}],
              0,false},
             {text,"'[enif_is_exception](#enif_is_exception)"},
             {sep,
              [{text,"(, but not to any other NIF API function."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,
              "9[enif_has_pending_exception](#enif_has_pending_exception)"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"-[enif_raise_exception](#enif_raise_exception)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           "6Before ERTS 7.0 (Erlang/OTP 18), the return value from"}],
                         0,false},
                        {text,
                         [18,42,101,110,105,102,95,109,97,107,101,95,98,97,
                          100,97,114,103,42]},
                        {sep,
                         [{text,
                           "nhad to be returned from the NIF. This requirement is now lifted as the return value from the NIF is ignored if"}],
                         0,false},
                        {text,
                         [18,42,101,110,105,102,95,109,97,107,101,95,98,97,
                          100,97,114,103,42]},
                        {sep,
                         [{text,
                           [17,104,97,115,32,98,101,101,110,32,105,110,118,
                            111,107,101,100,46]}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "C## enif_make_binary(ErlNifEnv* env, ErlNifBinary* bin):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [19,77,97,107,101,32,97,32,98,105,110,97,114,121,32,116,101,114,
             109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [24,77,97,107,101,115,32,97,32,98,105,110,97,114,121,32,116,
                 101,114,109,32,102,114,111,109]}],
              0,false},
             {text,[5,42,98,105,110,42]},
             {sep,
              [{text,
                "I. Any ownership of the binary data is transferred to the created term and"}],
              0,false},
             {text,[5,42,98,105,110,42]},
             {sep,
              [{text,
                "Pis to be considered read-only for the rest of the NIF call and then as released."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Q## enif_make_copy(ErlNifEnv* dst_env,\n        ERL_NIF_TERM src_term):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,77,97,107,101,32,97,32,99,111,112,121,32,111,102,32,97,32,116,
             101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [20,77,97,107,101,115,32,97,32,99,111,112,121,32,111,102,32,
                 116,101,114,109]}],
              0,false},
             {text,"\n*src_term*"},
             {sep,[{text,"$. The copy is created in environment"}],0,false},
             {text,"\t*dst_env*"},
             {sep,
              [{text,"4. The source term can be located in any environment."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## enif_make_double(ErlNifEnv* env, double d):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,67,114,101,97,116,101,32,97,32,102,108,111,97,116,105,110,103,
             45,112,111,105,110,116,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"$Creates a floating-point term from a"}],0,false},
             {text,"\b*double*"},
             {sep,[{text,"\r. If argument"}],0,false},
             {text,"\b*double*"},
             {sep,
              [{text,
                [24,105,115,32,110,111,116,32,102,105,110,105,116,101,32,111,
                 114,32,105,115,32,78,97,78,44]}],
              0,false},
             {text,
              [18,42,101,110,105,102,95,109,97,107,101,95,100,111,117,98,108,
               101,42]},
             {sep,[{text,[7,105,110,118,111,107,101,115]}],0,false},
             {text,"%[enif_make_badarg](#enif_make_badarg)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [127,35,35,32,101,110,105,102,95,109,97,107,101,95,101,120,105,115,
         116,105,110,103,95,97,116,111,109,40,69,114,108,78,105,102,69,110,
         118,42,32,101,110,118,44,10,32,32,32,32,32,32,32,32,99,111,110,115,
         116,32,99,104,97,114,42,32,110,97,109,101,44,32,69,82,76,95,78,73,70,
         95,84,69,82,77,42,32,97,116,111,109,44,32,69,114,108,78,105,102,67,
         104,97,114,69,110,99,111,100,105,110,103,10,32,32,32,32,32,32,32,32,
         101,110,99,111,100,101,41,58,105,110,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,67,114,101,97,116,101,32,97,110,32,101,120,105,115,116,105,
             110,103,32,97,116,111,109,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "=Tries to create the term of an already existing atom from the"}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                [20,45,116,101,114,109,105,110,97,116,101,100,32,67,45,115,
                 116,114,105,110,103]}],
              0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,[{text,"\rwith encoding"}],0,false},
             {text,
              [29,91,101,110,99,111,100,101,93,40,35,69,114,108,78,105,102,67,
               104,97,114,69,110,99,111,100,105,110,103,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "<If the atom already exists, this function stores the term in"}],
              0,false},
             {text,[7,42,42,97,116,111,109,42]},
             {sep,[{text,"\vand returns"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"\v, otherwise"}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [14,46,32,65,108,115,111,32,114,101,116,117,114,110,115]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [16,105,102,32,116,104,101,32,108,101,110,103,116,104,32,111,
                 102]}],
              0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,
              [{text,
                "@exceeds the maximum length allowed for an atom (255 characters)."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [145,35,35,32,101,110,105,102,95,109,97,107,101,95,101,120,105,115,
         116,105,110,103,95,97,116,111,109,95,108,101,110,40,69,114,108,78,
         105,102,69,110,118,42,32,101,110,118,44,10,32,32,32,32,32,32,32,32,
         99,111,110,115,116,32,99,104,97,114,42,32,110,97,109,101,44,32,115,
         105,122,101,95,116,32,108,101,110,44,32,69,82,76,95,78,73,70,95,84,
         69,82,77,42,32,97,116,111,109,44,32,69,114,108,78,105,102,67,104,97,
         114,69,110,99,111,100,105,110,103,10,32,32,32,32,32,32,32,32,101,110,
         99,111,100,105,110,103,41,58,105,110,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,67,114,101,97,116,101,32,97,110,32,101,120,105,115,116,105,
             110,103,32,97,116,111,109,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "DTries to create the term of an already existing atom from the string"}],
              0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,[{text,"\vwith length"}],0,false},
             {text,[5,42,108,101,110,42]},
             {sep,[{text,"\fand encoding"}],0,false},
             {text,
              [29,91,101,110,99,111,100,101,93,40,35,69,114,108,78,105,102,67,
               104,97,114,69,110,99,111,100,105,110,103,41]},
             {sep,[{text,[1,46]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,"/characters are treated as any other characters."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "<If the atom already exists, this function stores the term in"}],
              0,false},
             {text,[7,42,42,97,116,111,109,42]},
             {sep,[{text,"\vand returns"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"\v, otherwise"}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [14,46,32,65,108,115,111,32,114,101,116,117,114,110,115]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,[5,42,108,101,110,42]},
             {sep,
              [{text,
                "@exceeds the maximum length allowed for an atom (255 characters)."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"4## enif_make_int(ErlNifEnv* env, int i):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [23,67,114,101,97,116,101,32,97,110,32,105,110,116,101,103,101,
             114,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [24,67,114,101,97,116,101,115,32,97,110,32,105,110,116,101,103,
               101,114,32,116,101,114,109,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "?## enif_make_int64(ErlNifEnv* env, ErlNifSInt64 i):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [23,67,114,101,97,116,101,32,97,110,32,105,110,116,101,103,101,
             114,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"5Creates an integer term from a signed 64-bit integer."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "A## enif_make_list(ErlNifEnv* env, unsigned cnt, ...):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [19,67,114,101,97,116,101,32,97,32,108,105,115,116,32,116,101,114,
             109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"'Creates an ordinary list term of length"}],0,false},
             {text,[5,42,99,110,116,42]},
             {sep,[{text,"\t. Expects"}],0,false},
             {text,[5,42,99,110,116,42]},
             {sep,
              [{text,
                [26,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,
                 101,110,116,115,32,40,97,102,116,101,114]}],
              0,false},
             {text,[5,42,99,110,116,42]},
             {sep,[{text,"\t) of type"}],0,false},
             {text,[14,42,69,82,76,95,78,73,70,95,84,69,82,77,42]},
             {sep,
              [{text,
                [28,97,115,32,116,104,101,32,101,108,101,109,101,110,116,115,
                 32,111,102,32,116,104,101,32,108,105,115,116,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [24,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,
                 121,32,108,105,115,116,32,105,102]}],
              0,false},
             {text,[5,42,99,110,116,42]},
             {sep,[{text,[5,105,115,32,48,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "@## enif_make_list1(ErlNifEnv* env, ERL_NIF_TERM e1):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Y## enif_make_list2(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ERL_NIF_TERM e2):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "j## enif_make_list3(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "^## enif_make_list4(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "^## enif_make_list5(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "^## enif_make_list6(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "^## enif_make_list7(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "^## enif_make_list8(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "^## enif_make_list9(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [19,67,114,101,97,116,101,32,97,32,108,105,115,116,32,116,101,114,
             109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "{Creates an ordinary list term with length indicated by the function name. Prefer these functions (macros) over the variadic"}],
              0,false},
             {text,
              [16,42,101,110,105,102,95,109,97,107,101,95,108,105,115,116,42]},
             {sep,
              [{text,
                "Fto get a compile-time error if the number of arguments does not match."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "a## enif_make_list_cell(ErlNifEnv*\n        env, ERL_NIF_TERM head, ERL_NIF_TERM tail):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [19,67,114,101,97,116,101,32,97,32,108,105,115,116,32,99,101,108,
             108,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,67,114,101,97,116,101,115,32,97,32,108,105,115,116,32,99,
                 101,108,108]}],
              0,false},
             {text,[15,42,91,104,101,97,100,32,124,32,116,97,105,108,93,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "k## enif_make_list_from_array(ErlNifEnv* env, const ERL_NIF_TERM\n          arr[], unsigned cnt):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"!Create a list term from an array."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "9Creates an ordinary list containing the elements of array"}],
              0,false},
             {text,[5,42,97,114,114,42]},
             {sep,[{text,"\tof length"}],0,false},
             {text,[5,42,99,110,116,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [24,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,
                 121,32,108,105,115,116,32,105,102]}],
              0,false},
             {text,[5,42,99,110,116,42]},
             {sep,[{text,[5,105,115,32,48,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## enif_make_long(ErlNifEnv* env, long int i):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"'Create an integer term from a long int."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [30,67,114,101,97,116,101,115,32,97,110,32,105,110,116,101,
                 103,101,114,32,116,101,114,109,32,102,114,111,109,32,97]}],
              0,false},
             {text,"\n*long int*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [138,35,35,32,101,110,105,102,95,109,97,107,101,95,109,97,112,95,112,
         117,116,40,69,114,108,78,105,102,69,110,118,42,32,101,110,118,44,10,
         32,32,32,32,32,32,32,32,69,82,76,95,78,73,70,95,84,69,82,77,32,109,
         97,112,95,105,110,44,32,69,82,76,95,78,73,70,95,84,69,82,77,32,107,
         101,121,44,32,69,82,76,95,78,73,70,95,84,69,82,77,32,118,97,108,117,
         101,44,10,32,32,32,32,32,32,32,32,69,82,76,95,78,73,70,95,84,69,82,
         77,42,32,109,97,112,95,111,117,116,41,58,105,110,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,73,110,115,101,114,116,32,107,101,121,45,118,97,108,117,101,
             32,112,97,105,114,32,105,110,32,109,97,112,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,77,97,107,101,115,32,97,32,99,111,112,121,32,111,102,32,
                 109,97,112]}],
              0,false},
             {text,"\b*map_in*"},
             {sep,[{text,"\vand inserts"}],0,false},
             {text,[5,42,107,101,121,42]},
             {sep,[{text,[4,119,105,116,104]}],0,false},
             {text,[7,42,118,97,108,117,101,42]},
             {sep,[{text,[4,46,32,73,102]}],0,false},
             {text,[5,42,107,101,121,42]},
             {sep,
              [{text,
                [17,97,108,114,101,97,100,121,32,101,120,105,115,116,115,32,
                 105,110]}],
              0,false},
             {text,"\b*map_in*"},
             {sep,
              [{text,"), the old associated value is replaced by"}],
              0,false},
             {text,[7,42,118,97,108,117,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"!If successful, this function sets"}],0,false},
             {text,"\n**map_out*"},
             {sep,
              [{text,
                [26,116,111,32,116,104,101,32,110,101,119,32,109,97,112,32,97,
                 110,100,32,114,101,116,117,114,110,115]}],
              0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"\t. Returns"}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\b*map_in*"},
             {sep,[{text,"\ris not a map."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,"\b*map_in*"},
             {sep,
              [{text,
                [31,116,101,114,109,32,109,117,115,116,32,98,101,108,111,110,
                 103,32,116,111,32,101,110,118,105,114,111,110,109,101,110,
                 116]}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "q## enif_make_map_remove(ErlNifEnv* env,\n        ERL_NIF_TERM map_in, ERL_NIF_TERM key, ERL_NIF_TERM* map_out):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [20,82,101,109,111,118,101,32,107,101,121,32,102,114,111,109,32,
             109,97,112,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[6,73,102,32,109,97,112]}],0,false},
             {text,"\b*map_in*"},
             {sep,[{text,"\bcontains"}],0,false},
             {text,[5,42,107,101,121,42]},
             {sep,
              [{text,
                [31,44,32,116,104,105,115,32,102,117,110,99,116,105,111,110,
                 32,109,97,107,101,115,32,97,32,99,111,112,121,32,111,102]}],
              0,false},
             {text,"\b*map_in*"},
             {sep,[{text,[2,105,110]}],0,false},
             {text,"\n**map_out*"},
             {sep,[{text,"\r, and removes"}],0,false},
             {text,[5,42,107,101,121,42]},
             {sep,[{text," and the associated value. If map"}],0,false},
             {text,"\b*map_in*"},
             {sep,
              [{text,
                [16,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,
                 110]}],
              0,false},
             {text,[5,42,107,101,121,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,"\n**map_out*"},
             {sep,[{text,"\tis set to"}],0,false},
             {text,"\b*map_in*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\b*map_in*"},
             {sep,[{text,"\ris not a map."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,"\b*map_in*"},
             {sep,
              [{text,
                [31,116,101,114,109,32,109,117,115,116,32,98,101,108,111,110,
                 103,32,116,111,32,101,110,118,105,114,111,110,109,101,110,
                 116]}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [145,35,35,32,101,110,105,102,95,109,97,107,101,95,109,97,112,95,117,
         112,100,97,116,101,40,69,114,108,78,105,102,69,110,118,42,32,101,110,
         118,44,10,32,32,32,32,32,32,32,32,69,82,76,95,78,73,70,95,84,69,82,
         77,32,109,97,112,95,105,110,44,32,69,82,76,95,78,73,70,95,84,69,82,
         77,32,107,101,121,44,32,69,82,76,95,78,73,70,95,84,69,82,77,32,110,
         101,119,95,118,97,108,117,101,44,10,32,32,32,32,32,32,32,32,69,82,76,
         95,78,73,70,95,84,69,82,77,42,32,109,97,112,95,111,117,116,41,58,105,
         110,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,82,101,112,108,97,99,101,32,118,97,108,117,101,32,102,111,114,
             32,107,101,121,32,105,110,32,109,97,112,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,77,97,107,101,115,32,97,32,99,111,112,121,32,111,102,32,
                 109,97,112]}],
              0,false},
             {text,"\b*map_in*"},
             {sep,
              [{text,"(and replace the old associated value for"}],
              0,false},
             {text,[5,42,107,101,121,42]},
             {sep,[{text,[4,119,105,116,104]}],0,false},
             {text,"\v*new_value*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"!If successful, this function sets"}],0,false},
             {text,"\n**map_out*"},
             {sep,
              [{text,
                [26,116,111,32,116,104,101,32,110,101,119,32,109,97,112,32,97,
                 110,100,32,114,101,116,117,114,110,115]}],
              0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"\t. Returns"}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\b*map_in*"},
             {sep,[{text,"&is not a map or if it does not contain"}],0,false},
             {text,[5,42,107,101,121,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,"\b*map_in*"},
             {sep,
              [{text,
                [31,116,101,114,109,32,109,117,115,116,32,98,101,108,111,110,
                 103,32,116,111,32,101,110,118,105,114,111,110,109,101,110,
                 116]}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [135,35,35,32,101,110,105,102,95,109,97,107,101,95,109,97,112,95,102,
         114,111,109,95,97,114,114,97,121,115,40,69,114,108,78,105,102,69,110,
         118,42,32,101,110,118,44,32,69,82,76,95,78,73,70,95,84,69,82,77,32,
         107,101,121,115,91,93,44,10,32,32,32,32,32,32,32,32,69,82,76,95,78,
         73,70,95,84,69,82,77,32,118,97,108,117,101,115,91,93,44,32,115,105,
         122,101,95,116,32,99,110,116,44,32,69,82,76,95,78,73,70,95,84,69,82,
         77,32,42,109,97,112,95,111,117,116,41,58,105,110,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"-Make map term from the given keys and values."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"0Makes a map term from the given keys and values."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"!If successful, this function sets"}],0,false},
             {text,"\n**map_out*"},
             {sep,
              [{text,
                [26,116,111,32,116,104,101,32,110,101,119,32,109,97,112,32,97,
                 110,100,32,114,101,116,117,114,110,115]}],
              0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"\t. Returns"}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [29,116,104,101,114,101,32,97,114,101,32,97,110,121,32,100,
                 117,112,108,105,99,97,116,101,32,107,101,121,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\"All keys and values must belong to"}],0,false},
             {text,[5,42,101,110,118,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "P## enif_make_monitor_term(ErlNifEnv* env, const ErlNifMonitor* mon):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"4Make monitor term from the given monitor identifier."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                ":Creates a term identifying the given monitor received from"}],
              0,false},
             {text,"-[enif_monitor_process](#enif_monitor_process)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              ":This function is primarily intended for debugging purpose."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "a## enif_make_new_binary(ErlNifEnv*\n        env, size_t size, ERL_NIF_TERM* termp):unsigned char *"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"&Allocate and create a new binary term."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [26,65,108,108,111,99,97,116,101,115,32,97,32,98,105,110,97,
                 114,121,32,111,102,32,115,105,122,101]}],
              0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,
              [{text,
                [156,98,121,116,101,115,32,97,110,100,32,99,114,101,97,116,
                 101,115,32,97,110,32,111,119,110,105,110,103,32,116,101,114,
                 109,46,32,84,104,101,32,98,105,110,97,114,121,32,100,97,116,
                 97,32,105,115,32,109,117,116,97,98,108,101,32,117,110,116,
                 105,108,32,116,104,101,32,99,97,108,108,105,110,103,32,78,73,
                 70,32,114,101,116,117,114,110,115,46,32,84,104,105,115,32,
                 105,115,32,97,32,113,117,105,99,107,32,119,97,121,32,116,111,
                 32,99,114,101,97,116,101,32,97,32,110,101,119,32,98,105,110,
                 97,114,121,32,119,105,116,104,111,117,116,32,104,97,118,105,
                 110,103,32,116,111,32,117,115,101]}],
              0,false},
             {text,
              [29,91,69,114,108,78,105,102,66,105,110,97,114,121,93,40,35,69,
               114,108,78,105,102,66,105,110,97,114,121,41]},
             {sep,
              [{text,
                "b. The drawbacks are that the binary cannot be kept between NIF calls and it cannot be reallocated."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"1Returns a pointer to the raw binary data and sets"}],
              0,false},
             {text,"\b**termp*"},
             {sep,
              [{text,
                [19,116,111,32,116,104,101,32,98,105,110,97,114,121,32,116,
                 101,114,109,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"1## enif_make_new_map(ErlNifEnv* env):ERL_NIF_TERM"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [23,77,97,107,101,32,97,110,32,101,109,112,116,121,32,109,97,112,
             32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [24,77,97,107,101,115,32,97,110,32,101,109,112,116,121,32,109,
               97,112,32,116,101,114,109,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "C## enif_make_pid(ErlNifEnv* env, const ErlNifPid* pid):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [16,77,97,107,101,32,97,32,112,105,100,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [28,77,97,107,101,115,32,97,32,112,105,100,32,116,101,114,109,
                 32,111,114,32,116,104,101,32,97,116,111,109]}],
              0,false},
             {text,"1[enif_set_pid_undefined](#enif_set_pid_undefined)"},
             {sep,[{text,[4,102,114,111,109]}],0,false},
             {text,[6,42,42,112,105,100,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"-## enif_make_ref(ErlNifEnv* env):ERL_NIF_TERM"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [19,67,114,101,97,116,101,32,97,32,114,101,102,101,114,101,110,99,
             101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [24,67,114,101,97,116,101,115,32,97,32,114,101,102,101,114,
                 101,110,99,101,32,108,105,107,101]}],
              0,false},
             {text,"([erlang#make_ref-0](./erlang#make_ref-0)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"=## enif_make_resource(ErlNifEnv* env, void* obj):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"-Create an opaque handle to a resource object."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "HCreates an opaque handle to a memory-managed resource object obtained by"}],
              0,false},
             {text,"+[enif_alloc_resource](#enif_alloc_resource)"},
             {sep,
              [{text,
                "U. No ownership transfer is done, as the resource object still needs to be released by"}],
              0,false},
             {text,"/[enif_release_resource](#enif_release_resource)"},
             {sep,[{text,"\". However, notice that the call to"}],0,false},
             {text,
              [23,42,101,110,105,102,95,114,101,108,101,97,115,101,95,114,101,
               115,111,117,114,99,101,42]},
             {sep,
              [{text,"3can occur immediately after obtaining the term from"}],
              0,false},
             {text,
              [20,42,101,110,105,102,95,109,97,107,101,95,114,101,115,111,117,
               114,99,101,42]},
             {sep,
              [{text,
                "p, in which case the resource object is deallocated when the term is garbage collected. For more details, see the"}],
              0,false},
             {text,
              "M[example of creating and returning a resource object](#enif_resource_example)"},
             {sep,
              [{text,
                [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,117,
                 105,100,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           "fSince ERTS 9.0 (OTP-20.0), resource terms have a defined behavior when compared and serialized through"}],
                         0,false},
                        {text,
                         [16,42,116,101,114,109,95,116,111,95,98,105,110,97,
                          114,121,42]},
                        {sep,
                         [{text,
                           [24,111,114,32,112,97,115,115,101,100,32,98,101,
                            116,119,101,101,110,32,110,111,100,101,115,46]}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {sep,
                   [{text,[1,42]},
                    {sep,
                     [{sep,
                       [{text,
                         "uTwo resource terms will compare equal if and only if they would yield the same resource object pointer when passed to"}],
                       0,false},
                      {text,"'[enif_get_resource](#enif_get_resource)"},
                      {sep,[{text,[1,46]}],0,false}],
                     0,false}],
                   0,false},
                  {sep,
                   [{text,[1,42]},
                    {sep,
                     [{above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{sep,
                              [{text,
                                "&A resource term can be serialized with"}],
                              0,false},
                             {text,
                              [16,42,116,101,114,109,95,116,111,95,98,105,110,
                               97,114,121,42]},
                             {sep,
                              [{text,
                                "Gand later be fully recreated if the resource object is still alive when"}],
                              0,false},
                             {text,
                              [16,42,98,105,110,97,114,121,95,116,111,95,116,
                               101,114,109,42]},
                             {sep,[{text,"\fis called. A"}],0,false},
                             {text,"\t**stale**"},
                             {sep,
                              [{text,"#resource term will be returned from"}],
                              0,false},
                             {text,
                              [16,42,98,105,110,97,114,121,95,116,111,95,116,
                               101,114,109,42]},
                             {sep,
                              [{text,
                                ",if the resource object has been deallocated."}],
                              0,false},
                             {text,"'[enif_get_resource](#enif_get_resource)"},
                             {sep,
                              [{text,
                                "+will return false for stale resource terms."}],
                              0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{text,
                              "âThe same principles of serialization apply when passing resource terms in messages to remote nodes and back again. A resource term will act stale on all nodes except the node where its resource object is still alive in memory."}],
                            0,false}],
                          0,true},
                         null},
                        null}}],
                     0,false}],
                   0,false}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           "fBefore ERTS 9.0 (OTP-20.0), all resource terms did compare equal to each other and to empty binaries ("}],
                         0,false},
                        {text,[6,42,60,60,62,62,42]},
                        {sep,
                         [{text,
                           "B). If serialized, they would be recreated as plain empty binaries."}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "k## enif_make_resource_binary(ErlNifEnv* env, void* obj, const\n        void* data, size_t size):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [28,67,114,101,97,116,101,32,97,32,99,117,115,116,111,109,32,98,
             105,110,97,114,121,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ACreates a binary term that is memory-managed by a resource object"}],
              0,false},
             {text,[5,42,111,98,106,42]},
             {sep,[{text,"\vobtained by"}],0,false},
             {text,"+[enif_alloc_resource](#enif_alloc_resource)"},
             {sep,[{text,"&. The returned binary term consists of"}],0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,
              [{text,
                [19,98,121,116,101,115,32,112,111,105,110,116,101,100,32,116,
                 111,32,98,121]}],
              0,false},
             {text,[6,42,100,97,116,97,42]},
             {sep,
              [{text,
                "í. This raw binary data must be kept readable and unchanged until the destructor of the resource is called. The binary data can be stored external to the resource object, in which case the destructor is responsible for releasing the data."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÑSeveral binary terms can be managed by the same resource object. The destructor is not called until the last binary is garbage collected. This can be useful to return different parts of a larger binary buffer."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,65,115,32,119,105,116,104]}],0,false},
             {text,")[enif_make_resource](#enif_make_resource)"},
             {sep,
              [{text,
                "M, no ownership transfer is done. The resource still needs to be released with"}],
              0,false},
             {text,"/[enif_release_resource](#enif_release_resource)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "c## enif_make_reverse_list(ErlNifEnv* env, ERL_NIF_TERM list_in,\n        ERL_NIF_TERM *list_out):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,67,114,101,97,116,101,32,116,104,101,32,114,101,118,101,114,
             115,101,32,111,102,32,97,32,108,105,115,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[4,83,101,116,115]}],0,false},
             {text,"\v**list_out*"},
             {sep,
              [{text,
                [31,116,111,32,116,104,101,32,114,101,118,101,114,115,101,32,
                 108,105,115,116,32,111,102,32,116,104,101,32,108,105,115,
                 116]}],
              0,false},
             {text,"\t*list_in*"},
             {sep,[{text,"\vand returns"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"\f, or returns"}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[2,105,102]}],0,false},
             {text,"\t*list_in*"},
             {sep,
              [{text,[14,105,115,32,110,111,116,32,97,32,108,105,115,116,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [133,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
               115,32,111,110,108,121,32,116,111,32,98,101,32,117,115,101,100,
               32,111,110,32,115,104,111,114,116,32,108,105,115,116,115,44,32,
               97,115,32,97,32,99,111,112,121,32,105,115,32,99,114,101,97,116,
               101,100,32,111,102,32,116,104,101,32,108,105,115,116,44,32,119,
               104,105,99,104,32,105,115,32,110,111,116,32,114,101,108,101,97,
               115,101,100,32,117,110,116,105,108,32,97,102,116,101,114,32,
               116,104,101,32,78,73,70,32,114,101,116,117,114,110,115,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,"\t*list_in*"},
             {sep,
              [{text,
                [31,116,101,114,109,32,109,117,115,116,32,98,101,108,111,110,
                 103,32,116,111,32,101,110,118,105,114,111,110,109,101,110,
                 116]}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "i## enif_make_string(ErlNifEnv* env,\n        const char* string, ErlNifCharEncoding encoding):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [16,67,114,101,97,116,101,32,97,32,115,116,114,105,110,103,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"/Creates a list containing the characters of the"}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                [18,45,116,101,114,109,105,110,97,116,101,100,32,115,116,114,
                 105,110,103]}],
              0,false},
             {text,"\b*string*"},
             {sep,[{text,"\rwith encoding"}],0,false},
             {text,
              [31,91,101,110,99,111,100,105,110,103,93,40,35,69,114,108,78,
               105,102,67,104,97,114,69,110,99,111,100,105,110,103,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [129,35,35,32,101,110,105,102,95,109,97,107,101,95,115,116,114,105,
         110,103,95,108,101,110,40,69,114,108,78,105,102,69,110,118,42,10,32,
         32,32,32,32,32,32,32,101,110,118,44,32,99,111,110,115,116,32,99,104,
         97,114,42,32,115,116,114,105,110,103,44,32,115,105,122,101,95,116,32,
         108,101,110,44,32,69,114,108,78,105,102,67,104,97,114,69,110,99,111,
         100,105,110,103,10,32,32,32,32,32,32,32,32,101,110,99,111,100,105,
         110,103,41,58,69,82,76,95,78,73,70,95,84,69,82,77]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [16,67,114,101,97,116,101,32,97,32,115,116,114,105,110,103,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "6Creates a list containing the characters of the string"}],
              0,false},
             {text,"\b*string*"},
             {sep,[{text,"\vwith length"}],0,false},
             {text,[5,42,108,101,110,42]},
             {sep,[{text,"\fand encoding"}],0,false},
             {text,
              [31,91,101,110,99,111,100,105,110,103,93,40,35,69,114,108,78,
               105,102,67,104,97,114,69,110,99,111,100,105,110,103,41]},
             {sep,[{text,[1,46]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,"/characters are treated as any other characters."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "l## enif_make_sub_binary(ErlNifEnv*\n        env, ERL_NIF_TERM bin_term, size_t pos, size_t size):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,77,97,107,101,32,97,32,115,117,98,98,105,110,97,114,121,32,
             116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\eMakes a subbinary of binary"}],0,false},
             {text,"\n*bin_term*"},
             {sep,[{text,"!, starting at zero-based position"}],0,false},
             {text,[5,42,112,111,115,42]},
             {sep,
              [{text,
                [16,119,105,116,104,32,97,32,108,101,110,103,116,104,32,111,
                 102]}],
              0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,[{text,[6,98,121,116,101,115,46]}],0,false},
             {text,"\n*bin_term*"},
             {sep,
              [{text,
                [30,109,117,115,116,32,98,101,32,97,32,98,105,110,97,114,121,
                 32,111,114,32,98,105,116,115,116,114,105,110,103,46]}],
              0,false},
             {text,"\n*pos+size*"},
             {sep,
              [{text,
                "5must be less or equal to the number of whole bytes in"}],
              0,false},
             {text,"\n*bin_term*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "J## enif_make_tuple(ErlNifEnv* env,\n        unsigned cnt, ...):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,67,114,101,97,116,101,115,32,97,32,116,117,112,108,101,32,116,
             101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [29,67,114,101,97,116,101,115,32,97,32,116,117,112,108,101,32,
                 116,101,114,109,32,111,102,32,97,114,105,116,121]}],
              0,false},
             {text,[5,42,99,110,116,42]},
             {sep,[{text,"\t. Expects"}],0,false},
             {text,[5,42,99,110,116,42]},
             {sep,
              [{text,
                [26,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,
                 101,110,116,115,32,40,97,102,116,101,114]}],
              0,false},
             {text,[5,42,99,110,116,42]},
             {sep,[{text,"\t) of type"}],0,false},
             {text,[14,42,69,82,76,95,78,73,70,95,84,69,82,77,42]},
             {sep,
              [{text,
                [29,97,115,32,116,104,101,32,101,108,101,109,101,110,116,115,
                 32,111,102,32,116,104,101,32,116,117,112,108,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "I## enif_make_tuple1(ErlNifEnv* env,\n        ERL_NIF_TERM e1):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Z## enif_make_tuple2(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ERL_NIF_TERM e2):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "k## enif_make_tuple3(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "_## enif_make_tuple4(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "_## enif_make_tuple5(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "_## enif_make_tuple6(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "_## enif_make_tuple7(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "_## enif_make_tuple8(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "_## enif_make_tuple9(ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [20,67,114,101,97,116,101,32,97,32,116,117,112,108,101,32,116,101,
             114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "rCreates a tuple term with length indicated by the function name. Prefer these functions (macros) over the variadic"}],
              0,false},
             {text,
              [17,42,101,110,105,102,95,109,97,107,101,95,116,117,112,108,101,
               42]},
             {sep,
              [{text,
                "Fto get a compile-time error if the number of arguments does not match."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "j## enif_make_tuple_from_array(ErlNifEnv* env, const ERL_NIF_TERM\n        arr[], unsigned cnt):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"\"Create a tuple term from an array."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"0Creates a tuple containing the elements of array"}],
              0,false},
             {text,[5,42,97,114,114,42]},
             {sep,[{text,"\tof length"}],0,false},
             {text,[5,42,99,110,116,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        ">## enif_make_uint(ErlNifEnv* env, unsigned int i):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Create an unsigned integer term."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [31,67,114,101,97,116,101,115,32,97,110,32,105,110,116,101,
                 103,101,114,32,116,101,114,109,32,102,114,111,109,32,97,
                 110]}],
              0,false},
             {text,[14,42,117,110,115,105,103,110,101,100,32,105,110,116,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "@## enif_make_uint64(ErlNifEnv* env, ErlNifUInt64 i):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Create an unsigned integer term."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "8Creates an integer term from an unsigned 64-bit integer."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "@## enif_make_ulong(ErlNifEnv* env, unsigned long i):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"1Create an integer term from an unsigned long int."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [31,67,114,101,97,116,101,115,32,97,110,32,105,110,116,101,
                 103,101,114,32,116,101,114,109,32,102,114,111,109,32,97,
                 110]}],
              0,false},
             {text,
              [19,42,117,110,115,105,103,110,101,100,32,108,111,110,103,32,
               105,110,116,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "`## enif_make_unique_integer(ErlNifEnv\n        *env, ErlNifUniqueInteger properties):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "AReturns a unique integer with the same properties as specified by"}],
              0,false},
             {text,"4[erlang#unique_integer-1](./erlang#unique_integer-1)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[5,42,101,110,118,42]},
             {sep,
              [{text,",is the environment to create the integer in."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [25,42,69,82,76,95,78,73,70,95,85,78,73,81,85,69,95,80,79,83,73,
               84,73,86,69,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [26,42,69,82,76,95,78,73,70,95,85,78,73,81,85,69,95,77,79,78,79,
               84,79,78,73,67,42]},
             {sep,
              [{text,
                [142,99,97,110,32,98,101,32,112,97,115,115,101,100,32,97,115,
                 32,116,104,101,32,115,101,99,111,110,100,32,97,114,103,117,
                 109,101,110,116,32,116,111,32,99,104,97,110,103,101,32,116,
                 104,101,32,112,114,111,112,101,114,116,105,101,115,32,111,
                 102,32,116,104,101,32,105,110,116,101,103,101,114,32,114,101,
                 116,117,114,110,101,100,46,32,84,104,101,121,32,99,97,110,32,
                 98,101,32,99,111,109,98,105,110,101,100,32,98,121,32,79,82,
                 58,105,110,103,32,116,104,101,32,116,119,111,32,118,97,108,
                 117,101,115,32,116,111,103,101,116,104,101,114,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,"+[ErlNifUniqueInteger](#ErlNifUniqueInteger)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [136,35,35,32,101,110,105,102,95,109,97,112,95,105,116,101,114,97,116,
         111,114,95,99,114,101,97,116,101,40,69,114,108,78,105,102,69,110,118,
         32,42,101,110,118,44,10,32,32,32,32,32,32,32,32,69,82,76,95,78,73,70,
         95,84,69,82,77,32,109,97,112,44,32,69,114,108,78,105,102,77,97,112,
         73,116,101,114,97,116,111,114,32,42,105,116,101,114,44,32,69,114,108,
         78,105,102,77,97,112,73,116,101,114,97,116,111,114,69,110,116,114,
         121,10,32,32,32,32,32,32,32,32,101,110,116,114,121,41,58,105,110,
         116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [22,67,114,101,97,116,101,32,97,32,109,97,112,32,105,116,101,114,
             97,116,111,114,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [31,67,114,101,97,116,101,115,32,97,110,32,105,116,101,114,97,
                 116,111,114,32,102,111,114,32,116,104,101,32,109,97,112]}],
              0,false},
             {text,[5,42,109,97,112,42]},
             {sep,
              [{text,"+by initializing the structure pointed to by"}],
              0,false},
             {text,[6,42,105,116,101,114,42]},
             {sep,[{text,"\n. Argument"}],0,false},
             {text,[7,42,101,110,116,114,121,42]},
             {sep,
              [{text,".determines the start position of the iterator:"}],
              0,false},
             {text,
              [28,42,69,82,76,95,78,73,70,95,77,65,80,95,73,84,69,82,65,84,79,
               82,95,70,73,82,83,84,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,"\e*ERL_NIF_MAP_ITERATOR_LAST*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                [23,111,110,32,115,117,99,99,101,115,115,44,32,111,114,32,102,
                 97,108,115,101,32,105,102]}],
              0,false},
             {text,[5,42,109,97,112,42]},
             {sep,[{text,"\ris not a map."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "@A map iterator is only useful during the lifetime of environment"}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,[{text,"\bthat the"}],0,false},
             {text,[5,42,109,97,112,42]},
             {sep,
              [{text,
                "5belongs to. The iterator must be destroyed by calling"}],
              0,false},
             {text,"7[enif_map_iterator_destroy](#enif_map_iterator_destroy)"},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [297,10,69,82,76,95,78,73,70,95,84,69,82,77,32,107,101,121,44,
               32,118,97,108,117,101,59,10,69,114,108,78,105,102,77,97,112,73,
               116,101,114,97,116,111,114,32,105,116,101,114,59,10,101,110,
               105,102,95,109,97,112,95,105,116,101,114,97,116,111,114,95,99,
               114,101,97,116,101,40,101,110,118,44,32,109,121,95,109,97,112,
               44,32,38,105,116,101,114,44,32,69,82,76,95,78,73,70,95,77,65,
               80,95,73,84,69,82,65,84,79,82,95,70,73,82,83,84,41,59,10,10,
               119,104,105,108,101,32,40,101,110,105,102,95,109,97,112,95,105,
               116,101,114,97,116,111,114,95,103,101,116,95,112,97,105,114,40,
               101,110,118,44,32,38,105,116,101,114,44,32,38,107,101,121,44,
               32,38,118,97,108,117,101,41,41,32,123,10,32,32,32,32,100,111,
               95,115,111,109,101,116,104,105,110,103,40,107,101,121,44,118,
               97,108,117,101,41,59,10,32,32,32,32,101,110,105,102,95,109,97,
               112,95,105,116,101,114,97,116,111,114,95,110,101,120,116,40,
               101,110,118,44,32,38,105,116,101,114,41,59,10,125,10,101,110,
               105,102,95,109,97,112,95,105,116,101,114,97,116,111,114,95,100,
               101,115,116,114,111,121,40,101,110,118,44,32,38,105,116,101,
               114,41,59]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         "ÒThe key-value pairs of a map have no defined iteration order. The only guarantee is that the iteration order of a single map instance is preserved during the lifetime of the environment that the map belongs to."}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "R## enif_map_iterator_destroy(ErlNifEnv *env,\n        ErlNifMapIterator *iter):void"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [23,68,101,115,116,114,111,121,32,97,32,109,97,112,32,105,116,101,
             114,97,116,111,114,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\"Destroys a map iterator created by"}],0,false},
             {text,"5[enif_map_iterator_create](#enif_map_iterator_create)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [130,35,35,32,101,110,105,102,95,109,97,112,95,105,116,101,114,97,116,
         111,114,95,103,101,116,95,112,97,105,114,40,69,114,108,78,105,102,69,
         110,118,32,42,101,110,118,44,10,32,32,32,32,32,32,32,32,69,114,108,
         78,105,102,77,97,112,73,116,101,114,97,116,111,114,32,42,105,116,101,
         114,44,32,69,82,76,95,78,73,70,95,84,69,82,77,32,42,107,101,121,44,
         32,69,82,76,95,78,73,70,95,84,69,82,77,10,32,32,32,32,32,32,32,32,42,
         118,97,108,117,101,41,58,105,110,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"3Get key and value at current map iterator position."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              ">Gets key and value terms at the current map iterator position."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [16,79,110,32,115,117,99,99,101,115,115,44,32,115,101,116,
                 115]}],
              0,false},
             {text,[6,42,42,107,101,121,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\b**value*"},
             {sep,[{text,"\vand returns"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"\t. Returns"}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                "Wif the iterator is positioned at head (before first entry) or tail (beyond last entry)."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Q## enif_map_iterator_is_head(ErlNifEnv *env,\n        ErlNifMapIterator *iter):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"1Check if map iterator is positioned before first."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                [15,105,102,32,109,97,112,32,105,116,101,114,97,116,111,114]}],
              0,false},
             {text,[6,42,105,116,101,114,42]},
             {sep,[{text,"%is positioned before the first entry."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Q## enif_map_iterator_is_tail(ErlNifEnv *env,\n        ErlNifMapIterator *iter):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"/Check if map iterator is positioned after last."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                [15,105,102,32,109,97,112,32,105,116,101,114,97,116,111,114]}],
              0,false},
             {text,[6,42,105,116,101,114,42]},
             {sep,[{text,"#is positioned after the last entry."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "N## enif_map_iterator_next(ErlNifEnv *env,\n        ErlNifMapIterator *iter):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,".Increment map iterator to point to next entry."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "=Increments map iterator to point to the next key-value entry."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                "@if the iterator is now positioned at a valid key-value entry, or"}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                "Bif the iterator is positioned at the tail (beyond the last entry)."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "N## enif_map_iterator_prev(ErlNifEnv *env,\n        ErlNifMapIterator *iter):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"2Decrement map iterator to point to previous entry."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ADecrements map iterator to point to the previous key-value entry."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,
                "@if the iterator is now positioned at a valid key-value entry, or"}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                "Cif the iterator is positioned at the head (before the first entry)."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "t## enif_monitor_process(ErlNifEnv* caller_env,\n      void* obj, const ErlNifPid* target_pid, ErlNifMonitor* mon):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"\"Monitor a process from a resource."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"7<a name=\"enif_monitor_process\">enif_monitor_process</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "zStarts monitoring a process from a resource. When a process is monitored, a process exit results in a call to the provided"}],
              0,false},
             {text,")[ErlNifResourceDown](#ErlNifResourceDown)"},
             {sep,
              [{text,"+callback associated with the resource type."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,[5,42,111,98,106,42]},
             {sep,
              [{text,"2is pointer to the resource to hold the monitor and"}],
              0,false},
             {text,"\r**target_pid*"},
             {sep,
              [{text,"-identifies the local process to be monitored."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[2,73,102]}],0,false},
             {text,[5,42,109,111,110,42]},
             {sep,[{text,[6,105,115,32,110,111,116]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                "=, a successful call stores the identity of the monitor in the"}],
              0,false},
             {text,
              [31,91,69,114,108,78,105,102,77,111,110,105,116,111,114,93,40,
               35,69,114,108,78,105,102,77,111,110,105,116,111,114,41]},
             {sep,
              [{text,
                [20,115,116,114,117,99,116,32,112,111,105,110,116,101,100,32,
                 116,111,32,98,121]}],
              0,false},
             {text,[5,42,109,111,110,42]},
             {sep,
              [{text,
                "H. This identifier is used to refer to the monitor for later removal with"}],
              0,false},
             {text,"1[enif_demonitor_process](#enif_demonitor_process)"},
             {sep,
              [{text,
                [15,111,114,32,99,111,109,112,97,114,101,32,119,105,116,104]}],
              0,false},
             {text,"/[enif_compare_monitors](#enif_compare_monitors)"},
             {sep,
              [{text,
                "Z. A monitor is automatically removed when it triggers or when the resource is deallocated."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,"\f*caller_env*"},
             {sep,
              [{text,
                "iis the environment of the calling process or callback. Must only be NULL if calling from a custom thread."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[3,42,48,42]},
             {sep,[{text,"\von success,"}],0,false},
             {sep,[{text,"\t< 0 if no"}],0,false},
             {text,[6,42,100,111,119,110,42]},
             {sep,
              [{text,
                [25,99,97,108,108,98,97,99,107,32,105,115,32,112,114,111,118,
                 105,100,101,100,44,32,97,110,100]}],
              0,false},
             {sep,
              [{text,"+> 0 if the process is no longer alive or if"}],
              0,false},
             {text,"\f*target_pid*"},
             {sep,[{text,[2,105,115]}],0,false},
             {text,"$[undefined](#enif_set_pid_undefined)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [146,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
               115,32,111,110,108,121,32,116,104,114,101,97,100,45,115,97,102,
               101,32,119,104,101,110,32,116,104,101,32,101,109,117,108,97,
               116,111,114,32,119,105,116,104,32,83,77,80,32,115,117,112,112,
               111,114,116,32,105,115,32,117,115,101,100,46,32,73,116,32,99,
               97,110,32,111,110,108,121,32,98,101,32,117,115,101,100,32,105,
               110,32,97,32,110,111,110,45,83,77,80,32,101,109,117,108,97,116,
               111,114,32,102,114,111,109,32,97,32,78,73,70,45,99,97,108,108,
               105,110,103,32,116,104,114,101,97,100,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,";## enif_monotonic_time(ErlNifTimeUnit time_unit):ErlNifTime"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [26,71,101,116,32,69,114,108,97,110,103,32,109,111,110,111,116,
             111,110,105,99,32,116,105,109,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"5<a name=\"enif_monotonic_time\">enif_monotonic_time</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,82,101,116,117,114,110,115,32,116,104,101,32,99,117,114,
                 114,101,110,116]}],
              0,false},
             {text,
              "@[Erlang monotonic time](./time_correction#Erlang_Monotonic_Time)"},
             {sep,
              [{text,
                "6. Notice that it is not uncommon with negative values."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\v*time_unit*"},
             {sep,
              [{text,"'is the time unit of the returned value."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,
              [20,42,69,82,76,95,78,73,70,95,84,73,77,69,95,69,82,82,79,82,
               42]},
             {sep,
              [{text,
                "hif called with an invalid time unit argument, or if called from a thread that is not a scheduler thread."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,
              [25,91,69,114,108,78,105,102,84,105,109,101,93,40,35,69,114,108,
               78,105,102,84,105,109,101,41]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"![ErlNifTimeUnit](#ErlNifTimeUnit)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## enif_mutex_create(char *name):ErlNifMutex *"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "D[erl_driver#erl_drv_mutex_create](./erl_driver#erl_drv_mutex_create)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,",## enif_mutex_destroy(ErlNifMutex *mtx):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "F[erl_driver#erl_drv_mutex_destroy](./erl_driver#erl_drv_mutex_destroy)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,")## enif_mutex_lock(ErlNifMutex *mtx):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "@[erl_driver#erl_drv_mutex_lock](./erl_driver#erl_drv_mutex_lock)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## enif_mutex_name(ErlNifMutex* mtx):char*"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "@[erl_driver#erl_drv_mutex_name](./erl_driver#erl_drv_mutex_name)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"+## enif_mutex_trylock(ErlNifMutex *mtx):int"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "F[erl_driver#erl_drv_mutex_trylock](./erl_driver#erl_drv_mutex_trylock)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"+## enif_mutex_unlock(ErlNifMutex *mtx):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "D[erl_driver#erl_drv_mutex_unlock](./erl_driver#erl_drv_mutex_unlock)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"-## enif_now_time(ErlNifEnv *env):ERL_NIF_TERM"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\nReturns an"}],0,false},
             {text,
              [30,91,101,114,108,97,110,103,35,110,111,119,45,48,93,40,46,47,
               101,114,108,97,110,103,35,110,111,119,45,48,41]},
             {sep,[{text,"\vtime stamp."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,[{text," **This function is deprecated.**"}],0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Ê## enif_open_resource_type(ErlNifEnv* env, const char*\n        module_str, const char* name, ErlNifResourceDtor* dtor,\n        ErlNifResourceFlags flags, ErlNifResourceFlags* tried):ErlNifResourceType *"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"#Create or takeover a resource type."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                ">Creates or takes over a resource type identified by the string"}],
              0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,
              [{text,"2and gives it the destructor function pointed to by"}],
              0,false},
             {text,")[ErlNifResourceDtor](#ErlNifResourceDtor)"},
             {sep,[{text,"\n. Argument"}],0,false},
             {text,[7,42,102,108,97,103,115,42]},
             {sep,
              [{text,
                [30,99,97,110,32,104,97,118,101,32,116,104,101,32,102,111,108,
                 108,111,119,105,110,103,32,118,97,108,117,101,115,58]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{text,
                    [17,69,82,76,95,78,73,70,95,82,84,95,67,82,69,65,84,69]}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {text,
                  "8Creates a new resource type that does not already exist."},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,
                 [{text,
                   [19,69,82,76,95,78,73,70,95,82,84,95,84,65,75,69,79,86,69,
                    82]}],
                 0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {sep,
                [{sep,
                  [{text,
                    "fOpens an existing resource type and takes over ownership of all its instances. The supplied destructor"}],
                  0,false},
                 {text,[4,100,116,111,114]},
                 {sep,
                  [{text,
                    "cis called both for existing instances and new instances not yet created by the calling NIF library."}],
                  0,false}],
                0,false},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "tThe two flag values can be combined with bitwise OR. The resource type name is local to the calling module. Argument"}],
              0,false},
             {text,"\f*module_str*"},
             {sep,
              [{text,
                [29,105,115,32,110,111,116,32,40,121,101,116,41,32,117,115,
                 101,100,32,97,110,100,32,109,117,115,116,32,98,101]}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,[{text,[1,46]}],0,false},
             {text,[6,42,100,116,111,114,42]},
             {sep,[{text,[6,99,97,110,32,98,101]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,[{text,"\eif no destructor is needed."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "COn success, the function returns a pointer to the resource type and"}],
              0,false},
             {text,"\b**tried*"},
             {sep,
              [{text,
                [16,105,115,32,115,101,116,32,116,111,32,101,105,116,104,101,
                 114]}],
              0,false},
             {text,
              [19,42,69,82,76,95,78,73,70,95,82,84,95,67,82,69,65,84,69,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,
              [21,42,69,82,76,95,78,73,70,95,82,84,95,84,65,75,69,79,86,69,82,
               42]},
             {sep,
              [{text,".to indicate what was done. On failure, returns"}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,[{text,"\band sets"}],0,false},
             {text,"\b**tried*"},
             {sep,[{text,[2,116,111]}],0,false},
             {text,[7,42,102,108,97,103,115,42]},
             {sep,
              [{text,
                [22,46,32,73,116,32,105,115,32,97,108,108,111,119,101,100,32,
                 116,111,32,115,101,116]}],
              0,false},
             {text,[7,42,116,114,105,101,100,42]},
             {sep,[{text,[2,116,111]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\vNotice that"}],0,false},
             {text,
              [25,42,101,110,105,102,95,111,112,101,110,95,114,101,115,111,
               117,114,99,101,95,116,121,112,101,42]},
             {sep,
              [{text,"1is only allowed to be called in the two callbacks"}],
              0,false},
             {text,"\r[load](#load)"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [19,91,117,112,103,114,97,100,101,93,40,35,117,112,103,114,97,
               100,101,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,"7[enif_open_resource_type_x](#enif_open_resource_type_x)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "·## enif_open_resource_type_x(ErlNifEnv* env, const char* name,\n\tconst ErlNifResourceTypeInit* init,\n        ErlNifResourceFlags flags, ErlNifResourceFlags* tried):ErlNifResourceType *"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"#Create or takeover a resource type."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,"3[enif_open_resource_type](#enif_open_resource_type)"},
             {sep,
              [{text,
                "^except it accepts additional callback functions for resource types that are used together with"}],
              0,false},
             {text,"\e[enif_select](#enif_select)"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"-[enif_monitor_process](#enif_monitor_process)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,[6,42,105,110,105,116,42]},
             {sep,
              [{text,
                [18,105,115,32,97,32,112,111,105,110,116,101,114,32,116,111,
                 32,97,110]}],
              0,false},
             {text,"1[ErlNifResourceTypeInit](#ErlNifResourceTypeInit)"},
             {sep,
              [{text,
                "lstructure that contains the function pointers for destructor, down and stop callbacks for the resource type."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "p## enif_port_command(ErlNifEnv* env, const\n       ErlNifPort* to_port, ErlNifEnv *msg_env, ERL_NIF_TERM msg):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,83,101,110,100,32,97,32,112,111,114,116,95,99,111,109,109,97,
             110,100,32,116,111,32,116,111,95,112,111,114,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bWorks as"}],0,false},
             {text,"0[erlang#port_command-2](./erlang#port_command-2)"},
             {sep,
              [{text,"3, except that it is always completely asynchronous."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,[{text,[3,101,110,118]}],0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {sep,
                      [{sep,
                        [{text,
                          "3The environment of the calling process. Must not be"}],
                        0,false},
                       {text,[4,78,85,76,76]},
                       {sep,[{text,[1,46]}],0,false}],
                      0,false},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,[{text,"\b*to_port"}],0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {text,
                    "WThe port ID of the receiving port. The port ID is to refer to a port on the local node."},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,[7,109,115,103,95,101,110,118]}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {sep,
                  [{sep,
                    [{text,
                      "\\The environment of the message term. Can be a process independent environment allocated with"}],
                    0,false},
                   {text,
                    [14,101,110,105,102,95,97,108,108,111,99,95,101,110,118]},
                   {sep,[{text,[2,111,114]}],0,false},
                   {text,[4,78,85,76,76]},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,[3,109,115,103]}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {sep,
                [{sep,
                  [{text,
                    "IThe message term to send. The same limitations apply as on the payload to"}],
                  0,false},
                 {text,
                  [21,101,114,108,97,110,103,35,112,111,114,116,95,99,111,109,
                   109,97,110,100,45,50]},
                 {sep,[{text,[1,46]}],0,false}],
                0,false},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,85,115,105,110,103,32,97]}],0,false},
             {text,"\t*msg_env*"},
             {sep,[{text,[2,111,102]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,"2is an optimization, which groups together calls to"}],
              0,false},
             {text,
              [16,42,101,110,105,102,95,97,108,108,111,99,95,101,110,118,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,
              [16,42,101,110,105,102,95,109,97,107,101,95,99,111,112,121,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,
              [19,42,101,110,105,102,95,112,111,114,116,95,99,111,109,109,97,
               110,100,42]},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,
              [15,42,101,110,105,102,95,102,114,101,101,95,101,110,118,42]},
             {sep,
              [{text,
                "binto one call. This optimization is only useful when a majority of the terms are to be copied from"}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,[{text,[2,116,111]}],0,false},
             {text,"\t*msg_env*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,",if the command is successfully sent. Returns"}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,"\"if the command fails, for example:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"\n**to_port*"},
            {sep,
             [{text,
               [31,100,111,101,115,32,110,111,116,32,114,101,102,101,114,32,
                116,111,32,97,32,108,111,99,97,108,32,112,111,114,116,46]}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {text,
           "CThe currently executing process (that is, the sender) is not alive."}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[5,42,109,115,103,42]},
           {sep,[{text,"\vis invalid."}],0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,"+[enif_get_local_port](#enif_get_local_port)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"(## enif_priv_data(ErlNifEnv* env):void *"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"&Get the private data of a NIF library."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "7Returns the pointer to the private data that was set by"}],
              0,false},
             {text,"\r[load](#load)"},
             {sep,[{text,[2,111,114]}],0,false},
             {text,
              [19,91,117,112,103,114,97,100,101,93,40,35,117,112,103,114,97,
               100,101,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Q## enif_raise_exception(ErlNifEnv*\n        env, ERL_NIF_TERM reason):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [28,82,97,105,115,101,32,97,32,78,73,70,32,101,114,114,111,114,32,
             101,120,99,101,112,116,105,111,110,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"(Creates an error exception with the term"}],
              0,false},
             {text,"\b*reason*"},
             {sep,
              [{text,
                "=to be returned from a NIF, and associates it with environment"}],
              0,false},
             {text,[5,42,101,110,118,42]},
             {sep,
              [{text,"-. Once a NIF or any function it calls invokes"}],
              0,false},
             {text,
              [22,42,101,110,105,102,95,114,97,105,115,101,95,101,120,99,101,
               112,116,105,111,110,42]},
             {sep,
              [{text,
                [148,44,32,116,104,101,32,114,117,110,116,105,109,101,32,101,
                 110,115,117,114,101,115,32,116,104,97,116,32,116,104,101,32,
                 101,120,99,101,112,116,105,111,110,32,105,116,32,99,114,101,
                 97,116,101,115,32,105,115,32,114,97,105,115,101,100,32,119,
                 104,101,110,32,116,104,101,32,78,73,70,32,114,101,116,117,
                 114,110,115,44,32,101,118,101,110,32,105,102,32,116,104,101,
                 32,78,73,70,32,97,116,116,101,109,112,116,115,32,116,111,32,
                 114,101,116,117,114,110,32,97,32,110,111,110,45,101,120,99,
                 101,112,116,105,111,110,32,116,101,114,109,32,105,110,115,
                 116,101,97,100,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [21,84,104,101,32,114,101,116,117,114,110,32,118,97,108,117,
                 101,32,102,114,111,109]}],
              0,false},
             {text,
              [22,42,101,110,105,102,95,114,97,105,115,101,95,101,120,99,101,
               112,116,105,111,110,42]},
             {sep,
              [{text,
                "jcan only be used as the return value from the NIF that invoked it (directly or indirectly) or be passed to"}],
              0,false},
             {text,"'[enif_is_exception](#enif_is_exception)"},
             {sep,
              [{text,"(, but not to any other NIF API function."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,
              "9[enif_has_pending_exception](#enif_has_pending_exception)"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"%[enif_make_badarg](#enif_make_badarg)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## enif_realloc(void* ptr, size_t size):void *"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [26,82,101,97,108,108,111,99,97,116,101,32,100,121,110,97,109,105,
             99,32,109,101,109,111,114,121,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [31,82,101,97,108,108,111,99,97,116,101,115,32,109,101,109,
                 111,114,121,32,97,108,108,111,99,97,116,101,100,32,98,121]}],
              0,false},
             {text,
              [25,91,101,110,105,102,95,97,108,108,111,99,93,40,35,101,110,
               105,102,95,97,108,108,111,99,41]},
             {sep,[{text,[2,116,111]}],0,false},
             {text,[6,42,115,105,122,101,42]},
             {sep,[{text,[6,98,121,116,101,115,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                [26,105,102,32,116,104,101,32,114,101,97,108,108,111,99,97,
                 116,105,111,110,32,102,97,105,108,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "`The returned pointer is suitably aligned for any built-in type that fit in the allocated memory."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## enif_realloc_binary(ErlNifBinary* bin, size_t size):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [28,67,104,97,110,103,101,32,116,104,101,32,115,105,122,101,32,
             111,102,32,97,32,98,105,110,97,114,121,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [28,67,104,97,110,103,101,115,32,116,104,101,32,115,105,122,
                 101,32,111,102,32,97,32,98,105,110,97,114,121]}],
              0,false},
             {text,[5,42,98,105,110,42]},
             {sep,
              [{text,
                "x. The source binary can be read-only, in which case it is left untouched and a mutable copy is allocated and assigned to"}],
              0,false},
             {text,[6,42,42,98,105,110,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [28,105,102,32,109,101,109,111,114,121,32,97,108,108,111,99,
                 97,116,105,111,110,32,102,97,105,108,101,100,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## enif_release_binary(ErlNifBinary* bin):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [17,82,101,108,101,97,115,101,32,97,32,98,105,110,97,114,121,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [31,82,101,108,101,97,115,101,115,32,97,32,98,105,110,97,114,
                 121,32,111,98,116,97,105,110,101,100,32,102,114,111,109]}],
              0,false},
             {text,"'[enif_alloc_binary](#enif_alloc_binary)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"(## enif_release_resource(void* obj):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [26,82,101,108,101,97,115,101,32,97,32,114,101,115,111,117,114,99,
             101,32,111,98,106,101,99,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"&Removes a reference to resource object"}],0,false},
             {text,[5,42,111,98,106,42]},
             {sep,[{text,"\robtained from"}],0,false},
             {text,"+[enif_alloc_resource](#enif_alloc_resource)"},
             {sep,
              [{text,
                "T. The resource object is destructed when the last reference is removed. Each call to"}],
              0,false},
             {text,
              [23,42,101,110,105,102,95,114,101,108,101,97,115,101,95,114,101,
               115,111,117,114,99,101,42]},
             {sep,[{text,"%must correspond to a previous call to"}],0,false},
             {text,
              [21,42,101,110,105,102,95,97,108,108,111,99,95,114,101,115,111,
               117,114,99,101,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,")[enif_keep_resource](#enif_keep_resource)"},
             {sep,
              [{text,
                [20,46,32,82,101,102,101,114,101,110,99,101,115,32,109,97,100,
                 101,32,98,121]}],
              0,false},
             {text,")[enif_make_resource](#enif_make_resource)"},
             {sep,
              [{text,"-can only be removed by the garbage collector."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"0## enif_rwlock_create(char *name):ErlNifRWLock *"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "F[erl_driver#erl_drv_rwlock_create](./erl_driver#erl_drv_rwlock_create)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"0## enif_rwlock_destroy(ErlNifRWLock *rwlck):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "H[erl_driver#erl_drv_rwlock_destroy](./erl_driver#erl_drv_rwlock_destroy)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## enif_rwlock_name(ErlNifRWLock* rwlck):char*"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "B[erl_driver#erl_drv_rwlock_name](./erl_driver#erl_drv_rwlock_name)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## enif_rwlock_rlock(ErlNifRWLock *rwlck):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "D[erl_driver#erl_drv_rwlock_rlock](./erl_driver#erl_drv_rwlock_rlock)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"0## enif_rwlock_runlock(ErlNifRWLock *rwlck):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "H[erl_driver#erl_drv_rwlock_runlock](./erl_driver#erl_drv_rwlock_runlock)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"/## enif_rwlock_rwlock(ErlNifRWLock *rwlck):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "F[erl_driver#erl_drv_rwlock_rwlock](./erl_driver#erl_drv_rwlock_rwlock)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"1## enif_rwlock_rwunlock(ErlNifRWLock *rwlck):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "J[erl_driver#erl_drv_rwlock_rwunlock](./erl_driver#erl_drv_rwlock_rwunlock)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"0## enif_rwlock_tryrlock(ErlNifRWLock *rwlck):int"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "J[erl_driver#erl_drv_rwlock_tryrlock](./erl_driver#erl_drv_rwlock_tryrlock)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"1## enif_rwlock_tryrwlock(ErlNifRWLock *rwlck):int"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "L[erl_driver#erl_drv_rwlock_tryrwlock](./erl_driver#erl_drv_rwlock_tryrwlock)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Ø## enif_schedule_nif(ErlNifEnv* env,\n        const char* fun_name, int flags, ERL_NIF_TERM (*fp)(ErlNifEnv* env, int\n        argc, const ERL_NIF_TERM argv[]), int argc, const ERL_NIF_TERM\n        argv[]):ERL_NIF_TERM"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,83,99,104,101,100,117,108,101,32,97,32,78,73,70,32,102,111,
             114,32,101,120,101,99,117,116,105,111,110,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rSchedules NIF"}],0,false},
             {text,[4,42,102,112,42]},
             {sep,
              [{text,
                "~to execute. This function allows an application to break up long-running work into multiple regular NIF calls or to schedule a"}],
              0,false},
             {text,
              [24,91,100,105,114,116,121,32,78,73,70,93,40,35,100,105,114,116,
               121,95,110,105,102,115,41]},
             {sep,
              [{text,"'to execute on a dirty scheduler thread."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,"\bfun_name"}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,
                           [{text,
                             "bProvides a name for the NIF that is scheduled for execution. If it cannot be converted to an atom,"}],
                           0,false},
                          {text,
                           [17,101,110,105,102,95,115,99,104,101,100,117,108,
                            101,95,110,105,102]},
                          {sep,[{text,"\treturns a"}],0,false},
                          {text,[6,98,97,100,97,114,103]},
                          {sep,[{text,"\nexception."}],0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,[5,102,108,97,103,115]}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           [14,77,117,115,116,32,98,101,32,115,101,116,32,116,
                            111]}],
                         0,false},
                        {text,[1,48]},
                        {sep,
                         [{text,
                           "Rfor a regular NIF. If the emulator was built with dirty scheduler support enabled,"}],
                         0,false},
                        {text,[5,102,108,97,103,115]},
                        {sep,
                         [{text,
                           [20,99,97,110,32,98,101,32,115,101,116,32,116,111,
                            32,101,105,116,104,101,114]}],
                         0,false},
                        {text,"\eERL_NIF_DIRTY_JOB_CPU_BOUND"},
                        {sep,
                         [{text,
                           "*if the job is expected to be CPU-bound, or"}],
                         0,false},
                        {text,
                         [26,69,82,76,95,78,73,70,95,68,73,82,84,89,95,74,79,
                          66,95,73,79,95,66,79,85,78,68]},
                        {sep,
                         [{text,
                           [141,102,111,114,32,106,111,98,115,32,116,104,97,
                            116,32,119,105,108,108,32,98,101,32,73,47,79,45,
                            98,111,117,110,100,46,32,73,102,32,100,105,114,
                            116,121,32,115,99,104,101,100,117,108,101,114,32,
                            116,104,114,101,97,100,115,32,97,114,101,32,110,
                            111,116,32,97,118,97,105,108,97,98,108,101,32,105,
                            110,32,116,104,101,32,101,109,117,108,97,116,111,
                            114,44,32,97,110,32,97,116,116,101,109,112,116,32,
                            116,111,32,115,99,104,101,100,117,108,101,32,115,
                            117,99,104,32,97,32,106,111,98,32,114,101,115,117,
                            108,116,115,32,105,110,32,97]}],
                         0,false},
                        {text,[6,110,111,116,115,117,112]},
                        {sep,[{text,"\nexception."}],0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,
                 [{sep,
                   [{text,[4,97,114,103,99]},
                    {sep,[{text,[3,97,110,100]}],0,false},
                    {text,[4,97,114,103,118]}],
                   0,false}],
                 0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "eCan either be the originals passed into the calling NIF, or can be values created by the calling NIF."}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,",The calling NIF must use the return value of"}],
              0,false},
             {text,
              [19,42,101,110,105,102,95,115,99,104,101,100,117,108,101,95,110,
               105,102,42]},
             {sep,
              [{text,
                [24,97,115,32,105,116,115,32,111,119,110,32,114,101,116,117,
                 114,110,32,118,97,108,117,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rBe aware that"}],0,false},
             {text,
              [19,42,101,110,105,102,95,115,99,104,101,100,117,108,101,95,110,
               105,102,42]},
             {sep,
              [{text,
                [274,44,32,97,115,32,105,116,115,32,110,97,109,101,32,105,109,
                 112,108,105,101,115,44,32,111,110,108,121,32,115,99,104,101,
                 100,117,108,101,115,32,116,104,101,32,78,73,70,32,102,111,
                 114,32,102,117,116,117,114,101,32,101,120,101,99,117,116,105,
                 111,110,46,32,84,104,101,32,99,97,108,108,105,110,103,32,78,
                 73,70,32,100,111,101,115,32,110,111,116,32,98,108,111,99,107,
                 32,119,97,105,116,105,110,103,32,102,111,114,32,116,104,101,
                 32,115,99,104,101,100,117,108,101,100,32,78,73,70,32,116,111,
                 32,101,120,101,99,117,116,101,32,97,110,100,32,114,101,116,
                 117,114,110,46,32,84,104,105,115,32,109,101,97,110,115,32,
                 116,104,97,116,32,116,104,101,32,99,97,108,108,105,110,103,
                 32,78,73,70,32,99,97,110,110,111,116,32,101,120,112,101,99,
                 116,32,116,111,32,114,101,99,101,105,118,101,32,116,104,101,
                 32,115,99,104,101,100,117,108,101,100,32,78,73,70,32,114,101,
                 116,117,114,110,32,118,97,108,117,101,32,97,110,100,32,117,
                 115,101,32,105,116,32,102,111,114,32,102,117,114,116,104,101,
                 114,32,111,112,101,114,97,116,105,111,110,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [134,35,35,32,101,110,105,102,95,115,101,108,101,99,116,40,69,114,108,
         78,105,102,69,110,118,42,32,101,110,118,44,32,69,114,108,78,105,102,
         69,118,101,110,116,32,101,118,101,110,116,44,32,101,110,117,109,32,
         69,114,108,78,105,102,83,101,108,101,99,116,70,108,97,103,115,32,109,
         111,100,101,44,10,9,118,111,105,100,42,32,111,98,106,44,32,99,111,
         110,115,116,32,69,114,108,78,105,102,80,105,100,42,32,112,105,100,44,
         32,69,82,76,95,78,73,70,95,84,69,82,77,32,114,101,102,41,58,105,110,
         116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Manage subscription on IO event."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [144,84,104,105,115,32,102,117,110,99,116,105,111,110,32,99,97,
               110,32,98,101,32,117,115,101,100,32,116,111,32,114,101,99,101,
               105,118,101,32,97,115,121,110,99,104,114,111,110,111,117,115,
               32,110,111,116,105,102,105,99,97,116,105,111,110,115,32,119,
               104,101,110,32,79,83,45,115,112,101,99,105,102,105,99,32,101,
               118,101,110,116,32,111,98,106,101,99,116,115,32,98,101,99,111,
               109,101,32,114,101,97,100,121,32,102,111,114,32,101,105,116,
               104,101,114,32,114,101,97,100,32,111,114,32,119,114,105,116,
               101,32,111,112,101,114,97,116,105,111,110,115,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,[7,42,101,118,101,110,116,42]},
             {sep,
              [{text,
                ";identifies the event object. On Unix systems, the functions"}],
              0,false},
             {text,"\b*select*"},
             {sep,[{text,[1,47]}],0,false},
             {text,[6,42,112,111,108,108,42]},
             {sep,
              [{text,
                "Vare used. The event object must be a socket, pipe or other file descriptor object that"}],
              0,false},
             {text,"\b*select*"},
             {sep,[{text,[1,47]}],0,false},
             {text,[6,42,112,111,108,108,42]},
             {sep,[{text,"\bcan use."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,[6,42,109,111,100,101,42]},
             {sep,
              [{text,"3describes the type of events to wait for. It can be"}],
              0,false},
             {text,
              [21,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,82,69,65,68,
               42]},
             {sep,[{text,[1,44]}],0,false},
             {text,
              [22,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,87,82,73,84,
               69,42]},
             {sep,
              [{text,
                "<or a bitwise OR combination to wait for both. It can also be"}],
              0,false},
             {text,
              [21,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,83,84,79,80,
               42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,
              [23,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,67,65,78,67,
               69,76,42]},
             {sep,
              [{text,
                [145,119,104,105,99,104,32,97,114,101,32,100,101,115,99,114,
                 105,98,101,100,32,102,117,114,116,104,101,114,32,98,101,108,
                 111,119,46,32,87,104,101,110,32,97,32,114,101,97,100,32,111,
                 114,32,119,114,105,116,101,32,101,118,101,110,116,32,105,115,
                 32,116,114,105,103,103,101,114,101,100,44,32,97,32,110,111,
                 116,105,102,105,99,97,116,105,111,110,32,109,101,115,115,97,
                 103,101,32,108,105,107,101,32,116,104,105,115,32,105,115,32,
                 115,101,110,116,32,116,111,32,116,104,101,32,112,114,111,99,
                 101,115,115,32,105,100,101,110,116,105,102,105,101,100,32,98,
                 121]}],
              0,false},
             {text,[5,42,112,105,100,42]},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,".{select, Obj, Ref, ready_input | ready_output}"}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\r*ready_input*"},
             {sep,[{text,[2,111,114]}],0,false},
             {text,[14,42,114,101,97,100,121,95,111,117,116,112,117,116,42]},
             {sep,
              [{text,
                ">indicates if the event object is ready for reading or writing."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           "DFor complete control over the message format use the newer functions"}],
                         0,false},
                        {text,"%[enif_select_read](#enif_select_read)"},
                        {sep,[{text,[2,111,114]}],0,false},
                        {text,"'[enif_select_write](#enif_select_write)"},
                        {sep,
                         [{text,"#introduced in erts-11.0 (OTP-22.0)."}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,[5,42,112,105,100,42]},
             {sep,[{text,[6,109,97,121,32,98,101]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                "6to indicate the calling process. It must not be set as"}],
              0,false},
             {text,"$[undefined](#enif_set_pid_undefined)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,[5,42,111,98,106,42]},
             {sep,[{text,"\"is a resource object obtained from"}],0,false},
             {text,"+[enif_alloc_resource](#enif_alloc_resource)"},
             {sep,
              [{text,
                "±. The purpose of the resource objects is as a container of the event object to manage its state and lifetime. A handle to the resource is received in the notification message as"}],
              0,false},
             {text,[5,42,79,98,106,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,[5,42,114,101,102,42]},
             {sep,
              [{text,"(must be either a reference obtained from"}],
              0,false},
             {text,"([erlang#make_ref-0](./erlang#make_ref-0)"},
             {sep,[{text,"\vor the atom"}],0,false},
             {text,"\v*undefined*"},
             {sep,
              [{text,
                [22,46,32,73,116,32,119,105,108,108,32,98,101,32,112,97,115,
                 115,101,100,32,97,115]}],
              0,false},
             {text,[5,42,82,101,102,42]},
             {sep,[{text,"$in the notifications. If a selective"}],0,false},
             {text,"\t*receive*"},
             {sep,
              [{text,
                "Wstatement is used to wait for the notification then a reference created just before the"}],
              0,false},
             {text,"\t*receive*"},
             {sep,
              [{text,
                "]will exploit a runtime optimization that bypasses all earlier received messages in the queue."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "yThe notifications are one-shot only. To receive further notifications of the same type (read or write), repeated calls to"}],
              0,false},
             {text,"\r*enif_select*"},
             {sep,
              [{text,"/must be made after receiving each notification."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [23,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,67,65,78,67,
               69,76,42]},
             {sep,
              [{text,
                "bcan be used to cancel previously selected events. It must be used in a bitwise OR combination with"}],
              0,false},
             {text,
              [21,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,82,69,65,68,
               42]},
             {sep,[{text,[6,97,110,100,47,111,114]}],0,false},
             {text,
              [22,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,87,82,73,84,
               69,42]},
             {sep,
              [{text,"4to indicate which type of event to cancel. Arguments"}],
              0,false},
             {text,[5,42,112,105,100,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[5,42,114,101,102,42]},
             {sep,
              [{text,
                [16,97,114,101,32,105,103,110,111,114,101,100,32,119,104,101,
                 110]}],
              0,false},
             {text,
              [23,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,67,65,78,67,
               69,76,42]},
             {sep,
              [{text,
                "|is specified. The return value will tell if the event was actualy cancelled or if a notification may already have been sent."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,85,115,101]}],0,false},
             {text,
              [21,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,83,84,79,80,
               42]},
             {sep,[{text,[2,97,115]}],0,false},
             {text,[6,42,109,111,100,101,42]},
             {sep,
              [{text,
                "@in order to safely close an event object that has been passed to"}],
              0,false},
             {text,"\r*enif_select*"},
             {sep,[{text,[5,46,32,84,104,101]}],0,false},
             {text,")[ErlNifResourceStop](#ErlNifResourceStop)"},
             {sep,
              [{text,
                [24,99,97,108,108,98,97,99,107,32,111,102,32,116,104,101,32,
                 114,101,115,111,117,114,99,101]}],
              0,false},
             {text,[5,42,111,98,106,42]},
             {sep,
              [{text,
                "Áwill be called when it is safe to close the event object. This safe way of closing event objects must be used even if all notifications have been received (or cancelled) and no further calls to"}],
              0,false},
             {text,"\r*enif_select*"},
             {sep,
              [{text,
                [15,104,97,118,101,32,98,101,101,110,32,109,97,100,101,46]}],
              0,false},
             {text,
              [21,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,83,84,79,80,
               42]},
             {sep,
              [{text,
                "Fwill first cancel any selected events before it calls or schedules the"}],
              0,false},
             {text,[6,42,115,116,111,112,42]},
             {sep,
              [{text,
                [19,99,97,108,108,98,97,99,107,46,32,65,114,103,117,109,101,
                 110,116,115]}],
              0,false},
             {text,[5,42,112,105,100,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[5,42,114,101,102,42]},
             {sep,
              [{text,
                [16,97,114,101,32,105,103,110,111,114,101,100,32,119,104,101,
                 110]}],
              0,false},
             {text,
              [21,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,83,84,79,80,
               42]},
             {sep,[{text,"\ris specified."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [17,84,104,101,32,102,105,114,115,116,32,99,97,108,108,32,116,
                 111]}],
              0,false},
             {text,"\r*enif_select*"},
             {sep,
              [{text,
                [17,102,111,114,32,97,32,115,112,101,99,105,102,105,99,32,79,
                 83]}],
              0,false},
             {text,[7,42,101,118,101,110,116,42]},
             {sep,
              [{text,
                "kwill establish a relation between the event object and the containing resource. All subsequent calls for an"}],
              0,false},
             {text,[7,42,101,118,101,110,116,42]},
             {sep,
              [{text,"-must pass its containing resource as argument"}],
              0,false},
             {text,[5,42,111,98,106,42]},
             {sep,[{text," . The relation is dissolved when"}],0,false},
             {text,"\r*enif_select*"},
             {sep,
              [{text,
                [20,104,97,115,32,98,101,101,110,32,99,97,108,108,101,100,32,
                 119,105,116,104]}],
              0,false},
             {text,[6,42,109,111,100,101,42]},
             {sep,[{text,[2,97,115]}],0,false},
             {text,
              [21,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,83,84,79,80,
               42]},
             {sep,
              [{text,
                [21,97,110,100,32,116,104,101,32,99,111,114,114,101,115,112,
                 111,110,100,105,110,103]}],
              0,false},
             {text,[6,42,115,116,111,112,42]},
             {sep,
              [{text,
                "Ücallback has returned. A resource can contain several event objects but one event object can only be contained within one resource. A resource will not be destructed until all its contained relations have been dissolved."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,[{text,[3,85,115,101]}],0,false},
                        {text,
                         "-[enif_monitor_process](#enif_monitor_process)"},
                        {sep,[{text,"\rtogether with"}],0,false},
                        {text,"\r*enif_select*"},
                        {sep,
                         [{text,
                           [133,116,111,32,100,101,116,101,99,116,32,102,97,
                            105,108,105,110,103,32,69,114,108,97,110,103,32,
                            112,114,111,99,101,115,115,101,115,32,97,110,100,
                            32,112,114,101,118,101,110,116,32,116,104,101,109,
                            32,102,114,111,109,32,99,97,117,115,105,110,103,
                            32,112,101,114,109,97,110,101,110,116,32,108,101,
                            97,107,97,103,101,32,111,102,32,114,101,115,111,
                            117,114,99,101,115,32,97,110,100,32,116,104,101,
                            105,114,32,99,111,110,116,97,105,110,101,100,32,
                            79,83,32,101,118,101,110,116,32,111,98,106,101,99,
                            116,115,46]}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "LReturns a non-negative value on success where the following bits can be set:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{text,
                        [26,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,83,
                         84,79,80,95,67,65,76,76,69,68]}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {sep,
                      [{sep,
                        [{text,"(The stop callback was called directly by"}],
                        0,false},
                       {text,"\venif_select"},
                       {sep,[{text,[1,46]}],0,false}],
                      0,false},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{text,
                       [29,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,83,84,
                        79,80,95,83,67,72,69,68,85,76,69,68]}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {text,
                    "TThe stop callback was scheduled to run on some other thread or later by this thread."},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,
                   [{text,
                     [29,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,82,69,
                      65,68,95,67,65,78,67,69,76,76,69,68]}],
                   0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {sep,
                  [{sep,
                    [{text,
                      [29,65,32,114,101,97,100,32,101,118,101,110,116,32,119,
                       97,115,32,99,97,110,99,101,108,108,101,100,32,98,121]}],
                    0,false},
                   {text,
                    [21,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,67,65,78,
                     67,69,76]},
                   {sep,[{text,[2,111,114]}],0,false},
                   {text,
                    [19,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,83,84,79,
                     80]},
                   {sep,
                    [{text,"#and is guaranteed not to generate a"}],
                    0,false},
                   {text,"\vready_input"},
                   {sep,
                    [{text,
                      [21,110,111,116,105,102,105,99,97,116,105,111,110,32,
                       109,101,115,115,97,103,101,46]}],
                    0,false}],
                  0,false},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,
                 [{text,
                   [30,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,87,82,73,
                    84,69,95,67,65,78,67,69,76,76,69,68]}],
                 0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {sep,
                [{sep,
                  [{text,
                    [30,65,32,119,114,105,116,101,32,101,118,101,110,116,32,
                     119,97,115,32,99,97,110,99,101,108,108,101,100,32,98,
                     121]}],
                  0,false},
                 {text,
                  [21,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,67,65,78,
                   67,69,76]},
                 {sep,[{text,[2,111,114]}],0,false},
                 {text,
                  [19,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,83,84,79,
                   80]},
                 {sep,[{text,"#and is guaranteed not to generate a"}],0,false},
                 {text,"\fready_output"},
                 {sep,
                  [{text,
                    [21,110,111,116,105,102,105,99,97,116,105,111,110,32,109,
                     101,115,115,97,103,101,46]}],
                  0,false}],
                0,false},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "PReturns a negative value if the call failed where the following bits can be set:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{text,
                    [28,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,73,78,86,
                     65,76,73,68,95,69,86,69,78,84]}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {sep,
                  [{sep,[{text,"\bArgument"}],0,false},
                   {text,[5,101,118,101,110,116]},
                   {sep,
                    [{text,
                      [31,105,115,32,110,111,116,32,97,32,118,97,108,105,100,
                       32,79,83,32,101,118,101,110,116,32,111,98,106,101,99,
                       116,46]}],
                    0,false}],
                  0,false},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,
                 [{text,
                   [21,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,70,65,73,
                    76,69,68]}],
                 0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {text,
                "?The system call failed to add the event object to the poll set."},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,
                         [{text,
                           "ÚUse bitwise AND to test for specific bits in the return value. New significant bits may be added in future releases to give more detailed information for both failed and successful calls. Do NOT use equality tests like"}],
                         0,false},
                        {text,[4,42,61,61,42]},
                        {sep,
                         [{text,
                           "5, as that may cause your application to stop working."}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,[{sep,[{text,"\bExample:"}],0,false}],0,true},
                    null},
                   null}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {above,
                     {above,
                      {text,[3,96,96,96]},
                      {sep,
                       [{text,
                         "¹\nretval = enif_select(env, fd, ERL_NIF_SELECT_STOP, resource, ref);\nif (retval < 0) {\n    /* handle error */\n}\n/* Success! */\nif (retval & ERL_NIF_SELECT_STOP_CALLED) {\n    /* ... */\n}\n"}],
                       0,true}},
                     {text,[3,96,96,96]}},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,[{text,"\rThe mode flag"}],0,false},
                        {text,
                         [23,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,
                          67,65,78,67,69,76,42]},
                        {sep,
                         [{text,
                           [20,97,110,100,32,116,104,101,32,114,101,116,117,
                            114,110,32,102,108,97,103,115]}],
                         0,false},
                        {text,
                         [31,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,
                          82,69,65,68,95,67,65,78,67,69,76,76,69,68,42]},
                        {sep,[{text,[3,97,110,100]}],0,false},
                        {text," *ERL_NIF_SELECT_WRITE_CANCELLED*"},
                        {sep,
                         [{text,"(were introduced in erts-11.0 (OTP-22.0)."}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [135,35,35,32,101,110,105,102,95,115,101,108,101,99,116,95,114,101,97,
         100,40,69,114,108,78,105,102,69,110,118,42,32,101,110,118,44,32,69,
         114,108,78,105,102,69,118,101,110,116,32,101,118,101,110,116,44,32,
         118,111,105,100,42,32,111,98,106,44,10,32,32,32,32,32,32,99,111,110,
         115,116,32,69,114,108,78,105,102,80,105,100,42,32,112,105,100,44,32,
         69,82,76,95,78,73,70,95,84,69,82,77,32,109,115,103,44,32,69,114,108,
         78,105,102,69,110,118,42,32,109,115,103,95,101,110,118,41,58,105,110,
         116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [136,35,35,32,101,110,105,102,95,115,101,108,101,99,116,95,119,114,
         105,116,101,40,69,114,108,78,105,102,69,110,118,42,32,101,110,118,44,
         32,69,114,108,78,105,102,69,118,101,110,116,32,101,118,101,110,116,
         44,32,118,111,105,100,42,32,111,98,106,44,10,32,32,32,32,32,32,99,
         111,110,115,116,32,69,114,108,78,105,102,80,105,100,42,32,112,105,
         100,44,32,69,82,76,95,78,73,70,95,84,69,82,77,32,109,115,103,44,32,
         69,114,108,78,105,102,69,110,118,42,32,109,115,103,95,101,110,118,41,
         58,105,110,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Manage subscription on IO event."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [21,84,104,101,115,101,32,97,114,101,32,118,97,114,105,97,110,
                 116,115,32,111,102]}],
              0,false},
             {text,"\e[enif_select](#enif_select)"},
             {sep,
              [{text,"*where you can supply your own message term"}],
              0,false},
             {text,[5,42,109,115,103,42]},
             {sep,
              [{text,
                "@that will be sent to the process instead of the predefined tuple"}],
              0,false},
             {text,
              [17,42,123,115,101,108,101,99,116,44,95,44,95,44,95,125,46,42]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bArgument"}],0,false},
             {text,"\t*msg_env*"},
             {sep,
              [{text,
                [14,109,117,115,116,32,101,105,116,104,101,114,32,98,101]}],
              0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,
              [{text,
                [21,111,114,32,116,104,101,32,101,110,118,105,114,111,110,109,
                 101,110,116,32,111,102]}],
              0,false},
             {text,[5,42,109,115,103,42]},
             {sep,
              [{text,
                [14,97,108,108,111,99,97,116,101,100,32,119,105,116,104]}],
              0,false},
             {text,"![enif_alloc_env](#enif_alloc_env)"},
             {sep,[{text,"\r. If argument"}],0,false},
             {text,"\t*msg_env*"},
             {sep,[{text,[2,105,115]}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,[{text,"\bthe term"}],0,false},
             {text,[5,42,109,115,103,42]},
             {sep,
              [{text,
                [30,119,105,108,108,32,98,101,32,99,111,112,105,101,100,44,32,
                 111,116,104,101,114,119,105,115,101,32,98,111,116,104]}],
              0,false},
             {text,[5,42,109,115,103,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\t*msg_env*"},
             {sep,
              [{text,"+will be invalidated by a successful call to"}],
              0,false},
             {text,
              [18,42,101,110,105,102,95,115,101,108,101,99,116,95,114,101,97,
               100,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,
              [19,42,101,110,105,102,95,115,101,108,101,99,116,95,119,114,105,
               116,101,42]},
             {sep,
              [{text,"1. The environment is then to either be freed with"}],
              0,false},
             {text,
              [31,91,101,110,105,102,95,102,114,101,101,95,101,110,118,93,40,
               35,101,110,105,102,95,102,114,101,101,95,101,110,118,41]},
             {sep,
              [{text,
                [25,111,114,32,99,108,101,97,114,101,100,32,102,111,114,32,
                 114,101,117,115,101,32,119,105,116,104]}],
              0,false},
             {text,"![enif_clear_env](#enif_clear_env)"},
             {sep,[{text,"!. An unsuccessful call will leave"}],0,false},
             {text,[5,42,109,115,103,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\t*msg_env*"},
             {sep,[{text,"\fstill valid."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [29,65,112,97,114,116,32,102,114,111,109,32,116,104,101,32,
                 109,101,115,115,97,103,101,32,102,111,114,109,97,116]}],
              0,false},
             {text,
              [18,42,101,110,105,102,95,115,101,108,101,99,116,95,114,101,97,
               100,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              [19,42,101,110,105,102,95,115,101,108,101,99,116,95,119,114,105,
               116,101,42]},
             {sep,[{text,"\ebehaves exactly the same as"}],0,false},
             {text,"\e[enif_select](#enif_select)"},
             {sep,[{text,"\rwith argument"}],0,false},
             {text,[6,42,109,111,100,101,42]},
             {sep,[{text,"\tas either"}],0,false},
             {text,
              [21,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,82,69,65,68,
               42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,
              [22,42,69,82,76,95,78,73,70,95,83,69,76,69,67,84,95,87,82,73,84,
               69,42]},
             {sep,
              [{text,
                [31,46,32,84,111,32,99,97,110,99,101,108,32,111,114,32,99,108,
                 111,115,101,32,101,118,101,110,116,115,32,117,115,101]}],
              0,false},
             {text,"\e[enif_select](#enif_select)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "?## enif_self(ErlNifEnv* caller_env, ErlNifPid* pid):ErlNifPid *"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"#Get the pid of the calling process."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [15,73,110,105,116,105,97,108,105,122,101,115,32,116,104,
                 101]}],
              0,false},
             {text,
              [23,91,69,114,108,78,105,102,80,105,100,93,40,35,69,114,108,78,
               105,102,80,105,100,41]},
             {sep,[{text,"\vvariable at"}],0,false},
             {text,[6,42,42,112,105,100,42]},
             {sep,[{text,"!to represent the calling process."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[5,42,112,105,100,42]},
             {sep,
              [{text,
                [25,105,102,32,115,117,99,99,101,115,115,102,117,108,44,32,
                 111,114,32,78,85,76,76,32,105,102]}],
              0,false},
             {text,"\f*caller_env*"},
             {sep,[{text,"\bis not a"}],0,false},
             {text,"'[process bound environment](#ErlNifEnv)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "f## enif_send(ErlNifEnv* caller_env,\n      ErlNifPid* to_pid, ErlNifEnv* msg_env, ERL_NIF_TERM msg):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [28,83,101,110,100,32,97,32,109,101,115,115,97,103,101,32,116,111,
             32,97,32,112,114,111,99,101,115,115,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [29,83,101,110,100,115,32,97,32,109,101,115,115,97,103,101,32,
               116,111,32,97,32,112,114,111,99,101,115,115,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,[{text,"\ncaller_env"}],0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {sep,
                      [{sep,
                        [{text,
                          ";The environment of the calling process or callback. Must be"}],
                        0,false},
                       {text,[4,78,85,76,76]},
                       {sep,
                        [{text,
                          "9only if calling from a custom thread not spawned by ERTS."}],
                        0,false}],
                      0,false},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,[{text,[7,42,116,111,95,112,105,100]}],0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {text,
                    "UThe pid of the receiving process. The pid is to refer to a process on the local node."},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,[7,109,115,103,95,101,110,118]}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {sep,
                  [{sep,
                    [{text,
                      "]The environment of the message term. Must be a process independent environment allocated with"}],
                    0,false},
                   {text,
                    [14,101,110,105,102,95,97,108,108,111,99,95,101,110,118]},
                   {sep,[{text,"\bor NULL."}],0,false}],
                  0,false},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,[3,109,115,103]}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {text,
                [25,84,104,101,32,109,101,115,115,97,103,101,32,116,101,114,
                 109,32,116,111,32,115,101,110,100,46]},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,",if the message is successfully sent. Returns"}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,"%if the send operation fails, that is:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"\t**to_pid*"},
           {sep,
            [{text,")does not refer to an alive local process."}],
            0,false}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {text,
          "CThe currently executing process (that is, the sender) is not alive."}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [23,84,104,101,32,109,101,115,115,97,103,101,32,101,110,118,
                 105,114,111,110,109,101,110,116]}],
              0,false},
             {text,"\t*msg_env*"},
             {sep,
              [{text,
                [29,119,105,116,104,32,97,108,108,32,105,116,115,32,116,101,
                 114,109,115,32,40,105,110,99,108,117,100,105,110,103]}],
              0,false},
             {text,[5,42,109,115,103,42]},
             {sep,
              [{text,"() is invalidated by a successful call to"}],
              0,false},
             {text,"\v*enif_send*"},
             {sep,
              [{text,",. The environment is to either be freed with"}],
              0,false},
             {text,
              [31,91,101,110,105,102,95,102,114,101,101,95,101,110,118,93,40,
               35,101,110,105,102,95,102,114,101,101,95,101,110,118,41]},
             {sep,
              [{text,
                [25,111,114,32,99,108,101,97,114,101,100,32,102,111,114,32,
                 114,101,117,115,101,32,119,105,116,104]}],
              0,false},
             {text,"![enif_clear_env](#enif_clear_env)"},
             {sep,[{text,"!. An unsuccessful call will leave"}],0,false},
             {text,[5,42,109,115,103,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\t*msg_env*"},
             {sep,[{text,"\fstill valid."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[2,73,102]}],0,false},
             {text,"\t*msg_env*"},
             {sep,[{text,"\tis set to"}],0,false},
             {text,[6,42,78,85,76,76,42]},
             {sep,[{text,[5,44,32,116,104,101]}],0,false},
             {text,[5,42,109,115,103,42]},
             {sep,
              [{text,
                "Wterm is copied and the original term and its environment is still valid after the call."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [146,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
               115,32,111,110,108,121,32,116,104,114,101,97,100,45,115,97,102,
               101,32,119,104,101,110,32,116,104,101,32,101,109,117,108,97,
               116,111,114,32,119,105,116,104,32,83,77,80,32,115,117,112,112,
               111,114,116,32,105,115,32,117,115,101,100,46,32,73,116,32,99,
               97,110,32,111,110,108,121,32,98,101,32,117,115,101,100,32,105,
               110,32,97,32,110,111,110,45,83,77,80,32,101,109,117,108,97,116,
               111,114,32,102,114,111,109,32,97,32,78,73,70,45,99,97,108,108,
               105,110,103,32,116,104,114,101,97,100,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,[{text,[7,80,97,115,115,105,110,103]}],0,false},
                        {text,"\t*msg_env*"},
                        {sep,[{text,[2,97,115]}],0,false},
                        {text,[6,42,78,85,76,76,42]},
                        {sep,
                         [{text,
                           "3is only supported as from ERTS 8.0 (Erlang/OTP 19)."}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## enif_set_pid_undefined(ErlNifPid* pid):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [21,83,101,116,32,112,105,100,32,97,115,32,117,110,100,101,102,
             105,110,101,100,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,101,116,115,32,97,110]}],0,false},
             {text,
              [23,91,69,114,108,78,105,102,80,105,100,93,40,35,69,114,108,78,
               105,102,80,105,100,41]},
             {sep,
              [{text,
                [26,118,97,114,105,97,98,108,101,32,97,115,32,117,110,100,101,
                 102,105,110,101,100,46,32,83,101,101]}],
              0,false},
             {text,"/[enif_is_pid_undefined](#enif_is_pid_undefined)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"+## enif_sizeof_resource(void* obj):unsigned"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"'Get the byte size of a resource object."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"%Gets the byte size of resource object"}],0,false},
             {text,[5,42,111,98,106,42]},
             {sep,[{text,"\vobtained by"}],0,false},
             {text,"+[enif_alloc_resource](#enif_alloc_resource)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "M## enif_snprintf(char *str, size_t size, const\n        char *format, ...):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Format strings and Erlang terms."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\nSimilar to"}],0,false},
             {text,"\n*snprintf*"},
             {sep,[{text,"#but this format string also accepts"}],0,false},
             {text,[6,42,34,37,84,34,42]},
             {sep,[{text,"$, which formats Erlang terms of type"}],0,false},
             {text,
              [29,91,69,82,76,95,78,73,70,95,84,69,82,77,93,40,35,69,82,76,95,
               78,73,70,95,84,69,82,77,41]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "oThis function is primarily intended for debugging purpose. It is not recommended to print very large terms with"}],
              0,false},
             {text,[4,42,37,84,42]},
             {sep,
              [{text,
                [25,46,32,84,104,101,32,102,117,110,99,116,105,111,110,32,109,
                 97,121,32,99,104,97,110,103,101]}],
              0,false},
             {text,[7,42,101,114,114,110,111,42]},
             {sep,
              [{text,
                [21,44,32,101,118,101,110,32,105,102,32,115,117,99,99,101,115,
                 115,102,117,108,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "J## enif_system_info(ErlNifSysInfo\n        *sys_info_ptr, size_t size):void"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"0Get information about the Erlang runtime system."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "@[erl_driver#driver_system_info](./erl_driver#driver_system_info)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "X## enif_term_to_binary(ErlNifEnv *env,\n        ERL_NIF_TERM term, ErlNifBinary *bin):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"&Convert a term to the external format."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\eAllocates a new binary with"}],0,false},
             {text,"'[enif_alloc_binary](#enif_alloc_binary)"},
             {sep,[{text,"!and stores the result of encoding"}],0,false},
             {text,[6,42,116,101,114,109,42]},
             {sep,
              [{text,"-according to the Erlang external term format."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,[14,111,110,32,115,117,99,99,101,115,115,44,32,111,114]}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [24,105,102,32,116,104,101,32,97,108,108,111,99,97,116,105,
                 111,110,32,102,97,105,108,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,"4[erlang#term_to_binary-1](./erlang#term_to_binary-1)"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"+[enif_binary_to_term](#enif_binary_to_term)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "C## enif_term_type(ErlNifEnv *env, ERL_NIF_TERM term):ErlNifTermType"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [29,68,101,116,101,114,109,105,110,101,32,116,104,101,32,116,121,
             112,101,32,111,102,32,97,32,116,101,114,109,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "|Determines the type of the given term. The term must be an ordinary Erlang term and not one of the special terms returned by"}],
              0,false},
             {text,"-[enif_raise_exception](#enif_raise_exception)"},
             {sep,[{text,[1,44]}],0,false},
             {text,"'[enif_schedule_nif](#enif_schedule_nif)"},
             {sep,[{text,"\r, or similar."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,".The following types are defined at the moment:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,
                         {above,
                          {above,
                           {above,
                            {above,
                             {above,
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,116,62]},
                                   {sep,
                                    [{text,
                                      [22,69,82,76,95,78,73,70,95,84,69,82,77,
                                       95,84,89,80,69,95,65,84,79,77]}],
                                    0,false},
                                   {text,[5,60,47,100,116,62]}],
                                  0,true},
                                 null},
                                null}},
                              {above,
                               {above,{above,{text,[0]},null},null},
                               {above,
                                {above,
                                 {sep,
                                  [{text,[4,60,100,100,62]},
                                   {text,[0]},
                                   {text,[5,60,47,100,100,62]}],
                                  0,true},
                                 null},
                                null}}},
                             {above,
                              {above,{above,{text,[0]},null},null},
                              {above,
                               {above,
                                {sep,
                                 [{text,[4,60,100,116,62]},
                                  {sep,
                                   [{text,"\eERL_NIF_TERM_TYPE_BITSTRING"}],
                                   0,false},
                                  {text,[5,60,47,100,116,62]}],
                                 0,true},
                                null},
                               null}}},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{text,[4,60,100,100,62]},
                                 {above,
                                  {above,{above,{text,[0]},null},null},
                                  {above,
                                   {above,
                                    {sep,
                                     [{sep,
                                       [{text,
                                         [21,65,32,98,105,116,115,116,114,105,
                                          110,103,32,111,114,32,98,105,110,97,
                                          114,121]}],
                                       0,false}],
                                     0,true},
                                    null},
                                   null}},
                                 {text,[5,60,47,100,100,62]}],
                                0,true},
                               null},
                              null}}},
                           {above,
                            {above,{above,{text,[0]},null},null},
                            {above,
                             {above,
                              {sep,
                               [{text,[4,60,100,116,62]},
                                {sep,
                                 [{text,
                                   [23,69,82,76,95,78,73,70,95,84,69,82,77,95,
                                    84,89,80,69,95,70,76,79,65,84]}],
                                 0,false},
                                {text,[5,60,47,100,116,62]}],
                               0,true},
                              null},
                             null}}},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{text,[4,60,100,100,62]},
                               {text,[0]},
                               {text,[5,60,47,100,100,62]}],
                              0,true},
                             null},
                            null}}},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{text,[4,60,100,116,62]},
                              {sep,
                               [{text,
                                 [21,69,82,76,95,78,73,70,95,84,69,82,77,95,
                                  84,89,80,69,95,70,85,78]}],
                               0,false},
                              {text,[5,60,47,100,116,62]}],
                             0,true},
                            null},
                           null}}},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{text,[4,60,100,100,62]},
                             {text,[0]},
                             {text,[5,60,47,100,100,62]}],
                            0,true},
                           null},
                          null}}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,116,62]},
                            {sep,
                             [{text,
                               [25,69,82,76,95,78,73,70,95,84,69,82,77,95,84,
                                89,80,69,95,73,78,84,69,71,69,82]}],
                             0,false},
                            {text,[5,60,47,100,116,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,100,62]},
                           {text,[0]},
                           {text,[5,60,47,100,100,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,116,62]},
                          {sep,
                           [{text,
                             [22,69,82,76,95,78,73,70,95,84,69,82,77,95,84,89,
                              80,69,95,76,73,83,84]}],
                           0,false},
                          {text,[5,60,47,100,116,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,100,62]},
                         {above,
                          {above,{above,{text,[0]},null},null},
                          {above,
                           {above,
                            {sep,
                             [{sep,
                               [{text,
                                 [20,65,32,108,105,115,116,44,32,101,109,112,
                                  116,121,32,111,114,32,110,111,116]}],
                               0,false}],
                             0,true},
                            null},
                           null}},
                         {text,[5,60,47,100,100,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,116,62]},
                        {sep,
                         [{text,
                           [21,69,82,76,95,78,73,70,95,84,69,82,77,95,84,89,
                            80,69,95,77,65,80]}],
                         0,false},
                        {text,[5,60,47,100,116,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,100,62]},
                       {text,[0]},
                       {text,[5,60,47,100,100,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,116,62]},
                      {sep,
                       [{text,
                         [21,69,82,76,95,78,73,70,95,84,69,82,77,95,84,89,80,
                          69,95,80,73,68]}],
                       0,false},
                      {text,[5,60,47,100,116,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {text,[0]},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{text,
                       [22,69,82,76,95,78,73,70,95,84,69,82,77,95,84,89,80,69,
                        95,80,79,82,84]}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {text,[0]},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,"\eERL_NIF_TERM_TYPE_REFERENCE"}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {text,[0]},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,
                 [{text,
                   [23,69,82,76,95,78,73,70,95,84,69,82,77,95,84,89,80,69,95,
                    84,85,80,76,69]}],
                 0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {text,[0]},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "gNote that new types may be added in the future, so the caller must be prepared to handle unknown types."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "}## enif_thread_create(char *name,ErlNifTid\n        *tid,void * (*func)(void *),void *args,ErlNifThreadOpts\n        *opts):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "F[erl_driver#erl_drv_thread_create](./erl_driver#erl_drv_thread_create)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"$## enif_thread_exit(void *resp):void"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "B[erl_driver#erl_drv_thread_exit](./erl_driver#erl_drv_thread_exit)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"0## enif_thread_join(ErlNifTid, void **respp):int"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "B[erl_driver#erl_drv_thread_join](./erl_driver#erl_drv_thread_join)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"(## enif_thread_name(ErlNifTid tid):char*"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{sep,[{sep,[{text,"\vThread name"}],0,false}],0,true},null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "B[erl_driver#erl_drv_thread_name](./erl_driver#erl_drv_thread_name)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"9## enif_thread_opts_create(char *name):ErlNifThreadOpts *"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "P[erl_driver#erl_drv_thread_opts_create](./erl_driver#erl_drv_thread_opts_create)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"8## enif_thread_opts_destroy(ErlNifThreadOpts *opts):void"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "R[erl_driver#erl_drv_thread_opts_destroy](./erl_driver#erl_drv_thread_opts_destroy)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"### enif_thread_self(void):ErlNifTid"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "B[erl_driver#erl_drv_thread_self](./erl_driver#erl_drv_thread_self)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [29,35,35,32,101,110,105,102,95,116,104,114,101,97,100,95,116,121,112,
         101,40,118,111,105,100,41,58,105,110,116]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Determine type of current thread"}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ôDetermine the type of currently executing thread. A positive value indicates a scheduler thread while a negative value or zero indicates another type of thread. Currently the following specific types exist (which may be extended in the future):"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{text,
                        [21,69,82,76,95,78,73,70,95,84,72,82,95,85,78,68,69,
                         70,73,78,69,68]}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{text,
                             "0Undefined thread that is not a scheduler thread."}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{text,
                       [28,69,82,76,95,78,73,70,95,84,72,82,95,78,79,82,77,65,
                        76,95,83,67,72,69,68,85,76,69,82]}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{text,
                           [26,65,32,110,111,114,109,97,108,32,115,99,104,101,
                            100,117,108,101,114,32,116,104,114,101,97,100,
                            46]}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,
                   [{text,
                     [31,69,82,76,95,78,73,70,95,84,72,82,95,68,73,82,84,89,
                      95,67,80,85,95,83,67,72,69,68,85,76,69,82]}],
                   0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         [29,65,32,100,105,114,116,121,32,67,80,85,32,115,99,
                          104,101,100,117,108,101,114,32,116,104,114,101,97,
                          100,46]}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,
                 [{text,
                   [30,69,82,76,95,78,73,70,95,84,72,82,95,68,73,82,84,89,95,
                    73,79,95,83,67,72,69,68,85,76,69,82]}],
                 0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [29,65,32,100,105,114,116,121,32,73,47,79,32,115,99,
                        104,101,100,117,108,101,114,32,116,104,114,101,97,100,
                        46]}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"8## enif_time_offset(ErlNifTimeUnit time_unit):ErlNifTime"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [24,71,101,116,32,99,117,114,114,101,110,116,32,116,105,109,101,
             32,111,102,102,115,101,116,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,"/<a name=\"enif_time_offset\">enif_time_offset</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"'Returns the current time offset between"}],0,false},
             {text,
              "@[Erlang monotonic time](./time_correction#Erlang_Monotonic_Time)"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,
              ":[Erlang system time](./time_correction#Erlang_System_Time)"},
             {sep,
              [{text,
                [18,99,111,110,118,101,114,116,101,100,32,105,110,116,111,32,
                 116,104,101]}],
              0,false},
             {text,"\v*time_unit*"},
             {sep,
              [{text,
                [19,112,97,115,115,101,100,32,97,115,32,97,114,103,117,109,
                 101,110,116,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\v*time_unit*"},
             {sep,
              [{text,"'is the time unit of the returned value."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,
              [20,42,69,82,76,95,78,73,70,95,84,73,77,69,95,69,82,82,79,82,
               42]},
             {sep,
              [{text,
                "gif called with an invalid time unit argument or if called from a thread that is not a scheduler thread."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bSee also"}],0,false},
             {text,
              [25,91,69,114,108,78,105,102,84,105,109,101,93,40,35,69,114,108,
               78,105,102,84,105,109,101,41]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"![ErlNifTimeUnit](#ErlNifTimeUnit)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"(## enif_tsd_get(ErlNifTSDKey key):void *"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              ":[erl_driver#erl_drv_tsd_get](./erl_driver#erl_drv_tsd_get)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"9## enif_tsd_key_create(char *name, ErlNifTSDKey *key):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "H[erl_driver#erl_drv_tsd_key_create](./erl_driver#erl_drv_tsd_key_create)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## enif_tsd_key_destroy(ErlNifTSDKey key):void"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              "J[erl_driver#erl_drv_tsd_key_destroy](./erl_driver#erl_drv_tsd_key_destroy)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"2## enif_tsd_set(ErlNifTSDKey key, void *data):void"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,83,97,109,101,32,97,115]}],0,false},
             {text,
              ":[erl_driver#erl_drv_tsd_set](./erl_driver#erl_drv_tsd_set)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "C## enif_vfprintf(FILE *stream, const char *format, va_list ap)\n:int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Format strings and Erlang terms."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rEquivalent to"}],0,false},
             {text,
              [29,91,101,110,105,102,95,102,112,114,105,110,116,102,93,40,35,
               101,110,105,102,95,102,112,114,105,110,116,102,41]},
             {sep,
              [{text,
                [29,101,120,99,101,112,116,32,116,104,97,116,32,105,116,115,
                 32,99,97,108,108,101,100,32,119,105,116,104,32,97]}],
              0,false},
             {text,"\t*va_list*"},
             {sep,
              [{text,"*instead of a variable number of arguments."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "N## enif_vsnprintf(char *str, size_t size, const char *format, va_list ap)\n:int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text," Format strings and Erlang terms."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\rEquivalent to"}],0,false},
             {text,
              [31,91,101,110,105,102,95,115,110,112,114,105,110,116,102,93,40,
               35,101,110,105,102,95,115,110,112,114,105,110,116,102,41]},
             {sep,
              [{text,
                [29,101,120,99,101,112,116,32,116,104,97,116,32,105,116,115,
                 32,99,97,108,108,101,100,32,119,105,116,104,32,97]}],
              0,false},
             {text,"\t*va_list*"},
             {sep,
              [{text,"*instead of a variable number of arguments."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "T## enif_whereis_pid(ErlNifEnv *env,\n          ERL_NIF_TERM name, ErlNifPid *pid):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"*Looks up a process by its registered name."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"*Looks up a process by its registered name."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,[3,101,110,118]}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {sep,
                    [{sep,
                      [{text,
                        "/The environment of the calling process. Must be"}],
                      0,false},
                     {text,[4,78,85,76,76]},
                     {sep,
                      [{text,"&only if calling from a created thread."}],
                      0,false}],
                    0,false},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,[4,110,97,109,101]}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {text,"-The name of a registered process, as an atom."},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,[4,42,112,105,100]}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,"\tErlNifPid"},
                 {sep,
                  [{text,"+in which the resolved process id is stored."}],
                  0,false}],
                0,false},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [16,79,110,32,115,117,99,99,101,115,115,44,32,115,101,116,
                 115]}],
              0,false},
             {text,[6,42,42,112,105,100,42]},
             {sep,[{text,"$to the local process registered with"}],0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,[{text,"\vand returns"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[4,46,32,73,102]}],0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,
              [{text,"/is not a registered process, or is not an atom,"}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [15,105,115,32,114,101,116,117,114,110,101,100,32,97,110,
                 100]}],
              0,false},
             {text,[6,42,42,112,105,100,42]},
             {sep,[{text,"\ris unchanged."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bWorks as"}],0,false},
             {text,"&[erlang#whereis-1](./erlang#whereis-1)"},
             {sep,[{text,"\", but restricted to processes. See"}],0,false},
             {text,"'[enif_whereis_port](#enif_whereis_port)"},
             {sep,
              [{text,
                [28,116,111,32,114,101,115,111,108,118,101,32,114,101,103,105,
                 115,116,101,114,101,100,32,112,111,114,116,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "W## enif_whereis_port(ErlNifEnv *env,\n          ERL_NIF_TERM name, ErlNifPort *port):int"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"'Looks up a port by its registered name."}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,[{text,"'Looks up a port by its registered name."}],0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,[{text,[3,101,110,118]}],0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {sep,
                    [{sep,
                      [{text,
                        "/The environment of the calling process. Must be"}],
                      0,false},
                     {text,[4,78,85,76,76]},
                     {sep,
                      [{text,"&only if calling from a created thread."}],
                      0,false}],
                    0,false},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,[4,110,97,109,101]}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {text,"*The name of a registered port, as an atom."},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,[5,42,112,111,114,116]}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,"\nErlNifPort"},
                 {sep,
                  [{text,"(in which the resolved port id is stored."}],
                  0,false}],
                0,false},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [16,79,110,32,115,117,99,99,101,115,115,44,32,115,101,116,
                 115]}],
              0,false},
             {text,[7,42,42,112,111,114,116,42]},
             {sep,[{text,"\eto the port registered with"}],0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,[{text,"\vand returns"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[4,46,32,73,102]}],0,false},
             {text,[6,42,110,97,109,101,42]},
             {sep,
              [{text,",is not a registered port, or is not an atom,"}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,
              [{text,
                [15,105,115,32,114,101,116,117,114,110,101,100,32,97,110,
                 100]}],
              0,false},
             {text,[7,42,42,112,111,114,116,42]},
             {sep,[{text,"\ris unchanged."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\bWorks as"}],0,false},
             {text,"&[erlang#whereis-1](./erlang#whereis-1)"},
             {sep,
              [{text,
                [30,44,32,98,117,116,32,114,101,115,116,114,105,99,116,101,
                 100,32,116,111,32,112,111,114,116,115,46,32,83,101,101]}],
              0,false},
             {text,"%[enif_whereis_pid](#enif_whereis_pid)"},
             {sep,[{text," to resolve registered processes."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## See Also"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"([erlang#load_nif-2](./erlang#load_nif-2)"}],0,false}],
       0,true},
      null},
     null}}],
  0,false}}
