{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {text,
             [26,35,32,69,114,108,97,110,103,32,71,97,114,98,97,103,101,32,67,
              111,108,108,101,99,116,111,114]},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"$Erlang manages dynamic memory with a"}],0,false},
                {text,
                 "U[tracing garbage collector](https://en.wikipedia.org/wiki/Tracing_garbage_collection)"},
                {sep,
                 [{text,
                   "±. More precisely a per process generational semi-space copying collector using Cheney's copy collection algorithm together with a global large object space. (See C. J. Cheney in"}],
                 0,false},
                {text,
                 [25,91,82,101,102,101,114,101,110,99,101,115,93,40,35,82,101,
                  102,101,114,101,110,99,101,115,41]},
                {sep,[{text,[2,46,41]}],0,false}],
               0,false}],
             0,true},
            null},
           null}}},
        {sep,
         [{text,
           [31,60,97,32,110,97,109,101,61,34,79,118,101,114,118,105,101,119,
            34,62,79,118,101,114,118,105,101,119,60,47,97,62]},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,{above,{text,"\v## Overview"},null},null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [148,69,97,99,104,32,69,114,108,97,110,103,32,112,114,111,
                     99,101,115,115,32,104,97,115,32,105,116,115,32,111,119,
                     110,32,115,116,97,99,107,32,97,110,100,32,104,101,97,112,
                     32,119,104,105,99,104,32,97,114,101,32,97,108,108,111,99,
                     97,116,101,100,32,105,110,32,116,104,101,32,115,97,109,
                     101,32,109,101,109,111,114,121,32,98,108,111,99,107,32,
                     97,110,100,32,103,114,111,119,32,116,111,119,97,114,100,
                     115,32,101,97,99,104,32,111,116,104,101,114,46,32,87,104,
                     101,110,32,116,104,101,32,115,116,97,99,107,32,97,110,
                     100,32,116,104,101,32,104,101,97,112]}],
                  0,false},
                 {text,
                  "V[meet](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/beam_emu.c#L387)"},
                 {sep,
                  [{text,
                    "u, the garbage collector is triggered and memory is reclaimed. If not enough memory was reclaimed, the heap will grow."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {sep,
           [{text,
             ";<a name=\"Overview_Creating-Data\">Overview_Creating-Data</a>"},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [16,35,35,32,67,114,101,97,116,105,110,103,32,68,97,116,97]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "\\Terms are created on the heap by evaluating expressions. There are two major types of terms:"}],
                    0,false},
                   {text,
                    "d[immediate terms](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_term.h#L88-L97)"},
                   {sep,
                    [{text,
                      "Swhich require no heap space (small integers, atoms, pids, port ids etc) and cons or"}],
                    0,false},
                   {text,
                    "b[boxed terms](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_term.h#L106-L120)"},
                   {sep,
                    [{text,
                      [158,40,116,117,112,108,101,44,32,98,105,103,32,110,117,
                       109,44,32,98,105,110,97,114,105,101,115,32,101,116,99,
                       41,32,116,104,97,116,32,100,111,32,114,101,113,117,105,
                       114,101,32,104,101,97,112,32,115,112,97,99,101,46,32,
                       73,109,109,101,100,105,97,116,101,32,116,101,114,109,
                       115,32,100,111,32,110,111,116,32,110,101,101,100,32,97,
                       110,121,32,104,101,97,112,32,115,112,97,99,101,32,98,
                       101,99,97,117,115,101,32,116,104,101,121,32,97,114,101,
                       32,101,109,98,101,100,100,101,100,32,105,110,116,111,
                       32,116,104,101,32,99,111,110,116,97,105,110,105,110,
                       103,32,115,116,114,117,99,116,117,114,101,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "JLet's look at an example that returns a tuple with the newly created data."}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    "`\ndata(Foo) ->\n   Cons = [42|Foo],\n   Literal = {text, \"hello world!\"},\n   {tag, Cons, Literal}.\n"}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "ºIn this example we first create a new cons cell with an integer and a tuple with some text. Then a tuple of size three wrapping the other values with an atom tag is created and returned."}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "ëOn the heap tuples require a word size for each of its elements as well as for the header. Cons cells always require two words. Adding these things together, we get seven words for the tuples and 26 words for the cons cells. The string"}],
                    0,false},
                   {text,
                    [16,42,34,104,101,108,108,111,32,119,111,114,108,100,33,
                     34,42]},
                   {sep,
                    [{text,
                      "<is a list of cons cells and thus requires 24 words. The atom"}],
                    0,false},
                   {text,[5,42,116,97,103,42]},
                   {sep,
                    [{text,
                      [15,97,110,100,32,116,104,101,32,105,110,116,101,103,
                       101,114]}],
                    0,false},
                   {text,[4,42,52,50,42]},
                   {sep,
                    [{text,
                      "8do not require any additional heap memory since it is an"}],
                    0,false},
                   {text,"\r**immediate**"},
                   {sep,
                    [{text,
                      "\\. Adding all the terms together, the heap space required in this example should be 33 words."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,"&Compiling this code to beam assembly ("}],
                    0,false},
                   {text,"\t*erlc -S*"},
                   {sep,
                    [{text,"\") shows exactly what is happening."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    [158,10,46,46,46,10,123,116,101,115,116,95,104,101,97,112,
                     44,54,44,49,125,46,10,123,112,117,116,95,108,105,115,116,
                     44,123,105,110,116,101,103,101,114,44,52,50,125,44,123,
                     120,44,48,125,44,123,120,44,49,125,125,46,10,123,112,117,
                     116,95,116,117,112,108,101,44,51,44,123,120,44,48,125,
                     125,46,10,123,112,117,116,44,123,97,116,111,109,44,116,
                     97,103,125,125,46,10,123,112,117,116,44,123,120,44,49,
                     125,125,46,10,123,112,117,116,44,123,108,105,116,101,114,
                     97,108,44,123,116,101,120,116,44,34,104,101,108,108,111,
                     32,119,111,114,108,100,33,34,125,125,125,46,10,114,101,
                     116,117,114,110,46,10]}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [139,76,111,111,107,105,110,103,32,97,116,32,116,104,
                       101,32,97,115,115,101,109,98,108,101,114,32,99,111,100,
                       101,32,119,101,32,99,97,110,32,115,101,101,32,116,104,
                       114,101,101,32,116,104,105,110,103,115,58,32,84,104,
                       101,32,104,101,97,112,32,114,101,113,117,105,114,101,
                       109,101,110,116,32,105,110,32,116,104,105,115,32,102,
                       117,110,99,116,105,111,110,32,116,117,114,110,115,32,
                       111,117,116,32,116,111,32,98,101,32,111,110,108,121,32,
                       115,105,120,32,119,111,114,100,115,44,32,97,115,32,115,
                       101,101,110,32,98,121,32,116,104,101]}],
                    0,false},
                   {text,
                    [17,42,123,116,101,115,116,95,104,101,97,112,44,54,44,49,
                     125,42]},
                   {sep,
                    [{text,
                      "[instruction. All the allocations are combined to a single instruction. The bulk of the data"}],
                    0,false},
                   {text,
                    [24,42,123,116,101,120,116,44,32,34,104,101,108,108,111,
                     32,119,111,114,108,100,33,34,125,42]},
                   {sep,[{text,[4,105,115,32,97]}],0,false},
                   {text,"\v**literal**"},
                   {sep,
                    [{text,
                      [145,46,32,76,105,116,101,114,97,108,115,44,32,115,111,
                       109,101,116,105,109,101,115,32,114,101,102,101,114,114,
                       101,100,32,116,111,32,97,115,32,99,111,110,115,116,97,
                       110,116,115,44,32,97,114,101,32,110,111,116,32,97,108,
                       108,111,99,97,116,101,100,32,105,110,32,116,104,101,32,
                       102,117,110,99,116,105,111,110,32,115,105,110,99,101,
                       32,116,104,101,121,32,97,114,101,32,97,32,112,97,114,
                       116,32,111,102,32,116,104,101,32,109,111,100,117,108,
                       101,32,97,110,100,32,97,108,108,111,99,97,116,101,100,
                       32,97,116,32,108,111,97,100,32,116,105,109,101,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "AIf there is not enough space available on the heap to satisfy the"}],
                    0,false},
                   {text,"\v*test_heap*"},
                   {sep,
                    [{text,
                      "iinstructions request for memory, then a garbage collection is initiated. It may happen immediately in the"}],
                    0,false},
                   {text,"\v*test_heap*"},
                   {sep,
                    [{text,
                      [340,105,110,115,116,114,117,99,116,105,111,110,44,32,
                       111,114,32,105,116,32,99,97,110,32,98,101,32,100,101,
                       108,97,121,101,100,32,117,110,116,105,108,32,97,32,108,
                       97,116,101,114,32,116,105,109,101,32,100,101,112,101,
                       110,100,105,110,103,32,111,110,32,119,104,97,116,32,
                       115,116,97,116,101,32,116,104,101,32,112,114,111,99,
                       101,115,115,32,105,115,32,105,110,46,32,73,102,32,116,
                       104,101,32,103,97,114,98,97,103,101,32,99,111,108,108,
                       101,99,116,105,111,110,32,105,115,32,100,101,108,97,
                       121,101,100,44,32,97,110,121,32,109,101,109,111,114,
                       121,32,110,101,101,100,101,100,32,119,105,108,108,32,
                       98,101,32,97,108,108,111,99,97,116,101,100,32,105,110,
                       32,104,101,97,112,32,102,114,97,103,109,101,110,116,
                       115,46,32,72,101,97,112,32,102,114,97,103,109,101,110,
                       116,115,32,97,114,101,32,101,120,116,114,97,32,109,101,
                       109,111,114,121,32,98,108,111,99,107,115,32,116,104,97,
                       116,32,97,114,101,32,97,32,112,97,114,116,32,111,102,
                       32,116,104,101,32,121,111,117,110,103,32,104,101,97,
                       112,44,32,98,117,116,32,97,114,101,32,110,111,116,32,
                       97,108,108,111,99,97,116,101,100,32,105,110,32,116,104,
                       101,32,99,111,110,116,105,103,105,111,117,115,32,97,
                       114,101,97,32,119,104,101,114,101,32,116,101,114,109,
                       115,32,110,111,114,109,97,108,108,121,32,114,101,115,
                       105,100,101,46,32,83,101,101]}],
                    0,false},
                   {text,"![The young heap](#The-young-heap)"},
                   {sep,
                    [{text,
                      [17,102,111,114,32,109,111,114,101,32,100,101,116,97,
                       105,108,115,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false},
          {sep,
           [{text,
             ";<a name=\"Overview_The-collector\">Overview_The-collector</a>"},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,
                [16,35,35,32,84,104,101,32,99,111,108,108,101,99,116,111,114]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      [155,69,114,108,97,110,103,32,104,97,115,32,97,32,99,
                       111,112,121,105,110,103,32,115,101,109,105,45,115,112,
                       97,99,101,32,103,97,114,98,97,103,101,32,99,111,108,
                       108,101,99,116,111,114,46,32,84,104,105,115,32,109,101,
                       97,110,115,32,116,104,97,116,32,119,104,101,110,32,100,
                       111,105,110,103,32,97,32,103,97,114,98,97,103,101,32,
                       99,111,108,108,101,99,116,105,111,110,44,32,116,104,
                       101,32,116,101,114,109,115,32,97,114,101,32,99,111,112,
                       105,101,100,32,102,114,111,109,32,111,110,101,32,100,
                       105,115,116,105,110,99,116,32,97,114,101,97,44,32,99,
                       97,108,108,101,100,32,116,104,101]}],
                    0,false},
                   {text,
                    [14,42,42,102,114,111,109,32,115,112,97,99,101,42,42]},
                   {sep,[{text,"!, to a new clean area, called the"}],0,false},
                   {text,"\f**to space**"},
                   {sep,
                    [{text,
                      [25,46,32,84,104,101,32,99,111,108,108,101,99,116,111,
                       114,32,115,116,97,114,116,115,32,98,121]}],
                    0,false},
                   {text,
                    "f[scanning the root-set](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1980)"},
                   {sep,
                    [{text,
                      [24,40,115,116,97,99,107,44,32,114,101,103,105,115,116,
                       101,114,115,44,32,101,116,99,41,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {text,
             [25,33,91,93,40,102,105,103,117,114,101,115,47,103,99,45,115,116,
              97,114,116,46,112,110,103,41]},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "bIt follows all the pointers from the root-set to the heap and copies each term word by word to the"}],
                    0,false},
                   {text,"\f**to space**"},
                   {sep,[{text,[1,46]}],0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,"'After the header word has been copied a"}],
                    0,false},
                   {text,
                    "^[move marker](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.h#L45-L46)"},
                   {sep,
                    [{text,
                      "9is destructively placed in it pointing to the term in the"}],
                    0,false},
                   {text,"\f**to space**"},
                   {sep,
                    [{text,
                      ";. Any other term that points to the already moved term will"}],
                    0,false},
                   {text,
                    "e[see this move marker](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1125)"},
                   {sep,
                    [{text,
                      "[and copy the referring pointer instead. For example, if the have the following Erlang code:"}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,[3,96,96,96]},
                 {sep,
                  [{text,
                    ":\nfoo(Arg) ->\n    T = {test, Arg},\n    {wrapper, T, T, T}.\n"}],
                  0,true}},
                {text,[3,96,96,96]}},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [127,79,110,108,121,32,111,110,101,32,99,111,112,121,32,
                     111,102,32,84,32,101,120,105,115,116,115,32,111,110,32,
                     116,104,101,32,104,101,97,112,32,97,110,100,32,100,117,
                     114,105,110,103,32,116,104,101,32,103,97,114,98,97,103,
                     101,32,99,111,108,108,101,99,116,105,111,110,32,111,110,
                     108,121,32,116,104,101,32,102,105,114,115,116,32,116,105,
                     109,101,32,84,32,105,115,32,101,110,99,111,117,110,116,
                     101,114,101,100,32,119,105,108,108,32,105,116,32,98,101,
                     32,99,111,112,105,101,100,46]}],
                  0,false}],
                0,true},
               null},
              null}},
            {text," ![](figures/gc-rootset-scan.png)"},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[5,65,102,116,101,114]}],0,false},
                   {text,
                    "Z[all terms](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1089)"},
                   {sep,
                    [{text,
                      "Dreferenced by the root-set have been copied, the collector scans the"}],
                    0,false},
                   {text,"\f**to space**"},
                   {sep,
                    [{text,
                      "land copies all terms that these terms reference. When scanning, the collector steps through each term on the"}],
                    0,false},
                   {text,"\f**to space**"},
                   {sep,
                    [{text,"\"and any term still referencing the"}],
                    0,false},
                   {text,
                    [14,42,42,102,114,111,109,32,115,112,97,99,101,42,42]},
                   {sep,
                    [{text,
                      [21,105,115,32,99,111,112,105,101,100,32,111,118,101,
                       114,32,116,111,32,116,104,101]}],
                    0,false},
                   {text,"\f**to space**"},
                   {sep,
                    [{text,
                      [150,46,32,83,111,109,101,32,116,101,114,109,115,32,99,
                       111,110,116,97,105,110,32,110,111,110,45,116,101,114,
                       109,32,100,97,116,97,32,40,116,104,101,32,112,97,121,
                       108,111,97,100,32,111,102,32,97,32,111,110,32,104,101,
                       97,112,32,98,105,110,97,114,121,32,102,111,114,32,105,
                       110,115,116,97,110,99,101,41,46,32,87,104,101,110,32,
                       101,110,99,111,117,110,116,101,114,101,100,32,98,121,
                       32,116,104,101,32,99,111,108,108,101,99,116,111,114,44,
                       32,116,104,101,115,101,32,118,97,108,117,101,115,32,97,
                       114,101,32,115,105,109,112,108,121,32,115,107,105,112,
                       112,101,100,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {text,
             [30,33,91,93,40,102,105,103,117,114,101,115,47,103,99,45,104,101,
              97,112,45,115,99,97,110,49,46,112,110,103,41]},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "/Every term object we can reach is copied to the"}],
                    0,false},
                   {text,"\f**to space**"},
                   {sep,
                    [{text,
                      [25,97,110,100,32,115,116,111,114,101,100,32,111,110,32,
                       116,111,112,32,111,102,102,32,116,104,101]}],
                    0,false},
                   {text,"\r**scan stop**"},
                   {sep,
                    [{text,
                      "Dline, and then the scan stop is moved to the end of the last object."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {text,
             [29,33,91,93,40,102,105,103,117,114,101,115,47,103,99,45,104,101,
              97,112,45,115,116,111,112,46,112,110,103,41]},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,[{text,[4,87,104,101,110]}],0,false},
                   {text,"\r**scan stop**"},
                   {sep,[{text,[6,109,97,114,107,101,114]}],0,false},
                   {text,
                    "[[catches up](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1103)"},
                   {sep,[{text,[6,116,111,32,116,104,101]}],0,false},
                   {text,[14,42,42,115,99,97,110,32,115,116,97,114,116,42,42]},
                   {sep,
                    [{text,
                      "<marker, the garbage collection is done. At this point we can"}],
                    0,false},
                   {text,
                    "[[deallocate](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1206)"},
                   {sep,[{text,"\nthe entire"}],0,false},
                   {text,
                    [14,42,42,102,114,111,109,32,115,112,97,99,101,42,42]},
                   {sep,
                    [{text,",and therefore reclaim the entire young heap."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false}],
         0,false}},
       {sep,
        [{text,
          "M<a name=\"Generational-Garbage-Collection\">Generational-Garbage-Collection</a>"},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,{text,"\"## Generational Garbage Collection"},null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [296,73,110,32,97,100,100,105,116,105,111,110,32,116,111,32,
                  116,104,101,32,99,111,108,108,101,99,116,105,111,110,32,97,
                  108,103,111,114,105,116,104,109,32,100,101,115,99,114,105,
                  98,101,100,32,97,98,111,118,101,44,32,116,104,101,32,69,114,
                  108,97,110,103,32,103,97,114,98,97,103,101,32,99,111,108,
                  108,101,99,116,111,114,32,97,108,115,111,32,112,114,111,118,
                  105,100,101,115,32,103,101,110,101,114,97,116,105,111,110,
                  97,108,32,103,97,114,98,97,103,101,32,99,111,108,108,101,99,
                  116,105,111,110,46,32,65,110,32,97,100,100,105,116,105,111,
                  110,97,108,32,104,101,97,112,44,32,99,97,108,108,101,100,32,
                  116,104,101,32,111,108,100,32,104,101,97,112,44,32,105,115,
                  32,117,115,101,100,32,119,104,101,114,101,32,116,104,101,32,
                  108,111,110,103,32,108,105,118,101,100,32,100,97,116,97,32,
                  105,115,32,115,116,111,114,101,100,46,32,84,104,101,32,111,
                  114,105,103,105,110,97,108,32,104,101,97,112,32,105,115,32,
                  99,97,108,108,101,100,32,116,104,101,32,121,111,117,110,103,
                  32,104,101,97,112,44,32,111,114,32,115,111,109,101,116,105,
                  109,101,115,32,116,104,101,32,97,108,108,111,99,97,116,105,
                  111,110,32,104,101,97,112,46]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [137,87,105,116,104,32,116,104,105,115,32,105,110,32,109,
                    105,110,100,32,119,101,32,99,97,110,32,108,111,111,107,32,
                    97,116,32,116,104,101,32,69,114,108,97,110,103,39,115,32,
                    103,97,114,98,97,103,101,32,99,111,108,108,101,99,116,105,
                    111,110,32,97,103,97,105,110,46,32,68,117,114,105,110,103,
                    32,116,104,101,32,99,111,112,121,32,115,116,97,103,101,32,
                    97,110,121,116,104,105,110,103,32,116,104,97,116,32,115,
                    104,111,117,108,100,32,98,101,32,99,111,112,105,101,100,
                    32,116,111,32,116,104,101,32,121,111,117,110,103]}],
                 0,false},
                {text,"\f**to space**"},
                {sep,
                 [{text,
                   [28,105,115,32,105,110,115,116,101,97,100,32,99,111,112,
                    105,101,100,32,116,111,32,116,104,101,32,111,108,100]}],
                 0,false},
                {text,"\f**to space**"},
                {text,[6,42,42,105,102,42,42]},
                {sep,[{text,[5,105,116,32,105,115]}],0,false},
                {text,
                 "k[below the *high-watermark*](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1127)"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {text,
          [29,33,91,93,40,102,105,103,117,114,101,115,47,103,99,45,119,97,116,
           101,114,109,97,114,107,46,112,110,103,41]},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[3,84,104,101]}],0,false},
                {text,
                 "d[high-watermark](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_process.h#L1021)"},
                {sep,
                 [{text,
                   "=is placed where the previous garbage collection (described in"}],
                 0,false},
                {text,
                 [21,91,79,118,101,114,118,105,101,119,93,40,35,79,118,101,
                  114,118,105,101,119,41]},
                {sep,
                 [{text,
                   "´) ended and we have introduced a new area called the old heap. When doing the normal garbage collection pass, any term that is located below the high-watermark is copied to the old"}],
                 0,false},
                {text,"\f**to space**"},
                {sep,
                 [{text,
                   [21,105,110,115,116,101,97,100,32,111,102,32,116,104,101,
                    32,121,111,117,110,103,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {text,
          [31,33,91,93,40,102,105,103,117,114,101,115,47,103,99,45,119,97,116,
           101,114,109,97,114,107,45,50,46,112,110,103,41]},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "¨In the next garbage collection, any pointers to the old heap will be ignored and not scanned. This way the garbage collector does not have to scan the long-lived terms."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "¸Generational garbage collection aims to increase performance at the expense of memory. This is achieved because only the young, smaller, heap is considered in most garbage collections."}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "WThe generational hypothesis predicts that most terms tend to die young (see D. Ungar in"}],
                 0,false},
                {text,
                 [25,91,82,101,102,101,114,101,110,99,101,115,93,40,35,82,101,
                  102,101,114,101,110,99,101,115,41]},
                {sep,
                 [{text,
                   [379,41,44,32,97,110,100,32,102,111,114,32,97,110,32,105,
                    109,109,117,116,97,98,108,101,32,108,97,110,103,117,97,
                    103,101,32,115,117,99,104,32,97,115,32,69,114,108,97,110,
                    103,44,32,121,111,117,110,103,32,116,101,114,109,115,32,
                    100,105,101,32,101,118,101,110,32,102,97,115,116,101,114,
                    32,116,104,97,110,32,105,110,32,111,116,104,101,114,32,
                    108,97,110,103,117,97,103,101,115,46,32,83,111,32,102,111,
                    114,32,109,111,115,116,32,117,115,97,103,101,32,112,97,
                    116,116,101,114,110,115,32,116,104,101,32,100,97,116,97,
                    32,105,110,32,116,104,101,32,110,101,119,32,104,101,97,
                    112,32,119,105,108,108,32,100,105,101,32,118,101,114,121,
                    32,115,111,111,110,32,97,102,116,101,114,32,105,116,32,
                    105,115,32,97,108,108,111,99,97,116,101,100,46,32,84,104,
                    105,115,32,105,115,32,103,111,111,100,32,98,101,99,97,117,
                    115,101,32,105,116,32,108,105,109,105,116,115,32,116,104,
                    101,32,97,109,111,117,110,116,32,111,102,32,100,97,116,97,
                    32,99,111,112,105,101,100,32,116,111,32,116,104,101,32,
                    111,108,100,32,104,101,97,112,32,97,110,100,32,97,108,115,
                    111,32,98,101,99,97,117,115,101,32,116,104,101,32,103,97,
                    114,98,97,103,101,32,99,111,108,108,101,99,116,105,111,
                    110,32,97,108,103,111,114,105,116,104,109,32,117,115,101,
                    100,32,105,115,32,112,114,111,112,111,114,116,105,111,110,
                    97,108,32,116,111,32,116,104,101,32,97,109,111,117,110,
                    116,32,111,102,32,108,105,118,101,32,100,97,116,97,32,111,
                    110,32,116,104,101,32,104,101,97,112,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "jOne critical issue to note here is that any term on the young heap can reference terms on the old heap but"}],
                 0,false},
                {text,[6,42,42,110,111,42,42]},
                {sep,
                 [{text,
                   [489,116,101,114,109,32,111,110,32,116,104,101,32,111,108,
                    100,32,104,101,97,112,32,109,97,121,32,114,101,102,101,
                    114,32,116,111,32,97,32,116,101,114,109,32,111,110,32,116,
                    104,101,32,121,111,117,110,103,32,104,101,97,112,46,32,84,
                    104,105,115,32,105,115,32,100,117,101,32,116,111,32,116,
                    104,101,32,110,97,116,117,114,101,32,111,102,32,116,104,
                    101,32,99,111,112,121,32,97,108,103,111,114,105,116,104,
                    109,46,32,65,110,121,116,104,105,110,103,32,114,101,102,
                    101,114,101,110,99,101,100,32,98,121,32,97,110,32,111,108,
                    100,32,104,101,97,112,32,116,101,114,109,32,105,115,32,
                    110,111,116,32,105,110,99,108,117,100,101,100,32,105,110,
                    32,116,104,101,32,114,101,102,101,114,101,110,99,101,32,
                    116,114,101,101,44,32,114,111,111,116,45,115,101,116,32,
                    97,110,100,32,105,116,115,32,102,111,108,108,111,119,101,
                    114,115,44,32,97,110,100,32,104,101,110,99,101,32,105,115,
                    32,110,111,116,32,99,111,112,105,101,100,46,32,73,102,32,
                    105,116,32,119,97,115,44,32,116,104,101,32,100,97,116,97,
                    32,119,111,117,108,100,32,98,101,32,108,111,115,116,44,32,
                    102,105,114,101,32,97,110,100,32,98,114,105,109,115,116,
                    111,110,101,32,119,111,117,108,100,32,114,105,115,101,32,
                    116,111,32,99,111,118,101,114,32,116,104,101,32,101,97,
                    114,116,104,46,32,70,111,114,116,117,110,97,116,101,108,
                    121,44,32,116,104,105,115,32,99,111,109,101,115,32,110,97,
                    116,117,114,97,108,108,121,32,102,111,114,32,69,114,108,
                    97,110,103,32,98,101,99,97,117,115,101,32,116,104,101,32,
                    116,101,114,109,115,32,97,114,101,32,105,109,109,117,116,
                    97,98,108,101,32,97,110,100,32,116,104,117,115,32,116,104,
                    101,114,101,32,99,97,110,32,98,101,32,110,111,32,112,111,
                    105,110,116,101,114,115,32,109,111,100,105,102,105,101,
                    100,32,111,110,32,116,104,101,32,111,108,100,32,104,101,
                    97,112,32,116,111,32,112,111,105,110,116,32,116,111,32,
                    116,104,101,32,121,111,117,110,103,32,104,101,97,112,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "uTo reclaim data from the old heap, both young and old heaps are included during the collection and copied to a common"}],
                 0,false},
                {text,"\f**to space**"},
                {sep,[{text,"\n. Both the"}],0,false},
                {text,[14,42,42,102,114,111,109,32,115,112,97,99,101,42,42]},
                {sep,
                 [{text,
                   [332,111,102,32,116,104,101,32,121,111,117,110,103,32,97,
                    110,100,32,111,108,100,32,104,101,97,112,32,97,114,101,32,
                    116,104,101,110,32,100,101,97,108,108,111,99,97,116,101,
                    100,32,97,110,100,32,116,104,101,32,112,114,111,99,101,
                    100,117,114,101,32,119,105,108,108,32,115,116,97,114,116,
                    32,111,118,101,114,32,102,114,111,109,32,116,104,101,32,
                    98,101,103,105,110,110,105,110,103,46,32,84,104,105,115,
                    32,116,121,112,101,32,111,102,32,103,97,114,98,97,103,101,
                    32,99,111,108,108,101,99,116,105,111,110,32,105,115,32,99,
                    97,108,108,101,100,32,97,32,102,117,108,108,32,115,119,
                    101,101,112,32,97,110,100,32,105,115,32,116,114,105,103,
                    103,101,114,101,100,32,119,104,101,110,32,116,104,101,32,
                    115,105,122,101,32,111,102,32,116,104,101,32,97,114,101,
                    97,32,117,110,100,101,114,32,116,104,101,32,104,105,103,
                    104,45,119,97,116,101,114,109,97,114,107,32,105,115,32,
                    108,97,114,103,101,114,32,116,104,97,110,32,116,104,101,
                    32,115,105,122,101,32,111,102,32,116,104,101,32,102,114,
                    101,101,32,97,114,101,97,32,111,102,32,116,104,101,32,111,
                    108,100,32,104,101,97,112,46,32,73,116,32,99,97,110,32,97,
                    108,115,111,32,98,101,32,116,114,105,103,103,101,114,101,
                    100,32,98,121,32,100,111,105,110,103,32,97,32,109,97,110,
                    117,97,108,32,99,97,108,108,32,116,111]}],
                 0,false},
                {text,
                 "S[erlang:garbage_collect()](http://erlang.org/doc/man/erlang.html#garbage_collect-0)"},
                {sep,
                 [{text,
                   ">, or by running into the young garbage collection limit set by"}],
                 0,false},
                {text,
                 "\\[spawn_opt(fun(),[{fullsweep_after, N}])](http://erlang.org/doc/man/erlang.html#spawn_opt-4)"},
                {sep,
                 [{text,
                   "xwhere N is the number of young garbage collections to do before forcing a garbage collection of both young and old heap."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}},
      {sep,
       [{text,"+<a name=\"The-young-heap\">The-young-heap</a>"},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [17,35,35,32,84,104,101,32,121,111,117,110,103,32,104,101,97,112]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [438,84,104,101,32,121,111,117,110,103,32,104,101,97,112,44,
                   32,111,114,32,116,104,101,32,97,108,108,111,99,97,116,105,
                   111,110,32,104,101,97,112,44,32,99,111,110,115,105,115,116,
                   115,32,111,102,32,116,104,101,32,115,116,97,99,107,32,97,
                   110,100,32,104,101,97,112,32,97,115,32,100,101,115,99,114,
                   105,98,101,100,32,105,110,32,116,104,101,32,79,118,101,114,
                   118,105,101,119,46,32,72,111,119,101,118,101,114,44,32,105,
                   116,32,97,108,115,111,32,105,110,99,108,117,100,101,115,32,
                   97,110,121,32,104,101,97,112,32,102,114,97,103,109,101,110,
                   116,115,32,116,104,97,116,32,97,114,101,32,97,116,116,97,
                   99,104,101,100,32,116,111,32,116,104,101,32,104,101,97,112,
                   46,32,65,108,108,32,111,102,32,116,104,101,32,104,101,97,
                   112,32,102,114,97,103,109,101,110,116,115,32,97,114,101,32,
                   99,111,110,115,105,100,101,114,101,100,32,116,111,32,98,
                   101,32,97,98,111,118,101,32,116,104,101,32,104,105,103,104,
                   45,119,97,116,101,114,109,97,114,107,32,97,110,100,32,112,
                   97,114,116,32,111,102,32,116,104,101,32,121,111,117,110,
                   103,32,103,101,110,101,114,97,116,105,111,110,46,32,72,101,
                   97,112,32,102,114,97,103,109,101,110,116,115,32,99,111,110,
                   116,97,105,110,32,116,101,114,109,115,32,116,104,97,116,32,
                   101,105,116,104,101,114,32,100,105,100,32,110,111,116,32,
                   102,105,116,32,111,110,32,116,104,101,32,104,101,97,112,44,
                   32,111,114,32,119,101,114,101,32,99,114,101,97,116,101,100,
                   32,98,121,32,97,110,111,116,104,101,114,32,112,114,111,99,
                   101,115,115,32,97,110,100,32,116,104,101,110,32,97,116,116,
                   97,99,104,101,100,32,116,111,32,116,104,101,32,104,101,97,
                   112,46,32,70,111,114,32,105,110,115,116,97,110,99,101,32,
                   105,102,32,116,104,101,32,98,105,102]}],
                0,false},
               {text,
                [18,42,98,105,110,97,114,121,95,116,111,95,116,101,114,109,47,
                 49,42]},
               {sep,
                [{text,
                  [360,99,114,101,97,116,101,100,32,97,32,116,101,114,109,32,
                   119,104,105,99,104,32,100,111,101,115,32,110,111,116,32,
                   102,105,116,32,111,110,32,116,104,101,32,99,117,114,114,
                   101,110,116,32,104,101,97,112,32,119,105,116,104,111,117,
                   116,32,100,111,105,110,103,32,97,32,103,97,114,98,97,103,
                   101,32,99,111,108,108,101,99,116,105,111,110,44,32,105,116,
                   32,119,105,108,108,32,99,114,101,97,116,101,32,97,32,104,
                   101,97,112,45,102,114,97,103,109,101,110,116,32,102,111,
                   114,32,116,104,101,32,116,101,114,109,32,97,110,100,32,116,
                   104,101,110,32,115,99,104,101,100,117,108,101,32,97,32,103,
                   97,114,98,97,103,101,32,99,111,108,108,101,99,116,105,111,
                   110,32,102,111,114,32,108,97,116,101,114,46,32,65,108,115,
                   111,32,105,102,32,97,32,109,101,115,115,97,103,101,32,105,
                   115,32,115,101,110,116,32,116,111,32,116,104,101,32,112,
                   114,111,99,101,115,115,44,32,116,104,101,32,112,97,121,108,
                   111,97,100,32,109,97,121,32,98,101,32,112,108,97,99,101,
                   100,32,105,110,32,97,32,104,101,97,112,45,102,114,97,103,
                   109,101,110,116,32,97,110,100,32,116,104,97,116,32,102,114,
                   97,103,109,101,110,116,32,105,115,32,97,100,100,101,100,32,
                   116,111,32,121,111,117,110,103,32,104,101,97,112,32,119,
                   104,101,110,32,116,104,101,32,109,101,115,115,97,103,101,
                   32,105,115,32,109,97,116,99,104,101,100,32,105,110,32,97,
                   32,114,101,99,101,105,118,101,32,99,108,97,117,115,101,
                   46]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                [492,84,104,105,115,32,112,114,111,99,101,100,117,114,101,32,
                 100,105,102,102,101,114,115,32,102,114,111,109,32,104,111,
                 119,32,105,116,32,119,111,114,107,101,100,32,112,114,105,111,
                 114,32,116,111,32,69,114,108,97,110,103,47,79,84,80,32,49,57,
                 46,48,46,32,66,101,102,111,114,101,32,49,57,46,48,44,32,111,
                 110,108,121,32,97,32,99,111,110,116,105,103,117,111,117,115,
                 32,109,101,109,111,114,121,32,98,108,111,99,107,32,119,104,
                 101,114,101,32,116,104,101,32,121,111,117,110,103,32,104,101,
                 97,112,32,97,110,100,32,115,116,97,99,107,32,114,101,115,105,
                 100,101,100,32,119,97,115,32,99,111,110,115,105,100,101,114,
                 101,100,32,116,111,32,98,101,32,112,97,114,116,32,111,102,32,
                 116,104,101,32,121,111,117,110,103,32,104,101,97,112,46,32,
                 72,101,97,112,32,102,114,97,103,109,101,110,116,115,32,97,
                 110,100,32,109,101,115,115,97,103,101,115,32,119,101,114,101,
                 32,105,109,109,101,100,105,97,116,101,108,121,32,99,111,112,
                 105,101,100,32,105,110,116,111,32,116,104,101,32,121,111,117,
                 110,103,32,104,101,97,112,32,98,101,102,111,114,101,32,116,
                 104,101,121,32,99,111,117,108,100,32,98,101,32,105,110,115,
                 112,101,99,116,101,100,32,98,121,32,116,104,101,32,69,114,
                 108,97,110,103,32,112,114,111,103,114,97,109,46,32,84,104,
                 101,32,98,101,104,97,118,105,111,117,114,32,105,110,116,114,
                 111,100,117,99,101,100,32,105,110,32,49,57,46,48,32,105,115,
                 32,115,117,112,101,114,105,111,114,32,105,110,32,109,97,110,
                 121,32,119,97,121,115,32,45,32,109,111,115,116,32,115,105,
                 103,110,105,102,105,99,97,110,116,108,121,32,105,116,32,114,
                 101,100,117,99,101,115,32,116,104,101,32,110,117,109,98,101,
                 114,32,111,102,32,110,101,99,101,115,115,97,114,121,32,99,
                 111,112,121,32,111,112,101,114,97,116,105,111,110,115,32,97,
                 110,100,32,116,104,101,32,114,111,111,116,32,115,101,116,32,
                 102,111,114,32,103,97,114,98,97,103,101,32,99,111,108,108,
                 101,99,116,105,111,110,46]}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}},
     {sep,
      [{text,"-<a name=\"Sizing-the-heap\">Sizing-the-heap</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [18,35,35,32,83,105,122,105,110,103,32,116,104,101,32,104,101,97,
            112]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,"1As mentioned in the Overview the size of the heap"}],
               0,false},
              {text,
               "U[grows](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L247)"},
              {sep,
               [{text,
                 ";to accommodate more data. Heaps grow in two stages, first a"}],
               0,false},
              {text,
               "x[variation of the Fibonacci sequence](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L199-L208)"},
              {sep,
               [{text,
                 "Gis used starting at 233 words. Then at about 1 mega words the heap only"}],
               0,false},
              {text,
               "l[grows in 20% increments](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L215-L227)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"2There are two occasions when the young heap grows:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {sep,
         [{text,[1,42]},
          {text,
           "Yif the total size of the heap + message and heap fragments exceeds the current heap size."}],
         0,false},
        {sep,
         [{text,[1,42]},
          {text,
           "Kif after a fullsweep, the total amount of live objects is greater than 75%."}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "6There are two occasions when the young heap is shrunk:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {sep,
         [{text,[1,42]},
          {text,
           "vif after a young collection, the total amount of live objects is less than 25% of the heap and the young heap is \"big\""}],
         0,false},
        {sep,
         [{text,[1,42]},
          {text,
           "Tif after a fullsweep, the total amount of live objects is less than 25% of the heap."}],
         0,false}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "TThe old heap is always one step ahead in the heap growth stages than the young heap."}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}},
    {sep,
     [{text,
       [31,60,97,32,110,97,109,101,61,34,76,105,116,101,114,97,108,115,34,62,
        76,105,116,101,114,97,108,115,60,47,97,62]},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\v## Literals"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÏWhen garbage collecting a heap (young or old) all literals are left in place and not copied. To figure out if a term should be copied or not when doing a garbage collection the following pseudo code is used:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [136,10,105,102,32,40,101,114,116,115,95,105,115,95,108,105,116,
               101,114,97,108,40,112,116,114,41,32,124,124,32,40,111,110,95,
               111,108,100,95,104,101,97,112,40,112,116,114,41,32,38,38,32,33,
               102,117,108,108,115,119,101,101,112,41,41,32,123,10,32,32,47,
               42,32,108,105,116,101,114,97,108,32,111,114,32,110,111,110,32,
               102,117,108,108,115,119,101,101,112,32,45,32,100,111,32,110,
               111,116,32,99,111,112,121,32,42,47,10,125,32,101,108,115,101,
               32,123,10,32,32,99,111,112,121,40,112,116,114,41,59,10,125,
               10]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,84,104,101]}],0,false},
             {text,
              "h[`erts_is_literal`](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/global.h#L1452-L1465)"},
             {sep,
              [{text,
                "Icheck works differently on different architectures and operating systems."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [285,79,110,32,54,52,32,98,105,116,32,115,121,115,116,101,109,
                 115,32,116,104,97,116,32,97,108,108,111,119,32,109,97,112,
                 112,105,110,103,32,111,102,32,117,110,114,101,115,101,114,
                 118,101,100,32,118,105,114,116,117,97,108,32,109,101,109,111,
                 114,121,32,97,114,101,97,115,32,40,109,111,115,116,32,111,
                 112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,
                 115,32,101,120,99,101,112,116,32,87,105,110,100,111,119,115,
                 41,44,32,97,110,32,97,114,101,97,32,111,102,32,115,105,122,
                 101,32,49,32,71,66,32,40,98,121,32,100,101,102,97,117,108,
                 116,41,32,105,115,32,109,97,112,112,101,100,32,97,110,100,32,
                 116,104,101,110,32,97,108,108,32,108,105,116,101,114,97,108,
                 115,32,97,114,101,32,112,108,97,99,101,100,32,119,105,116,
                 104,105,110,32,116,104,97,116,32,97,114,101,97,46,32,84,104,
                 101,110,32,97,108,108,32,116,104,97,116,32,104,97,115,32,116,
                 111,32,98,101,32,100,111,110,101,32,116,111,32,100,101,116,
                 101,114,109,105,110,101,32,105,102,32,115,111,109,101,116,
                 104,105,110,103,32,105,115,32,97,32,108,105,116,101,114,97,
                 108,32,111,114,32,110,111,116,32,105,115]}],
              0,false},
             {text,
              "p[two quick pointer checks](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/erl_alloc.h#L322-L324)"},
             {sep,
              [{text,
                [316,46,32,84,104,105,115,32,115,121,115,116,101,109,32,114,
                 101,108,105,101,115,32,111,110,32,116,104,101,32,102,97,99,
                 116,32,116,104,97,116,32,97,32,109,101,109,111,114,121,32,
                 112,97,103,101,32,116,104,97,116,32,104,97,115,32,110,111,
                 116,32,98,101,101,110,32,116,111,117,99,104,101,100,32,121,
                 101,116,32,100,111,101,115,32,110,111,116,32,116,97,107,101,
                 32,97,110,121,32,97,99,116,117,97,108,32,115,112,97,99,101,
                 46,32,83,111,32,101,118,101,110,32,105,102,32,49,32,71,66,32,
                 111,102,32,118,105,114,116,117,97,108,32,109,101,109,111,114,
                 121,32,105,115,32,109,97,112,112,101,100,44,32,111,110,108,
                 121,32,116,104,101,32,109,101,109,111,114,121,32,119,104,105,
                 99,104,32,105,115,32,97,99,116,117,97,108,108,121,32,110,101,
                 101,100,101,100,32,102,111,114,32,108,105,116,101,114,97,108,
                 115,32,105,115,32,97,108,108,111,99,97,116,101,100,32,105,
                 110,32,114,97,109,46,32,84,104,101,32,115,105,122,101,32,111,
                 102,32,116,104,101,32,108,105,116,101,114,97,108,32,97,114,
                 101,97,32,105,115,32,99,111,110,102,105,103,117,114,97,98,
                 108,101,32,116,104,114,111,117,103,104,32,116,104,101,32,43,
                 77,73,115,99,115,32,101,114,116,115,95,97,108,108,111,99,32,
                 111,112,116,105,111,110,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [508,79,110,32,51,50,32,98,105,116,32,115,121,115,116,101,109,
                 115,44,32,116,104,101,114,101,32,105,115,32,110,111,116,32,
                 101,110,111,117,103,104,32,118,105,114,116,117,97,108,32,109,
                 101,109,111,114,121,32,115,112,97,99,101,32,116,111,32,97,
                 108,108,111,99,97,116,101,32,49,32,71,66,32,102,111,114,32,
                 106,117,115,116,32,108,105,116,101,114,97,108,115,44,32,115,
                 111,32,105,110,115,116,101,97,100,32,115,109,97,108,108,32,
                 50,53,54,32,75,66,32,115,105,122,101,100,32,108,105,116,101,
                 114,97,108,32,114,101,103,105,111,110,115,32,97,114,101,32,
                 99,114,101,97,116,101,100,32,111,110,32,100,101,109,97,110,
                 100,32,97,110,100,32,97,32,99,97,114,100,32,109,97,114,107,
                 32,98,105,116,45,97,114,114,97,121,32,111,102,32,116,104,101,
                 32,101,110,116,105,114,101,32,51,50,32,98,105,116,32,109,101,
                 109,111,114,121,32,115,112,97,99,101,32,105,115,32,116,104,
                 101,110,32,117,115,101,100,32,116,111,32,100,101,116,101,114,
                 109,105,110,101,32,105,102,32,97,32,116,101,114,109,32,105,
                 115,32,97,32,108,105,116,101,114,97,108,32,111,114,32,110,
                 111,116,46,32,83,105,110,99,101,32,116,104,101,32,116,111,
                 116,97,108,32,109,101,109,111,114,121,32,115,112,97,99,101,
                 32,105,115,32,111,110,108,121,32,51,50,32,98,105,116,115,44,
                 32,116,104,101,32,99,97,114,100,32,109,97,114,107,32,98,105,
                 116,45,97,114,114,97,121,32,105,115,32,111,110,108,121,32,50,
                 53,54,32,119,111,114,100,115,32,108,97,114,103,101,46,32,79,
                 110,32,97,32,54,52,32,98,105,116,32,115,121,115,116,101,109,
                 32,116,104,101,32,115,97,109,101,32,98,105,116,45,97,114,114,
                 97,121,32,119,111,117,108,100,32,104,97,118,101,32,116,111,
                 32,98,101,32,49,32,116,101,114,97,32,119,111,114,100,115,32,
                 108,97,114,103,101,44,32,115,111,32,116,104,105,115,32,116,
                 101,99,104,110,105,113,117,101,32,105,115,32,111,110,108,121,
                 32,118,105,97,98,108,101,32,111,110,32,51,50,32,98,105,116,
                 32,115,121,115,116,101,109,115,46,32,68,111,105,110,103]}],
              0,false},
             {text,
              "l[lookups in the array](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/erl_alloc.h#L316-L319)"},
             {sep,
              [{text,
                "wis a little more expensive then just doing the pointer checks that can be done in 64 bit systems, but not extremely so."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "VOn 64 bit windows, on which erts_alloc cannot do unreserved virtual memory mappings, a"}],
              0,false},
             {text,
              "\\[special tag](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/erl_term.h#L59)"},
             {sep,
              [{text,
                "?within the Erlang term object is used to determine if something"}],
              0,false},
             {text,
              "j[is a literal or not](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/erl_term.h#L248-L252)"},
             {sep,
              [{text,
                [288,46,32,84,104,105,115,32,105,115,32,118,101,114,121,32,99,
                 104,101,97,112,44,32,104,111,119,101,118,101,114,44,32,116,
                 104,101,32,116,97,103,32,105,115,32,111,110,108,121,32,97,
                 118,97,105,108,97,98,108,101,32,111,110,32,54,52,32,98,105,
                 116,32,109,97,99,104,105,110,101,115,44,32,97,110,100,32,105,
                 116,32,105,115,32,112,111,115,115,105,98,108,101,32,116,111,
                 32,100,111,32,97,32,103,114,101,97,116,32,100,101,97,108,32,
                 111,102,32,111,116,104,101,114,32,110,105,99,101,32,111,112,
                 116,105,109,105,122,97,116,105,111,110,115,32,119,105,116,
                 104,32,116,104,105,115,32,116,97,103,32,105,110,32,116,104,
                 101,32,102,117,116,117,114,101,32,40,108,105,107,101,32,102,
                 111,114,32,105,110,115,116,97,110,99,101,32,97,32,109,111,
                 114,101,32,99,111,109,112,97,99,116,32,108,105,115,116,32,
                 105,109,112,108,101,109,101,110,116,97,116,105,111,110,41,32,
                 115,111,32,105,116,32,105,115,32,110,111,116,32,117,115,101,
                 100,32,111,110,32,111,112,101,114,97,116,105,110,103,32,115,
                 121,115,116,101,109,115,32,119,104,101,114,101,32,105,116,32,
                 105,115,32,110,111,116,32,110,101,101,100,101,100,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [325,84,104,105,115,32,98,101,104,97,118,105,111,117,114,32,105,
               115,32,100,105,102,102,101,114,101,110,116,32,102,114,111,109,
               32,104,111,119,32,105,116,32,119,111,114,107,101,100,32,112,
               114,105,111,114,32,116,111,32,69,114,108,97,110,103,47,79,84,
               80,32,49,57,46,48,46,32,66,101,102,111,114,101,32,49,57,46,48,
               32,116,104,101,32,108,105,116,101,114,97,108,32,99,104,101,99,
               107,32,119,97,115,32,100,111,110,101,32,98,121,32,99,104,101,
               99,107,105,110,103,32,105,102,32,116,104,101,32,112,111,105,
               110,116,101,114,32,112,111,105,110,116,101,100,32,116,111,32,
               116,104,101,32,121,111,117,110,103,32,111,114,32,111,108,100,
               32,104,101,97,112,32,98,108,111,99,107,46,32,73,102,32,105,116,
               32,100,105,100,32,110,111,116,44,32,116,104,101,110,32,105,116,
               32,119,97,115,32,99,111,110,115,105,100,101,114,101,100,32,97,
               32,108,105,116,101,114,97,108,46,32,84,104,105,115,32,108,101,
               97,100,32,116,111,32,99,111,110,115,105,100,101,114,97,98,108,
               101,32,111,118,101,114,104,101,97,100,32,97,110,100,32,115,116,
               114,97,110,103,101,32,109,101,109,111,114,121,32,117,115,97,
               103,101,32,115,99,101,110,97,114,105,111,115,44,32,115,111,32,
               105,116,32,119,97,115,32,114,101,109,111,118,101,100,32,105,
               110,32,49,57,46,48,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{text,"%<a name=\"Binary-heap\">Binary-heap</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,[14,35,35,32,66,105,110,97,114,121,32,104,101,97,112]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [152,84,104,101,32,98,105,110,97,114,121,32,104,101,97,112,32,
                119,111,114,107,115,32,97,115,32,97,32,108,97,114,103,101,32,
                111,98,106,101,99,116,32,115,112,97,99,101,32,102,111,114,32,
                98,105,110,97,114,121,32,116,101,114,109,115,32,116,104,97,
                116,32,97,114,101,32,103,114,101,97,116,101,114,32,116,104,97,
                110,32,54,52,32,98,121,116,101,115,32,40,102,114,111,109,32,
                110,111,119,32,111,110,32,99,97,108,108,101,100,32,111,102,
                102,45,104,101,97,112,32,98,105,110,97,114,105,101,115,41,46,
                32,84,104,101,32,98,105,110,97,114,121,32,104,101,97,112,32,
                105,115]}],
             0,false},
            {text,
             "E[reference counted](https://en.wikipedia.org/wiki/Reference_counting)"},
            {sep,
             [{text,
               [327,97,110,100,32,97,32,112,111,105,110,116,101,114,32,116,
                111,32,116,104,101,32,111,102,102,45,104,101,97,112,32,98,105,
                110,97,114,121,32,105,115,32,115,116,111,114,101,100,32,111,
                110,32,116,104,101,32,112,114,111,99,101,115,115,32,104,101,
                97,112,46,32,84,111,32,107,101,101,112,32,116,114,97,99,107,
                32,111,102,32,119,104,101,110,32,116,111,32,100,101,99,114,
                101,109,101,110,116,32,116,104,101,32,114,101,102,101,114,101,
                110,99,101,32,99,111,117,110,116,101,114,32,111,102,32,116,
                104,101,32,111,102,102,45,104,101,97,112,32,98,105,110,97,114,
                121,44,32,97,32,108,105,110,107,101,100,32,108,105,115,116,32,
                40,116,104,101,32,77,83,79,32,45,32,109,97,114,107,32,97,110,
                100,32,115,119,101,101,112,32,111,98,106,101,99,116,32,108,
                105,115,116,41,32,99,111,110,116,97,105,110,105,110,103,32,
                102,117,110,115,32,97,110,100,32,101,120,116,101,114,110,97,
                108,115,32,97,115,32,119,101,108,108,32,97,115,32,111,102,102,
                45,104,101,97,112,32,98,105,110,97,114,105,101,115,32,105,115,
                32,119,111,118,101,110,32,116,104,114,111,117,103,104,32,116,
                104,101,32,104,101,97,112,46,32,65,102,116,101,114,32,97,32,
                103,97,114,98,97,103,101,32,99,111,108,108,101,99,116,105,111,
                110,32,105,115,32,100,111,110,101,44,32,116,104,101]}],
             0,false},
            {text,
             "b[MSO list is swept](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L2299)"},
            {sep,
             [{text,",and any off-heap binary that does not have a"}],
             0,false},
            {text,
             "\\[move marker](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L2325)"},
            {sep,
             [{text,"/written into the header words has its reference"}],
             0,false},
            {text,
             "{[decremented and is potentially freed](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L2344-L2367)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "«All items in the MSO list are ordered by the time they were added to the process heap, so when doing a minor garbage collection, the MSO sweeper only has to sweep until it"}],
             0,false},
            {text,
             [134,91,101,110,99,111,117,110,116,101,114,115,32,97,110,32,111,
              102,102,45,104,101,97,112,32,98,105,110,97,114,121,32,116,104,
              97,116,32,105,115,32,111,110,32,116,104,101,32,111,108,100,32,
              104,101,97,112,93,40,104,116,116,112,115,58,47,47,103,105,116,
              104,117,98,46,99,111,109,47,101,114,108,97,110,103,47,111,116,
              112,47,98,108,111,98,47,79,84,80,45,49,56,46,48,47,101,114,116,
              115,47,101,109,117,108,97,116,111,114,47,98,101,97,109,47,101,
              114,108,95,103,99,46,99,35,76,50,51,54,57,41]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{text,
        "M<a name=\"Binary-heap_Virtual-Binary-heap\">Binary-heap_Virtual-Binary-heap</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,
           [22,35,35,32,86,105,114,116,117,97,108,32,66,105,110,97,114,121,32,
            104,101,97,112]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               [415,69,97,99,104,32,112,114,111,99,101,115,115,32,104,97,115,
                32,97,32,118,105,114,116,117,97,108,32,98,105,110,97,114,121,
                32,104,101,97,112,32,97,115,115,111,99,105,97,116,101,100,32,
                119,105,116,104,32,105,116,32,116,104,97,116,32,104,97,115,32,
                116,104,101,32,115,105,122,101,32,111,102,32,97,108,108,32,
                116,104,101,32,99,117,114,114,101,110,116,32,111,102,102,45,
                104,101,97,112,32,98,105,110,97,114,105,101,115,32,116,104,97,
                116,32,116,104,101,32,112,114,111,99,101,115,115,32,104,97,
                115,32,114,101,102,101,114,101,110,99,101,115,32,116,111,46,
                32,84,104,101,32,118,105,114,116,117,97,108,32,98,105,110,97,
                114,121,32,104,101,97,112,32,97,108,115,111,32,104,97,115,32,
                97,32,108,105,109,105,116,32,97,110,100,32,103,114,111,119,
                115,32,97,110,100,32,115,104,114,105,110,107,115,32,100,101,
                112,101,110,100,105,110,103,32,111,110,32,104,111,119,32,111,
                102,102,45,104,101,97,112,32,98,105,110,97,114,105,101,115,32,
                97,114,101,32,117,115,101,100,32,98,121,32,116,104,101,32,112,
                114,111,99,101,115,115,46,32,84,104,101,32,115,97,109,101,32,
                103,114,111,119,116,104,32,97,110,100,32,115,104,114,105,110,
                107,32,109,101,99,104,97,110,105,115,109,115,32,97,114,101,32,
                117,115,101,100,32,102,111,114,32,116,104,101,32,98,105,110,
                97,114,121,32,104,101,97,112,32,97,110,100,32,102,111,114,32,
                116,104,101,32,116,101,114,109,32,104,101,97,112,44,32,115,
                111,32,102,105,114,115,116,32,97,32,70,105,98,111,110,97,99,
                99,105,32,108,105,107,101,32,115,101,114,105,101,115,32,97,
                110,100,32,116,104,101,110,32,50,48,37,32,103,114,111,119,116,
                104,46]}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,"*The virtual binary heap exists in order to"}],
               0,false},
              {text,
               "Y[trigger](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/beam_emu.c#L364)"},
              {sep,
               [{text,
                 "øgarbage collections earlier when potentially there is a very large amount of off-heap binary data that could be reclaimed. This approach does not catch all problems with binary memory not being released soon enough, but it does catch a lot of them."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}}],
      0,false}],
    0,false}},
  {sep,
   [{text,
     [31,60,97,32,110,97,109,101,61,34,77,101,115,115,97,103,101,115,34,62,77,
      101,115,115,97,103,101,115,60,47,97,62]},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v## Messages"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "¦Messages can become a part of the process heap at different times. This depends on how the process is configured. We can configure the behaviour of each process using"}],
            0,false},
           {text,"6*process_flag(message_queue_data, off_heap | on_heap)*"},
           {sep,
            [{text,
              "Cor we can set a default for all processes at start using the option"}],
            0,false},
           {text,[7,42,43,104,109,113,100,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "ØWhat do these different configurations do and when should we use them? Let's start by going through what happens when one Erlang process sends a message to another. The sending process needs to do a couple of things:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,[{text,"\tcalculate"}],0,false},
            {text,
             "_[how large](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_message.c#L1031)"},
            {sep,
             [{text,
               [25,116,104,101,32,109,101,115,115,97,103,101,32,116,111,32,98,
                101,32,115,101,110,116,32,105,115]}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             "k[allocate enough space](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_message.c#L1033)"},
            {sep,
             [{text,
               [25,116,111,32,102,105,116,32,116,104,101,32,101,110,116,105,
                114,101,32,109,101,115,115,97,103,101]}],
             0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            "Z[copy](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_message.c#L1040)"},
           {sep,
            [{text,
              [19,116,104,101,32,109,101,115,115,97,103,101,32,112,97,121,108,
               111,97,100]}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {text,"0allocate a message container with some meta data"}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          "[[insert](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_message.c#L502)"},
         {sep,
          [{text,".the message container in the receiver process'"}],
          0,false},
         {text,
          "c[message queue](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_process.h#L1042)"}],
        0,false}],
      0,false}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [16,84,104,101,32,112,114,111,99,101,115,115,32,102,108,97,
               103]}],
            0,false},
           {text,
            [20,42,109,101,115,115,97,103,101,95,113,117,101,117,101,95,100,
             97,116,97,42]},
           {sep,
            [{text,
              "¦, of the receiver process, controls the message allocating strategy of the sender process in step 2 and also how the message data is treated by the garbage collector."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "¢The procedure above is different from how it worked prior to 19.0. Before 19.0 there was no configuration option, the behaviour was always very similar to how the"}],
            0,false},
           {text,"\t*on_heap*"},
           {sep,
            [{text,
              [18,111,112,116,105,111,110,32,105,115,32,105,110,32,49,57,46,
               48,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,
       "[<a name=\"Messages_Message-allocating-strategies\">Messages_Message-allocating-strategies</a>"},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text," ## Message allocating strategies"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\tIf set to"}],0,false},
             {text,"\t*on_heap*"},
             {sep,
              [{text,
                "¿, the sending process will first attempt to allocate the space for the message directly on the young heap block of the receiving process. This is not always possible as it requires taking the"}],
              0,false},
             {text,"\r**main lock**"},
             {sep,
              [{text,
                [330,111,102,32,116,104,101,32,114,101,99,101,105,118,105,110,
                 103,32,112,114,111,99,101,115,115,46,32,84,104,101,32,109,97,
                 105,110,32,108,111,99,107,32,105,115,32,97,108,115,111,32,
                 104,101,108,100,32,119,104,101,110,32,116,104,101,32,112,114,
                 111,99,101,115,115,32,105,115,32,101,120,101,99,117,116,105,
                 110,103,46,32,84,104,101,32,112,111,115,115,105,98,105,108,
                 105,116,121,32,102,111,114,32,97,32,108,111,99,107,32,99,111,
                 110,102,108,105,99,116,32,105,115,32,116,104,117,115,32,108,
                 105,107,101,108,121,32,105,110,32,97,110,32,105,110,116,101,
                 110,115,101,108,121,32,99,111,108,108,97,98,111,114,97,116,
                 105,110,103,32,115,121,115,116,101,109,46,32,73,102,32,116,
                 104,101,32,115,101,110,100,105,110,103,32,112,114,111,99,101,
                 115,115,32,99,97,110,110,111,116,32,97,99,113,117,105,114,
                 101,32,116,104,101,32,109,97,105,110,32,108,111,99,107,44,32,
                 97,32,104,101,97,112,32,102,114,97,103,109,101,110,116,32,
                 105,115,32,105,110,115,116,101,97,100,32,99,114,101,97,116,
                 101,100,32,102,111,114,32,116,104,101,32,109,101,115,115,97,
                 103,101,32,97,110,100,32,116,104,101,32,109,101,115,115,97,
                 103,101,32,112,97,121,108,111,97,100,32,105,115,32,99,111,
                 112,105,101,100,32,111,110,116,111,32,116,104,97,116,46,32,
                 87,105,116,104,32,116,104,101]}],
              0,false},
             {text,"\n*off_heap*"},
             {sep,
              [{text,
                "Zoption the sender process always creates heap fragments for messages sent to that process."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [127,84,104,101,114,101,32,97,114,101,32,97,32,98,117,110,99,
               104,32,111,102,32,100,105,102,102,101,114,101,110,116,32,116,
               114,97,100,101,111,102,102,115,32,116,104,97,116,32,99,111,109,
               101,32,105,110,116,111,32,112,108,97,121,32,119,104,101,110,32,
               116,114,121,105,110,103,32,116,111,32,102,105,103,117,114,101,
               32,111,117,116,32,119,104,105,99,104,32,111,102,32,116,104,101,
               32,115,116,114,97,116,101,103,105,101,115,32,121,111,117,32,
               119,97,110,116,32,116,111,32,117,115,101,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[5,85,115,105,110,103]}],0,false},
             {text,"\n*off_heap*"},
             {sep,
              [{text,
                [362,109,97,121,32,115,101,101,109,32,108,105,107,101,32,97,
                 32,110,105,99,101,32,119,97,121,32,116,111,32,103,101,116,32,
                 97,32,109,111,114,101,32,115,99,97,108,97,98,108,101,32,115,
                 121,115,116,101,109,32,97,115,32,121,111,117,32,103,101,116,
                 32,118,101,114,121,32,108,105,116,116,108,101,32,99,111,110,
                 116,101,110,116,105,111,110,32,111,110,32,116,104,101,32,109,
                 97,105,110,32,108,111,99,107,115,44,32,104,111,119,101,118,
                 101,114,44,32,97,108,108,111,99,97,116,105,110,103,32,97,32,
                 104,101,97,112,32,102,114,97,103,109,101,110,116,32,105,115,
                 32,109,111,114,101,32,101,120,112,101,110,115,105,118,101,32,
                 116,104,97,110,32,97,108,108,111,99,97,116,105,110,103,32,
                 111,110,32,116,104,101,32,104,101,97,112,32,111,102,32,116,
                 104,101,32,114,101,99,101,105,118,105,110,103,32,112,114,111,
                 99,101,115,115,46,32,83,111,32,105,102,32,105,116,32,105,115,
                 32,118,101,114,121,32,117,110,108,105,107,101,108,121,32,116,
                 104,97,116,32,99,111,110,116,101,110,116,105,111,110,32,119,
                 105,108,108,32,111,99,99,117,114,44,32,105,116,32,105,115,32,
                 109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,
                 111,32,116,114,121,32,116,111,32,97,108,108,111,99,97,116,
                 101,32,116,104,101,32,109,101,115,115,97,103,101,32,100,105,
                 114,101,99,116,108,121,32,111,110,32,116,104,101,32,114,101,
                 99,101,105,118,105,110,103,32,112,114,111,99,101,115,115,39,
                 32,104,101,97,112,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[5,85,115,105,110,103]}],0,false},
             {text,"\t*on_heap*"},
             {sep,
              [{text,
                [993,119,105,108,108,32,102,111,114,99,101,32,97,108,108,32,
                 109,101,115,115,97,103,101,115,32,116,111,32,98,101,32,112,
                 97,114,116,32,111,102,32,111,110,32,116,104,101,32,121,111,
                 117,110,103,32,104,101,97,112,32,119,104,105,99,104,32,119,
                 105,108,108,32,105,110,99,114,101,97,115,101,32,116,104,101,
                 32,97,109,111,117,110,116,32,111,102,32,100,97,116,97,32,116,
                 104,97,116,32,116,104,101,32,103,97,114,98,97,103,101,32,99,
                 111,108,108,101,99,116,111,114,32,104,97,115,32,116,111,32,
                 109,111,118,101,46,32,83,111,32,105,102,32,97,32,103,97,114,
                 98,97,103,101,32,99,111,108,108,101,99,116,105,111,110,32,
                 105,115,32,116,114,105,103,103,101,114,101,100,32,119,104,
                 105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,97,
                 32,108,97,114,103,101,32,97,109,111,117,110,116,32,111,102,
                 32,109,101,115,115,97,103,101,115,44,32,116,104,101,121,32,
                 119,105,108,108,32,98,101,32,99,111,112,105,101,100,32,116,
                 111,32,116,104,101,32,121,111,117,110,103,32,104,101,97,112,
                 46,32,84,104,105,115,32,105,110,32,116,117,114,110,32,119,
                 105,108,108,32,108,101,97,100,32,116,111,32,116,104,97,116,
                 32,116,104,101,32,109,101,115,115,97,103,101,115,32,119,105,
                 108,108,32,113,117,105,99,107,108,121,32,98,101,32,112,114,
                 111,109,111,116,101,100,32,116,111,32,116,104,101,32,111,108,
                 100,32,104,101,97,112,32,97,110,100,32,116,104,117,115,32,
                 105,110,99,114,101,97,115,101,32,105,116,115,32,115,105,122,
                 101,46,32,84,104,105,115,32,109,97,121,32,98,101,32,103,111,
                 111,100,32,111,114,32,98,97,100,32,100,101,112,101,110,100,
                 105,110,103,32,111,110,32,101,120,97,99,116,108,121,32,119,
                 104,97,116,32,116,104,101,32,112,114,111,99,101,115,115,32,
                 100,111,101,115,46,32,65,32,108,97,114,103,101,32,111,108,
                 100,32,104,101,97,112,32,109,101,97,110,115,32,116,104,97,
                 116,32,116,104,101,32,121,111,117,110,103,32,104,101,97,112,
                 32,119,105,108,108,32,97,108,115,111,32,98,101,32,108,97,114,
                 103,101,114,44,32,119,104,105,99,104,32,105,110,32,116,117,
                 114,110,32,109,101,97,110,115,32,116,104,97,116,32,108,101,
                 115,115,32,103,97,114,98,97,103,101,32,99,111,108,108,101,99,
                 116,105,111,110,115,32,119,105,108,108,32,98,101,32,116,114,
                 105,103,103,101,114,101,100,32,119,104,105,108,101,32,112,
                 114,111,99,101,115,115,105,110,103,32,116,104,101,32,109,101,
                 115,115,97,103,101,32,113,117,101,117,101,46,32,84,104,105,
                 115,32,119,105,108,108,32,116,101,109,112,111,114,97,114,108,
                 121,32,105,110,99,114,101,97,115,101,32,116,104,101,32,116,
                 104,114,111,117,103,104,112,117,116,32,111,102,32,116,104,
                 101,32,112,114,111,99,101,115,115,32,97,116,32,116,104,101,
                 32,99,111,115,116,32,111,102,32,109,111,114,101,32,109,101,
                 109,111,114,121,32,117,115,97,103,101,46,32,72,111,119,101,
                 118,101,114,44,32,105,102,32,97,102,116,101,114,32,97,108,
                 108,32,116,104,101,32,109,101,115,115,97,103,101,115,32,104,
                 97,118,101,32,98,101,101,110,32,99,111,110,115,117,109,101,
                 100,32,116,104,101,32,112,114,111,99,101,115,115,32,101,110,
                 116,101,114,115,32,97,32,115,116,97,116,101,32,119,104,101,
                 114,101,32,97,32,108,111,116,32,108,101,115,115,32,109,101,
                 115,115,97,103,101,115,32,97,114,101,32,98,101,105,110,103,
                 32,114,101,99,101,105,118,101,100,46,32,84,104,101,110,32,
                 105,116,32,109,97,121,32,98,101,32,97,32,108,111,110,103,32,
                 116,105,109,101,32,98,101,102,111,114,101,32,116,104,101,32,
                 110,101,120,116,32,102,117,108,108,115,119,101,101,112,32,
                 103,97,114,98,97,103,101,32,99,111,108,108,101,99,116,105,
                 111,110,32,104,97,112,112,101,110,115,32,97,110,100,32,116,
                 104,101,32,109,101,115,115,97,103,101,115,32,116,104,97,116,
                 32,97,114,101,32,111,110,32,116,104,101,32,111,108,100,32,
                 104,101,97,112,32,119,105,108,108,32,98,101,32,116,104,101,
                 114,101,32,117,110,116,105,108,32,116,104,97,116,32,104,97,
                 112,112,101,110,115,46,32,83,111,32,119,104,105,108,101]}],
              0,false},
             {text,"\t*on_heap*"},
             {sep,
              [{text,
                "¹is potentially faster than the other modes, it uses more memory for a longer time. This mode is the legacy mode which is almost how the message queue was handled before Erlang/OTP 19.0."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÕWhich one of these strategies is best depends a lot on what the process is doing and how it interacts with other processes. So, as always, profile the application and see how it behaves with the different options."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{text,"#<a name=\"References\">References</a>"},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\r## References"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [97,67,46,32,74,46,32,67,104,101,110,101,121,46,32,65,32,110,111,
            110,114,101,99,117,114,115,105,118,101,32,108,105,115,116,32,99,
            111,109,112,97,99,116,105,110,103,32,97,108,103,111,114,105,116,
            104,109,46,32,67,111,109,109,117,110,46,32,65,67,77,44,32,49,51,
            40,49,49,41,58,54,55,55,226,128,147,54,55,56,44,32,78,111,118,46,
            32,49,57,55,48,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [151,68,46,32,85,110,103,97,114,46,32,71,101,110,101,114,97,116,
            105,111,110,32,115,99,97,118,101,110,103,105,110,103,58,32,65,32,
            110,111,110,45,100,105,115,114,117,112,116,105,118,101,32,104,105,
            103,104,32,112,101,114,102,111,114,109,97,110,99,101,32,115,116,
            111,114,97,103,101,32,114,101,99,108,97,109,97,116,105,111,110,32,
            97,108,103,111,114,105,116,104,109,46,32,83,73,71,83,79,70,84,32,
            83,111,102,116,119,46,32,69,110,103,46,32,78,111,116,101,115,44,
            32,57,40,51,41,58,49,53,55,226,128,147,49,54,55,44,32,65,112,114,
            46,32,49,57,56,52,46]}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
