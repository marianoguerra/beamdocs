{above,
 {above,
  {above,
   {above,
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,[15,35,32,83,117,112,101,114,32,67,97,114,114,105,101,114]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [127,65,32,115,117,112,101,114,32,99,97,114,114,105,101,114,32,
             105,115,32,108,97,114,103,101,32,109,101,109,111,114,121,32,97,
             114,101,97,44,32,97,108,108,111,99,97,116,101,100,32,97,116,32,
             86,77,32,115,116,97,114,116,44,32,119,104,105,99,104,32,99,97,
             110,32,98,101,32,117,115,101,100,32,100,117,114,105,110,103,32,
             114,117,110,116,105,109,101,32,116,111,32,97,108,108,111,99,97,
             116,101,32,110,111,114,109,97,108,32,99,97,114,114,105,101,114,
             115,32,102,114,111,109,46]}],
          0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [156,84,104,101,32,115,117,112,101,114,32,99,97,114,114,105,101,
            114,32,102,101,97,116,117,114,101,32,119,97,115,32,105,110,116,
            114,111,100,117,99,101,100,32,105,110,32,79,84,80,32,82,49,54,66,
            48,51,46,32,73,116,32,105,115,32,101,110,97,98,108,101,100,32,119,
            105,116,104,32,99,111,109,109,97,110,100,32,108,105,110,101,32,
            111,112,116,105,111,110,32,43,77,77,115,99,115,32,60,115,105,122,
            101,32,105,110,32,77,98,62,32,97,110,100,32,99,97,110,32,98,101,
            32,99,111,110,102,105,103,117,114,101,100,32,119,105,116,104,32,
            111,116,104,101,114,32,111,112,116,105,111,110,115,46]}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{text,
     [29,60,97,32,110,97,109,101,61,34,80,114,111,98,108,101,109,34,62,80,114,
      111,98,108,101,109,60,47,97,62]},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\n## Problem"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [129,84,104,101,32,105,110,105,116,105,97,108,32,109,111,116,105,
             118,97,116,105,111,110,32,102,111,114,32,116,104,105,115,32,102,
             101,97,116,117,114,101,32,119,97,115,32,99,117,115,116,111,109,
             101,114,115,32,97,115,107,105,110,103,32,102,111,114,32,97,32,
             119,97,121,32,116,111,32,112,114,101,45,97,108,108,111,99,97,116,
             101,32,112,104,121,115,99,105,97,108,32,109,101,109,111,114,121,
             32,97,116,32,86,77,32,115,116,97,114,116,32,102,111,114,32,105,
             116,32,116,111,32,117,115,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "WOther problems were different experienced limitations of the OS implementation of mmap:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {text,
        "PIncreasingly bad performance of mmap/munmap as the number of mmap'ed areas grow."}],
      0,false},
     {sep,
      [{text,[1,42]},{text,",Fragmentation problem between mmap'ed areas."}],
      0,false}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "×A third problem was management of low memory in the halfword emulator. The implementation used a naive linear search structure to hold free segments which would lead to poor performance when fragmentation increased."}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{text,
    [31,60,97,32,110,97,109,101,61,34,83,111,108,117,116,105,111,110,34,62,83,
     111,108,117,116,105,111,110,60,47,97,62]},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## Solution"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "±Allocate one large continious area of address space at VM start and then use that area to satisfy our dynamic memory need during runtime. In other words: implement our own mmap."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,"3<a name=\"Solution_Use-cases\">Solution_Use-cases</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f## Use cases"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [432,73,102,32,99,111,109,109,97,110,100,32,108,105,110,101,32,
              111,112,116,105,111,110,32,43,77,77,115,99,114,112,109,32,40,82,
              101,115,101,114,118,101,32,80,104,121,115,105,99,97,108,32,77,
              101,109,111,114,121,41,32,105,115,32,115,101,116,32,116,111,32,
              102,97,108,115,101,44,32,111,110,108,121,32,118,105,114,116,117,
              97,108,32,115,112,97,99,101,32,105,115,32,97,108,108,111,99,97,
              116,101,100,32,102,111,114,32,116,104,101,32,115,117,112,101,
              114,32,99,97,114,114,105,101,114,32,102,114,111,109,32,115,116,
              97,114,116,46,32,84,104,101,32,115,117,112,101,114,32,99,97,114,
              114,105,101,114,32,116,104,101,110,32,97,99,116,115,32,97,115,
              32,97,110,32,34,97,108,116,101,114,110,97,116,105,118,101,32,
              109,109,97,112,34,32,105,109,112,108,101,109,101,110,116,97,116,
              105,111,110,32,119,105,116,104,111,117,116,32,99,104,97,110,103,
              105,110,103,32,116,104,101,32,99,111,110,115,117,109,112,116,
              105,111,110,32,111,102,32,112,104,121,115,105,99,97,108,32,109,
              101,109,111,114,121,32,112,97,103,101,115,46,32,80,104,121,115,
              105,99,97,108,32,112,97,103,101,115,32,119,105,108,108,32,98,
              101,32,114,101,115,101,114,118,101,100,32,111,110,32,100,101,
              109,97,110,100,32,119,104,101,110,32,97,110,32,97,108,108,111,
              99,97,116,105,111,110,32,105,115,32,100,111,110,101,32,102,114,
              111,109,32,116,104,101,32,115,117,112,101,114,32,99,97,114,114,
              105,101,114,32,97,110,100,32,98,101,32,117,110,114,101,115,101,
              114,118,101,100,32,119,104,101,110,32,116,104,101,32,109,101,
              109,111,114,121,32,105,115,32,114,101,108,101,97,115,101,100,32,
              98,97,99,107,32,116,111,32,116,104,101,32,115,117,112,101,114,
              32,99,97,114,114,105,101,114,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "·If +MMscrpm is set to true, which is default, the initial allocation will reserve physical memory for the entire super carrier. This can be used by users that want to ensure a certain"}],
             0,false},
            {text,"\v**minimum**"},
            {sep,[{text,"%amount of physical memory for the VM."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÚHowever, what reservation of physical memory actually means highly depends on the operating system, and how it is configured. For example, different memory overcommit settings on Linux drastically change the behaviour."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "6A third feature is to have the super carrier limit the"}],
             0,false},
            {text,"\v**maximum**"},
            {sep,
             [{text,
               [309,97,109,111,117,110,116,32,111,102,32,109,101,109,111,114,
                121,32,117,115,101,100,32,98,121,32,116,104,101,32,86,77,46,
                32,73,102,32,43,77,77,115,99,111,32,40,83,117,112,101,114,32,
                67,97,114,114,105,101,114,32,79,110,108,121,41,32,105,115,32,
                115,101,116,32,116,111,32,116,114,117,101,44,32,119,104,105,
                99,104,32,105,115,32,100,101,102,97,117,108,116,44,32,97,108,
                108,111,99,97,116,105,111,110,115,32,119,105,108,108,32,111,
                110,108,121,32,98,101,32,100,111,110,101,32,102,114,111,109,
                32,116,104,101,32,115,117,112,101,114,32,99,97,114,114,105,
                101,114,46,32,87,104,101,110,32,116,104,101,32,115,117,112,
                101,114,32,99,97,114,114,105,101,114,32,103,101,116,115,32,
                102,117,108,108,44,32,116,104,101,32,86,77,32,119,105,108,108,
                32,102,97,105,108,32,100,117,101,32,116,111,32,111,117,116,32,
                111,102,32,109,101,109,111,114,121,46,32,73,102,32,43,77,77,
                115,99,111,32,105,115,32,102,97,108,115,101,44,32,97,108,108,
                111,99,97,116,105,111,110,115,32,119,105,108,108,32,117,115,
                101,32,109,109,97,112,32,100,105,114,101,99,116,108,121,32,
                105,102,32,116,104,101,32,115,117,112,101,114,32,99,97,114,
                114,105,101,114,32,105,115,32,102,117,108,108,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{text,"=<a name=\"Solution_Implementation\">Solution_Implementation</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [17,35,35,32,73,109,112,108,101,109,101,110,116,97,116,105,111,110]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [133,84,104,101,32,101,110,116,105,114,101,32,115,117,112,101,
              114,32,99,97,114,114,105,101,114,32,105,109,112,108,101,109,101,
              110,116,97,116,105,111,110,32,105,115,32,107,101,112,116,32,105,
              110,32,101,114,108,95,109,109,97,112,46,99,46,32,84,104,101,32,
              110,97,109,101,32,115,117,103,103,101,115,116,32,116,104,97,116,
              32,105,116,32,99,97,110,32,98,101,32,118,105,101,119,101,100,32,
              97,115,32,111,117,114,32,111,119,110,32,109,109,97,112,32,105,
              109,112,108,101,109,101,110,116,97,116,105,111,110,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [265,65,32,115,117,112,101,114,32,99,97,114,114,105,101,114,32,
              110,101,101,100,115,32,116,111,32,115,97,116,105,115,102,121,32,
              116,119,111,32,115,108,105,103,104,116,108,121,32,100,105,102,
              102,101,114,101,110,116,32,107,105,110,100,115,32,111,102,32,97,
              108,108,111,99,97,116,105,111,110,32,114,101,113,117,101,115,
              116,115,59,32,109,117,108,116,105,32,98,108,111,99,107,32,99,97,
              114,114,105,101,114,115,32,40,77,66,67,41,32,97,110,100,32,115,
              105,110,103,108,101,32,98,108,111,99,107,32,99,97,114,114,105,
              101,114,115,32,40,83,66,67,41,46,32,84,104,101,121,32,97,114,
              101,32,98,111,116,104,32,114,97,116,104,101,114,32,108,97,114,
              103,101,32,98,108,111,99,107,115,32,111,102,32,99,111,110,116,
              105,110,105,111,117,115,32,109,101,109,111,114,121,44,32,98,117,
              116,32,77,66,67,115,32,97,110,100,32,83,66,67,115,32,104,97,118,
              101,32,100,105,102,102,101,114,101,110,116,32,100,101,109,97,
              110,100,115,32,111,110,32,97,108,105,103,110,109,101,110,116,32,
              97,110,100,32,115,105,122,101,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "GSBCs can have arbitrary size and do only need minimum 8-byte alignment."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [275,77,66,67,115,32,97,114,101,32,109,111,114,101,32,114,101,
              115,116,114,105,99,116,101,100,46,32,84,104,101,121,32,99,97,
              110,32,111,110,108,121,32,104,97,118,101,32,97,32,110,117,109,
              98,101,114,32,111,102,32,102,105,120,101,100,32,115,105,122,101,
              115,32,116,104,97,116,32,97,114,101,32,112,111,119,101,114,115,
              32,111,102,32,50,46,32,84,104,101,32,115,116,97,114,116,32,97,
              100,100,114,101,115,115,32,110,101,101,100,32,116,111,32,104,97,
              118,101,32,97,32,118,101,114,121,32,108,97,114,103,101,32,97,
              108,105,103,109,101,110,116,32,40,99,117,114,114,101,110,116,
              108,121,32,50,53,54,32,107,98,44,32,99,97,108,108,101,100,32,34,
              115,117,112,101,114,32,97,108,105,103,110,109,101,110,116,34,41,
              46,32,84,104,105,115,32,105,115,32,97,32,100,101,115,105,103,
              110,32,99,104,111,105,99,101,32,116,104,97,116,32,97,108,108,
              111,119,115,32,118,101,114,121,32,108,111,119,32,111,118,101,
              114,104,101,97,100,32,112,101,114,32,97,108,108,111,99,97,116,
              101,100,32,98,108,111,99,107,32,105,110,32,116,104,101,32,77,66,
              67,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [383,84,111,32,114,101,100,117,99,101,32,102,114,97,103,109,101,
              110,116,97,116,105,111,110,32,119,105,116,104,105,110,32,116,
              104,101,32,115,117,112,101,114,32,99,97,114,114,105,101,114,44,
              32,105,116,32,105,115,32,103,111,111,100,32,116,111,32,107,101,
              101,112,32,83,66,67,115,32,97,110,100,32,77,66,67,115,32,97,112,
              97,114,116,46,32,77,66,67,115,32,119,105,116,104,32,116,104,101,
              105,114,32,117,110,105,102,111,114,109,32,97,108,105,103,110,
              109,101,110,116,32,97,110,100,32,115,105,122,101,115,32,99,97,
              110,32,98,101,32,112,97,99,107,101,100,32,118,101,114,121,32,
              101,102,102,105,99,105,101,110,116,108,121,32,116,111,103,101,
              116,104,101,114,46,32,83,66,67,115,32,119,105,116,104,111,117,
              116,32,100,101,109,97,110,100,32,102,111,114,32,97,108,105,103,
              109,101,110,116,32,99,97,110,32,97,108,115,111,32,98,101,32,97,
              108,108,111,99,97,116,101,100,32,113,117,105,116,101,32,101,102,
              102,105,99,105,101,110,116,108,121,32,116,111,103,101,116,104,
              101,114,46,32,66,117,116,32,109,105,120,105,110,103,32,116,104,
              101,109,32,99,97,110,32,108,101,97,100,32,116,111,32,97,32,108,
              111,116,32,111,102,32,109,101,109,111,114,121,32,119,97,115,116,
              101,100,32,119,104,101,110,32,119,101,32,110,101,101,100,32,116,
              111,32,99,114,101,97,116,101,32,108,97,114,103,101,32,104,111,
              108,101,115,32,111,102,32,112,97,100,100,105,110,103,32,116,111,
              32,116,104,101,32,110,101,120,116,32,97,108,105,103,110,109,101,
              110,116,32,108,105,109,105,116,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÔThe super carrier thus contains two areas. One area for MBCs growing from the bottom and up. And one area for SBCs growing from the top and down. Like a process with a heap and a stack growing towards each other."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{text,
      "?<a name=\"Solution_Data-structures\">Solution_Data-structures</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [18,35,35,32,68,97,116,97,32,115,116,114,117,99,116,117,114,101,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [22,84,104,101,32,77,66,67,32,97,114,101,97,32,105,115,32,99,
                97,108,108,101,100]}],
             0,false},
            {text,[6,42,42,115,97,42,42]},
            {sep,
             [{text,".as in super aligned and the SBC area is called"}],
             0,false},
            {text,[7,42,42,115,117,97,42,42]},
            {sep,
             [{text,
               [23,97,115,32,105,110,32,115,117,112,101,114,32,117,110,45,97,
                108,105,103,110,101,100,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÑNote that the \"super\" in super alignment and the \"super\" in super carrier has nothing to do with each other. We could have choosen another naming to avoid confusion, such as \"meta\" carrier or \"giant\" aligment."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "¯\n+-------+ <---- sua.top\n|  sua  |\n|       |\n|-------| <---- sua.bot\n|       |\n|       |\n|       |\n|-------| <---- sa.top\n|       |\n|  sa   |\n|       |\n+-------+ <---- sa.bot\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [141,87,104,101,110,32,97,32,99,97,114,114,105,101,114,32,105,
                115,32,100,101,97,108,108,111,99,97,116,101,100,32,97,32,102,
                114,101,101,32,109,101,109,111,114,121,32,115,101,103,109,101,
                110,116,32,119,105,108,108,32,98,101,32,99,114,101,97,116,101,
                100,32,105,110,115,105,100,101,32,116,104,101,32,99,111,114,
                114,101,115,112,111,110,100,105,110,103,32,97,114,101,97,44,
                32,117,110,108,101,115,115,32,116,104,101,32,99,97,114,114,
                105,101,114,32,119,97,115,32,97,116,32,116,104,101,32,118,101,
                114,121,32,116,111,112,32,40,105,110]}],
             0,false},
            {text,[4,42,115,97,42]},
            {sep,
             [{text,
               [15,41,32,111,114,32,98,111,116,116,111,109,32,40,105,110]}],
             0,false},
            {text,[5,42,115,117,97,42]},
            {sep,
             [{text,"5) in which case the area will just shrink down or up."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [592,87,101,32,110,101,101,100,32,116,111,32,107,101,101,112,32,
              116,114,97,99,107,32,111,102,32,97,108,108,32,116,104,101,32,
              102,114,101,101,32,115,101,103,109,101,110,116,115,32,105,110,
              32,111,114,100,101,114,32,116,111,32,114,101,117,115,101,32,116,
              104,101,109,32,102,111,114,32,110,101,119,32,99,97,114,114,105,
              101,114,32,97,108,108,111,99,97,116,105,111,110,115,46,32,79,
              110,101,32,105,110,105,116,105,97,108,32,105,100,101,97,32,119,
              97,115,32,116,111,32,117,115,101,32,116,104,101,32,115,97,109,
              101,32,109,101,99,104,97,110,105,115,109,32,116,104,97,116,32,
              105,115,32,117,115,101,100,32,116,111,32,107,101,101,112,32,116,
              114,97,99,107,32,111,102,32,102,114,101,101,32,98,108,111,99,
              107,115,32,119,105,116,104,105,110,32,77,66,67,115,32,40,97,108,
              108,111,99,95,117,116,105,108,32,97,110,100,32,116,104,101,32,
              100,105,102,102,101,114,101,110,116,32,115,116,114,97,116,101,
              103,105,101,115,41,46,32,72,111,119,101,118,101,114,44,32,116,
              104,97,116,32,119,111,117,108,100,32,110,111,116,32,98,101,32,
              97,115,32,115,116,114,97,105,103,104,116,32,102,111,114,119,97,
              114,100,32,97,115,32,111,110,101,32,99,97,110,32,116,104,105,
              110,107,32,97,110,100,32,99,97,110,32,97,108,115,111,32,119,97,
              115,116,101,32,113,117,105,116,101,32,97,32,108,111,116,32,111,
              102,32,109,101,109,111,114,121,32,97,115,32,105,116,32,117,115,
              101,115,32,112,114,101,112,101,110,100,101,100,32,98,108,111,99,
              107,32,104,101,97,100,101,114,115,46,32,84,104,101,32,103,114,
              97,110,117,108,97,114,105,116,121,32,111,102,32,116,104,101,32,
              115,117,112,101,114,32,99,97,114,114,105,101,114,32,105,115,32,
              111,110,101,32,109,101,109,111,114,121,32,112,97,103,101,32,40,
              117,115,117,97,108,108,121,32,52,107,98,41,46,32,87,101,32,119,
              97,110,116,32,116,111,32,97,108,108,111,99,97,116,101,32,97,110,
              100,32,102,114,101,101,32,101,110,116,105,114,101,32,112,97,103,
              101,115,32,97,110,100,32,119,101,32,100,111,110,39,116,32,119,
              97,110,116,32,116,111,32,119,97,115,116,101,32,97,110,32,101,
              110,116,105,114,101,32,112,97,103,101,32,106,117,115,116,32,116,
              111,32,104,111,108,100,32,116,104,101,32,98,108,111,99,107,32,
              104,101,97,100,101,114,32,111,102,32,116,104,101,32,102,111,108,
              108,111,119,105,110,103,32,112,97,103,101,115,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "dInstead we store the meta information about all the free segments in a dedicated area apart from the"}],
             0,false},
            {text,[4,42,115,97,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[5,42,115,117,97,42]},
            {sep,
             [{text,
               "Aareas. Every free segment is represented by a descriptor struct ("}],
             0,false},
            {text,
             [17,42,69,114,116,115,70,114,101,101,83,101,103,68,101,115,99,
              42]},
            {sep,[{text,[2,41,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             " \ntypedef struct {\n    RBTNode snode;      /* node in 'stree' */\n    RBTNode anode;      /* node in 'atree' */\n    char* start;\n    char* end;\n}ErtsFreeSegDesc;\n"}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [143,84,111,32,102,105,110,100,32,116,104,101,32,115,109,97,
                108,108,101,115,116,32,102,114,101,101,32,115,101,103,109,101,
                110,116,32,116,104,97,116,32,119,105,108,108,32,115,97,116,
                105,115,102,121,32,97,32,99,97,114,114,105,101,114,32,97,108,
                108,111,99,97,116,105,111,110,32,40,98,101,115,116,32,102,105,
                116,41,44,32,116,104,101,32,102,114,101,101,32,115,101,103,
                109,101,110,116,115,32,97,114,101,32,111,114,103,97,110,105,
                122,101,100,32,105,110,32,97,32,116,114,101,101,32,115,111,
                114,116,101,100,32,98,121,32,115,105,122,101,32,40]}],
             0,false},
            {text,[7,42,115,116,114,101,101,42]},
            {sep,
             [{text,
               "d). We search in this tree at allocation. If no free segment of sufficient size was found, the area ("}],
             0,false},
            {text,[4,42,115,97,42]},
            {sep,[{text,[2,111,114]}],0,false},
            {text,[5,42,115,117,97,42]},
            {sep,
             [{text,
               "r) is instead expanded. If two or more free segments with equal size exist, the one at lowest address is chosen for"}],
             0,false},
            {text,[4,42,115,97,42]},
            {sep,
             [{text,
               [23,97,110,100,32,104,105,103,104,101,115,116,32,97,100,100,
                114,101,115,115,32,102,111,114]}],
             0,false},
            {text,[5,42,115,117,97,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "ÂAt carrier deallocation, we want to coalesce with any adjacent free segments, to form one large free segment. To do that, all free segments are also organized in a tree sorted in address order ("}],
             0,false},
            {text,[7,42,97,116,114,101,101,42]},
            {sep,[{text,[2,41,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "RSo, in total we keep four trees of free descriptors for the super carrier; two for"}],
             0,false},
            {text,[4,42,115,97,42]},
            {sep,[{text,"\vand two for"}],0,false},
            {text,[5,42,115,117,97,42]},
            {sep,
             [{text,
               "e. They all use the same red-black-tree implementation that support the different sorting orders used."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "AWhen allocating a new MBC we first search after a free segment in"}],
             0,false},
            {text,[4,42,115,97,42]},
            {sep,
             [{text,
               [19,44,32,116,104,101,110,32,116,114,121,32,116,111,32,114,97,
                105,115,101]}],
             0,false},
            {text,"\b*sa.top*"},
            {sep,
             [{text,
               ">, and then as a fallback try to search after a free segment in"}],
             0,false},
            {text,[5,42,115,117,97,42]},
            {sep,
             [{text,
               [29,46,32,87,104,101,110,32,97,110,32,77,66,67,32,105,115,32,
                97,108,108,111,99,97,116,101,100,32,105,110]}],
             0,false},
            {text,[5,42,115,117,97,42]},
            {sep,
             [{text,
               "§, a larger segment is allocated which is then trimmed to obtain the right alignment. Allocation search for an SBC is done in reverse order. When an SBC is allocated in"}],
             0,false},
            {text,[4,42,115,97,42]},
            {sep,
             [{text,"/, the size is aligned up to super aligned size."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{text,
      "Q<a name=\"Solution_The-free-descriptor-area\">Solution_The-free-descriptor-area</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\e## The free descriptor area"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [350,65,115,32,109,101,110,116,105,111,110,101,100,32,97,98,
                111,118,101,44,32,116,104,101,32,100,101,115,99,114,105,112,
                116,111,114,115,32,102,111,114,32,116,104,101,32,102,114,101,
                101,32,115,101,103,109,101,110,116,115,32,97,114,101,32,97,
                108,108,111,99,97,116,101,100,32,105,110,32,97,32,115,101,112,
                97,114,97,116,101,32,97,114,101,97,46,32,84,104,105,115,32,97,
                114,101,97,32,104,97,115,32,97,32,99,111,110,115,116,97,110,
                116,32,99,111,110,102,105,103,117,114,97,98,108,101,32,115,
                105,122,101,32,40,43,77,77,115,99,114,102,115,100,41,32,116,
                104,97,116,32,100,101,102,97,117,108,116,115,32,116,111,32,54,
                53,53,51,54,32,100,101,115,99,114,105,112,116,111,114,115,46,
                32,84,104,105,115,32,115,104,111,117,108,100,32,98,101,32,109,
                111,114,101,32,116,104,97,110,32,101,110,111,117,103,104,32,
                105,110,32,109,111,115,116,32,99,97,115,101,115,46,32,73,102,
                32,116,104,101,32,100,101,115,99,114,105,112,116,111,114,115,
                32,97,114,101,97,32,115,104,111,117,108,100,32,102,105,108,
                108,32,117,112,44,32,110,101,119,32,100,101,115,99,114,105,
                112,116,111,114,32,97,114,101,97,115,32,119,105,108,108,32,98,
                101,32,97,108,108,111,99,97,116,101,100,32,102,105,114,115,
                116,32,100,105,114,101,99,116,108,121,32,102,114,111,109,32,
                116,104,101,32,79,83,44,32,97,110,100,32,116,104,101,110,32,
                102,114,111,109]}],
             0,false},
            {text,[5,42,115,117,97,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,[4,42,115,97,42]},
            {sep,
             [{text,
               "Þin the super carrier, and lastly from the memory segment itself which is being deallocated. Allocating free descriptor areas from the super carrier is only a last resort, and should be avoided, as it creates fragmentation."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {sep,
    [{text,
      "C<a name=\"Solution_Halfword-emulator\">Solution_Halfword-emulator</a>"},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [20,35,35,32,72,97,108,102,119,111,114,100,32,101,109,117,108,97,116,
          111,114]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [338,84,104,101,32,104,97,108,102,119,111,114,100,32,101,109,117,
              108,97,116,111,114,32,117,115,101,115,32,116,104,101,32,115,117,
              112,101,114,32,99,97,114,114,105,101,114,32,105,109,112,108,101,
              109,101,110,116,97,116,105,111,110,32,116,111,32,109,97,110,97,
              103,101,32,105,116,115,32,108,111,119,32,109,101,109,111,114,
              121,32,109,97,112,112,105,110,103,115,32,116,104,97,114,32,97,
              114,101,32,110,101,101,100,101,100,32,102,111,114,32,97,108,108,
              32,116,101,114,109,32,115,116,111,114,97,103,101,46,32,84,104,
              101,32,115,117,112,101,114,32,99,97,114,114,105,101,114,32,99,
              97,110,32,104,101,114,101,32,110,111,116,32,98,101,32,99,111,
              110,102,105,103,117,114,101,100,32,98,121,32,99,111,109,109,97,
              110,100,32,108,105,110,101,32,111,112,116,105,111,110,115,46,32,
              79,110,101,32,99,111,117,108,100,32,105,109,97,103,105,110,101,
              32,97,32,115,101,99,111,110,100,32,99,111,110,102,105,103,117,
              114,97,98,108,101,32,105,110,115,116,97,110,99,101,32,111,102,
              32,116,104,101,32,115,117,112,101,114,32,99,97,114,114,105,101,
              114,32,117,115,101,100,32,98,121,32,104,105,103,104,32,109,101,
              109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,44,32,
              98,117,116,32,116,104,97,116,32,104,97,115,32,110,111,116,32,98,
              101,101,110,32,105,109,112,108,101,109,101,110,116,101,100,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
