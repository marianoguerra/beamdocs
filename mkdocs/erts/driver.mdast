{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,{above,{text,[0]},null},null},
        {above,{above,{text,"\e# How to Implement a Driver"},null},null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
            {sep,
             [{text,[4,32,32,32,32]},
              {sep,
               [{sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,
                            "äThis section was written a long time ago. Most of it is still valid, as it explains important concepts, but this was written for an older driver interface so the examples do not work anymore. The reader is encouraged to read the"}],
                          0,false},
                         {text,
                          [24,91,101,114,108,95,100,114,105,118,101,114,93,40,
                           101,114,108,95,100,114,105,118,101,114,41]},
                         {sep,[{text,[3,97,110,100]}],0,false},
                         {text,
                          [28,91,100,114,105,118,101,114,95,101,110,116,114,
                           121,93,40,100,114,105,118,101,114,95,101,110,116,
                           114,121,41]},
                         {sep,
                          [{text,
                            [19,100,111,99,117,109,101,110,116,97,116,105,111,
                             110,32,97,108,115,111,46]}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false}],
               0,true}],
             0,false}},
           {text,[0]}},
          null},
         null}}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,[15,35,35,32,73,110,116,114,111,100,117,99,116,105,111,110]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "?This section describes how to build your own driver for Erlang."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                [259,65,32,100,114,105,118,101,114,32,105,110,32,69,114,108,
                 97,110,103,32,105,115,32,97,32,108,105,98,114,97,114,121,32,
                 119,114,105,116,116,101,110,32,105,110,32,67,44,32,119,104,
                 105,99,104,32,105,115,32,108,105,110,107,101,100,32,116,111,
                 32,116,104,101,32,69,114,108,97,110,103,32,101,109,117,108,
                 97,116,111,114,32,97,110,100,32,99,97,108,108,101,100,32,102,
                 114,111,109,32,69,114,108,97,110,103,46,32,68,114,105,118,
                 101,114,115,32,99,97,110,32,98,101,32,117,115,101,100,32,119,
                 104,101,110,32,67,32,105,115,32,109,111,114,101,32,115,117,
                 105,116,97,98,108,101,32,116,104,97,110,32,69,114,108,97,110,
                 103,44,32,116,111,32,115,112,101,101,100,32,117,112,32,116,
                 104,105,110,103,115,44,32,111,114,32,116,111,32,112,114,111,
                 118,105,100,101,32,97,99,99,101,115,115,32,116,111,32,79,83,
                 32,114,101,115,111,117,114,99,101,115,32,110,111,116,32,100,
                 105,114,101,99,116,108,121,32,97,99,99,101,115,115,105,98,
                 108,101,32,102,114,111,109,32,69,114,108,97,110,103,46]}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                [279,65,32,100,114,105,118,101,114,32,99,97,110,32,98,101,32,
                 100,121,110,97,109,105,99,97,108,108,121,32,108,111,97,100,
                 101,100,44,32,97,115,32,97,32,115,104,97,114,101,100,32,108,
                 105,98,114,97,114,121,32,40,107,110,111,119,110,32,97,115,32,
                 97,32,68,76,76,32,111,110,32,87,105,110,100,111,119,115,41,
                 44,32,111,114,32,115,116,97,116,105,99,97,108,108,121,32,108,
                 111,97,100,101,100,44,32,108,105,110,107,101,100,32,119,105,
                 116,104,32,116,104,101,32,101,109,117,108,97,116,111,114,32,
                 119,104,101,110,32,105,116,32,105,115,32,99,111,109,112,105,
                 108,101,100,32,97,110,100,32,108,105,110,107,101,100,46,32,
                 79,110,108,121,32,100,121,110,97,109,105,99,97,108,108,121,
                 32,108,111,97,100,101,100,32,100,114,105,118,101,114,115,32,
                 97,114,101,32,100,101,115,99,114,105,98,101,100,32,104,101,
                 114,101,44,32,115,116,97,116,105,99,97,108,108,121,32,108,
                 105,110,107,101,100,32,100,114,105,118,101,114,115,32,97,114,
                 101,32,98,101,121,111,110,100,32,116,104,101,32,115,99,111,
                 112,101,32,111,102,32,116,104,105,115,32,115,101,99,116,105,
                 111,110,46]}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,
              [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,114,110,
               105,110,103,34]},
             {sep,
              [{text,[4,32,32,32,32]},
               {sep,
                [{sep,
                  [{above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{text,
                           [268,87,104,101,110,32,97,32,100,114,105,118,101,
                            114,32,105,115,32,108,111,97,100,101,100,32,105,
                            116,32,105,115,32,101,120,101,99,117,116,101,100,
                            32,105,110,32,116,104,101,32,99,111,110,116,101,
                            120,116,32,111,102,32,116,104,101,32,101,109,117,
                            108,97,116,111,114,44,32,115,104,97,114,101,115,
                            32,116,104,101,32,115,97,109,101,32,109,101,109,
                            111,114,121,32,97,110,100,32,116,104,101,32,115,
                            97,109,101,32,116,104,114,101,97,100,46,32,84,104,
                            105,115,32,109,101,97,110,115,32,116,104,97,116,
                            32,97,108,108,32,111,112,101,114,97,116,105,111,
                            110,115,32,105,110,32,116,104,101,32,100,114,105,
                            118,101,114,32,109,117,115,116,32,98,101,32,110,
                            111,110,45,98,108,111,99,107,105,110,103,44,32,97,
                            110,100,32,116,104,97,116,32,97,110,121,32,99,114,
                            97,115,104,32,105,110,32,116,104,101,32,100,114,
                            105,118,101,114,32,98,114,105,110,103,115,32,116,
                            104,101,32,119,104,111,108,101,32,101,109,117,108,
                            97,116,111,114,32,100,111,119,110,46,32,73,110,32,
                            115,104,111,114,116,44,32,98,101,32,99,97,114,101,
                            102,117,108,46]}],
                         0,false}],
                       0,true},
                      null},
                     null}}],
                  0,false}],
                0,true}],
              0,false}},
            {text,[0]}},
           null},
          null}}],
       0,false}},
     {sep,
      [{above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {text,[16,35,35,32,83,97,109,112,108,101,32,68,114,105,118,101,114]},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "ÀThis section describes a simple driver for accessing a postgres database using the libpq C client library. Postgres is used because it is free and open source. For information on postgres, see"}],
               0,false},
              {text,"+[www.postgres.org](http://www.postgres.org)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "îThe driver is synchronous, it uses the synchronous calls of the client library. This is only for simplicity, but not good, as it halts the emulator while waiting for the database. This is improved below with an asynchronous sample driver."}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "YThe code is straightforward: all communication between Erlang and the driver is done with"}],
               0,false},
              {text,
               [16,42,112,111,114,116,95,99,111,110,116,114,111,108,47,51,42]},
              {sep,
               [{text,",, and the driver returns data back using the"}],
               0,false},
              {text,[6,42,114,98,117,102,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "dAn Erlang driver only exports one function: the driver entry function. This is defined with a macro,"}],
               0,false},
              {text,"\r*DRIVER_INIT*"},
              {sep,[{text," , which returns a pointer to a C"}],0,false},
              {text,"\b*struct*"},
              {sep,
               [{text,
                 "Bcontaining the entry points that are called from the emulator. The"}],
               0,false},
              {text,"\b*struct*"},
              {sep,
               [{text,
                 "Fdefines the entries that the emulator calls to call the driver, with a"}],
               0,false},
              {text,[6,42,78,85,76,76,42]},
              {sep,
               [{text,
                 "@pointer for entries that are not defined and used by the driver."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,[7,42,115,116,97,114,116,42]},
              {sep,
               [{text,
                 "8entry is called when the driver is opened as a port with"}],
               0,false},
              {text,"\r*open_port/2*"},
              {sep,
               [{text,
                 [319,46,32,72,101,114,101,32,119,101,32,97,108,108,111,99,97,
                  116,101,32,109,101,109,111,114,121,32,102,111,114,32,97,32,
                  117,115,101,114,32,100,97,116,97,32,115,116,114,117,99,116,
                  117,114,101,46,32,84,104,105,115,32,117,115,101,114,32,100,
                  97,116,97,32,105,115,32,112,97,115,115,101,100,32,101,118,
                  101,114,121,32,116,105,109,101,32,116,104,101,32,101,109,
                  117,108,97,116,111,114,32,99,97,108,108,115,32,117,115,46,
                  32,70,105,114,115,116,32,119,101,32,115,116,111,114,101,32,
                  116,104,101,32,100,114,105,118,101,114,32,104,97,110,100,
                  108,101,44,32,97,115,32,105,116,32,105,115,32,110,101,101,
                  100,101,100,32,105,110,32,108,97,116,101,114,32,99,97,108,
                  108,115,46,32,87,101,32,97,108,108,111,99,97,116,101,32,109,
                  101,109,111,114,121,32,102,111,114,32,116,104,101,32,99,111,
                  110,110,101,99,116,105,111,110,32,104,97,110,100,108,101,32,
                  116,104,97,116,32,105,115,32,117,115,101,100,32,98,121,32,
                  76,105,98,80,81,46,32,87,101,32,97,108,115,111,32,115,101,
                  116,32,116,104,101,32,112,111,114,116,32,116,111,32,114,101,
                  116,117,114,110,32,97,108,108,111,99,97,116,101,100,32,100,
                  114,105,118,101,114,32,98,105,110,97,114,105,101,115,44,32,
                  98,121,32,115,101,116,116,105,110,103,32,102,108,97,103]}],
               0,false},
              {text,
               [26,42,80,79,82,84,95,67,79,78,84,82,79,76,95,70,76,65,71,95,
                66,73,78,65,82,89,42]},
              {sep,[{text,"\t, calling"}],0,false},
              {text,
               [24,42,115,101,116,95,112,111,114,116,95,99,111,110,116,114,
                111,108,95,102,108,97,103,115,42]},
              {sep,
               [{text,
                 "N. (This is because we do not know if our data will fit in the result buffer of"}],
               0,false},
              {text,"\t*control*"},
              {sep,
               [{text,
                 ">, which has a default size, 64 bytes, set up by the emulator.)"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\bAn entry"}],0,false},
              {text,[6,42,105,110,105,116,42]},
              {sep,
               [{text,
                 "¦is called when the driver is loaded. However, we do not use this, as it is executed only once, and we want to have the possibility of several instances of the driver."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,[6,42,115,116,111,112,42]},
              {sep,
               [{text,"(entry is called when the port is closed."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[3,84,104,101]}],0,false},
              {text,"\t*control*"},
              {sep,
               [{text,
                 "<entry is called from the emulator when the Erlang code calls"}],
               0,false},
              {text,
               [16,42,112,111,114,116,95,99,111,110,116,114,111,108,47,51,42]},
              {sep,
               [{text,
                 "B, to do the actual work. We have defined a simple set of commands:"}],
               0,false},
              {text,"\t*connect*"},
              {sep,
               [{text,
                 [26,116,111,32,108,111,103,32,105,110,32,116,111,32,116,104,
                  101,32,100,97,116,97,98,97,115,101,44]}],
               0,false},
              {text,"\f*disconnect*"},
              {sep,
               [{text,
                 [15,116,111,32,108,111,103,32,111,117,116,44,32,97,110,100]}],
               0,false},
              {text,"\b*select*"},
              {sep,
               [{text,
                 "Hto send a SQL-query and get the result. All results are returned through"}],
               0,false},
              {text,[6,42,114,98,117,102,42]},
              {sep,[{text,"\r. The library"}],0,false},
              {text,[4,42,101,105,42]},
              {sep,[{text,[2,105,110]}],0,false},
              {text,
               [15,42,101,114,108,95,105,110,116,101,114,102,97,99,101,42]},
              {sep,
               [{text,
                 "his used to encode data in binary term format. The result is returned to the emulator as binary terms, so"}],
               0,false},
              {text,
               [16,42,98,105,110,97,114,121,95,116,111,95,116,101,114,109,42]},
              {sep,
               [{text,
                 "7is called in Erlang to convert the result to term form."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [24,84,104,101,32,99,111,100,101,32,105,115,32,97,118,97,105,
                  108,97,98,108,101,32,105,110]}],
               0,false},
              {text,"\v*pg_sync.c*"},
              {sep,[{text,[6,105,110,32,116,104,101]}],0,false},
              {text,"\b*sample*"},
              {sep,[{text,"\fdirectory of"}],0,false},
              {text,[6,42,101,114,116,115,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "bThe driver entry contains the functions that will be called by the emulator. In this example, only"}],
               0,false},
              {text,[7,42,115,116,97,114,116,42]},
              {sep,[{text,[1,44]}],0,false},
              {text,[6,42,115,116,111,112,42]},
              {sep,[{text,[5,44,32,97,110,100]}],0,false},
              {text,"\t*control*"},
              {sep,[{text,"\rare provided:"}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [967,10,47,42,32,68,114,105,118,101,114,32,105,110,116,101,114,
                102,97,99,101,32,100,101,99,108,97,114,97,116,105,111,110,115,
                32,42,47,10,115,116,97,116,105,99,32,69,114,108,68,114,118,68,
                97,116,97,32,115,116,97,114,116,40,69,114,108,68,114,118,80,
                111,114,116,32,112,111,114,116,44,32,99,104,97,114,32,42,99,
                111,109,109,97,110,100,41,59,10,115,116,97,116,105,99,32,118,
                111,105,100,32,115,116,111,112,40,69,114,108,68,114,118,68,97,
                116,97,32,100,114,118,95,100,97,116,97,41,59,10,115,116,97,
                116,105,99,32,105,110,116,32,99,111,110,116,114,111,108,40,69,
                114,108,68,114,118,68,97,116,97,32,100,114,118,95,100,97,116,
                97,44,32,117,110,115,105,103,110,101,100,32,105,110,116,32,99,
                111,109,109,97,110,100,44,32,99,104,97,114,32,42,98,117,102,
                44,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,105,110,116,32,108,101,110,44,32,99,104,97,114,32,42,42,
                114,98,117,102,44,32,105,110,116,32,114,108,101,110,41,59,32,
                10,10,115,116,97,116,105,99,32,69,114,108,68,114,118,69,110,
                116,114,121,32,112,113,95,100,114,105,118,101,114,95,101,110,
                116,114,121,32,61,32,123,10,32,32,32,32,78,85,76,76,44,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,47,42,32,105,110,105,116,32,42,47,10,32,32,32,32,115,
                116,97,114,116,44,10,32,32,32,32,115,116,111,112,44,10,32,32,
                32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,47,42,32,111,117,116,112,117,
                116,32,42,47,10,32,32,32,32,78,85,76,76,44,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,
                32,114,101,97,100,121,95,105,110,112,117,116,32,42,47,10,32,
                32,32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,114,101,97,100,
                121,95,111,117,116,112,117,116,32,42,47,10,32,32,32,32,34,112,
                103,95,115,121,110,99,34,44,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,47,42,32,116,104,101,32,110,97,109,
                101,32,111,102,32,116,104,101,32,100,114,105,118,101,114,32,
                42,47,10,32,32,32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,102,
                105,110,105,115,104,32,42,47,10,32,32,32,32,78,85,76,76,44,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,47,42,32,104,97,110,100,108,101,32,42,47,10,32,32,32,
                32,99,111,110,116,114,111,108,44,10,32,32,32,32,78,85,76,76,
                44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,47,42,32,116,105,109,101,111,117,116,32,42,47,
                10,32,32,32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,111,117,
                116,112,117,116,118,32,42,47,10,32,32,32,32,78,85,76,76,44,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,47,42,32,114,101,97,100,121,95,97,115,121,110,99,32,
                42,47,10,32,32,32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,102,
                108,117,115,104,32,42,47,10,32,32,32,32,78,85,76,76,44,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,47,42,32,99,97,108,108,32,42,47,10,32,32,32,32,78,85,76,
                76,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,47,42,32,101,118,101,110,116,32,42,47,10,
                125,59,10,32,32,32,32]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "sWe have a structure to store state needed by the driver, in this case we only need to keep the database connection:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "A\ntypedef struct our_data_s {\n    PGconn* conn;\n} our_data_t;\n    "}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "6The control codes that we have defined are as follows:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Ì\n/* Keep the following definitions in alignment with the\n * defines in erl_pq_sync.erl\n */\n\n#define DRV_CONNECT             'C'\n#define DRV_DISCONNECT          'D'\n#define DRV_SELECT              'S'\n    "}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,",This returns the driver structure. The macro"}],
               0,false},
              {text,"\r*DRIVER_INIT*"},
              {sep,
               [{text,
                 "rdefines the only exported function. All the other functions are static, and will not be exported from the library."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [260,10,47,42,32,73,78,73,84,73,65,76,73,90,65,84,73,79,78,32,
                65,70,84,69,82,32,76,79,65,68,73,78,71,32,42,47,10,10,47,42,
                32,10,32,42,32,84,104,105,115,32,105,115,32,116,104,101,32,
                105,110,105,116,32,102,117,110,99,116,105,111,110,32,99,97,
                108,108,101,100,32,97,102,116,101,114,32,116,104,105,115,32,
                100,114,105,118,101,114,32,104,97,115,32,98,101,101,110,32,
                108,111,97,100,101,100,46,10,32,42,32,73,116,32,109,117,115,
                116,32,42,110,111,116,42,32,98,101,32,100,101,99,108,97,114,
                101,100,32,115,116,97,116,105,99,46,32,77,117,115,116,32,114,
                101,116,117,114,110,32,116,104,101,32,97,100,100,114,101,115,
                115,32,116,111,32,10,32,42,32,116,104,101,32,100,114,105,118,
                101,114,32,101,110,116,114,121,46,10,32,42,47,10,10,68,82,73,
                86,69,82,95,73,78,73,84,40,112,113,95,100,114,118,41,10,123,
                10,32,32,32,32,114,101,116,117,114,110,32,38,112,113,95,100,
                114,105,118,101,114,95,101,110,116,114,121,59,10,125,10,32,32,
                32,32]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"!Here some initialization is done,"}],0,false},
              {text,[7,42,115,116,97,114,116,42]},
              {sep,
               [{text,
                 [14,105,115,32,99,97,108,108,101,100,32,102,114,111,109]}],
               0,false},
              {text,"\v*open_port*"},
              {sep,
               [{text,
                 [28,46,32,84,104,101,32,100,97,116,97,32,119,105,108,108,32,
                  98,101,32,112,97,115,115,101,100,32,116,111]}],
               0,false},
              {text,"\t*control*"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,[6,42,115,116,111,112,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [282,10,47,42,32,68,82,73,86,69,82,32,73,78,84,69,82,70,65,67,
                69,32,42,47,10,115,116,97,116,105,99,32,69,114,108,68,114,118,
                68,97,116,97,32,115,116,97,114,116,40,69,114,108,68,114,118,
                80,111,114,116,32,112,111,114,116,44,32,99,104,97,114,32,42,
                99,111,109,109,97,110,100,41,10,123,32,10,32,32,32,32,111,117,
                114,95,100,97,116,97,95,116,42,32,100,97,116,97,59,10,10,32,
                32,32,32,100,97,116,97,32,61,32,40,111,117,114,95,100,97,116,
                97,95,116,42,41,100,114,105,118,101,114,95,97,108,108,111,99,
                40,115,105,122,101,111,102,40,111,117,114,95,100,97,116,97,95,
                116,41,41,59,10,32,32,32,32,100,97,116,97,45,62,99,111,110,
                110,32,61,32,78,85,76,76,59,10,32,32,32,32,115,101,116,95,112,
                111,114,116,95,99,111,110,116,114,111,108,95,102,108,97,103,
                115,40,112,111,114,116,44,32,80,79,82,84,95,67,79,78,84,82,79,
                76,95,70,76,65,71,95,66,73,78,65,82,89,41,59,10,32,32,32,32,
                114,101,116,117,114,110,32,40,69,114,108,68,114,118,68,97,116,
                97,41,100,97,116,97,59,10,125,10,32,32,32,32]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "lWe call disconnect to log out from the database. (This should have been done from Erlang, but just in case.)"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Ï\nstatic int do_disconnect(our_data_t* data, ei_x_buff* x);\n\nstatic void stop(ErlDrvData drv_data)\n{\n    our_data_t* data = (our_data_t*)drv_data;\n\n    do_disconnect(data, NULL);\n    driver_free(data);\n}\n    "}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "bWe use the binary format only to return data to the emulator; input data is a string parameter for"}],
               0,false},
              {text,"\t*connect*"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"\b*select*"},
              {sep,
               [{text,"-. The returned data consists of Erlang terms."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,"\rThe functions"}],0,false},
              {text,[7,42,103,101,116,95,115,42]},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,
               [20,42,101,105,95,120,95,116,111,95,110,101,119,95,98,105,110,
                97,114,121,42]},
              {sep,
               [{text,
                 "5are utilities that are used to make the code shorter."}],
               0,false},
              {text,[7,42,103,101,116,95,115,42]},
              {sep,
               [{text,
                 "Xduplicates the string and zero-terminates it, as the postgres client library wants that."}],
               0,false},
              {text,
               [20,42,101,105,95,120,95,116,111,95,110,101,119,95,98,105,110,
                97,114,121,42]},
              {sep,[{text,"\btakes an"}],0,false},
              {text,"\v*ei_x_buff*"},
              {sep,
               [{text,
                 "Qbuffer, allocates a binary, and copies the data there. This binary is returned in"}],
               0,false},
              {text,[7,42,42,114,98,117,102,42]},
              {sep,
               [{text,
                 "@. (Notice that this binary is freed by the emulator, not by us.)"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [952,10,115,116,97,116,105,99,32,99,104,97,114,42,32,103,101,
                116,95,115,40,99,111,110,115,116,32,99,104,97,114,42,32,98,
                117,102,44,32,105,110,116,32,108,101,110,41,59,10,115,116,97,
                116,105,99,32,105,110,116,32,100,111,95,99,111,110,110,101,99,
                116,40,99,111,110,115,116,32,99,104,97,114,32,42,115,44,32,
                111,117,114,95,100,97,116,97,95,116,42,32,100,97,116,97,44,32,
                101,105,95,120,95,98,117,102,102,42,32,120,41,59,10,115,116,
                97,116,105,99,32,105,110,116,32,100,111,95,115,101,108,101,99,
                116,40,99,111,110,115,116,32,99,104,97,114,42,32,115,44,32,
                111,117,114,95,100,97,116,97,95,116,42,32,100,97,116,97,44,32,
                101,105,95,120,95,98,117,102,102,42,32,120,41,59,10,10,47,42,
                32,65,115,32,119,101,32,97,114,101,32,111,112,101,114,97,116,
                105,110,103,32,105,110,32,98,105,110,97,114,121,32,109,111,
                100,101,44,32,116,104,101,32,114,101,116,117,114,110,32,118,
                97,108,117,101,32,102,114,111,109,32,99,111,110,116,114,111,
                108,10,32,42,32,105,115,32,105,114,114,101,108,101,118,97,110,
                116,44,32,97,115,32,108,111,110,103,32,97,115,32,105,116,32,
                105,115,32,110,111,116,32,110,101,103,97,116,105,118,101,46,
                10,32,42,47,10,115,116,97,116,105,99,32,105,110,116,32,99,111,
                110,116,114,111,108,40,69,114,108,68,114,118,68,97,116,97,32,
                100,114,118,95,100,97,116,97,44,32,117,110,115,105,103,110,
                101,100,32,105,110,116,32,99,111,109,109,97,110,100,44,32,99,
                104,97,114,32,42,98,117,102,44,32,10,32,32,32,32,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,105,110,116,32,108,101,110,
                44,32,99,104,97,114,32,42,42,114,98,117,102,44,32,105,110,116,
                32,114,108,101,110,41,10,123,10,32,32,32,32,105,110,116,32,
                114,59,10,32,32,32,32,101,105,95,120,95,98,117,102,102,32,120,
                59,10,32,32,32,32,111,117,114,95,100,97,116,97,95,116,42,32,
                100,97,116,97,32,61,32,40,111,117,114,95,100,97,116,97,95,116,
                42,41,100,114,118,95,100,97,116,97,59,10,32,32,32,32,99,104,
                97,114,42,32,115,32,61,32,103,101,116,95,115,40,98,117,102,44,
                32,108,101,110,41,59,10,32,32,32,32,101,105,95,120,95,110,101,
                119,95,119,105,116,104,95,118,101,114,115,105,111,110,40,38,
                120,41,59,10,32,32,32,32,115,119,105,116,99,104,32,40,99,111,
                109,109,97,110,100,41,32,123,10,32,32,32,32,32,32,32,32,99,97,
                115,101,32,68,82,86,95,67,79,78,78,69,67,84,58,32,32,32,32,
                114,32,61,32,100,111,95,99,111,110,110,101,99,116,40,115,44,
                32,100,97,116,97,44,32,38,120,41,59,32,32,98,114,101,97,107,
                59,10,32,32,32,32,32,32,32,32,99,97,115,101,32,68,82,86,95,68,
                73,83,67,79,78,78,69,67,84,58,32,114,32,61,32,100,111,95,100,
                105,115,99,111,110,110,101,99,116,40,100,97,116,97,44,32,38,
                120,41,59,32,32,98,114,101,97,107,59,10,32,32,32,32,32,32,32,
                32,99,97,115,101,32,68,82,86,95,83,69,76,69,67,84,58,32,32,32,
                32,32,114,32,61,32,100,111,95,115,101,108,101,99,116,40,115,
                44,32,100,97,116,97,44,32,38,120,41,59,32,32,32,98,114,101,97,
                107,59,10,32,32,32,32,32,32,32,32,100,101,102,97,117,108,116,
                58,32,32,32,32,32,32,32,32,32,32,32,32,32,114,32,61,32,45,49,
                59,32,32,32,32,32,32,32,32,98,114,101,97,107,59,10,32,32,32,
                32,125,10,32,32,32,32,42,114,98,117,102,32,61,32,40,99,104,97,
                114,42,41,101,105,95,120,95,116,111,95,110,101,119,95,98,105,
                110,97,114,121,40,38,120,41,59,10,32,32,32,32,101,105,95,120,
                95,102,114,101,101,40,38,120,41,59,10,32,32,32,32,100,114,105,
                118,101,114,95,102,114,101,101,40,115,41,59,10,32,32,32,32,
                114,101,116,117,114,110,32,114,59,10,125,10,32,32,32,32]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,"\f*do_connect*"},
              {sep,
               [{text,
                 [131,105,115,32,119,104,101,114,101,32,119,101,32,108,111,
                  103,32,105,110,32,116,111,32,116,104,101,32,100,97,116,97,
                  98,97,115,101,46,32,73,102,32,116,104,101,32,99,111,110,110,
                  101,99,116,105,111,110,32,119,97,115,32,115,117,99,99,101,
                  115,115,102,117,108,44,32,119,101,32,115,116,111,114,101,32,
                  116,104,101,32,99,111,110,110,101,99,116,105,111,110,32,104,
                  97,110,100,108,101,32,105,110,32,116,104,101,32,100,114,105,
                  118,101,114,32,100,97,116,97,44,32,97,110,100,32,114,101,
                  116,117,114,110]}],
               0,false},
              {text,[6,42,39,111,107,39,42]},
              {sep,
               [{text,
                 "@. Otherwise, we return the error message from postgres and store"}],
               0,false},
              {text,[6,42,78,85,76,76,42]},
              {sep,
               [{text,
                 [19,105,110,32,116,104,101,32,100,114,105,118,101,114,32,100,
                  97,116,97,46]}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [310,10,115,116,97,116,105,99,32,105,110,116,32,100,111,95,99,
                111,110,110,101,99,116,40,99,111,110,115,116,32,99,104,97,114,
                32,42,115,44,32,111,117,114,95,100,97,116,97,95,116,42,32,100,
                97,116,97,44,32,101,105,95,120,95,98,117,102,102,42,32,120,41,
                10,123,10,32,32,32,32,80,71,99,111,110,110,42,32,99,111,110,
                110,32,61,32,80,81,99,111,110,110,101,99,116,100,98,40,115,41,
                59,10,32,32,32,32,105,102,32,40,80,81,115,116,97,116,117,115,
                40,99,111,110,110,41,32,33,61,32,67,79,78,78,69,67,84,73,79,
                78,95,79,75,41,32,123,10,32,32,32,32,32,32,32,32,101,110,99,
                111,100,101,95,101,114,114,111,114,40,120,44,32,99,111,110,
                110,41,59,10,32,32,32,32,32,32,32,32,80,81,102,105,110,105,
                115,104,40,99,111,110,110,41,59,10,32,32,32,32,32,32,32,32,99,
                111,110,110,32,61,32,78,85,76,76,59,10,32,32,32,32,125,32,101,
                108,115,101,32,123,10,32,32,32,32,32,32,32,32,101,110,99,111,
                100,101,95,111,107,40,120,41,59,10,32,32,32,32,125,10,32,32,
                32,32,100,97,116,97,45,62,99,111,110,110,32,61,32,99,111,110,
                110,59,10,32,32,32,32,114,101,116,117,114,110,32,48,59,10,125,
                10,32,32,32,32]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "8If we are connected (and if the connection handle is not"}],
               0,false},
              {text,[6,42,78,85,76,76,42]},
              {sep,
               [{text,
                 "H), we log out from the database. We need to check if we should encode an"}],
               0,false},
              {text,[6,42,39,111,107,39,42]},
              {sep,[{text,"\", as we can get here from function"}],0,false},
              {text,[6,42,115,116,111,112,42]},
              {sep,
               [{text,"-, which does not return data to the emulator:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "Ø\nstatic int do_disconnect(our_data_t* data, ei_x_buff* x)\n{\n    if (data->conn == NULL)\n        return 0;\n    PQfinish(data->conn);\n    data->conn = NULL;\n    if (x != NULL)\n        encode_ok(x);\n    return 0;\n}\n    "}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "OWe execute a query and encode the result. Encoding is done in another C module,"}],
               0,false},
              {text,"\r*pg_encode.c*"},
              {sep,
               [{text,"(, which is also provided as sample code."}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "¾\nstatic int do_select(const char* s, our_data_t* data, ei_x_buff* x)\n{\n   PGresult* res = PQexec(data->conn, s);\n    encode_result(x, res, data->conn);\n    PQclear(res);\n    return 0;\n}\n    "}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [152,72,101,114,101,32,119,101,32,99,104,101,99,107,32,116,
                  104,101,32,114,101,115,117,108,116,32,102,114,111,109,32,
                  112,111,115,116,103,114,101,115,46,32,73,102,32,105,116,32,
                  105,115,32,100,97,116,97,44,32,119,101,32,101,110,99,111,
                  100,101,32,105,116,32,97,115,32,108,105,115,116,115,32,111,
                  102,32,108,105,115,116,115,32,119,105,116,104,32,99,111,108,
                  117,109,110,32,100,97,116,97,46,32,69,118,101,114,121,116,
                  104,105,110,103,32,102,114,111,109,32,112,111,115,116,103,
                  114,101,115,32,105,115,32,67,32,115,116,114,105,110,103,115,
                  44,32,115,111,32,119,101,32,117,115,101]}],
               0,false},
              {text,
               [20,42,101,105,95,120,95,101,110,99,111,100,101,95,115,116,114,
                105,110,103,42]},
              {sep,
               [{text,
                 "Zto send the result as strings to Erlang. (The head of the list contains the column names.)"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [1073,10,118,111,105,100,32,101,110,99,111,100,101,95,114,101,
                115,117,108,116,40,101,105,95,120,95,98,117,102,102,42,32,120,
                44,32,80,71,114,101,115,117,108,116,42,32,114,101,115,44,32,
                80,71,99,111,110,110,42,32,99,111,110,110,41,10,123,10,32,32,
                32,32,105,110,116,32,114,111,119,44,32,110,95,114,111,119,115,
                44,32,99,111,108,44,32,110,95,99,111,108,115,59,10,32,32,32,
                32,115,119,105,116,99,104,32,40,80,81,114,101,115,117,108,116,
                83,116,97,116,117,115,40,114,101,115,41,41,32,123,10,32,32,32,
                32,99,97,115,101,32,80,71,82,69,83,95,84,85,80,76,69,83,95,79,
                75,58,32,10,32,32,32,32,32,32,32,32,110,95,114,111,119,115,32,
                61,32,80,81,110,116,117,112,108,101,115,40,114,101,115,41,59,
                32,10,32,32,32,32,32,32,32,32,110,95,99,111,108,115,32,61,32,
                80,81,110,102,105,101,108,100,115,40,114,101,115,41,59,32,10,
                32,32,32,32,32,32,32,32,101,105,95,120,95,101,110,99,111,100,
                101,95,116,117,112,108,101,95,104,101,97,100,101,114,40,120,
                44,32,50,41,59,10,32,32,32,32,32,32,32,32,101,110,99,111,100,
                101,95,111,107,40,120,41,59,10,32,32,32,32,32,32,32,32,101,
                105,95,120,95,101,110,99,111,100,101,95,108,105,115,116,95,
                104,101,97,100,101,114,40,120,44,32,110,95,114,111,119,115,43,
                49,41,59,10,32,32,32,32,32,32,32,32,101,105,95,120,95,101,110,
                99,111,100,101,95,108,105,115,116,95,104,101,97,100,101,114,
                40,120,44,32,110,95,99,111,108,115,41,59,10,32,32,32,32,32,32,
                32,32,102,111,114,32,40,99,111,108,32,61,32,48,59,32,99,111,
                108,32,60,32,110,95,99,111,108,115,59,32,43,43,99,111,108,41,
                32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,101,105,95,120,
                95,101,110,99,111,100,101,95,115,116,114,105,110,103,40,120,
                44,32,80,81,102,110,97,109,101,40,114,101,115,44,32,99,111,
                108,41,41,59,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,
                32,32,32,101,105,95,120,95,101,110,99,111,100,101,95,101,109,
                112,116,121,95,108,105,115,116,40,120,41,59,32,10,32,32,32,32,
                32,32,32,32,102,111,114,32,40,114,111,119,32,61,32,48,59,32,
                114,111,119,32,60,32,110,95,114,111,119,115,59,32,43,43,114,
                111,119,41,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,101,
                105,95,120,95,101,110,99,111,100,101,95,108,105,115,116,95,
                104,101,97,100,101,114,40,120,44,32,110,95,99,111,108,115,41,
                59,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,40,
                99,111,108,32,61,32,48,59,32,99,111,108,32,60,32,110,95,99,
                111,108,115,59,32,43,43,99,111,108,41,32,123,10,32,32,32,32,
                32,32,32,32,32,32,32,32,32,32,32,32,101,105,95,120,95,101,110,
                99,111,100,101,95,115,116,114,105,110,103,40,120,44,32,80,81,
                103,101,116,118,97,108,117,101,40,114,101,115,44,32,114,111,
                119,44,32,99,111,108,41,41,59,10,32,32,32,32,32,32,32,32,32,
                32,32,32,125,10,32,32,32,32,32,32,32,32,32,32,32,32,101,105,
                95,120,95,101,110,99,111,100,101,95,101,109,112,116,121,95,
                108,105,115,116,40,120,41,59,10,32,32,32,32,32,32,32,32,125,
                10,32,32,32,32,32,32,32,32,101,105,95,120,95,101,110,99,111,
                100,101,95,101,109,112,116,121,95,108,105,115,116,40,120,41,
                59,32,10,32,32,32,32,32,32,32,32,98,114,101,97,107,59,32,10,
                32,32,32,32,99,97,115,101,32,80,71,82,69,83,95,67,79,77,77,65,
                78,68,95,79,75,58,10,32,32,32,32,32,32,32,32,101,105,95,120,
                95,101,110,99,111,100,101,95,116,117,112,108,101,95,104,101,
                97,100,101,114,40,120,44,32,50,41,59,10,32,32,32,32,32,32,32,
                32,101,110,99,111,100,101,95,111,107,40,120,41,59,10,32,32,32,
                32,32,32,32,32,101,105,95,120,95,101,110,99,111,100,101,95,
                115,116,114,105,110,103,40,120,44,32,80,81,99,109,100,84,117,
                112,108,101,115,40,114,101,115,41,41,59,10,32,32,32,32,32,32,
                32,32,98,114,101,97,107,59,10,32,32,32,32,100,101,102,97,117,
                108,116,58,10,32,32,32,32,32,32,32,32,101,110,99,111,100,101,
                95,101,114,114,111,114,40,120,44,32,99,111,110,110,41,59,10,
                32,32,32,32,32,32,32,32,98,114,101,97,107,59,10,32,32,32,32,
                125,10,125,10,32,32,32,32]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,"*## Compiling and Linking the Sample Driver"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "tThe driver is to be compiled and linked to a shared library (DLL on Windows). With gcc, this is done with link flags"}],
              0,false},
             {text,"\t*-shared*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[7,42,45,102,112,105,99,42]},
             {sep,
              [{text,
                [15,46,32,65,115,32,119,101,32,117,115,101,32,116,104,101]}],
              0,false},
             {text,[4,42,101,105,42]},
             {sep,
              [{text,
                "@library, we should include it too. There are several versions of"}],
              0,false},
             {text,[4,42,101,105,42]},
             {sep,
              [{text,
                "m, compiled for debug or non-debug and multi-threaded or single-threaded. In the makefile for the samples, the"}],
              0,false},
             {text,[5,42,111,98,106,42]},
             {sep,
              [{text,
                [25,100,105,114,101,99,116,111,114,121,32,105,115,32,117,115,
                 101,100,32,102,111,114,32,116,104,101]}],
              0,false},
             {text,[4,42,101,105,42]},
             {sep,
              [{text,
                "Dlibrary, meaning that we use the non-debug, single-threaded version."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{text,"'## Calling a Driver as a Port in Erlang"},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "bBefore a driver can be called from Erlang, it must be loaded and opened. Loading is done using the"}],
             0,false},
            {text,"\n*erl_ddll*"},
            {sep,[{text,"\vmodule (the"}],0,false},
            {text,"\n*erl_ddll*"},
            {sep,
             [{text,
               "udriver that loads dynamic driver is actually a driver itself). If loading is successfull, the port can be opened with"}],
             0,false},
            {text,"\r*open_port/2*"},
            {sep,
             [{text,
               "e. The port name must match the name of the shared library and the name in the driver entry structure."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "?When the port has been opened, the driver can be called. In the"}],
             0,false},
            {text,"\t*pg_sync*"},
            {sep,
             [{text,
               "Nexample, we do not have any data from the port, only the return value from the"}],
             0,false},
            {text,[14,42,112,111,114,116,95,99,111,110,116,114,111,108,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "IThe following code is the Erlang part of the synchronous postgres driver,"}],
             0,false},
            {text,"\r*pg_sync.erl*"},
            {sep,[{text,[1,58]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [691,10,45,109,111,100,117,108,101,40,112,103,95,115,121,110,99,
              41,46,10,10,45,100,101,102,105,110,101,40,68,82,86,95,67,79,78,
              78,69,67,84,44,32,49,41,46,10,45,100,101,102,105,110,101,40,68,
              82,86,95,68,73,83,67,79,78,78,69,67,84,44,32,50,41,46,10,45,100,
              101,102,105,110,101,40,68,82,86,95,83,69,76,69,67,84,44,32,51,
              41,46,10,10,45,101,120,112,111,114,116,40,91,99,111,110,110,101,
              99,116,47,49,44,32,100,105,115,99,111,110,110,101,99,116,47,49,
              44,32,115,101,108,101,99,116,47,50,93,41,46,10,10,99,111,110,
              110,101,99,116,40,67,111,110,110,101,99,116,83,116,114,41,32,45,
              62,10,32,32,32,32,99,97,115,101,32,101,114,108,95,100,100,108,
              108,58,108,111,97,100,95,100,114,105,118,101,114,40,34,46,34,44,
              32,34,112,103,95,115,121,110,99,34,41,32,111,102,10,32,32,32,32,
              32,32,32,32,111,107,32,45,62,32,111,107,59,10,32,32,32,32,32,32,
              32,32,123,101,114,114,111,114,44,32,97,108,114,101,97,100,121,
              95,108,111,97,100,101,100,125,32,45,62,32,111,107,59,10,32,32,
              32,32,32,32,32,32,69,32,45,62,32,101,120,105,116,40,123,101,114,
              114,111,114,44,32,69,125,41,10,32,32,32,32,101,110,100,44,10,32,
              32,32,32,80,111,114,116,32,61,32,111,112,101,110,95,112,111,114,
              116,40,123,115,112,97,119,110,44,32,63,77,79,68,85,76,69,125,44,
              32,91,93,41,44,10,32,32,32,32,99,97,115,101,32,98,105,110,97,
              114,121,95,116,111,95,116,101,114,109,40,112,111,114,116,95,99,
              111,110,116,114,111,108,40,80,111,114,116,44,32,63,68,82,86,95,
              67,79,78,78,69,67,84,44,32,67,111,110,110,101,99,116,83,116,114,
              41,41,32,111,102,10,32,32,32,32,32,32,32,32,111,107,32,45,62,32,
              123,111,107,44,32,80,111,114,116,125,59,10,32,32,32,32,32,32,32,
              32,69,114,114,111,114,32,45,62,32,69,114,114,111,114,10,32,32,
              32,32,101,110,100,46,10,10,100,105,115,99,111,110,110,101,99,
              116,40,80,111,114,116,41,32,45,62,10,32,32,32,32,82,32,61,32,98,
              105,110,97,114,121,95,116,111,95,116,101,114,109,40,112,111,114,
              116,95,99,111,110,116,114,111,108,40,80,111,114,116,44,32,63,68,
              82,86,95,68,73,83,67,79,78,78,69,67,84,44,32,34,34,41,41,44,10,
              32,32,32,32,112,111,114,116,95,99,108,111,115,101,40,80,111,114,
              116,41,44,10,32,32,32,32,82,46,10,10,115,101,108,101,99,116,40,
              80,111,114,116,44,32,81,117,101,114,121,41,32,45,62,10,32,32,32,
              32,98,105,110,97,114,121,95,116,111,95,116,101,114,109,40,112,
              111,114,116,95,99,111,110,116,114,111,108,40,80,111,114,116,44,
              32,63,68,82,86,95,83,69,76,69,67,84,44,32,81,117,101,114,121,41,
              41,46,10,32,32,32,32]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [18,84,104,101,32,65,80,73,32,105,115,32,115,105,109,112,108,101,
              58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"\v*connect/1*"},
           {sep,
            [{text,
              "aloads the driver, opens it, and logs on to the database, returning the Erlang port if successful."}],
            0,false}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"\n*select/2*"},
           {sep,
            [{text,"3sends a query to the driver and returns the result."}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[14,42,100,105,115,99,111,110,110,101,99,116,47,49,42]},
          {sep,
           [{text,
             "Pcloses the database connection and the driver. (However, it does not unload it.)"}],
           0,false}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "@The connection string is to be a connection string for postgres."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [25,84,104,101,32,100,114,105,118,101,114,32,105,115,32,108,
                111,97,100,101,100,32,119,105,116,104]}],
             0,false},
            {text,
             [24,42,101,114,108,95,100,100,108,108,58,108,111,97,100,95,100,
              114,105,118,101,114,47,50,42]},
            {sep,
             [{text,
               "U. If this is successful, or if it is already loaded, it is opened. This will call the"}],
             0,false},
            {text,[7,42,115,116,97,114,116,42]},
            {sep,
             [{text,
               [23,102,117,110,99,116,105,111,110,32,105,110,32,116,104,101,
                32,100,114,105,118,101,114,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\nWe use the"}],0,false},
            {text,
             [16,42,112,111,114,116,95,99,111,110,116,114,111,108,47,51,42]},
            {sep,
             [{text,
               "|function for all calls into the driver. The result from the driver is returned immediately and converted to terms by calling"}],
             0,false},
            {text,
             [18,42,98,105,110,97,114,121,95,116,111,95,116,101,114,109,47,49,
              42]},
            {sep,
             [{text,
               "R. (We trust that the terms returned from the driver are well-formed, otherwise the"}],
             0,false},
            {text,
             [16,42,98,105,110,97,114,121,95,116,111,95,116,101,114,109,42]},
            {sep,
             [{text,
               [29,99,97,108,108,115,32,99,111,117,108,100,32,98,101,32,99,
                111,110,116,97,105,110,101,100,32,105,110,32,97]}],
             0,false},
            {text,[7,42,99,97,116,99,104,42]},
            {sep,[{text,[2,46,41]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [29,35,35,32,83,97,109,112,108,101,32,65,115,121,110,99,104,114,111,
         110,111,117,115,32,68,114,105,118,101,114]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "CSometimes database queries can take a long time to complete, in our"}],
            0,false},
           {text,"\t*pg_sync*"},
           {sep,
            [{text,
              "ñdriver, the emulator halts while the driver is doing its job. This is often not acceptable, as no other Erlang process gets a chance to do anything. To improve on our postgres driver, we re-implement it using the asynchronous calls in LibPQ."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "=The asynchronous version of the driver is in the sample files"}],
            0,false},
           {text,"\f*pg_async.c*"},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,[14,42,112,103,95,97,115,121,110,103,46,101,114,108,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [1112,10,47,42,32,68,114,105,118,101,114,32,105,110,116,101,114,
             102,97,99,101,32,100,101,99,108,97,114,97,116,105,111,110,115,32,
             42,47,10,115,116,97,116,105,99,32,69,114,108,68,114,118,68,97,
             116,97,32,115,116,97,114,116,40,69,114,108,68,114,118,80,111,114,
             116,32,112,111,114,116,44,32,99,104,97,114,32,42,99,111,109,109,
             97,110,100,41,59,10,115,116,97,116,105,99,32,118,111,105,100,32,
             115,116,111,112,40,69,114,108,68,114,118,68,97,116,97,32,100,114,
             118,95,100,97,116,97,41,59,10,115,116,97,116,105,99,32,105,110,
             116,32,99,111,110,116,114,111,108,40,69,114,108,68,114,118,68,97,
             116,97,32,100,114,118,95,100,97,116,97,44,32,117,110,115,105,103,
             110,101,100,32,105,110,116,32,99,111,109,109,97,110,100,44,32,99,
             104,97,114,32,42,98,117,102,44,32,10,32,32,32,32,32,32,32,32,32,
             32,32,32,32,32,32,32,32,32,32,105,110,116,32,108,101,110,44,32,
             99,104,97,114,32,42,42,114,98,117,102,44,32,105,110,116,32,114,
             108,101,110,41,59,32,10,115,116,97,116,105,99,32,118,111,105,100,
             32,114,101,97,100,121,95,105,111,40,69,114,108,68,114,118,68,97,
             116,97,32,100,114,118,95,100,97,116,97,44,32,69,114,108,68,114,
             118,69,118,101,110,116,32,101,118,101,110,116,41,59,10,10,115,
             116,97,116,105,99,32,69,114,108,68,114,118,69,110,116,114,121,32,
             112,113,95,100,114,105,118,101,114,95,101,110,116,114,121,32,61,
             32,123,10,32,32,32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,32,
             32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,105,110,105,116,32,
             42,47,10,32,32,32,32,115,116,97,114,116,44,32,10,32,32,32,32,115,
             116,111,112,44,32,10,32,32,32,32,78,85,76,76,44,32,32,32,32,32,
             32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,111,117,
             116,112,117,116,32,42,47,10,32,32,32,32,114,101,97,100,121,95,
             105,111,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,
             42,32,114,101,97,100,121,95,105,110,112,117,116,32,42,47,10,32,
             32,32,32,114,101,97,100,121,95,105,111,44,32,32,32,32,32,32,32,
             32,32,32,32,32,32,32,32,32,32,47,42,32,114,101,97,100,121,95,111,
             117,116,112,117,116,32,42,47,32,10,32,32,32,32,34,112,103,95,97,
             115,121,110,99,34,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
             32,47,42,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,
             101,32,100,114,105,118,101,114,32,42,47,10,32,32,32,32,78,85,76,
             76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
             32,32,47,42,32,102,105,110,105,115,104,32,42,47,10,32,32,32,32,
             78,85,76,76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
             32,32,32,32,32,47,42,32,104,97,110,100,108,101,32,42,47,10,32,32,
             32,32,99,111,110,116,114,111,108,44,32,10,32,32,32,32,78,85,76,
             76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
             32,32,47,42,32,116,105,109,101,111,117,116,32,42,47,10,32,32,32,
             32,78,85,76,76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
             32,32,32,32,32,32,47,42,32,111,117,116,112,117,116,118,32,42,47,
             10,32,32,32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,32,32,32,
             32,32,32,32,32,32,32,32,32,32,47,42,32,114,101,97,100,121,95,97,
             115,121,110,99,32,42,47,10,32,32,32,32,78,85,76,76,44,32,32,32,
             32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,
             102,108,117,115,104,32,42,47,10,32,32,32,32,78,85,76,76,44,32,32,
             32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,
             32,99,97,108,108,32,42,47,10,32,32,32,32,78,85,76,76,32,32,32,32,
             32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,
             101,118,101,110,116,32,42,47,10,125,59,10,10,116,121,112,101,100,
             101,102,32,115,116,114,117,99,116,32,111,117,114,95,100,97,116,
             97,95,116,32,123,10,32,32,32,32,80,71,99,111,110,110,42,32,99,
             111,110,110,59,10,32,32,32,32,69,114,108,68,114,118,80,111,114,
             116,32,112,111,114,116,59,10,32,32,32,32,105,110,116,32,115,111,
             99,107,101,116,59,10,32,32,32,32,105,110,116,32,99,111,110,110,
             101,99,116,105,110,103,59,10,125,32,111,117,114,95,100,97,116,97,
             95,116,59,10,32,32,32,32]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [29,83,111,109,101,32,116,104,105,110,103,115,32,104,97,118,101,
               32,99,104,97,110,103,101,100,32,102,114,111,109]}],
            0,false},
           {text,"\v*pg_sync.c*"},
           {sep,
            [{text,
              [18,58,32,119,101,32,117,115,101,32,116,104,101,32,101,110,116,
               114,121]}],
            0,false},
           {text,"\n*ready_io*"},
           {sep,[{text,[3,102,111,114]}],0,false},
           {text,"\r*ready_input*"},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,[14,42,114,101,97,100,121,95,111,117,116,112,117,116,42]},
           {sep,
            [{text,
              "{, which is called from the emulator only when there is input to be read from the socket. (Actually, the socket is used in a"}],
            0,false},
           {text,"\b*select*"},
           {sep,
            [{text,
              "dfunction inside the emulator, and when the socket is signaled, indicating there is data to read, the"}],
            0,false},
           {text,"\r*ready_input*"},
           {sep,[{text,"(entry is called. More about this below.)"}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "©Our driver data is also extended, we keep track of the socket used for communication with postgres, and also the port, which is needed when we send data to the port with"}],
            0,false},
           {text,
            [15,42,100,114,105,118,101,114,95,111,117,116,112,117,116,42]},
           {sep,
            [{text,
              [16,46,32,87,101,32,104,97,118,101,32,97,32,102,108,97,103]}],
            0,false},
           {text,"\f*connecting*"},
           {sep,
            [{text,
              "zto tell whether the driver is waiting for a connection or waiting for the result of a query. (This is needed, as the entry"}],
            0,false},
           {text,"\n*ready_io*"},
           {sep,
            [{text,
              "Ais called both when connecting and when there is a query result.)"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [637,10,115,116,97,116,105,99,32,105,110,116,32,100,111,95,99,111,
             110,110,101,99,116,40,99,111,110,115,116,32,99,104,97,114,32,42,
             115,44,32,111,117,114,95,100,97,116,97,95,116,42,32,100,97,116,
             97,41,10,123,10,32,32,32,32,80,71,99,111,110,110,42,32,99,111,
             110,110,32,61,32,80,81,99,111,110,110,101,99,116,83,116,97,114,
             116,40,115,41,59,10,32,32,32,32,105,102,32,40,80,81,115,116,97,
             116,117,115,40,99,111,110,110,41,32,61,61,32,67,79,78,78,69,67,
             84,73,79,78,95,66,65,68,41,32,123,10,32,32,32,32,32,32,32,32,101,
             105,95,120,95,98,117,102,102,32,120,59,10,32,32,32,32,32,32,32,
             32,101,105,95,120,95,110,101,119,95,119,105,116,104,95,118,101,
             114,115,105,111,110,40,38,120,41,59,10,32,32,32,32,32,32,32,32,
             101,110,99,111,100,101,95,101,114,114,111,114,40,38,120,44,32,99,
             111,110,110,41,59,10,32,32,32,32,32,32,32,32,80,81,102,105,110,
             105,115,104,40,99,111,110,110,41,59,10,32,32,32,32,32,32,32,32,
             99,111,110,110,32,61,32,78,85,76,76,59,10,32,32,32,32,32,32,32,
             32,100,114,105,118,101,114,95,111,117,116,112,117,116,40,100,97,
             116,97,45,62,112,111,114,116,44,32,120,46,98,117,102,102,44,32,
             120,46,105,110,100,101,120,41,59,10,32,32,32,32,32,32,32,32,101,
             105,95,120,95,102,114,101,101,40,38,120,41,59,10,32,32,32,32,125,
             10,32,32,32,32,80,81,99,111,110,110,101,99,116,80,111,108,108,40,
             99,111,110,110,41,59,10,32,32,32,32,105,110,116,32,115,111,99,
             107,101,116,32,61,32,80,81,115,111,99,107,101,116,40,99,111,110,
             110,41,59,10,32,32,32,32,100,97,116,97,45,62,115,111,99,107,101,
             116,32,61,32,115,111,99,107,101,116,59,10,32,32,32,32,100,114,
             105,118,101,114,95,115,101,108,101,99,116,40,100,97,116,97,45,62,
             112,111,114,116,44,32,40,69,114,108,68,114,118,69,118,101,110,
             116,41,115,111,99,107,101,116,44,32,68,79,95,82,69,65,68,44,32,
             49,41,59,10,32,32,32,32,100,114,105,118,101,114,95,115,101,108,
             101,99,116,40,100,97,116,97,45,62,112,111,114,116,44,32,40,69,
             114,108,68,114,118,69,118,101,110,116,41,115,111,99,107,101,116,
             44,32,68,79,95,87,82,73,84,69,44,32,49,41,59,10,32,32,32,32,100,
             97,116,97,45,62,99,111,110,110,32,61,32,99,111,110,110,59,10,32,
             32,32,32,100,97,116,97,45,62,99,111,110,110,101,99,116,105,110,
             103,32,61,32,49,59,10,32,32,32,32,114,101,116,117,114,110,32,48,
             59,10,125,10,32,32,32,32]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[3,84,104,101]}],0,false},
           {text,"\t*connect*"},
           {sep,
            [{text,
              "Efunction looks a bit different too. We connect using the asynchronous"}],
            0,false},
           {text,[16,42,80,81,99,111,110,110,101,99,116,83,116,97,114,116,42]},
           {sep,
            [{text,
              "Yfunction. After the connection is started, we retrieve the socket for the connection with"}],
            0,false},
           {text,"\n*PQsocket*"},
           {sep,
            [{text,
              [30,46,32,84,104,105,115,32,115,111,99,107,101,116,32,105,115,
               32,117,115,101,100,32,119,105,116,104,32,116,104,101]}],
            0,false},
           {text,[15,42,100,114,105,118,101,114,95,115,101,108,101,99,116,42]},
           {sep,
            [{text,
              "Vfunction to wait for connection. When the socket is ready for input or for output, the"}],
            0,false},
           {text,"\n*ready_io*"},
           {sep,
            [{text,
              [19,102,117,110,99,116,105,111,110,32,105,115,32,99,97,108,108,
               101,100,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"%Notice that we only return data (with"}],0,false},
           {text,
            [15,42,100,114,105,118,101,114,95,111,117,116,112,117,116,42]},
           {sep,
            [{text,
              "d) if there is an error here, otherwise we wait for the connection to be completed, in which case our"}],
            0,false},
           {text,"\n*ready_io*"},
           {sep,
            [{text,
              [19,102,117,110,99,116,105,111,110,32,105,115,32,99,97,108,108,
               101,100,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [436,10,115,116,97,116,105,99,32,105,110,116,32,100,111,95,115,
             101,108,101,99,116,40,99,111,110,115,116,32,99,104,97,114,42,32,
             115,44,32,111,117,114,95,100,97,116,97,95,116,42,32,100,97,116,
             97,41,10,123,10,32,32,32,32,100,97,116,97,45,62,99,111,110,110,
             101,99,116,105,110,103,32,61,32,48,59,10,32,32,32,32,80,71,99,
             111,110,110,42,32,99,111,110,110,32,61,32,100,97,116,97,45,62,99,
             111,110,110,59,10,32,32,32,32,47,42,32,105,102,32,116,104,101,
             114,101,39,115,32,97,110,32,101,114,114,111,114,32,114,101,116,
             117,114,110,32,105,116,32,110,111,119,32,42,47,10,32,32,32,32,
             105,102,32,40,80,81,115,101,110,100,81,117,101,114,121,40,99,111,
             110,110,44,32,115,41,32,61,61,32,48,41,32,123,10,32,32,32,32,32,
             32,32,32,101,105,95,120,95,98,117,102,102,32,120,59,10,32,32,32,
             32,32,32,32,32,101,105,95,120,95,110,101,119,95,119,105,116,104,
             95,118,101,114,115,105,111,110,40,38,120,41,59,10,32,32,32,32,32,
             32,32,32,101,110,99,111,100,101,95,101,114,114,111,114,40,38,120,
             44,32,99,111,110,110,41,59,10,32,32,32,32,32,32,32,32,100,114,
             105,118,101,114,95,111,117,116,112,117,116,40,100,97,116,97,45,
             62,112,111,114,116,44,32,120,46,98,117,102,102,44,32,120,46,105,
             110,100,101,120,41,59,10,32,32,32,32,32,32,32,32,101,105,95,120,
             95,102,114,101,101,40,38,120,41,59,10,32,32,32,32,125,10,32,32,
             32,32,47,42,32,101,108,115,101,32,119,97,105,116,32,102,111,114,
             32,114,101,97,100,121,95,111,117,116,112,117,116,32,116,111,32,
             103,101,116,32,114,101,115,117,108,116,115,32,42,47,10,32,32,32,
             32,114,101,116,117,114,110,32,48,59,10,125,10,32,32,32,32]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[3,84,104,101]}],0,false},
           {text,"\v*do_select*"},
           {sep,
            [{text,
              "dfunction initiates a select, and returns if there is no immediate error. The result is returned when"}],
            0,false},
           {text,"\n*ready_io*"},
           {sep,[{text,"\nis called."}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [1029,10,115,116,97,116,105,99,32,118,111,105,100,32,114,101,97,
             100,121,95,105,111,40,69,114,108,68,114,118,68,97,116,97,32,100,
             114,118,95,100,97,116,97,44,32,69,114,108,68,114,118,69,118,101,
             110,116,32,101,118,101,110,116,41,10,123,10,32,32,32,32,80,71,
             114,101,115,117,108,116,42,32,114,101,115,32,61,32,78,85,76,76,
             59,10,32,32,32,32,111,117,114,95,100,97,116,97,95,116,42,32,100,
             97,116,97,32,61,32,40,111,117,114,95,100,97,116,97,95,116,42,41,
             100,114,118,95,100,97,116,97,59,10,32,32,32,32,80,71,99,111,110,
             110,42,32,99,111,110,110,32,61,32,100,97,116,97,45,62,99,111,110,
             110,59,10,32,32,32,32,101,105,95,120,95,98,117,102,102,32,120,59,
             10,32,32,32,32,101,105,95,120,95,110,101,119,95,119,105,116,104,
             95,118,101,114,115,105,111,110,40,38,120,41,59,10,32,32,32,32,
             105,102,32,40,100,97,116,97,45,62,99,111,110,110,101,99,116,105,
             110,103,41,32,123,10,32,32,32,32,32,32,32,32,67,111,110,110,83,
             116,97,116,117,115,84,121,112,101,32,115,116,97,116,117,115,59,
             10,32,32,32,32,32,32,32,32,80,81,99,111,110,110,101,99,116,80,
             111,108,108,40,99,111,110,110,41,59,10,32,32,32,32,32,32,32,32,
             115,116,97,116,117,115,32,61,32,80,81,115,116,97,116,117,115,40,
             99,111,110,110,41,59,10,32,32,32,32,32,32,32,32,105,102,32,40,
             115,116,97,116,117,115,32,61,61,32,67,79,78,78,69,67,84,73,79,78,
             95,79,75,41,10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,99,
             111,100,101,95,111,107,40,38,120,41,59,10,32,32,32,32,32,32,32,
             32,101,108,115,101,32,105,102,32,40,115,116,97,116,117,115,32,61,
             61,32,67,79,78,78,69,67,84,73,79,78,95,66,65,68,41,10,32,32,32,
             32,32,32,32,32,32,32,32,32,101,110,99,111,100,101,95,101,114,114,
             111,114,40,38,120,44,32,99,111,110,110,41,59,10,32,32,32,32,125,
             32,101,108,115,101,32,123,10,32,32,32,32,32,32,32,32,80,81,99,
             111,110,115,117,109,101,73,110,112,117,116,40,99,111,110,110,41,
             59,10,32,32,32,32,32,32,32,32,105,102,32,40,80,81,105,115,66,117,
             115,121,40,99,111,110,110,41,41,10,32,32,32,32,32,32,32,32,32,32,
             32,32,114,101,116,117,114,110,59,10,32,32,32,32,32,32,32,32,114,
             101,115,32,61,32,80,81,103,101,116,82,101,115,117,108,116,40,99,
             111,110,110,41,59,10,32,32,32,32,32,32,32,32,101,110,99,111,100,
             101,95,114,101,115,117,108,116,40,38,120,44,32,114,101,115,44,32,
             99,111,110,110,41,59,10,32,32,32,32,32,32,32,32,80,81,99,108,101,
             97,114,40,114,101,115,41,59,10,32,32,32,32,32,32,32,32,102,111,
             114,32,40,59,59,41,32,123,10,32,32,32,32,32,32,32,32,32,32,32,32,
             114,101,115,32,61,32,80,81,103,101,116,82,101,115,117,108,116,40,
             99,111,110,110,41,59,10,32,32,32,32,32,32,32,32,32,32,32,32,105,
             102,32,40,114,101,115,32,61,61,32,78,85,76,76,41,10,32,32,32,32,
             32,32,32,32,32,32,32,32,32,32,32,32,98,114,101,97,107,59,10,32,
             32,32,32,32,32,32,32,32,32,32,32,80,81,99,108,101,97,114,40,114,
             101,115,41,59,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,125,
             10,32,32,32,32,105,102,32,40,120,46,105,110,100,101,120,32,62,32,
             49,41,32,123,10,32,32,32,32,32,32,32,32,100,114,105,118,101,114,
             95,111,117,116,112,117,116,40,100,97,116,97,45,62,112,111,114,
             116,44,32,120,46,98,117,102,102,44,32,120,46,105,110,100,101,120,
             41,59,10,32,32,32,32,32,32,32,32,105,102,32,40,100,97,116,97,45,
             62,99,111,110,110,101,99,116,105,110,103,41,32,10,32,32,32,32,32,
             32,32,32,32,32,32,32,100,114,105,118,101,114,95,115,101,108,101,
             99,116,40,100,97,116,97,45,62,112,111,114,116,44,32,40,69,114,
             108,68,114,118,69,118,101,110,116,41,100,97,116,97,45,62,115,111,
             99,107,101,116,44,32,68,79,95,87,82,73,84,69,44,32,48,41,59,10,
             32,32,32,32,125,10,32,32,32,32,101,105,95,120,95,102,114,101,101,
             40,38,120,41,59,10,125,10,32,32,32,32]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[3,84,104,101]}],0,false},
           {text,"\n*ready_io*"},
           {sep,
            [{text,
              [314,102,117,110,99,116,105,111,110,32,105,115,32,99,97,108,108,
               101,100,32,119,104,101,110,32,116,104,101,32,115,111,99,107,
               101,116,32,119,101,32,103,111,116,32,102,114,111,109,32,112,
               111,115,116,103,114,101,115,32,105,115,32,114,101,97,100,121,
               32,102,111,114,32,105,110,112,117,116,32,111,114,32,111,117,
               116,112,117,116,46,32,72,101,114,101,32,119,101,32,102,105,114,
               115,116,32,99,104,101,99,107,32,105,102,32,119,101,32,97,114,
               101,32,99,111,110,110,101,99,116,105,110,103,32,116,111,32,116,
               104,101,32,100,97,116,97,98,97,115,101,46,32,73,110,32,116,104,
               97,116,32,99,97,115,101,44,32,119,101,32,99,104,101,99,107,32,
               99,111,110,110,101,99,116,105,111,110,32,115,116,97,116,117,
               115,32,97,110,100,32,114,101,116,117,114,110,32,79,75,32,105,
               102,32,116,104,101,32,99,111,110,110,101,99,116,105,111,110,32,
               105,115,32,115,117,99,99,101,115,115,102,117,108,44,32,111,114,
               32,101,114,114,111,114,32,105,102,32,105,116,32,105,115,32,110,
               111,116,46,32,73,102,32,116,104,101,32,99,111,110,110,101,99,
               116,105,111,110,32,105,115,32,110,111,116,32,121,101,116,32,
               101,115,116,97,98,108,105,115,104,101,100,44,32,119,101,32,115,
               105,109,112,108,121,32,114,101,116,117,114,110,59]}],
            0,false},
           {text,"\n*ready_io*"},
           {sep,
            [{text,
              [16,105,115,32,99,97,108,108,101,100,32,97,103,97,105,110,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "CIf we have a result from a connect, indicated by having data in the"}],
            0,false},
           {text,[3,42,120,42]},
           {sep,
            [{text,"/buffer, we no longer need to select on output ("}],
            0,false},
           {text,[14,42,114,101,97,100,121,95,111,117,116,112,117,116,42]},
           {sep,
            [{text,
              [31,41,44,32,115,111,32,119,101,32,114,101,109,111,118,101,32,
               116,104,105,115,32,98,121,32,99,97,108,108,105,110,103]}],
            0,false},
           {text,[15,42,100,114,105,118,101,114,95,115,101,108,101,99,116,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,"4If we are not connecting, we wait for results from a"}],
            0,false},
           {text,"\r*PQsendQuery*"},
           {sep,
            [{text,
              "m, so we get the result and return it. The encoding is done with the same functions as in the earlier example."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "{Error handling is to be added here, for example, checking that the socket is still open, but this is only a simple example."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "FThe Erlang part of the asynchronous driver consists of the sample file"}],
            0,false},
           {text,[14,42,112,103,95,97,115,121,110,99,46,101,114,108,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [900,10,45,109,111,100,117,108,101,40,112,103,95,97,115,121,110,
             99,41,46,10,10,45,100,101,102,105,110,101,40,68,82,86,95,67,79,
             78,78,69,67,84,44,32,36,67,41,46,10,45,100,101,102,105,110,101,
             40,68,82,86,95,68,73,83,67,79,78,78,69,67,84,44,32,36,68,41,46,
             10,45,100,101,102,105,110,101,40,68,82,86,95,83,69,76,69,67,84,
             44,32,36,83,41,46,10,10,45,101,120,112,111,114,116,40,91,99,111,
             110,110,101,99,116,47,49,44,32,100,105,115,99,111,110,110,101,99,
             116,47,49,44,32,115,101,108,101,99,116,47,50,93,41,46,10,10,99,
             111,110,110,101,99,116,40,67,111,110,110,101,99,116,83,116,114,
             41,32,45,62,10,32,32,32,32,99,97,115,101,32,101,114,108,95,100,
             100,108,108,58,108,111,97,100,95,100,114,105,118,101,114,40,34,
             46,34,44,32,34,112,103,95,97,115,121,110,99,34,41,32,111,102,10,
             32,32,32,32,32,32,32,32,111,107,32,45,62,32,111,107,59,10,32,32,
             32,32,32,32,32,32,123,101,114,114,111,114,44,32,97,108,114,101,
             97,100,121,95,108,111,97,100,101,100,125,32,45,62,32,111,107,59,
             10,32,32,32,32,32,32,32,32,95,32,45,62,32,101,120,105,116,40,123,
             101,114,114,111,114,44,32,99,111,117,108,100,95,110,111,116,95,
             108,111,97,100,95,100,114,105,118,101,114,125,41,10,32,32,32,32,
             101,110,100,44,10,32,32,32,32,80,111,114,116,32,61,32,111,112,
             101,110,95,112,111,114,116,40,123,115,112,97,119,110,44,32,63,77,
             79,68,85,76,69,125,44,32,91,98,105,110,97,114,121,93,41,44,10,32,
             32,32,32,112,111,114,116,95,99,111,110,116,114,111,108,40,80,111,
             114,116,44,32,63,68,82,86,95,67,79,78,78,69,67,84,44,32,67,111,
             110,110,101,99,116,83,116,114,41,44,10,32,32,32,32,99,97,115,101,
             32,114,101,116,117,114,110,95,112,111,114,116,95,100,97,116,97,
             40,80,111,114,116,41,32,111,102,10,32,32,32,32,32,32,32,32,111,
             107,32,45,62,32,10,32,32,32,32,32,32,32,32,32,32,32,32,123,111,
             107,44,32,80,111,114,116,125,59,10,32,32,32,32,32,32,32,32,69,
             114,114,111,114,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,
             69,114,114,111,114,10,32,32,32,32,101,110,100,46,32,32,32,32,10,
             10,100,105,115,99,111,110,110,101,99,116,40,80,111,114,116,41,32,
             45,62,10,32,32,32,32,112,111,114,116,95,99,111,110,116,114,111,
             108,40,80,111,114,116,44,32,63,68,82,86,95,68,73,83,67,79,78,78,
             69,67,84,44,32,34,34,41,44,10,32,32,32,32,82,32,61,32,114,101,
             116,117,114,110,95,112,111,114,116,95,100,97,116,97,40,80,111,
             114,116,41,44,10,32,32,32,32,112,111,114,116,95,99,108,111,115,
             101,40,80,111,114,116,41,44,10,32,32,32,32,82,46,10,10,115,101,
             108,101,99,116,40,80,111,114,116,44,32,81,117,101,114,121,41,32,
             45,62,10,32,32,32,32,112,111,114,116,95,99,111,110,116,114,111,
             108,40,80,111,114,116,44,32,63,68,82,86,95,83,69,76,69,67,84,44,
             32,81,117,101,114,121,41,44,10,32,32,32,32,114,101,116,117,114,
             110,95,112,111,114,116,95,100,97,116,97,40,80,111,114,116,41,46,
             10,10,114,101,116,117,114,110,95,112,111,114,116,95,100,97,116,
             97,40,80,111,114,116,41,32,45,62,10,32,32,32,32,114,101,99,101,
             105,118,101,10,32,32,32,32,32,32,32,32,123,80,111,114,116,44,32,
             123,100,97,116,97,44,32,68,97,116,97,125,125,32,45,62,10,32,32,
             32,32,32,32,32,32,32,32,32,32,98,105,110,97,114,121,95,116,111,
             95,116,101,114,109,40,68,97,116,97,41,10,32,32,32,32,101,110,100,
             46,10,32,32,32,32]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "XThe Erlang code is slightly different, as we do not return the result synchronously from"}],
            0,false},
           {text,[14,42,112,111,114,116,95,99,111,110,116,114,111,108,42]},
           {sep,
            [{text,
              [24,44,32,105,110,115,116,101,97,100,32,119,101,32,103,101,116,
               32,105,116,32,102,114,111,109]}],
            0,false},
           {text,
            [15,42,100,114,105,118,101,114,95,111,117,116,112,117,116,42]},
           {sep,
            [{text,"*as data in the message queue. The function"}],
            0,false},
           {text,
            [18,42,114,101,116,117,114,110,95,112,111,114,116,95,100,97,116,
             97,42]},
           {sep,
            [{text,
              "Jabove receives data from the port. As the data is in binary format, we use"}],
            0,false},
           {text,
            [18,42,98,105,110,97,114,121,95,116,111,95,116,101,114,109,47,49,
             42]},
           {sep,
            [{text,
              "Rto convert it to an Erlang term. Notice that the driver is opened in binary mode ("}],
            0,false},
           {text,"\r*open_port/2*"},
           {sep,
            [{text,
              [21,105,115,32,99,97,108,108,101,100,32,119,105,116,104,32,111,
               112,116,105,111,110]}],
            0,false},
           {text,"\n*[binary]*"},
           {sep,
            [{text,
              "`). This means that data sent from the driver to the emulator is sent as binaries. Without option"}],
            0,false},
           {text,"\b*binary*"},
           {sep,
            [{text,"), they would have been lists of integers."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,",## An Asynchronous Driver Using driver_async"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,",As a final example we demonstrate the use of"}],
           0,false},
          {text,[14,42,100,114,105,118,101,114,95,97,115,121,110,99,42]},
          {sep,
           [{text,
             [127,46,32,87,101,32,97,108,115,111,32,117,115,101,32,116,104,
              101,32,100,114,105,118,101,114,32,116,101,114,109,32,105,110,
              116,101,114,102,97,99,101,46,32,84,104,101,32,100,114,105,118,
              101,114,32,105,115,32,119,114,105,116,116,101,110,32,105,110,32,
              67,43,43,46,32,84,104,105,115,32,101,110,97,98,108,101,115,32,
              117,115,32,116,111,32,117,115,101,32,97,110,32,97,108,103,111,
              114,105,116,104,109,32,102,114,111,109,32,83,84,76,46,32,87,101,
              32,117,115,101,32,116,104,101]}],
           0,false},
          {text,
           [18,42,110,101,120,116,95,112,101,114,109,117,116,97,116,105,111,
            110,42]},
          {sep,
           [{text,
             "Nalgorithm to get the next permutation of a list of integers. For large lists ("}],
           0,false},
          {sep,
           [{text,
             "V> 100,000 elements), this takes some time, so we perform this as an asynchronous task."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "rThe asynchronous API for drivers is complicated. First, the work must be prepared. In the example, this is done in"}],
           0,false},
          {text,"\b*output*"},
          {sep,
           [{text,
             [20,46,32,87,101,32,99,111,117,108,100,32,104,97,118,101,32,117,
              115,101,100]}],
           0,false},
          {text,"\t*control*"},
          {sep,
           [{text,
             [452,44,32,98,117,116,32,119,101,32,119,97,110,116,32,115,111,
              109,101,32,118,97,114,105,97,116,105,111,110,32,105,110,32,116,
              104,101,32,101,120,97,109,112,108,101,115,46,32,73,110,32,111,
              117,114,32,100,114,105,118,101,114,44,32,119,101,32,97,108,108,
              111,99,97,116,101,32,97,32,115,116,114,117,99,116,117,114,101,
              32,116,104,97,116,32,99,111,110,116,97,105,110,115,32,97,110,
              121,116,104,105,110,103,32,116,104,97,116,32,105,115,32,110,101,
              101,100,101,100,32,102,111,114,32,116,104,101,32,97,115,121,110,
              99,104,114,111,110,111,117,115,32,116,97,115,107,32,116,111,32,
              100,111,32,116,104,101,32,119,111,114,107,46,32,84,104,105,115,
              32,105,115,32,100,111,110,101,32,105,110,32,116,104,101,32,109,
              97,105,110,32,101,109,117,108,97,116,111,114,32,116,104,114,101,
              97,100,46,32,84,104,101,110,32,116,104,101,32,97,115,121,110,99,
              104,114,111,110,111,117,115,32,102,117,110,99,116,105,111,110,
              32,105,115,32,99,97,108,108,101,100,32,102,114,111,109,32,97,32,
              100,114,105,118,101,114,32,116,104,114,101,97,100,44,32,115,101,
              112,97,114,97,116,101,32,102,114,111,109,32,116,104,101,32,109,
              97,105,110,32,101,109,117,108,97,116,111,114,32,116,104,114,101,
              97,100,46,32,78,111,116,105,99,101,32,116,104,97,116,32,116,104,
              101,32,100,114,105,118,101,114,32,102,117,110,99,116,105,111,
              110,115,32,97,114,101,32,110,111,116,32,114,101,45,101,110,116,
              114,97,110,116,44,32,115,111,32,116,104,101,121,32,97,114,101,
              32,110,111,116,32,116,111,32,98,101,32,117,115,101,100,46,32,70,
              105,110,97,108,108,121,44,32,97,102,116,101,114,32,116,104,101,
              32,102,117,110,99,116,105,111,110,32,105,115,32,99,111,109,112,
              108,101,116,101,100,44,32,116,104,101,32,100,114,105,118,101,
              114,32,99,97,108,108,98,97,99,107]}],
           0,false},
          {text,"\r*ready_async*"},
          {sep,
           [{text,
             "Ãis called from the main emulator thread, this is where we return the result to Erlang. (We cannot return the result from within the asynchronous function, as we cannot call the driver functions.)"}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,"*The following code is from the sample file"}],0,false},
          {text,[14,42,110,101,120,116,95,112,101,114,109,46,99,99,42]},
          {sep,
           [{text,
             "D. The driver entry looks like before, but also contains the callback"}],
           0,false},
          {text,"\r*ready_async*"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [715,10,115,116,97,116,105,99,32,69,114,108,68,114,118,69,110,116,
            114,121,32,110,101,120,116,95,112,101,114,109,95,100,114,105,118,
            101,114,95,101,110,116,114,121,32,61,32,123,10,32,32,32,32,78,85,
            76,76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,47,42,32,105,110,105,116,32,42,47,10,32,32,32,32,
            115,116,97,114,116,44,10,32,32,32,32,78,85,76,76,44,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,
            32,115,116,111,112,32,42,47,10,32,32,32,32,111,117,116,112,117,
            116,44,10,32,32,32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,114,101,97,
            100,121,95,105,110,112,117,116,32,42,47,10,32,32,32,32,78,85,76,
            76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,47,42,32,114,101,97,100,121,95,111,117,116,112,117,
            116,32,42,47,32,10,32,32,32,32,34,110,101,120,116,95,112,101,114,
            109,34,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,
            42,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,
            100,114,105,118,101,114,32,42,47,10,32,32,32,32,78,85,76,76,44,32,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
            32,47,42,32,102,105,110,105,115,104,32,42,47,10,32,32,32,32,78,85,
            76,76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,47,42,32,104,97,110,100,108,101,32,42,47,10,32,32,
            32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,47,42,32,99,111,110,116,114,111,108,32,
            42,47,10,32,32,32,32,78,85,76,76,44,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,42,32,116,105,109,
            101,111,117,116,32,42,47,10,32,32,32,32,78,85,76,76,44,32,32,32,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,
            42,32,111,117,116,112,117,116,118,32,42,47,10,32,32,32,32,114,101,
            97,100,121,95,97,115,121,110,99,44,10,32,32,32,32,78,85,76,76,44,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
            32,32,47,42,32,102,108,117,115,104,32,42,47,10,32,32,32,32,78,85,
            76,76,44,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,47,42,32,99,97,108,108,32,42,47,10,32,32,32,32,78,
            85,76,76,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,47,42,32,101,118,101,110,116,32,42,47,10,125,59,
            10,32,32,32,32]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,[3,84,104,101]}],0,false},
          {text,"\b*output*"},
          {sep,
           [{text,
             "Èfunction allocates the work area of the asynchronous function. As we use C++, we use a struct, and stuff the data in it. We must copy the original data, it is not valid after we have returned from the"}],
           0,false},
          {text,"\b*output*"},
          {sep,
           [{text,
             [17,102,117,110,99,116,105,111,110,44,32,97,110,100,32,116,104,
              101]}],
           0,false},
          {text,"\t*do_perm*"},
          {sep,
           [{text,
             "lfunction is called later, and from another thread. We return no data here, instead it is sent later from the"}],
           0,false},
          {text,"\r*ready_async*"},
          {sep,[{text,"\tcallback."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,[3,84,104,101]}],0,false},
          {text,"\f*async_data*"},
          {sep,
           [{text,
             [16,105,115,32,112,97,115,115,101,100,32,116,111,32,116,104,
              101]}],
           0,false},
          {text,"\t*do_perm*"},
          {sep,
           [{text,
             [25,102,117,110,99,116,105,111,110,46,32,87,101,32,100,111,32,
              110,111,116,32,117,115,101,32,97]}],
           0,false},
          {text,"\f*async_free*"},
          {sep,
           [{text,
             [30,102,117,110,99,116,105,111,110,32,40,116,104,101,32,108,97,
              115,116,32,97,114,103,117,109,101,110,116,32,116,111]}],
           0,false},
          {text,[14,42,100,114,105,118,101,114,95,97,115,121,110,99,42]},
          {sep,
           [{text,
             "=), it is only used if the task is cancelled programmatically."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [673,10,115,116,114,117,99,116,32,111,117,114,95,97,115,121,110,99,
            95,100,97,116,97,32,123,10,32,32,32,32,98,111,111,108,32,112,114,
            101,118,59,10,32,32,32,32,118,101,99,116,111,114,60,105,110,116,
            62,32,100,97,116,97,59,10,32,32,32,32,111,117,114,95,97,115,121,
            110,99,95,100,97,116,97,40,69,114,108,68,114,118,80,111,114,116,
            32,112,44,32,105,110,116,32,99,111,109,109,97,110,100,44,32,99,
            111,110,115,116,32,99,104,97,114,42,32,98,117,102,44,32,105,110,
            116,32,108,101,110,41,59,10,125,59,10,10,111,117,114,95,97,115,
            121,110,99,95,100,97,116,97,58,58,111,117,114,95,97,115,121,110,
            99,95,100,97,116,97,40,69,114,108,68,114,118,80,111,114,116,32,
            112,44,32,105,110,116,32,99,111,109,109,97,110,100,44,10,32,32,32,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,99,111,110,115,116,32,99,104,97,114,42,32,98,
            117,102,44,32,105,110,116,32,108,101,110,41,10,32,32,32,32,58,32,
            112,114,101,118,40,99,111,109,109,97,110,100,32,61,61,32,50,41,44,
            10,32,32,32,32,32,32,100,97,116,97,40,40,105,110,116,42,41,98,117,
            102,44,32,40,105,110,116,42,41,98,117,102,32,43,32,108,101,110,32,
            47,32,115,105,122,101,111,102,40,105,110,116,41,41,10,123,10,125,
            10,10,115,116,97,116,105,99,32,118,111,105,100,32,100,111,95,112,
            101,114,109,40,118,111,105,100,42,32,97,115,121,110,99,95,100,97,
            116,97,41,59,10,10,115,116,97,116,105,99,32,118,111,105,100,32,
            111,117,116,112,117,116,40,69,114,108,68,114,118,68,97,116,97,32,
            100,114,118,95,100,97,116,97,44,32,99,104,97,114,32,42,98,117,102,
            44,32,105,110,116,32,108,101,110,41,10,123,10,32,32,32,32,105,102,
            32,40,42,98,117,102,32,60,32,49,32,124,124,32,42,98,117,102,32,62,
            32,50,41,32,114,101,116,117,114,110,59,10,32,32,32,32,69,114,108,
            68,114,118,80,111,114,116,32,112,111,114,116,32,61,32,114,101,105,
            110,116,101,114,112,114,101,116,95,99,97,115,116,60,69,114,108,68,
            114,118,80,111,114,116,62,40,100,114,118,95,100,97,116,97,41,59,
            10,32,32,32,32,118,111,105,100,42,32,97,115,121,110,99,95,100,97,
            116,97,32,61,32,110,101,119,32,111,117,114,95,97,115,121,110,99,
            95,100,97,116,97,40,112,111,114,116,44,32,42,98,117,102,44,32,98,
            117,102,43,49,44,32,108,101,110,41,59,10,32,32,32,32,100,114,105,
            118,101,114,95,97,115,121,110,99,40,112,111,114,116,44,32,78,85,
            76,76,44,32,100,111,95,112,101,114,109,44,32,97,115,121,110,99,95,
            100,97,116,97,44,32,100,111,95,102,114,101,101,41,59,10,125,10,32,
            32,32,32]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,[6,73,110,32,116,104,101]}],0,false},
          {text,"\t*do_perm*"},
          {sep,
           [{text,
             "@we do the work, operating on the structure that was allocated in"}],
           0,false},
          {text,"\b*output*"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [260,10,115,116,97,116,105,99,32,118,111,105,100,32,100,111,95,112,
            101,114,109,40,118,111,105,100,42,32,97,115,121,110,99,95,100,97,
            116,97,41,10,123,10,32,32,32,32,111,117,114,95,97,115,121,110,99,
            95,100,97,116,97,42,32,100,32,61,32,114,101,105,110,116,101,114,
            112,114,101,116,95,99,97,115,116,60,111,117,114,95,97,115,121,110,
            99,95,100,97,116,97,42,62,40,97,115,121,110,99,95,100,97,116,97,
            41,59,10,32,32,32,32,105,102,32,40,100,45,62,112,114,101,118,41,
            10,32,32,32,32,32,32,32,32,112,114,101,118,95,112,101,114,109,117,
            116,97,116,105,111,110,40,100,45,62,100,97,116,97,46,98,101,103,
            105,110,40,41,44,32,100,45,62,100,97,116,97,46,101,110,100,40,41,
            41,59,10,32,32,32,32,101,108,115,101,10,32,32,32,32,32,32,32,32,
            110,101,120,116,95,112,101,114,109,117,116,97,116,105,111,110,40,
            100,45,62,100,97,116,97,46,98,101,103,105,110,40,41,44,32,100,45,
            62,100,97,116,97,46,101,110,100,40,41,41,59,10,125,10,32,32,32,
            32]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,[6,73,110,32,116,104,101]}],0,false},
          {text,"\r*ready_async*"},
          {sep,
           [{text,
             "Zfunction the output is sent back to the emulator. We use the driver term format instead of"}],
           0,false},
          {text,[4,42,101,105,42]},
          {sep,
           [{text,
             "h. This is the only way to send Erlang terms directly to a driver, without having the Erlang code to call"}],
           0,false},
          {text,
           [18,42,98,105,110,97,114,121,95,116,111,95,116,101,114,109,47,49,
            42]},
          {sep,
           [{text,
             "B. In the simple example this works well, and we do not need to use"}],
           0,false},
          {text,[4,42,101,105,42]},
          {sep,[{text,"!to handle the binary term format."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"2When the data is returned, we deallocate our data."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [635,10,115,116,97,116,105,99,32,118,111,105,100,32,114,101,97,100,
            121,95,97,115,121,110,99,40,69,114,108,68,114,118,68,97,116,97,32,
            100,114,118,95,100,97,116,97,44,32,69,114,108,68,114,118,84,104,
            114,101,97,100,68,97,116,97,32,97,115,121,110,99,95,100,97,116,97,
            41,10,123,10,32,32,32,32,69,114,108,68,114,118,80,111,114,116,32,
            112,111,114,116,32,61,32,114,101,105,110,116,101,114,112,114,101,
            116,95,99,97,115,116,60,69,114,108,68,114,118,80,111,114,116,62,
            40,100,114,118,95,100,97,116,97,41,59,10,32,32,32,32,111,117,114,
            95,97,115,121,110,99,95,100,97,116,97,42,32,100,32,61,32,114,101,
            105,110,116,101,114,112,114,101,116,95,99,97,115,116,60,111,117,
            114,95,97,115,121,110,99,95,100,97,116,97,42,62,40,97,115,121,110,
            99,95,100,97,116,97,41,59,10,32,32,32,32,105,110,116,32,110,32,61,
            32,100,45,62,100,97,116,97,46,115,105,122,101,40,41,44,32,114,101,
            115,117,108,116,95,110,32,61,32,110,42,50,32,43,32,51,59,10,32,32,
            32,32,69,114,108,68,114,118,84,101,114,109,68,97,116,97,32,42,114,
            101,115,117,108,116,32,61,32,110,101,119,32,69,114,108,68,114,118,
            84,101,114,109,68,97,116,97,91,114,101,115,117,108,116,95,110,93,
            44,32,42,114,112,32,61,32,114,101,115,117,108,116,59,10,32,32,32,
            32,102,111,114,32,40,118,101,99,116,111,114,60,105,110,116,62,58,
            58,105,116,101,114,97,116,111,114,32,105,32,61,32,100,45,62,100,
            97,116,97,46,98,101,103,105,110,40,41,59,10,32,32,32,32,32,32,32,
            32,32,105,32,33,61,32,100,45,62,100,97,116,97,46,101,110,100,40,
            41,59,32,43,43,105,41,32,123,10,32,32,32,32,32,32,32,32,42,114,
            112,43,43,32,61,32,69,82,76,95,68,82,86,95,73,78,84,59,10,32,32,
            32,32,32,32,32,32,42,114,112,43,43,32,61,32,42,105,59,10,32,32,32,
            32,125,10,32,32,32,32,42,114,112,43,43,32,61,32,69,82,76,95,68,82,
            86,95,78,73,76,59,10,32,32,32,32,42,114,112,43,43,32,61,32,69,82,
            76,95,68,82,86,95,76,73,83,84,59,10,32,32,32,32,42,114,112,43,43,
            32,61,32,110,43,49,59,10,32,32,32,32,100,114,105,118,101,114,95,
            111,117,116,112,117,116,95,116,101,114,109,40,112,111,114,116,44,
            32,114,101,115,117,108,116,44,32,114,101,115,117,108,116,95,110,
            41,59,32,32,32,32,10,32,32,32,32,100,101,108,101,116,101,91,93,32,
            114,101,115,117,108,116,59,10,32,32,32,32,100,101,108,101,116,101,
            32,100,59,10,125,10,32,32,32,32]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "EThis driver is called like the others from Erlang. However, as we use"}],
           0,false},
          {text,
           [20,42,100,114,105,118,101,114,95,111,117,116,112,117,116,95,116,
            101,114,109,42]},
          {sep,
           [{text,
             [26,44,32,116,104,101,114,101,32,105,115,32,110,111,32,110,101,
              101,100,32,116,111,32,99,97,108,108]}],
           0,false},
          {text,
           [16,42,98,105,110,97,114,121,95,116,111,95,116,101,114,109,42]},
          {sep,[{text,"'. The Erlang code is in the sample file"}],0,false},
          {text,[15,42,110,101,120,116,95,112,101,114,109,46,101,114,108,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "DThe input is changed into a list of integers and sent to the driver."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [961,10,45,109,111,100,117,108,101,40,110,101,120,116,95,112,101,
            114,109,41,46,10,10,45,101,120,112,111,114,116,40,91,110,101,120,
            116,95,112,101,114,109,47,49,44,32,112,114,101,118,95,112,101,114,
            109,47,49,44,32,108,111,97,100,47,48,44,32,97,108,108,95,112,101,
            114,109,47,49,93,41,46,10,10,108,111,97,100,40,41,32,45,62,10,32,
            32,32,32,99,97,115,101,32,119,104,101,114,101,105,115,40,110,101,
            120,116,95,112,101,114,109,41,32,111,102,10,32,32,32,32,32,32,32,
            32,117,110,100,101,102,105,110,101,100,32,45,62,10,32,32,32,32,32,
            32,32,32,32,32,32,32,99,97,115,101,32,101,114,108,95,100,100,108,
            108,58,108,111,97,100,95,100,114,105,118,101,114,40,34,46,34,44,
            32,34,110,101,120,116,95,112,101,114,109,34,41,32,111,102,10,32,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,107,32,45,62,32,
            111,107,59,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,123,
            101,114,114,111,114,44,32,97,108,114,101,97,100,121,95,108,111,97,
            100,101,100,125,32,45,62,32,111,107,59,10,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,69,32,45,62,32,101,120,105,116,40,69,41,
            10,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,44,10,32,32,32,
            32,32,32,32,32,32,32,32,32,80,111,114,116,32,61,32,111,112,101,
            110,95,112,111,114,116,40,123,115,112,97,119,110,44,32,34,110,101,
            120,116,95,112,101,114,109,34,125,44,32,91,93,41,44,10,32,32,32,
            32,32,32,32,32,32,32,32,32,114,101,103,105,115,116,101,114,40,110,
            101,120,116,95,112,101,114,109,44,32,80,111,114,116,41,59,10,32,
            32,32,32,32,32,32,32,95,32,45,62,10,32,32,32,32,32,32,32,32,32,32,
            32,32,111,107,10,32,32,32,32,101,110,100,46,10,10,108,105,115,116,
            95,116,111,95,105,110,116,101,103,101,114,95,98,105,110,97,114,
            105,101,115,40,76,41,32,45,62,10,32,32,32,32,91,60,60,73,58,51,50,
            47,105,110,116,101,103,101,114,45,110,97,116,105,118,101,62,62,32,
            124,124,32,73,32,60,45,32,76,93,46,10,10,110,101,120,116,95,112,
            101,114,109,40,76,41,32,45,62,10,32,32,32,32,110,101,120,116,95,
            112,101,114,109,40,76,44,32,49,41,46,10,10,112,114,101,118,95,112,
            101,114,109,40,76,41,32,45,62,10,32,32,32,32,110,101,120,116,95,
            112,101,114,109,40,76,44,32,50,41,46,10,10,110,101,120,116,95,112,
            101,114,109,40,76,44,32,78,120,116,41,32,45,62,10,32,32,32,32,108,
            111,97,100,40,41,44,10,32,32,32,32,66,32,61,32,108,105,115,116,95,
            116,111,95,105,110,116,101,103,101,114,95,98,105,110,97,114,105,
            101,115,40,76,41,44,10,32,32,32,32,112,111,114,116,95,99,111,110,
            116,114,111,108,40,110,101,120,116,95,112,101,114,109,44,32,78,
            120,116,44,32,66,41,44,10,32,32,32,32,114,101,99,101,105,118,101,
            10,32,32,32,32,32,32,32,32,82,101,115,117,108,116,32,45,62,10,32,
            32,32,32,32,32,32,32,32,32,32,32,82,101,115,117,108,116,10,32,32,
            32,32,101,110,100,46,10,10,97,108,108,95,112,101,114,109,40,76,41,
            32,45,62,10,32,32,32,32,78,101,119,32,61,32,112,114,101,118,95,
            112,101,114,109,40,76,41,44,10,32,32,32,32,97,108,108,95,112,101,
            114,109,40,78,101,119,44,32,76,44,32,91,78,101,119,93,41,46,10,10,
            97,108,108,95,112,101,114,109,40,76,44,32,76,44,32,65,99,99,41,32,
            45,62,10,32,32,32,32,65,99,99,59,10,97,108,108,95,112,101,114,109,
            40,76,44,32,79,114,105,103,44,32,65,99,99,41,32,45,62,10,32,32,32,
            32,78,101,119,32,61,32,112,114,101,118,95,112,101,114,109,40,76,
            41,44,10,32,32,32,32,97,108,108,95,112,101,114,109,40,78,101,119,
            44,32,79,114,105,103,44,32,91,78,101,119,32,124,32,65,99,99,93,41,
            46,10,32,32,32,32]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}}],
  0,false}}
