{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[16,35,32,115,110,109,112,97,95,108,111,99,97,108,95,100,98]},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {text,[16,35,32,115,110,109,112,97,95,108,111,99,97,108,95,100,98]},
         null},
        null}}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [26,84,104,101,32,83,78,77,80,32,98,117,105,108,116,45,105,110,
              32,100,97,116,97,98,97,115,101]}],
           0,false}],
         0,true},
        null},
       null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\nThe module"}],0,false},
                  {text,
                   [16,42,115,110,109,112,97,95,108,111,99,97,108,95,100,98,
                    42]},
                  {sep,
                   [{text,
                     [260,99,111,110,116,97,105,110,115,32,102,117,110,99,116,
                      105,111,110,115,32,102,111,114,32,105,109,112,108,101,
                      109,101,110,116,105,110,103,32,116,97,98,108,101,115,32,
                      40,97,110,100,32,118,97,114,105,97,98,108,101,115,41,32,
                      117,115,105,110,103,32,116,104,101,32,83,78,77,80,32,98,
                      117,105,108,116,45,105,110,32,100,97,116,97,98,97,115,
                      101,46,32,84,104,101,32,100,97,116,97,98,97,115,101,32,
                      101,120,105,115,116,115,32,105,110,32,116,119,111,32,
                      105,110,115,116,97,110,99,101,115,44,32,111,110,101,32,
                      118,111,108,97,116,105,108,101,32,97,110,100,32,111,110,
                      101,32,112,101,114,115,105,115,116,101,110,116,46,32,84,
                      104,101,32,118,111,108,97,116,105,108,101,32,100,97,116,
                      97,98,97,115,101,32,105,115,32,105,109,112,108,101,109,
                      101,110,116,101,100,32,119,105,116,104,32,101,116,115,
                      46,32,84,104,101,32,112,101,114,115,105,115,116,101,110,
                      116,32,100,97,116,97,98,97,115,101,32,105,115,32,105,
                      109,112,108,101,109,101,110,116,101,100,32,119,105,116,
                      104,32,100,101,116,115,46]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,".There is a scaling problem with this database."}],
                 0,false}],
               0,true},
              null},
             null}},
           {sep,
            [{text,[1,42]},
             {text,
              ":Insertions and deletions are inefficient for large tables."}],
            0,false},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "4This problem is best solved by using Mnesia instead."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "1The following functions describe the interface to"}],
                   0,false},
                  {text,
                   [16,42,115,110,109,112,97,95,108,111,99,97,108,95,100,98,
                    42]},
                  {sep,
                   [{text,
                     "5. Each function has a Mnesia equivalent. The argument"}],
                   0,false},
                  {text,"\b*NameDb*"},
                  {sep,[{text,"\nis a tuple"}],0,false},
                  {text,"\f*{Name, Db}*"},
                  {sep,[{text,[5,119,104,101,114,101]}],0,false},
                  {text,[6,42,78,97,109,101,42]},
                  {sep,
                   [{text,
                     "Gis the symbolic name of the managed object (as defined in the MIB), and"}],
                   0,false},
                  {text,[4,42,68,98,42]},
                  {sep,[{text,"\tis either"}],0,false},
                  {text,"\n*volatile*"},
                  {sep,[{text,[2,111,114]}],0,false},
                  {text,"\f*persistent*"},
                  {sep,[{text,[1,46]}],0,false},
                  {text,"\b*mnesia*"},
                  {sep,
                   [{text,"-is not possible since all these functions are"}],
                   0,false},
                  {text,
                   [16,42,115,110,109,112,97,95,108,111,99,97,108,95,100,98,
                    42]},
                  {sep,[{text,"\tspecific."}],0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}],
        0,true},
       null},
      null}}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [20,35,35,32,67,111,109,109,111,110,32,68,97,116,97,32,84,121,112,
          101,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "=In the functions defined below, the following types are used:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [21,42,78,97,109,101,68,98,32,61,32,123,78,97,109,101,44,32,68,
              98,125,42]}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"+*Name = atom(), Db = volatile | persistent*"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [20,42,82,111,119,73,110,100,101,120,32,61,32,91,105,110,116,40,
             41,93,42]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           "<*Cols = [Col] | [{Col, Value}], Col = int(), Value = term()*"}],
         0,false}],
       0,false}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[5,119,104,101,114,101]}],0,false},
            {text,"\n*RowIndex*"},
            {sep,
             [{text,
               "Sdenotes the last part of the OID, that specifies the index of the row in the table."}],
             0,false},
            {text,[6,42,67,111,108,115,42]},
            {sep,
             [{text,
               "{is a list of column numbers in case of a get operation, and a list of column numbers and values in case of a set operation."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## dump() -> ok | {error, Reason}"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [25,68,117,109,112,32,116,104,101,32,100,97,116,97,98,97,115,101,
             32,116,111,32,100,105,115,107]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "@This function can be used to manually dump the database to file."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [25,35,35,32,109,97,116,99,104,40,78,97,109,101,68,98,44,32,80,97,116,
         116,101,114,110,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [28,80,101,114,102,111,114,109,32,97,32,109,97,116,99,104,32,111,
             110,32,116,104,101,32,116,97,98,108,101]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "fPerforms an ets/dets matching on the table. See Stdlib documentation, module ets, for a description of"}],
              0,false},
             {text,"\t*Pattern*"},
             {sep,
              [{text,
                [22,97,110,100,32,116,104,101,32,114,101,116,117,114,110,32,
                 118,97,108,117,101,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\n## print()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [19,35,35,32,112,114,105,110,116,40,84,97,98,108,101,78,97,109,101,
         41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [23,35,35,32,112,114,105,110,116,40,84,97,98,108,101,78,97,109,101,44,
         32,68,98,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [28,80,114,105,110,116,32,116,104,101,32,100,97,116,97,98,97,115,
             101,32,116,111,32,115,99,114,101,101,110]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [18,84,97,98,108,101,78,97,109,101,32,61,32,97,116,111,109,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "UPrints the contents of the database on screen. This is useful for debugging since the"}],
              0,false},
             {text,[14,42,83,84,65,78,68,65,82,68,45,77,73,66,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[16,42,79,84,80,45,83,78,77,80,69,65,45,77,73,66,42]},
             {sep,[{text,"'(and maybe your own MIBs) are stored in"}],0,false},
             {text,
              [16,42,115,110,109,112,97,95,108,111,99,97,108,95,100,98,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\v*TableName*"},
             {sep,
              [{text,
                "^is an atom for a table in the database. When no name is supplied, the whole database is shown."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## table_create(NameDb) -> bool()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,[14,67,114,101,97,116,101,32,97,32,116,97,98,108,101]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "GCreates a table. If the table already exist, the old copy is destroyed."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[6,105,102,32,116,104,101]}],0,false},
             {text,"\b*NameDb*"},
             {sep,[{text,"\"argument is incorrectly specified,"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,"\notherwise."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"4## table_create_row(NameDb, RowIndex, Row) -> bool()"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [23,67,114,101,97,116,101,32,97,32,114,111,119,32,105,110,32,97,
             32,116,97,98,108,101]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [29,82,111,119,32,61,32,123,86,97,108,49,44,32,86,97,108,50,44,32,
           46,46,46,44,32,86,97,108,78,125]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"!Val1 = Val2 = ... = ValN = term()"}],0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [25,67,114,101,97,116,101,115,32,97,32,114,111,119,32,105,110,
                 32,97,32,116,97,98,108,101,46]}],
              0,false},
             {text,[5,42,82,111,119,42]},
             {sep,
              [{text,
                "Dis a tuple with values for all columns, including the index columns."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## table_delete(NameDb) -> void()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,[14,68,101,108,101,116,101,32,97,32,116,97,98,108,101]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [16,68,101,108,101,116,101,115,32,97,32,116,97,98,108,101,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"/## table_delete_row(NameDb, RowIndex) -> bool()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,[{sep,[{text,"\eDelete the row in the table"}],0,false}],0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [29,68,101,108,101,116,101,115,32,116,104,101,32,114,111,119,32,
               105,110,32,116,104,101,32,116,97,98,108,101,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## table_exists(NameDb) -> bool()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [23,67,104,101,99,107,32,105,102,32,97,32,116,97,98,108,101,32,
             101,120,105,115,116,115]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [25,67,104,101,99,107,115,32,105,102,32,97,32,116,97,98,108,101,
               32,101,120,105,115,116,115,46]}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"5## table_get_row(NameDb, RowIndex) -> Row | undefined"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [24,71,101,116,32,97,32,114,111,119,32,102,114,111,109,32,116,104,
             101,32,116,97,98,108,101]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [29,82,111,119,32,61,32,123,86,97,108,49,44,32,86,97,108,50,44,32,
           46,46,46,44,32,86,97,108,78,125]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"!Val1 = Val2 = ... = ValN = term()"}],0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[5,42,82,111,119,42]},
             {sep,
              [{text,
                "Dis a tuple with values for all columns, including the index columns."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## See Also"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," ets(3), dets(3), snmp_generic(3)"}],0,false}],
       0,true},
      null},
     null}}],
  0,false}}
