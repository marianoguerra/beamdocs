{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,[6,35,32,115,110,109,112]},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,[6,35,32,115,110,109,112]},null},null}}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"'Interface functions to the SNMP toolkit"}],0,false}],
         0,true},
        null},
       null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\nThe module"}],0,false},
                  {text,[6,42,115,110,109,112,42]},
                  {sep,
                   [{text,
                     "1contains interface functions to the SNMP toolkit."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}],
        0,true},
       null},
      null}}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [20,35,35,32,67,111,109,109,111,110,32,68,97,116,97,32,84,121,112,
          101,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "9The following data-types are used in the functions below:"}],
           0,false}],
         0,true},
        null},
       null}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 [31,42,100,97,116,101,116,105,109,101,40,41,32,61,32,123,100,
                  97,116,101,40,41,44,32,116,105,109,101,40,41,125,42]}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[3,83,101,101]}],0,false},
                {text,
                 [22,91,99,97,108,101,110,100,97,114,93,40,46,47,99,97,108,
                  101,110,100,97,114,41]},
                {sep,
                 [{text,
                   [14,102,111,114,32,109,111,114,101,32,105,110,102,111,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,false},
     {text,"\e<a name=\"config\">config</a>"}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"### config() -> ok | {error, Reason}"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"(Configure with a simple interactive tool"}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [151,65,32,115,105,109,112,108,101,32,105,110,116,101,114,97,99,
               116,105,118,101,32,99,111,110,102,105,103,117,114,97,116,105,
               111,110,32,116,111,111,108,46,32,83,105,109,112,108,101,32,99,
               111,110,102,105,103,117,114,97,116,105,111,110,32,102,105,108,
               101,115,32,99,97,110,32,98,101,32,103,101,110,101,114,97,116,
               101,100,44,32,98,117,116,32,109,111,114,101,32,99,111,109,112,
               108,101,120,32,99,111,110,102,105,103,117,114,97,116,105,111,
               110,115,32,115,116,105,108,108,32,104,97,118,101,32,116,111,32,
               98,101,32,101,100,105,116,101,100,32,109,97,110,117,97,108,108,
               121,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "GThe tool is a textual based tool that asks some questions and generates"}],
              0,false},
             {text,"\f*sys.config*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\b**.conf*"},
             {sep,[{text,[6,102,105,108,101,115,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\b**Note**"},
             {sep,
              [{text,
                [136,116,104,97,116,32,105,102,32,116,104,101,32,97,112,112,
                 108,105,99,97,116,105,111,110,32,115,104,97,108,108,32,115,
                 117,112,112,111,114,116,32,118,101,114,115,105,111,110,32,51,
                 44,32,116,104,101,110,32,116,104,101,32,99,114,121,112,116,
                 111,32,97,112,112,32,109,117,115,116,32,98,101,32,115,116,97,
                 114,116,101,100,32,98,101,102,111,114,101,32,114,117,110,110,
                 105,110,103,32,116,104,105,115,32,102,117,110,99,116,105,111,
                 110,32,40,112,97,115,115,119,111,114,100,32,103,101,110,101,
                 114,97,116,105,111,110,41,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\b**Note**"},
             {sep,
              [{text,
                [131,97,108,115,111,32,116,104,97,116,32,115,111,109,101,32,
                 111,102,32,116,104,101,32,99,111,110,102,105,103,117,114,97,
                 116,105,111,110,32,102,105,108,101,115,32,102,111,114,32,116,
                 104,101,32,97,103,101,110,116,32,97,110,100,32,109,97,110,97,
                 103,101,114,32,115,104,97,114,101,32,116,104,101,32,115,97,
                 109,101,32,110,97,109,101,115,46,32,84,104,105,115,32,109,
                 101,97,110,115,32,116,104,97,116,32,116,104,101,121,32,104,
                 97,118,101,32,116,111,32,98,101,32,115,116,111,114,101,100,
                 32,105,110]}],
              0,false},
             {text,"\r**different**"},
             {sep,[{text,"\fdirectories!"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,
       [25,60,97,32,110,97,109,101,61,34,115,116,97,114,116,34,62,115,116,97,
        114,116,60,47,97,62]}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\"## start() -> ok | {error, Reason}"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"&## start(Type) -> ok | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [26,83,116,97,114,116,32,116,104,101,32,83,78,77,80,32,97,112,112,
             108,105,99,97,116,105,111,110]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [19,84,121,112,101,32,61,32,115,116,97,114,116,95,116,121,112,101,40,
          41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [28,83,116,97,114,116,115,32,116,104,101,32,83,78,77,80,32,97,
               112,112,108,105,99,97,116,105,111,110,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[3,83,101,101]}],0,false},
             {text,
              [28,91,97,112,112,108,105,99,97,116,105,111,110,93,40,46,47,97,
               112,112,108,105,99,97,116,105,111,110,41]},
             {sep,
              [{text,
                [14,102,111,114,32,109,111,114,101,32,105,110,102,111,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"%<a name=\"start_agent\">start_agent</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"(## start_agent() -> ok | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,",## start_agent(Type) -> ok | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Start the agent part of the SNMP application"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [19,84,121,112,101,32,61,32,115,116,97,114,116,95,116,121,112,101,40,
          41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [135,84,104,101,32,83,78,77,80,32,97,112,112,108,105,99,97,116,
               105,111,110,32,99,111,110,115,105,115,116,115,32,111,102,32,
               115,101,118,101,114,97,108,32,101,110,116,105,116,105,101,115,
               44,32,111,102,32,119,104,105,99,104,32,116,104,101,32,97,103,
               101,110,116,32,105,115,32,111,110,101,46,32,84,104,105,115,32,
               102,117,110,99,116,105,111,110,32,115,116,97,114,116,115,32,
               116,104,101,32,97,103,101,110,116,32,101,110,116,105,116,121,
               32,111,102,32,116,104,101,32,97,112,112,108,105,99,97,116,105,
               111,110,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ßNote that the only way to actually start the agent in this way is to add the agent related config after starting the application (e.g it cannot be part of the normal application config; sys.config). This is done by calling:"}],
              0,false},
             {text,"(*application:set_env(snmp, agent, Conf)*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [21,84,104,101,32,100,101,102,97,117,108,116,32,118,97,108,
                 117,101,32,102,111,114]}],
              0,false},
             {text,[6,42,84,121,112,101,42]},
             {sep,[{text,[2,105,115]}],0,false},
             {text,"\b*normal*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,")<a name=\"start_manager\">start_manager</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## start_manager() -> ok | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## start_manager(Type) -> ok | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,".Start the manager part of the SNMP application"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [19,84,121,112,101,32,61,32,115,116,97,114,116,95,116,121,112,101,40,
          41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [139,84,104,101,32,83,78,77,80,32,97,112,112,108,105,99,97,116,
               105,111,110,32,99,111,110,115,105,115,116,115,32,111,102,32,
               115,101,118,101,114,97,108,32,101,110,116,105,116,105,101,115,
               44,32,111,102,32,119,104,105,99,104,32,116,104,101,32,109,97,
               110,97,103,101,114,32,105,115,32,111,110,101,46,32,84,104,105,
               115,32,102,117,110,99,116,105,111,110,32,115,116,97,114,116,
               115,32,116,104,101,32,109,97,110,97,103,101,114,32,101,110,116,
               105,116,121,32,111,102,32,116,104,101,32,97,112,112,108,105,99,
               97,116,105,111,110,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "ãNote that the only way to actually start the manager in this way is to add the manager related config after starting the application (e.g it cannot be part of the normal application config; sys.config). This is done by calling:"}],
              0,false},
             {text,"**application:set_env(snmp, manager, Conf)*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [21,84,104,101,32,100,101,102,97,117,108,116,32,118,97,108,
                 117,101,32,102,111,114]}],
              0,false},
             {text,[6,42,84,121,112,101,42]},
             {sep,[{text,[2,105,115]}],0,false},
             {text,"\b*normal*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,
       [21,60,97,32,110,97,109,101,61,34,100,97,116,34,62,100,97,116,60,47,97,
        62]}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## date_and_time() -> DateAndTime"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"3Return the current date and time as an OCTET STRING"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [21,68,97,116,101,65,110,100,84,105,109,101,32,61,32,91,105,110,116,
          40,41,93]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "mReturns current date and time as the data type DateAndTime, as specified in RFC1903. This is an OCTET STRING."}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"#<a name=\"dat2ut_dst\">dat2ut_dst</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        ">## date_and_time_to_universal_time_dst(DateAndTime) -> [utc()]"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"7Convert a DateAndTime value to a list of possible utc()"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [21,68,97,116,101,65,110,100,84,105,109,101,32,61,32,91,105,110,116,
           40,41,93]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [26,117,116,99,40,41,32,61,32,123,123,89,44,77,111,44,68,125,44,123,
           72,44,77,44,83,125,125]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [139,67,111,110,118,101,114,116,115,32,97,32,68,97,116,101,65,
               110,100,84,105,109,101,32,108,105,115,116,32,116,111,32,97,32,
               108,105,115,116,32,111,102,32,112,111,115,115,105,98,108,101,
               32,117,110,105,118,101,114,115,97,108,32,116,105,109,101,40,
               115,41,46,32,84,104,101,32,117,110,105,118,101,114,115,97,108,
               32,116,105,109,101,32,118,97,108,117,101,32,111,110,32,116,104,
               101,32,115,97,109,101,32,102,111,114,109,97,116,32,97,115,32,
               100,101,102,105,110,101,100,32,105,110,32,99,97,108,101,110,
               100,97,114,40,51,41,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {text,
       [25,60,97,32,110,97,109,101,61,34,100,97,116,50,115,34,62,100,97,116,
        50,115,60,47,97,62]}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"3## date_and_time_to_string(DateAndTime) -> string()"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"=## date_and_time_to_string(DateAndTime, Validate) -> string()"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"'Convert a DateAndTime value to a string"}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [21,68,97,116,101,65,110,100,84,105,109,101,32,61,32,91,105,110,116,
           40,41,93]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"'Validate = fun(Kind, Data) -> boolean()"}],0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "gConverts a DateAndTime list to a printable string, according to the DISPLAY-HINT definition in RFC2579."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,84,104,101,32,118,97,108,105,100,97,116,105,111,110,32,
                 102,117,110,44]}],
              0,false},
             {text,"\n*Validate*"},
             {sep,
              [{text,"0, allows for a more \"flexible\" validation of the"}],
              0,false},
             {text,"\r*DateAndTime*"},
             {sep,
              [{text,
                "wargument. Whenever the data is found to not follow RFC2579, the fun is called to allow a more \"lax\" validation. See the"}],
              0,false},
             {text,"![validate_date_and_time/2](#vdat)"},
             {sep,
              [{text,
                [29,102,117,110,99,116,105,111,110,32,102,111,114,32,109,111,
                 114,101,32,105,110,102,111,32,111,110,32,116,104,101]}],
              0,false},
             {text,"\n*Validate*"},
             {sep,[{text,[4,102,117,110,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"\e<a name=\"dat2s2\">dat2s2</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"4## date_and_time_to_string2(DateAndTime) -> string()"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"'Convert a DateAndTime value to a string"}],0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [21,68,97,116,101,65,110,100,84,105,109,101,32,61,32,91,105,110,116,
          40,41,93]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÕConverts a DateAndTime list to a printable string, according to the DISPLAY-HINT definition in RFC2579, with the extension that it also allows the values \"hours from UTC\" = 14 together with \"minutes from UTC\" = 0."}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"#<a name=\"lt2dat_dst\">lt2dat_dst</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## local_time_to_date_and_time_dst(Local) -> [DateAndTime]"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "?Convert a Local time value to a list of possible DateAndTime(s)"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [26,76,111,99,97,108,32,61,32,123,123,89,44,77,111,44,68,125,44,123,
           72,44,77,44,83,125,125]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [21,68,97,116,101,65,110,100,84,105,109,101,32,61,32,91,105,110,116,
           40,41,93]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [137,67,111,110,118,101,114,116,115,32,97,32,108,111,99,97,108,
               32,116,105,109,101,32,118,97,108,117,101,32,116,111,32,97,32,
               108,105,115,116,32,111,102,32,112,111,115,115,105,98,108,101,
               32,68,97,116,101,65,110,100,84,105,109,101,32,108,105,115,116,
               40,115,41,46,32,84,104,101,32,108,111,99,97,108,32,116,105,109,
               101,32,118,97,108,117,101,32,111,110,32,116,104,101,32,115,97,
               109,101,32,102,111,114,109,97,116,32,97,115,32,100,101,102,105,
               110,101,100,32,105,110,32,99,97,108,101,110,100,97,114,40,51,
               41,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"\e<a name=\"ut2dat\">ut2dat</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"6## universal_time_to_date_and_time(UTC) -> DateAndTime"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"\"Convert a UTC value to DateAndTime"}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [24,85,84,67,32,61,32,123,123,89,44,77,111,44,68,125,44,123,72,44,
           77,44,83,125,125]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [21,68,97,116,101,65,110,100,84,105,109,101,32,61,32,91,105,110,116,
           40,41,93]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "}Converts a universal time value to a DateAndTime list. The universal time value on the same format as defined in calendar(3)."}],
            0,false}],
          0,true},
         null},
        null}},
      {text,
       [23,60,97,32,110,97,109,101,61,34,118,100,97,116,34,62,118,100,97,116,
        60,47,97,62]}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"0## validate_date_and_time(DateAndTime) -> bool()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## validate_date_and_time(DateAndTime, Validate) -> bool()"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"'Check if a DateAndTime value is correct"}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [20,68,97,116,101,65,110,100,84,105,109,101,32,61,32,116,101,114,
           109,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"'Validate = fun(Kind, Data) -> boolean()"}],0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,"\tChecks if"}],0,false},
             {text,"\r*DateAndTime*"},
             {sep,
              [{text,
                [144,105,115,32,97,32,99,111,114,114,101,99,116,32,68,97,116,
                 101,65,110,100,84,105,109,101,32,118,97,108,117,101,44,32,97,
                 115,32,115,112,101,99,105,102,105,101,100,32,105,110,32,82,
                 70,67,50,53,55,57,46,32,84,104,105,115,32,102,117,110,99,116,
                 105,111,110,32,99,97,110,32,98,101,32,117,115,101,100,32,105,
                 110,32,105,110,115,116,114,117,109,101,110,116,97,116,105,
                 111,110,32,102,117,110,99,116,105,111,110,115,32,116,111,32,
                 118,97,108,105,100,97,116,101,32,97,32,68,97,116,101,65,110,
                 100,84,105,109,101,32,118,97,108,117,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [19,84,104,101,32,118,97,108,105,100,97,116,105,111,110,32,
                 102,117,110,44]}],
              0,false},
             {text,"\n*Validate*"},
             {sep,
              [{text,"0, allows for a more \"flexible\" validation of the"}],
              0,false},
             {text,"\r*DateAndTime*"},
             {sep,
              [{text,
                " argument. Whenever the data is found to not follow RFC2579, the fun is called to allow a more \"lax\" validation. The input to the validation fun looks like this:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [424,10,32,32,32,32,32,32,32,32,32,32,75,105,110,100,32,32,32,
               32,32,32,32,32,32,32,32,32,32,68,97,116,97,10,32,32,32,32,32,
               32,32,32,32,32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,32,32,
               32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,
               45,45,10,32,32,32,32,32,32,32,32,32,32,121,101,97,114,32,32,32,
               32,32,32,32,32,32,32,32,32,32,123,89,101,97,114,49,44,32,89,
               101,97,114,50,125,10,32,32,32,32,32,32,32,32,32,32,109,111,110,
               116,104,32,32,32,32,32,32,32,32,32,32,32,32,77,111,110,116,104,
               10,32,32,32,32,32,32,32,32,32,32,100,97,121,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,68,97,121,10,32,32,32,32,32,32,32,32,
               32,32,104,111,117,114,32,32,32,32,32,32,32,32,32,32,32,32,32,
               72,111,117,114,10,32,32,32,32,32,32,32,32,32,32,109,105,110,
               117,116,101,32,32,32,32,32,32,32,32,32,32,32,77,105,110,117,
               116,101,10,32,32,32,32,32,32,32,32,32,32,115,101,99,111,110,
               100,115,32,32,32,32,32,32,32,32,32,32,83,101,99,111,110,100,
               115,10,32,32,32,32,32,32,32,32,32,32,100,101,99,105,95,115,101,
               99,111,110,100,115,32,32,32,32,32,68,101,99,105,83,101,99,111,
               110,100,115,10,32,32,32,32,32,32,32,32,32,32,100,105,102,102,
               32,32,32,32,32,32,32,32,32,32,32,32,32,91,83,105,103,110,44,32,
               72,111,117,114,44,32,77,105,110,117,116,101,93,10,32,32,32,32,
               32,32,32,32,32,32,118,97,108,105,100,95,100,97,116,101,32,32,
               32,32,32,32,32,123,89,101,97,114,44,32,77,111,110,116,104,44,
               32,68,97,121,125,10,9]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {text,"7<a name=\"passwd2localized_key\">passwd2localized_key</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"5## passwd2localized_key(Alg, Passwd, EngineID) -> Key"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [26,71,101,110,101,114,97,116,101,115,32,97,110,32,108,111,99,97,
             108,105,122,101,100,32,107,101,121]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [17,65,108,103,32,61,32,97,108,103,111,114,105,116,104,109,40,
              41]}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [23,97,108,103,111,114,105,116,104,109,40,41,32,61,32,109,100,53,
              32,124,32,115,104,97]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [17,80,97,115,115,119,100,32,61,32,115,116,114,105,110,103,40,
             41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [19,69,110,103,105,110,101,73,68,32,61,32,115,116,114,105,110,103,
            40,41]}],
         0,false}],
       0,false}},
     {sep,[{text,[1,42]},{sep,[{text,"\fKey = list()"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "zGenerates a key that can be used as an authentication or privacy key using MD5 och SHA. The key is localized for EngineID."}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"7<a name=\"octet_string_to_bits\">octet_string_to_bits</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## octet_string_to_bits(S) -> Val"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,67,111,110,118,101,114,116,32,97,110,32,79,67,84,69,84,45,83,
             84,82,73,78,71,32,116,111,32,66,73,84,83]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,[{text,[1,42]},{sep,[{text,"\fVal = bits()"}],0,false}],0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"/Utility function for converting a value of type"}],
              0,false},
             {text,[14,42,79,67,84,69,84,45,83,84,82,73,78,71,42]},
             {sep,[{text,[2,116,111]}],0,false},
             {text,[6,42,66,73,84,83,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"7<a name=\"bits_to_octet_string\">bits_to_octet_string</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## bits_to_octet_string(B) -> Val"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,67,111,110,118,101,114,116,32,97,110,32,79,67,84,69,84,45,83,
             84,82,73,78,71,32,116,111,32,66,73,84,83]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [20,86,97,108,32,61,32,111,99,116,101,116,95,115,116,114,105,110,103,
          40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"/Utility function for converting a value of type"}],
              0,false},
             {text,[6,42,66,73,84,83,42]},
             {sep,[{text,[2,116,111]}],0,false},
             {text,[14,42,79,67,84,69,84,45,83,84,82,73,78,71,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,
       [31,60,97,32,110,97,109,101,61,34,114,101,97,100,95,109,105,98,34,62,
        114,101,97,100,95,109,105,98,60,47,97,62]}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"6## read_mib(FileName) -> {ok, mib()} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{sep,[null],0,true},null},null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [19,70,105,108,101,78,97,109,101,32,61,32,115,116,114,105,110,103,
            40,41]}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[14,109,105,98,40,41,32,61,32,35,109,105,98,123,125]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [20,82,101,97,100,32,97,32,99,111,109,112,105,108,101,100,32,
               109,105,98,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"#<a name=\"log_to_txt\">log_to_txt</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "[## log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile) ->  ok | {ok, Cnt} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "j## log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block | Start) ->  ok | {ok, Cnt} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "o## log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Block | Stop) -> ok | {ok, Cnt} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "n## log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Stop, Block) -> ok | {ok, Cnt} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,")Convert an Audit Trail Log to text format"}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    [17,76,111,103,68,105,114,32,61,32,115,116,114,105,110,
                     103,40,41]}],
                  0,false}],
                0,false},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    [16,77,105,98,115,32,61,32,91,77,105,98,78,97,109,101,
                     93]}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   [18,79,117,116,70,105,108,101,32,61,32,115,116,114,105,110,
                    103,40,41]}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [18,77,105,98,78,97,109,101,32,61,32,115,116,114,105,110,
                   103,40,41]}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,76,111,103,78,97,109,101,32,61,32,115,116,114,105,110,
                  103,40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [18,76,111,103,70,105,108,101,32,61,32,115,116,114,105,110,
                 103,40,41]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               "XStart = Stop = null | datetime() | {local_time,datetime()} | {universal_time,datetime()}"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [17,66,108,111,99,107,32,61,32,98,111,111,108,101,97,110,40,
               41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [21,67,110,116,32,61,32,123,78,117,109,79,75,44,32,78,117,109,69,
              82,82,125]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [25,78,117,109,79,75,32,61,32,110,111,110,95,110,101,103,95,105,
             110,116,101,103,101,114,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [22,78,117,109,69,82,82,32,61,32,112,111,115,95,105,110,116,101,
            103,101,114,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "­Converts an Audit Trail Log to a readable text file, where each item has a trailing TAB character, and any TAB character in the body of an item has been replaced by ESC TAB."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "©The function can be used on a running system, or by copying the entire log directory and calling this function. SNMP must be running in order to provide MIB information."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\b*LogDir*"},
             {sep,
              [{text,
                "Ais the name of the directory where the audit trail log is stored."}],
              0,false},
             {text,[6,42,77,105,98,115,42]},
             {sep,
              [{text,
                [141,105,115,32,97,32,108,105,115,116,32,111,102,32,77,105,98,
                 115,32,116,111,32,98,101,32,117,115,101,100,46,32,84,104,101,
                 32,102,117,110,99,116,105,111,110,32,117,115,101,115,32,116,
                 104,101,32,105,110,102,111,114,109,97,116,105,111,110,32,105,
                 110,32,116,104,101,32,77,105,98,115,32,116,111,32,99,111,110,
                 118,101,114,116,32,102,111,114,32,101,120,97,109,112,108,101,
                 32,111,98,106,101,99,116,32,105,100,101,110,116,105,102,105,
                 101,114,115,32,116,111,32,116,104,101,105,114,32,115,121,109,
                 98,111,108,105,99,32,110,97,109,101,46]}],
              0,false},
             {text,"\t*OutFile*"},
             {sep,[{text,"'is the name of the generated text-file."}],0,false},
             {text,"\t*LogName*"},
             {sep,
              [{text,
                [23,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,
                 116,104,101,32,108,111,103,44]}],
              0,false},
             {text,"\t*LogFile*"},
             {sep,
              [{text,
                [28,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,
                 116,104,101,32,108,111,103,32,102,105,108,101,46]}],
              0,false},
             {text,[7,42,83,116,97,114,116,42]},
             {sep,
              [{text,
                "Nis the start (first) date and time from which log events will be converted and"}],
              0,false},
             {text,[6,42,83,116,111,112,42]},
             {sep,
              [{text,
                "Kis the stop (last) date and time to which log events will be converted. The"}],
              0,false},
             {text,[7,42,66,108,111,99,107,42]},
             {sep,
              [{text,
                "¶argument indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to"}],
              0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "9The format of an audit trail log text item is as follows:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"&*Tag Addr - Community [TimeStamp] Vsn*"},
             {above,{above,null,null},null},
             {text,[5,42,80,68,85,42]}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,[{text,[5,119,104,101,114,101]}],0,false},
             {text,[5,42,84,97,103,42]},
             {sep,[{text,[2,105,115]}],0,false},
             {text,"\t*request*"},
             {sep,[{text,[1,44]}],0,false},
             {text,"\n*response*"},
             {sep,[{text,[1,44]}],0,false},
             {text,"\b*report*"},
             {sep,[{text,[1,44]}],0,false},
             {text,[6,42,116,114,97,112,42]},
             {sep,[{text,[2,111,114]}],0,false},
             {text,"\b*inform*"},
             {sep,[{text,"\t; Addr is"}],0,false},
             {text,"\t*IP:Port*"},
             {sep,
              [{text,"((or comma space separated list of such);"}],
              0,false},
             {text,"\v*Community*"},
             {sep,
              [{text,
                "7is the community parameter (SNMP version v1 and v2), or"}],
              0,false},
             {text,"$*SecLevel:\"AuthEngineID\":\"UserName\"*"},
             {sep,[{text,"\n(SNMP v3);"}],0,false},
             {text,"\v*TimeStamp*"},
             {sep,
              [{text,
                [29,105,115,32,97,32,100,97,116,101,32,97,110,100,32,116,105,
                 109,101,32,115,116,97,109,112,44,32,97,110,100]}],
              0,false},
             {text,[5,42,86,115,110,42]},
             {sep,
              [{text,
                [20,105,115,32,116,104,101,32,83,78,77,80,32,118,101,114,115,
                 105,111,110,46]}],
              0,false},
             {text,[5,42,80,68,85,42]},
             {sep,
              [{text,
                "Kis a textual version of the protocol data unit. There is a new line between"}],
              0,false},
             {text,[5,42,86,115,110,42]},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,[5,42,80,68,85,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "EIf the entire log is successfully converted, the function will return"}],
              0,false},
             {text,[4,42,111,107,42]},
             {sep,
              [{text,
                "J. If one of more entries fail to convert, the function will instead return"}],
              0,false},
             {text,
              [23,42,123,111,107,44,32,123,78,117,109,79,75,44,32,78,117,109,
               69,82,82,125,125,42]},
             {sep,
              [{text,
                "Z, where the counters indicate how many valid and erroneous entries where found. If instead"}],
              0,false},
             {text,
              [17,42,123,101,114,114,111,114,44,32,82,101,97,115,111,110,125,
               42]},
             {sep,
              [{text,
                "dis returned, the conversion encountered a fatal error and where either never done of aborted midway."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"!<a name=\"log_to_io\">log_to_io</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "Q## log_to_io(LogDir, Mibs, LogName, LogFile) ->  ok | {ok, Cnt} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "`## log_to_io(LogDir, Mibs, LogName, LogFile, Block | Start) ->  ok | {ok, Cnt} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "e## log_to_io(LogDir, Mibs, LogName, LogFile, Start, Block | Stop) -> ok | {ok, Cnt} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        "d## log_to_io(LogDir, Mibs, LogName, LogFile, Start, Stop, Block) -> ok | {ok, Cnt} | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,")Convert an Audit Trail Log to text format"}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [17,76,111,103,68,105,114,32,61,32,115,116,114,105,110,103,
                   40,41]}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [16,77,105,98,115,32,61,32,91,77,105,98,78,97,109,101,93]}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [18,77,105,98,78,97,109,101,32,61,32,115,116,114,105,110,103,
                  40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [18,76,111,103,78,97,109,101,32,61,32,115,116,114,105,110,103,
                 40,41]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [18,76,111,103,70,105,108,101,32,61,32,115,116,114,105,110,103,
                40,41]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              "XStart = Stop = null | datetime() | {local_time,datetime()} | {universal_time,datetime()}"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [21,67,110,116,32,61,32,123,78,117,109,79,75,44,32,78,117,109,69,
              82,82,125]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [25,78,117,109,79,75,32,61,32,110,111,110,95,110,101,103,95,105,
             110,116,101,103,101,114,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [22,78,117,109,69,82,82,32,61,32,112,111,115,95,105,110,116,101,
            103,101,114,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "LConverts an Audit Trail Log to a readable format and prints it on stdio. See"}],
              0,false},
             {text,
              [31,91,108,111,103,95,116,111,95,116,120,116,93,40,46,47,115,
               110,109,112,35,108,111,103,95,116,111,95,116,120,116,41]},
             {sep,
              [{text,
                [20,97,98,111,118,101,32,102,111,114,32,109,111,114,101,32,
                 105,110,102,111,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"-<a name=\"change_log_size\">change_log_size</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"<## change_log_size(LogName, NewSize) -> ok | {error, Reason}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"&Change the size of the Audit Trail Log"}],0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [18,76,111,103,78,97,109,101,32,61,32,115,116,114,105,110,103,40,
              41]}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [30,78,101,119,83,105,122,101,32,61,32,123,77,97,120,66,121,116,
              101,115,44,32,77,97,120,70,105,108,101,115,125]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [20,77,97,120,66,121,116,101,115,32,61,32,105,110,116,101,103,101,
             114,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [20,77,97,120,70,105,108,101,115,32,61,32,105,110,116,101,103,101,
            114,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "ÜChanges the log size of the Audit Trail Log. The application must be configured to use the audit trail log function. Please refer to disk_log(3) in Kernel Reference Manual for a description of how to change the log size."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "rThe change is permanent, as long as the log is not deleted. That means, the log size is remembered across reboots."}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"3<a name=\"print_version_info\">print_version_info</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## print_version_info() -> void()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"'## print_version_info(Prefix) -> void()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"3Formatted print of result of the versions functions"}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [29,80,114,101,102,105,120,32,61,32,115,116,114,105,110,103,40,41,32,
          124,32,105,110,116,101,103,101,114,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "YUtility function(s) to produce a formatted printout of the versions info generated by the"}],
              0,false},
             {text,"\v*versions1*"},
             {sep,[{text,"\bfunction"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,[{text," This is the same as doing, e.g.:"}],0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "T\n           {ok, V} = snmp:versions1(), \n           snmp:print_versions(V).\n        "}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {text,"!<a name=\"versions1\">versions1</a>"},
      {text,"!<a name=\"versions2\">versions2</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## versions1() -> {ok, Info} | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,".## versions2() -> {ok, Info} | {error, Reason}"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Retrieve various system and application info"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[15,73,110,102,111,32,61,32,91,105,110,102,111,40,41,93]}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[15,105,110,102,111,40,41,32,61,32,116,101,114,109,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "DUtility functions used to retrieve some system and application info."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "QThe difference between the two functions is in how they get the modules to check."}],
              0,false},
             {text,"\v*versions1*"},
             {sep,
              [{text,
                [21,117,115,101,115,32,116,104,101,32,97,112,112,45,102,105,
                 108,101,32,97,110,100]}],
              0,false},
             {text,"\v*versions2*"},
             {sep,
              [{text,
                [17,117,115,101,115,32,116,104,101,32,102,117,110,99,116,105,
                 111,110]}],
              0,false},
             {text,
              [21,42,97,112,112,108,105,99,97,116,105,111,110,58,103,101,116,
               95,107,101,121,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"+<a name=\"print_versions\">print_versions</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"(## print_versions(VersionInfo) -> void()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"0## print_versions(Prefix, VersionInfo) -> void()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"3Formatted print of result of the versions functions"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [30,86,101,114,115,105,111,110,73,110,102,111,32,61,32,91,118,101,
            114,115,105,111,110,95,105,110,102,111,40,41,93]}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [23,118,101,114,115,105,111,110,95,105,110,102,111,40,41,32,61,32,
            116,101,114,109,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [29,80,114,101,102,105,120,32,61,32,115,116,114,105,110,103,40,41,
           32,124,32,105,110,116,101,103,101,114,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "VUtility function to produce a formatted printout of the versions info generated by the"}],
              0,false},
             {text,"\v*versions1*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\v*versions2*"},
             {sep,[{text,"\tfunctions"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{sep,[{sep,[{text,"\bExample:"}],0,false}],0,true},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              "T\n           {ok, V} = snmp:versions1(), \n           snmp:print_versions(V).\n        "}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}},
      {text,"'<a name=\"enable_trace\">enable_trace</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\e## enable_trace() -> void()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,[15,83,116,97,114,116,115,32,97,32,116,114,97,99,101,114]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "hStarts a dbg tracer that prints trace events to stdout (using plain io:format after a minor formatting)."}],
            0,false}],
          0,true},
         null},
        null}},
      {text,")<a name=\"disable_trace\">disable_trace</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [28,35,35,32,100,105,115,97,98,108,101,95,116,114,97,99,101,40,41,32,
         45,62,32,118,111,105,100,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,[15,83,116,111,112,32,116,104,101,32,116,114,97,99,101,114]}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [16,83,116,111,112,32,116,104,101,32,116,114,97,99,101,114,46]}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"#<a name=\"set_trace1\">set_trace1</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [31,35,35,32,115,101,116,95,116,114,97,99,101,40,84,97,114,103,101,
         116,115,41,32,45,62,32,118,111,105,100,40,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [16,83,101,116,32,116,114,97,99,101,32,116,97,114,103,101,116]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [30,84,97,114,103,101,116,115,32,61,32,116,97,114,103,101,
                  116,40,41,32,124,32,116,97,114,103,101,116,115,40,41]}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [19,116,97,114,103,101,116,40,41,32,61,32,109,111,100,117,
                  108,101,40,41]}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [17,109,111,100,117,108,101,40,41,32,61,32,97,116,111,109,40,
                 41]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"5targets() = [target() | {target(), target_options()}]"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,[{text,"$target_options() = [target_option()]"}],0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             ">target_option() = {return_trace, boolean()} | {scope, scope()}"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            "dscope() = all_functions | exported_functions | function_name() | {function_name(), function_arity()}"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [24,102,117,110,99,116,105,111,110,95,110,97,109,101,40,41,32,61,
            32,97,116,111,109,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"!function_arity() = integer() >= 0"}],0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [128,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,
                 115,32,117,115,101,100,32,116,111,32,115,101,116,32,117,112,
                 32,100,101,102,97,117,108,116,32,116,114,97,99,101,32,111,
                 110,32,102,117,110,99,116,105,111,110,40,115,41,32,102,111,
                 114,32,116,104,101,32,103,105,118,101,110,32,109,111,100,117,
                 108,101,32,111,114,32,109,111,100,117,108,101,115,46,32,84,
                 104,101,32,115,99,111,112,101,32,111,102,32,116,104,101,32,
                 116,114,97,99,101,32,119,105,108,108,32,98,101,32,97,108,
                 108]}],
              0,false},
             {text,"\f**exported**"},
             {sep,
              [{text,
                "Zfunctions (both the call info and the return value). Timestamp info will also be included."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"%<a name=\"reset_trace\">reset_trace</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## reset_trace(Targets) -> void()"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [18,82,101,115,101,116,32,116,114,97,99,101,32,116,97,114,103,101,
             116]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [30,84,97,114,103,101,116,115,32,61,32,109,111,100,117,108,101,40,
            41,32,124,32,109,111,100,117,108,101,115,40,41]}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [22,109,111,100,117,108,101,115,40,41,32,61,32,91,109,111,100,117,
            108,101,40,41,93]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [17,109,111,100,117,108,101,40,41,32,61,32,97,116,111,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "GThis function is used to reset (disable) trace for the given module(s)."}],
            0,false}],
          0,true},
         null},
        null}},
      {text,"#<a name=\"set_trace2\">set_trace2</a>"}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"%## set_trace(Targets, Opts) -> void()"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [16,83,101,116,32,116,114,97,99,101,32,116,97,114,103,101,116]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    [30,84,97,114,103,101,116,115,32,61,32,116,97,114,103,101,
                     116,40,41,32,124,32,116,97,114,103,101,116,115,40,41]}],
                  0,false}],
                0,false},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    [19,116,97,114,103,101,116,40,41,32,61,32,109,111,100,117,
                     108,101,40,41]}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   [17,109,111,100,117,108,101,40,41,32,61,32,97,116,111,109,
                    40,41]}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "5targets() = [target() | {target(), target_options()}]"}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,[{text,"$target_options() = [target_option()]"}],0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                ">target_option() = {return_trace, boolean()} | {scope, scope()}"}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               "dscope() = all_functions | exported_functions | function_name() | {function_name(), function_arity()}"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [24,102,117,110,99,116,105,111,110,95,110,97,109,101,40,41,32,
               61,32,97,116,111,109,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,[{text,"!function_arity() = integer() >= 0"}],0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text," Opts = disable | trace_options()"}],0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,[{text,"\"trace_options() = [trace_option()]"}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,"9trace_option() = {timestamp, boolean()} | target_option()"}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "UThis function is used to set up trace on function(s) for the given module or modules."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "MThe example below sets up trace on the exported functions (default) of module"}],
              0,false},
             {text,[14,42,115,110,109,112,95,103,101,110,101,114,105,99,42]},
             {sep,[{text,"\eand all functions of module"}],0,false},
             {text,
              [21,42,115,110,109,112,95,103,101,110,101,114,105,99,95,109,110,
               101,115,105,97,42]},
             {sep,
              [{text,
                "]. With return values (which is default) and timestamps in both cases (which is also default):"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[3,96,96,96]},
           {sep,
            [{text,
              [272,10,9,32,32,115,110,109,112,58,101,110,97,98,108,101,95,116,
               114,97,99,101,40,41,44,10,9,32,32,115,110,109,112,58,115,101,
               116,95,116,114,97,99,101,40,91,115,110,109,112,95,103,101,110,
               101,114,105,99,44,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
               32,32,32,32,32,32,32,32,32,32,32,32,32,123,115,110,109,112,95,
               103,101,110,101,114,105,99,95,109,110,101,115,105,97,44,32,91,
               123,115,99,111,112,101,44,32,97,108,108,95,102,117,110,99,116,
               105,111,110,115,125,93,125,93,41,44,10,9,32,32,46,10,9,32,32,
               46,10,9,32,32,46,10,32,32,32,32,32,32,32,32,32,32,115,110,109,
               112,58,115,101,116,95,116,114,97,99,101,40,115,110,109,112,95,
               103,101,110,101,114,105,99,44,32,100,105,115,97,98,108,101,41,
               44,10,9,32,32,46,10,9,32,32,46,10,9,32,32,46,10,9,32,32,115,
               110,109,112,58,100,105,115,97,98,108,101,95,116,114,97,99,101,
               40,41,44,10,9]}],
            0,true}},
          {text,[3,96,96,96]}},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## See Also"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{sep,[{sep,[{text,"\vcalendar(3)"}],0,false}],0,true},null},
     null}}],
  0,false}}
