{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f# snmp_index"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f# snmp_index"},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,[{text,"$Abstract Data Type for SNMP Indexing"}],0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\nThe module"}],0,false},
                 {text,"\f*snmp_index*"},
                 {sep,
                  [{text,
                    "öimplements an Abstract Data Type (ADT) for an SNMP index structure for SNMP tables. It is implemented as an ets table of the ordered_set data-type, which means that all operations are O(log n). In the table, the key is an ASN.1 OBJECT IDENTIFIER."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "ÉThis index is used to separate the implementation of the SNMP ordering from the actual implementation of the table. The SNMP ordering, that is implementation of GET NEXT, is implemented in this module."}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "éFor example, suppose there is an SNMP table, which is best implemented in Erlang as one process per SNMP table row. Suppose further that the INDEX in the SNMP table is an OCTET STRING. The index structure would be created as follows:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [28,10,115,110,109,112,95,105,110,100,101,120,58,110,101,
                   119,40,115,116,114,105,110,103,41,10,32,32,32,32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "7For each new process we create, we insert an item in an"}],
                  0,false},
                 {text,"\f*snmp_index*"},
                 {sep,[{text,"\nstructure:"}],0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [133,10,110,101,119,95,112,114,111,99,101,115,115,40,78,97,
                   109,101,44,32,83,110,109,112,73,110,100,101,120,41,32,45,
                   62,10,32,32,80,105,100,32,61,32,115,116,97,114,116,95,112,
                   114,111,99,101,115,115,40,41,44,10,32,32,78,101,119,83,110,
                   109,112,73,110,100,101,120,32,61,32,10,32,32,32,32,115,110,
                   109,112,95,105,110,100,101,120,58,105,110,115,101,114,116,
                   40,83,110,109,112,73,110,100,101,120,44,32,78,97,109,101,
                   44,32,80,105,100,41,44,10,32,32,60,46,46,46,62,10,32,32,32,
                   32]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "lWith this structure, we can now map an OBJECT IDENTIFIER in e.g. a GET NEXT request, to the correct process:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  "d\nget_next_pid(Oid, SnmpIndex) ->\n  {ok, {_, Pid}} = snmp_index:get_next(SnmpIndex, Oid),\n  Pid.\n    "}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [20,35,35,32,67,111,109,109,111,110,32,100,97,116,97,32,116,121,112,
         101,115]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "9The following data types are used in the functions below:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {above,
        {above,
         {sep,[{text,[1,42]},{sep,[{text,"\t*index()*"}],0,false}],0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [18,42,111,105,100,40,41,32,61,32,91,98,121,116,101,40,41,93,
               42]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             ";*key_types = type_spec() | {type_spec(), type_spec(), ...}*"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"-*type_spec() = fix_string | string | integer*"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,"4*key() = key_spec() | {key_spec(), key_spec(), ...}*"}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"#*key_spec() = string() | integer()*"}],0,false}],
      0,false}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[3,84,104,101]}],0,false},
           {text,"\t*index()*"},
           {sep,[{text,"%type denotes an snmp index structure."}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[3,84,104,101]}],0,false},
           {text,[7,42,111,105,100,40,41,42]},
           {sep,
            [{text,"5type is used to represent an ASN.1 OBJECT IDENTIFIER."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[3,84,104,101]}],0,false},
           {text,"\r*key_types()*"},
           {sep,
            [{text,
              "7type is used when creating the index structure, and the"}],
            0,false},
           {text,[7,42,107,101,121,40,41,42]},
           {sep,
            [{text,
              "Btype is used when inserting and deleting items from the structure."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[3,84,104,101]}],0,false},
           {text,"\r*key_types()*"},
           {sep,
            [{text,
              "Útype defines the types of the SNMP INDEX columns for the table. If the table has one single INDEX column, this type should be a single atom, but if the table has multiple INDEX columns, it should be a tuple with atoms."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "aIf the INDEX column is of type INTEGER, or derived from INTEGER, the corresponding type should be"}],
            0,false},
           {text,"\t*integer*"},
           {sep,
            [{text,
              "j. If it is a variable length type (e.g. OBJECT IDENTIFIER, OCTET STRING), the corresponding type should be"}],
            0,false},
           {text,"\b*string*"},
           {sep,
            [{text,
              [130,46,32,70,105,110,97,108,108,121,44,32,105,102,32,116,104,
               101,32,116,121,112,101,32,105,115,32,111,102,32,118,97,114,105,
               97,98,108,101,32,108,101,110,103,116,104,44,32,98,117,116,32,
               119,105,116,104,32,97,32,102,105,120,101,100,32,115,105,122,
               101,32,114,101,115,116,114,105,99,116,105,111,110,32,40,101,46,
               103,46,32,73,112,65,100,100,114,101,115,115,41,44,32,116,104,
               101,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,
               116,121,112,101,32,115,104,111,117,108,100,32,98,101]}],
            0,false},
           {text,"\f*fix_string*"},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [154,70,111,114,32,101,120,97,109,112,108,101,44,32,105,102,32,
               116,104,101,32,83,78,77,80,32,116,97,98,108,101,32,104,97,115,
               32,116,119,111,32,73,78,68,69,88,32,99,111,108,117,109,110,115,
               44,32,116,104,101,32,102,105,114,115,116,32,111,110,101,32,97,
               110,32,79,67,84,69,84,32,83,84,82,73,78,71,32,119,105,116,104,
               32,115,105,122,101,32,50,44,32,97,110,100,32,116,104,101,32,
               115,101,99,111,110,100,32,111,110,101,32,97,110,32,79,66,74,69,
               67,84,32,73,68,69,78,84,73,70,69,82,44,32,116,104,101,32,99,
               111,114,114,101,115,112,111,110,100,105,110,103]}],
            0,false},
           {text,"\v*key_types*"},
           {sep,
            [{text,
              [18,112,97,114,97,109,101,116,101,114,32,119,111,117,108,100,32,
               98,101]}],
            0,false},
           {text,
            [22,42,123,102,105,120,95,115,116,114,105,110,103,44,32,115,116,
             114,105,110,103,125,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[3,84,104,101]}],0,false},
           {text,[7,42,107,101,121,40,41,42]},
           {sep,
            [{text,
              [22,116,121,112,101,32,99,111,114,114,101,108,97,116,101,115,32,
               116,111,32,116,104,101]}],
            0,false},
           {text,"\r*key_types()*"},
           {sep,[{text,"\ftype. If the"}],0,false},
           {text,"\r*key_types()*"},
           {sep,[{text,"#is a single atom, the corresponding"}],0,false},
           {text,[7,42,107,101,121,40,41,42]},
           {sep,[{text,"$is a single type as well, but if the"}],0,false},
           {text,"\r*key_types()*"},
           {sep,[{text,"\vis a tuple,"}],0,false},
           {text,[5,42,107,101,121,42]},
           {sep,[{text,"!must be a tuple of the same size."}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\eIn the example above, valid"}],0,false},
           {text,[6,42,107,101,121,115,42]},
           {sep,[{text,"\bcould be"}],0,false},
           {text,[15,42,123,34,104,105,34,44,32,34,109,111,109,34,125,42]},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,
            [18,42,123,34,110,111,34,44,32,34,116,104,97,110,107,115,34,125,
             42]},
           {sep,[{text,"\t, whereas"}],0,false},
           {text,[6,42,34,104,105,34,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,"\f*{\"hi\", 42}*"},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,
            [20,42,123,34,104,101,108,108,111,34,44,32,34,116,104,101,114,101,
             34,125,42]},
           {sep,
            [{text,
              [17,119,111,117,108,100,32,98,101,32,105,110,118,97,108,105,100,
               46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,
          [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,114,110,105,
           110,103,34]},
         {sep,
          [{text,[4,32,32,32,32]},
           {sep,
            [{sep,
              [{text,
                [17,60,97,32,110,97,109,101,61,34,49,34,62,49,60,47,97,62]},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         "0All API functions that update the index return a"}],
                       0,false},
                      {text,"\n*NewIndex*"},
                      {sep,
                       [{text,
                         [135,116,101,114,109,46,32,84,104,105,115,32,105,115,
                          32,102,111,114,32,98,97,99,107,119,97,114,100,32,99,
                          111,109,112,97,116,105,98,105,108,105,116,121,32,
                          119,105,116,104,32,97,32,112,114,101,118,105,111,
                          117,115,32,105,109,112,108,101,109,101,110,116,97,
                          116,105,111,110,32,116,104,97,116,32,117,115,101,
                          100,32,97,32,66,43,32,116,114,101,101,32,119,114,
                          105,116,116,101,110,32,112,117,114,101,108,121,32,
                          105,110,32,69,114,108,97,110,103,32,102,111,114,32,
                          116,104,101,32,105,110,100,101,120,46,32,84,104,
                          101]}],
                       0,false},
                      {text,"\n*NewIndex*"},
                      {sep,
                       [{text,
                         "jreturn value can now be ignored. The return value is now the unchanged table identifier for the ets table."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       [385,84,104,101,32,105,109,112,108,101,109,101,110,116,
                        97,116,105,111,110,32,117,115,105,110,103,32,101,116,
                        115,32,116,97,98,108,101,115,32,105,110,116,114,111,
                        100,117,99,101,115,32,97,32,115,101,109,97,110,116,
                        105,99,32,105,110,99,111,109,112,97,116,105,98,105,
                        108,105,116,121,32,119,105,116,104,32,111,108,100,101,
                        114,32,105,109,112,108,101,109,101,110,116,97,116,105,
                        111,110,115,46,32,73,110,32,116,104,111,115,101,32,
                        111,108,100,101,114,32,105,109,112,108,101,109,101,
                        110,116,97,116,105,111,110,115,44,32,117,115,105,110,
                        103,32,112,117,114,101,32,69,114,108,97,110,103,32,
                        116,101,114,109,115,44,32,116,104,101,32,105,110,100,
                        101,120,32,119,97,115,32,103,97,114,98,97,103,101,32,
                        99,111,108,108,101,99,116,101,100,32,108,105,107,101,
                        32,97,110,121,32,111,116,104,101,114,32,69,114,108,97,
                        110,103,32,116,101,114,109,32,97,110,100,32,100,105,
                        100,32,110,111,116,32,104,97,118,101,32,116,111,32,98,
                        101,32,100,101,108,101,116,101,100,32,119,104,101,110,
                        32,100,105,115,99,97,114,100,101,100,46,32,65,110,32,
                        101,116,115,32,116,97,98,108,101,32,105,115,32,100,
                        101,108,101,116,101,100,32,111,110,108,121,32,119,104,
                        101,110,32,116,104,101,32,112,114,111,99,101,115,115,
                        32,99,114,101,97,116,105,110,103,32,105,116,32,101,
                        120,112,108,105,99,105,116,108,121,32,100,101,108,101,
                        116,101,115,32,105,116,32,111,114,32,119,104,101,110,
                        32,116,104,101,32,99,114,101,97,116,105,110,103,32,
                        112,114,111,99,101,115,115,32,116,101,114,109,105,110,
                        97,116,101,115,46]}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         [15,65,32,110,101,119,32,105,110,116,101,114,102,97,
                          99,101]}],
                       0,false},
                      {text,"\n*delete/1*"},
                      {sep,
                       [{text,
                         "Àis now added to handle the case when a process wants to discard an index table (i.e. to build a completely new). Any application using transient snmp indexes has to be modified to handle this."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,
                       "lAs an snmp adaption usually keeps the index for the whole of the systems lifetime, this is rarely a problem."}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,true}],
          0,false}},
        {text,[0]}},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [24,35,35,32,100,101,108,101,116,101,40,73,110,100,101,120,41,32,45,62,
        32,116,114,117,101]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [21,68,101,108,101,116,101,32,97,110,32,105,110,100,101,120,32,116,
            97,98,108,101]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [26,73,110,100,101,120,32,61,32,78,101,119,73,110,100,101,120,32,61,
          32,105,110,100,101,120,40,41]}],
       0,false}],
     0,false},
    {sep,[{text,[1,42]},{sep,[{text,"\vKey = key()"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [137,68,101,108,101,116,101,115,32,97,32,99,111,109,112,108,
                101,116,101,32,105,110,100,101,120,32,115,116,114,117,99,116,
                117,114,101,32,40,105,46,101,46,32,116,104,101,32,101,116,115,
                32,116,97,98,108,101,32,104,111,108,100,105,110,103,32,116,
                104,101,32,105,110,100,101,120,41,46,32,84,104,101,32,105,110,
                100,101,120,32,99,97,110,32,110,111,32,108,111,110,103,101,
                114,32,98,101,32,114,101,102,101,114,101,110,99,101,100,32,97,
                102,116,101,114,32,116,104,105,115,32,99,97,108,108,46,32,83,
                101,101,32,116,104,101]}],
             0,false},
            {text,
             [18,91,119,97,114,110,105,110,103,32,110,111,116,101,93,40,35,49,
              41]},
            {sep,[{text,[6,97,98,111,118,101,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"!## delete(Index, Key) -> NewIndex"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,68,101,108,101,116,101,32,97,110,32,105,116,101,109,32,102,114,
            111,109,32,116,104,101,32,105,110,100,101,120]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [26,73,110,100,101,120,32,61,32,78,101,119,73,110,100,101,120,32,61,
          32,105,110,100,101,120,40,41]}],
       0,false}],
     0,false},
    {sep,[{text,[1,42]},{sep,[{text,"\vKey = key()"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "NDeletes a key and its value from the index structure. Returns a new structure."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,":## get(Index, KeyOid) -> {ok, {KeyOid, Value}} | undefined"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [17,71,101,116,32,116,104,101,32,105,116,101,109,32,119,105,116,
              104]}],
           0,false},
          {text,"\b*KeyOid*"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,73,110,100,101,120,32,61,32,105,110,100,101,120,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,75,101,121,79,105,100,32,61,32,111,105,100,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [22,71,101,116,115,32,116,104,101,32,105,116,101,109,32,119,
                105,116,104,32,107,101,121]}],
             0,false},
            {text,"\b*KeyOid*"},
            {sep,
             [{text,
               "=. Could be used from within an SNMP instrumentation function."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,"7## get_last(Index) -> {ok, {KeyOid, Value}} | undefined"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"(Get the last item in the index structure"}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,73,110,100,101,120,32,61,32,105,110,100,101,120,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,75,101,121,79,105,100,32,61,32,111,105,100,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"*Gets the last item in the index structure."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "C## get_next(Index, KeyOid) -> {ok, {NextKeyOid, Value}} | undefined"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [17,71,101,116,32,116,104,101,32,110,101,120,116,32,105,116,101,
            109]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,73,110,100,101,120,32,61,32,105,110,100,101,120,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},{sep,[{text,"\eKeyOid = NextKeyOid = oid()"}],0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "<Gets the next item in the SNMP lexicographic ordering, after"}],
             0,false},
            {text,"\b*KeyOid*"},
            {sep,
             [{text,
               [23,105,110,32,116,104,101,32,105,110,100,101,120,32,115,116,
                114,117,99,116,117,114,101,46]}],
             0,false},
            {text,"\b*KeyOid*"},
            {sep,
             [{text,
               "8does not have to refer to an existing item in the index."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"(## insert(Index, Key, Value) -> NewIndex"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,73,110,115,101,114,116,32,97,110,32,105,116,101,109,32,105,110,
            116,111,32,116,104,101,32,105,110,100,101,120]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [26,73,110,100,101,120,32,61,32,78,101,119,73,110,100,101,120,32,61,
           32,105,110,100,101,120,40,41]}],
        0,false}],
      0,false},
     {sep,[{text,[1,42]},{sep,[{text,"\vKey = key()"}],0,false}],0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[14,86,97,108,117,101,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "lInserts a new key value tuple into the index structure. If an item with the same key already exists, the new"}],
             0,false},
            {text,[7,42,86,97,108,117,101,42]},
            {sep,
             [{text,
               [25,111,118,101,114,119,114,105,116,101,115,32,116,104,101,32,
                111,108,100,32,118,97,108,117,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"### key_to_oid(Index, Key) -> KeyOid"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"%Convert a key to an OBJECT IDENTIFIER"}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,73,110,100,101,120,32,61,32,105,110,100,101,120,40,41]}],
        0,false}],
      0,false},
     {sep,[{text,[1,42]},{sep,[{text,"\vKey = key()"}],0,false}],0,false}},
    {sep,
     [{text,[1,42]},{sep,[{text,"\eKeyOid = NextKeyOid = oid()"}],0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\bConverts"}],0,false},
            {text,[5,42,75,101,121,42]},
            {sep,
             [{text,
               [24,116,111,32,97,110,32,79,66,74,69,67,84,32,73,68,69,78,84,
                73,70,73,69,82,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [25,35,35,32,110,101,119,40,75,101,121,84,121,112,101,115,41,32,45,62,
        32,73,110,100,101,120]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"!Create a new snmp index structure"}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [22,75,101,121,84,121,112,101,115,32,61,32,107,101,121,95,116,121,
          112,101,115,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,73,110,100,101,120,32,61,32,105,110,100,101,120,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"'Creates a new snmp index structure. The"}],0,false},
            {text,"\r*key_types()*"},
            {sep,
             [{text,
               [24,116,121,112,101,32,105,115,32,100,101,115,99,114,105,98,
                101,100,32,97,98,111,118,101,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
