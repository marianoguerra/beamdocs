{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f# httpd_util"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"\f# httpd_util"},null},null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "[Miscellaneous utility functions to be used when implementing Erlang web server API modules."}],
          0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "fThis module provides the Erlang web server API module programmer with miscellaneous utility functions."}],
                0,false}],
              0,true},
             null},
            null}},
          {text,"7<a name=\"convert_request_date\">convert_request_date</a>"}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\v# Functions"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"7## convert_request_date(DateString) -> ErlDate|bad_date"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Converts the date to the Erlang date format."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [21,68,97,116,101,83,116,114,105,110,103,32,61,32,115,116,114,105,
           110,103,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [29,69,114,108,68,97,116,101,32,61,32,99,97,108,101,110,100,97,114,
           58,100,97,116,101,116,105,109,101,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [24,42,99,111,110,118,101,114,116,95,114,101,113,117,101,115,
               116,95,100,97,116,101,47,49,42]},
             {sep,[{text,"\bconverts"}],0,false},
             {text,"\f*DateString*"},
             {sep,
              [{text,
                [26,116,111,32,116,104,101,32,69,114,108,97,110,103,32,100,97,
                 116,101,32,102,111,114,109,97,116,46]}],
              0,false},
             {text,"\f*DateString*"},
             {sep,
              [{text,"3must be in one of the three date formats defined in"}],
              0,false},
             {text,"/[RFC 2616](http://www.ietf.org/rfc/rfc2616.txt)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text," ## create_etag(FileInfo) -> Etag"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,67,97,108,99,117,108,97,116,101,115,32,116,104,101,32,69,116,
             97,103,32,102,111,114,32,97,32,102,105,108,101,46]}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [22,70,105,108,101,73,110,102,111,32,61,32,102,105,108,101,95,105,
           110,102,111,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,69,116,97,103,32,61,32,115,116,114,105,110,103,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[15,42,99,114,101,97,116,101,95,101,116,97,103,47,49,42]},
             {sep,
              [{text,
                "Lcalculates the Etag for a file from its size and time for last modification."}],
              0,false},
             {text,"\n*FileInfo*"},
             {sep,
              [{text,
                [22,105,115,32,97,32,114,101,99,111,114,100,32,100,101,102,
                 105,110,101,100,32,105,110]}],
              0,false},
             {text,
              [25,42,107,101,114,110,101,108,47,105,110,99,108,117,100,101,47,
               102,105,108,101,46,104,114,108,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## day(NthDayOfWeek) -> DayOfWeek"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "FConverts the day of the week (integer [1-7]) to an abbreviated string."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [18,78,116,104,68,97,121,79,102,87,101,101,107,32,61,32,49,45,55]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [20,68,97,121,79,102,87,101,101,107,32,61,32,115,116,114,105,110,
           103,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[7,42,100,97,121,47,49,42]},
             {sep,
              [{text,
                [30,99,111,110,118,101,114,116,115,32,116,104,101,32,100,97,
                 121,32,111,102,32,116,104,101,32,119,101,101,107,32,40]}],
              0,false},
             {text,[14,42,78,116,104,68,97,121,79,102,87,101,101,107,42]},
             {sep,
              [{text,
                ":) from an integer (1-7) to an abbreviated string, that is:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"%1 = \"Mon\", 2 = \"Tue\", ..., 7 = \"Sat\"."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"### decode_hex(HexValue) -> DecValue"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "9Converts a hexadecimal value into its decimal equivalent."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [30,72,101,120,86,97,108,117,101,32,61,32,68,101,99,86,97,108,117,
          101,32,61,32,115,116,114,105,110,103,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [30,67,111,110,118,101,114,116,115,32,116,104,101,32,104,101,
                 120,97,100,101,99,105,109,97,108,32,118,97,108,117,101]}],
              0,false},
             {text,"\n*HexValue*"},
             {sep,
              [{text,
                [29,105,110,116,111,32,105,116,115,32,100,101,99,105,109,97,
                 108,32,101,113,117,105,118,97,108,101,110,116,32,40]}],
              0,false},
             {text,"\n*DecValue*"},
             {sep,[{text,[2,41,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## flatlength(NestedList) -> Size"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Computes the size of a possibly nested list."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [19,78,101,115,116,101,100,76,105,115,116,32,61,32,108,105,115,116,
           40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [16,83,105,122,101,32,61,32,105,110,116,101,103,101,114,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[14,42,102,108,97,116,108,101,110,103,116,104,47,49,42]},
             {sep,
              [{text,"-computes the size of the possibly nested list"}],
              0,false},
             {text,"\f*NestedList*"},
             {sep,
              [{text,
                [29,44,32,119,104,105,99,104,32,99,97,110,32,99,111,110,116,
                 97,105,110,32,98,105,110,97,114,105,101,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## hexlist_to_integer(HexString) -> Number"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Converts a hexadecimal string to an integer."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [18,78,117,109,98,101,114,32,61,32,105,110,116,101,103,101,114,40,
           41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [20,72,101,120,83,116,114,105,110,103,32,61,32,115,116,114,105,110,
           103,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [20,42,104,101,120,108,105,115,116,95,116,111,95,105,110,116,
               101,103,101,114,42]},
             {sep,[{text,"!converts the hexadecimal value of"}],0,false},
             {text,"\v*HexString*"},
             {sep,
              [{text,
                [14,116,111,32,97,110,32,105,110,116,101,103,101,114,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"*## integer_to_hexlist(Number) -> HexString"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Converts an integer to a hexadecimal string."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [18,78,117,109,98,101,114,32,61,32,105,110,116,101,103,101,114,40,
           41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [20,72,101,120,83,116,114,105,110,103,32,61,32,115,116,114,105,110,
           103,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [22,42,105,110,116,101,103,101,114,95,116,111,95,104,101,120,
               108,105,115,116,47,49,42]},
             {sep,
              [{text,
                [29,114,101,116,117,114,110,115,32,97,32,115,116,114,105,110,
                 103,32,114,101,112,114,101,115,101,110,116,105,110,103]}],
              0,false},
             {text,"\b*Number*"},
             {sep,
              [{text,
                [22,105,110,32,97,32,104,101,120,97,100,101,99,105,109,97,108,
                 32,102,111,114,109,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"!## lookup(ETSTable,Key) -> Result"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"+## lookup(ETSTable,Key,Undefined) -> Result"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,"*Extracts the first value associated with a"}],
            0,false},
           {text,[5,42,75,101,121,42]},
           {sep,
            [{text,
              [16,105,110,32,97,110,32,69,84,83,32,116,97,98,108,101,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [22,69,84,83,84,97,98,108,101,32,61,32,101,116,115,95,116,97,98,
             108,101,40,41]}],
          0,false}],
        0,false},
       {sep,[{text,[1,42]},{sep,[{text,"\fKey = term()"}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,[{text,"'Result = term() | undefined | Undefined"}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [18,85,110,100,101,102,105,110,101,100,32,61,32,116,101,114,109,40,
           41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\b*lookup*"},
             {sep,[{text,"\bextracts"}],0,false},
             {text,"\r*{Key,Value}*"},
             {sep,[{text,"\vtuples from"}],0,false},
             {text,"\n*ETSTable*"},
             {sep,
              [{text,
                [15,97,110,100,32,114,101,116,117,114,110,115,32,116,104,
                 101]}],
              0,false},
             {text,[7,42,86,97,108,117,101,42]},
             {sep,
              [{text,
                [15,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104]}],
              0,false},
             {text,[5,42,75,101,121,42]},
             {sep,[{text,[4,46,32,73,102]}],0,false},
             {text,"\n*ETSTable*"},
             {sep,[{text,"\nis of type"}],0,false},
             {text,[5,42,98,97,103,42]},
             {sep,
              [{text,
                [16,44,32,111,110,108,121,32,116,104,101,32,102,105,114,115,
                 116]}],
              0,false},
             {text,[7,42,86,97,108,117,101,42]},
             {sep,
              [{text,
                [15,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104]}],
              0,false},
             {text,[5,42,75,101,121,42]},
             {sep,[{text,"\fis returned."}],0,false},
             {text,"\n*lookup/2*"},
             {sep,[{text,[7,114,101,116,117,114,110,115]}],0,false},
             {text,"\v*undefined*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\n*lookup/3*"},
             {sep,[{text,[7,114,101,116,117,114,110,115]}],0,false},
             {text,"\v*Undefined*"},
             {sep,[{text,[5,105,102,32,110,111]}],0,false},
             {text,[7,42,86,97,108,117,101,42]},
             {sep,[{text,"\tis found."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [31,35,35,32,108,111,111,107,117,112,95,109,105,109,101,40,67,111,110,
         102,105,103,68,66,44,83,117,102,102,105,120,41]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"5## lookup_mime(ConfigDB,Suffix,Undefined) -> MimeType"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "=Returns the MIME type associated with a specific file suffix."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [22,67,111,110,102,105,103,68,66,32,61,32,101,116,115,95,116,97,
             98,108,101,40,41]}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [17,83,117,102,102,105,120,32,61,32,115,116,114,105,110,103,40,
             41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,[{text,"+MimeType = string() | undefined | Undefined"}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [18,85,110,100,101,102,105,110,101,100,32,61,32,116,101,114,109,40,
           41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\r*lookup_mime*"},
             {sep,
              [{text,
                "Ureturns the MIME type associated with a specific file suffix as specified in the file"}],
              0,false},
             {text,"\f*mime.types*"},
             {sep,
              [{text,
                [15,40,108,111,99,97,116,101,100,32,105,110,32,116,104,101]}],
              0,false},
             {sep,
              [{text,
                [16,99,111,110,102,105,103,32,100,105,114,101,99,116,111,114,
                 121]}],
              0,false},
             {sep,[{text,[2,41,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"'## lookup_mime_default(ConfigDB,Suffix)"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"=## lookup_mime_default(ConfigDB,Suffix,Undefined) -> MimeType"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "]Returns the MIME type associated with a specific file suffix or the value of the DefaultType."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [22,67,111,110,102,105,103,68,66,32,61,32,101,116,115,95,116,97,
             98,108,101,40,41]}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [17,83,117,102,102,105,120,32,61,32,115,116,114,105,110,103,40,
             41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,[{text,"+MimeType = string() | undefined | Undefined"}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [18,85,110,100,101,102,105,110,101,100,32,61,32,116,101,114,109,40,
           41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [21,42,108,111,111,107,117,112,95,109,105,109,101,95,100,101,
               102,97,117,108,116,42]},
             {sep,
              [{text,
                "Preturns the MIME type associated with a specific file suffix as specified in the"}],
              0,false},
             {text,"\f*mime.types*"},
             {sep,
              [{text,
                [20,102,105,108,101,32,40,108,111,99,97,116,101,100,32,105,
                 110,32,116,104,101]}],
              0,false},
             {sep,
              [{text,
                [16,99,111,110,102,105,103,32,100,105,114,101,99,116,111,114,
                 121]}],
              0,false},
             {sep,
              [{text,
                "7). If no appropriate association is found, the value of"}],
              0,false},
             {text,"\r*DefaultType*"},
             {sep,[{text,"\fis returned."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,"5## message(StatusCode,PhraseArgs,ConfigDB) -> Message"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"6Returns an informative HTTP 1.1 status string in HTML."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"4StatusCode = 301 | 400 | 403 | 404 | 500 | 501 | 504"}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [19,80,104,114,97,115,101,65,114,103,115,32,61,32,116,101,114,109,
             40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [20,67,111,110,102,105,103,68,66,32,61,32,101,116,115,95,116,97,98,
            108,101]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [18,77,101,115,115,97,103,101,32,61,32,115,116,114,105,110,103,40,
           41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\v*message/3*"},
             {sep,
              [{text,
                ";returns an informative HTTP 1.1 status string in HTML. Each"}],
              0,false},
             {text,"\f*StatusCode*"},
             {sep,
              [{text,
                [19,114,101,113,117,105,114,101,115,32,97,32,115,112,101,99,
                 105,102,105,99]}],
              0,false},
             {text,"\f*PhraseArgs*"},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {text,[4,60,100,108,62]},
        {nest,4,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,[{text,[3,51,48,49]}],0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,100,62]},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,"\bstring()"},
                              {sep,
                               [{text,
                                 ".: A URL pointing at the new document position."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {text,[5,60,47,100,100,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,116,62]},
                      {sep,
                       [{text,
                         [15,52,48,48,32,124,32,52,48,49,32,124,32,53,48,48]}],
                       0,false},
                      {text,[5,60,47,100,116,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,100,62]},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{sep,
                           [{text,[4,110,111,110,101]},
                            {sep,[{text,[3,40,110,111]}],0,false},
                            {text,"\nPhraseArgs"},
                            {sep,[{text,[2,41,46]}],0,false}],
                           0,false}],
                         0,true},
                        null},
                       null}},
                     {text,[5,60,47,100,100,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,[{text,"\t403 | 404"}],0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,100,62]},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{text,"\bstring()"},
                          {sep,[{text,[3,58,32,65]}],0,false},
                          {text,"\vRequest-URI"},
                          {sep,
                           [{text,
                             [15,97,115,32,100,101,115,99,114,105,98,101,100,
                              32,105,110]}],
                           0,false},
                          {text,"\bRFC 2616"},
                          {sep,[{text,[1,46]}],0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {text,[5,60,47,100,100,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,[3,53,48,49]}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,100,62]},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         [31,123,77,101,116,104,111,100,44,82,101,113,117,101,
                          115,116,85,82,73,44,72,84,84,80,86,101,114,115,105,
                          111,110,125]},
                        {sep,[{text,"\n: The HTTP"}],0,false},
                        {text,[6,77,101,116,104,111,100]},
                        {sep,[{text,[1,44]}],0,false},
                        {text,"\vRequest-URI"},
                        {sep,[{text,[5,44,32,97,110,100]}],0,false},
                        {text,"\fHTTP-Version"},
                        {sep,
                         [{text,
                           [23,97,115,32,100,101,102,105,110,101,100,32,105,
                            110,32,82,70,67,32,50,54,49,54,46]}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}},
                 {text,[5,60,47,100,100,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,[{text,[3,53,48,52]}],0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,100,62]},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{text,"\bstring()"},
                      {sep,
                       [{text,
                         "6: A string describing why the service was unavailable."}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}},
               {text,[5,60,47,100,100,62]}],
              0,true},
             null},
            null}}}}},
       {text,[5,60,47,100,108,62]}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\e## month(NthMonth) -> Month"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "AConverts the month as an integer (1-12) to an abbreviated string."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[15,78,116,104,77,111,110,116,104,32,61,32,49,45,49,50]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [16,77,111,110,116,104,32,61,32,115,116,114,105,110,103,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\t*month/1*"},
             {sep,
              [{text,
                [18,99,111,110,118,101,114,116,115,32,116,104,101,32,109,111,
                 110,116,104]}],
              0,false},
             {text,"\n*NthMonth*"},
             {sep,
              [{text,
                "7as an integer (1-12) to an abbreviated string, that is:"}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"&1 = \"Jan\", 2 = \"Feb\", ..., 12 = \"Dec\"."}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"'## multi_lookup(ETSTable,Key) -> Result"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            ":Extracts the values associated with a key in an ETS table."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [22,69,84,83,84,97,98,108,101,32,61,32,101,116,115,95,116,97,98,
            108,101,40,41]}],
         0,false}],
       0,false},
      {sep,[{text,[1,42]},{sep,[{text,"\fKey = term()"}],0,false}],0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [17,82,101,115,117,108,116,32,61,32,91,116,101,114,109,40,41,93]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[14,42,109,117,108,116,105,95,108,111,111,107,117,112,42]},
             {sep,[{text,"\fextracts all"}],0,false},
             {text,"\r*{Key,Value}*"},
             {sep,
              [{text,
                [14,116,117,112,108,101,115,32,102,114,111,109,32,97,110]}],
              0,false},
             {text,"\n*ETSTable*"},
             {sep,[{text,"\vand returns"}],0,false},
             {text,[7,42,42,97,108,108,42,42]},
             {text,"\b*Values*"},
             {sep,
              [{text,
                [15,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104]}],
              0,false},
             {text,[5,42,75,101,121,42]},
             {sep,[{text,"\nin a list."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"+## reason_phrase(StatusCode) -> Description"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"3Returns the description of an HTTP 1.1 status code."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          "ËStatusCode = 100| 200 | 201 | 202 | 204 | 205 | 206 | 300 | 301 | 302 | 303 | 304 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 410 411 | 412 | 413 | 414 415 | 416 | 417 | 500 | 501 | 502 | 503 | 504 | 505"}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [22,68,101,115,99,114,105,112,116,105,111,110,32,61,32,115,116,114,
           105,110,103,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [15,42,114,101,97,115,111,110,95,112,104,114,97,115,101,42]},
             {sep,[{text,[7,114,101,116,117,114,110,115]}],0,false},
             {text,"\r*Description*"},
             {sep,
              [{text,[14,111,102,32,97,110,32,72,84,84,80,32,49,46,49]}],
              0,false},
             {text,"\f*StatusCode*"},
             {sep,
              [{text,
                "J, for example, 200 is \"OK\" and 201 is \"Created\". For more information, see"}],
              0,false},
             {text,"/[RFC 2616](http://www.ietf.org/rfc/rfc2616.txt)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text," ## rfc1123_date() -> RFC1123Date"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"$## rfc1123_date(Date) -> RFC1123Date"},null},null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,",Returns the current date in RFC 1123 format."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [26,68,97,116,101,32,61,32,99,97,108,101,110,100,97,114,58,100,97,
           116,101,116,105,109,101,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [22,82,70,67,49,49,50,51,68,97,116,101,32,61,32,115,116,114,105,110,
           103,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[16,42,114,102,99,49,49,50,51,95,100,97,116,101,47,48,42]},
             {sep,
              [{text,",returns the current date in RFC 1123 format."}],
              0,false},
             {text,"\f*rfc_date/1*"},
             {sep,
              [{text,
                "Cconverts the date in the Erlang format to the RFC 1123 date format."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"%## split(String,RegExp,N) -> SplitRes"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"7Splits a string in N chunks using a regular expression."}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [26,83,116,114,105,110,103,32,61,32,82,101,103,69,120,112,32,61,
             32,115,116,114,105,110,103,40,41]}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"1SplitRes = {ok, FieldList} | {error, errordesc()}"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [22,70,105,101,108,100,108,105,115,116,32,61,32,91,115,116,114,105,
            110,103,40,41,93]}],
         0,false}],
       0,false}},
     {sep,[{text,[1,42]},{sep,[{text,"\vN = integer"}],0,false}],0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\t*split/3*"},
             {sep,[{text,[6,115,112,108,105,116,115]}],0,false},
             {text,"\b*String*"},
             {sep,[{text,[2,105,110]}],0,false},
             {text,[3,42,78,42]},
             {sep,[{text,"\fchunks using"}],0,false},
             {text,"\b*RegExp*"},
             {sep,[{text,[1,46]}],0,false},
             {text,"\t*split/3*"},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {text,
              [16,42,114,101,103,101,120,112,58,115,112,108,105,116,47,50,42]},
             {sep,
              [{text,
                [23,119,105,116,104,32,116,104,101,32,101,120,99,101,112,116,
                 105,111,110,32,116,104,97,116]}],
              0,false},
             {text,[3,42,78,42]},
             {sep,[{text,"'defines the maximum number of fields in"}],0,false},
             {text,"\v*FieldList*"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{text,"-## split_script_path(RequestLine) -> Splitted"},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\bSplits a"}],0,false},
           {text,"\r*RequestLine*"},
           {sep,
            [{text,"+in a file reference to an executable, and a"}],
            0,false},
           {text,"\r*QueryString*"},
           {sep,[{text,[4,111,114,32,97]}],0,false},
           {text,"\n*PathInfo*"},
           {sep,[{text,[7,115,116,114,105,110,103,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [22,82,101,113,117,101,115,116,76,105,110,101,32,61,32,115,116,114,
            105,110,103,40,41]}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,"7Splitted = not_a_script | {Path, PathInfo, QueryString}"}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"(Path = QueryString = PathInfo = string()"}],0,false}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              [21,42,115,112,108,105,116,95,115,99,114,105,112,116,95,112,97,
               116,104,47,49,42]},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {text,[14,42,115,112,108,105,116,95,112,97,116,104,47,49,42]},
             {sep,
              [{text,
                "hwith one exception. If the longest possible path is not a regular, accessible, and executable file, then"}],
              0,false},
             {text,[14,42,110,111,116,95,97,95,115,99,114,105,112,116,42]},
             {sep,[{text,"\fis returned."}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,":## split_path(RequestLine) -> {Path,QueryStringOrPathInfo}"},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\bSplits a"}],0,false},
           {text,"\r*RequestLine*"},
           {sep,
            [{text,
              [26,105,110,32,97,32,102,105,108,101,32,114,101,102,101,114,101,
               110,99,101,44,32,97,110,100,32,97]}],
            0,false},
           {text,"\r*QueryString*"},
           {sep,[{text,[4,111,114,32,97]}],0,false},
           {text,"\n*PathInfo*"},
           {sep,[{text,[7,115,116,114,105,110,103,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,"5RequestLine = Path = QueryStringOrPathInfo = string()"}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,[14,42,115,112,108,105,116,95,112,97,116,104,47,49,42]},
             {sep,[{text,[6,115,112,108,105,116,115]}],0,false},
             {text,"\r*RequestLine*"},
             {sep,
              [{text,
                [21,105,110,32,97,32,102,105,108,101,32,114,101,102,101,114,
                 101,110,99,101,32,40]}],
              0,false},
             {text,[6,42,80,97,116,104,42]},
             {sep,[{text,"\b), and a"}],0,false},
             {text,"\r*QueryString*"},
             {sep,[{text,[4,111,114,32,97]}],0,false},
             {text,"\n*PathInfo*"},
             {sep,
              [{text,
                [22,115,116,114,105,110,103,32,97,115,32,115,112,101,99,105,
                 102,105,101,100,32,105,110]}],
              0,false},
             {text,"/[RFC 2616](http://www.ietf.org/rfc/rfc2616.txt)"},
             {sep,[{text,[3,46,32,65]}],0,false},
             {text,"\r*QueryString*"},
             {sep,
              [{text,
                [16,105,115,32,105,115,111,108,97,116,101,100,32,102,114,111,
                 109]}],
              0,false},
             {text,[6,42,80,97,116,104,42]},
             {sep,
              [{text,
                [22,119,105,116,104,32,97,32,113,117,101,115,116,105,111,110,
                 32,109,97,114,107,32,40]}],
              0,false},
             {text,[3,42,63,42]},
             {sep,[{text,[5,41,32,97,110,100]}],0,false},
             {text,"\n*PathInfo*"},
             {sep,[{text,"\"with a slash (/). In the case of a"}],0,false},
             {text,"\r*QueryString*"},
             {sep,
              [{text,
                [19,44,32,101,118,101,114,121,116,104,105,110,103,32,98,101,
                 102,111,114,101]}],
              0,false},
             {text,[3,42,63,42]},
             {sep,[{text,[4,105,115,32,97]}],0,false},
             {text,[6,42,80,97,116,104,42]},
             {sep,
              [{text,
                [20,97,110,100,32,101,118,101,114,121,116,104,105,110,103,32,
                 97,102,116,101,114]}],
              0,false},
             {text,[3,42,63,42]},
             {sep,[{text,[4,105,115,32,97]}],0,false},
             {text,"\r*QueryString*"},
             {sep,
              [{text,
                [18,46,32,73,110,32,116,104,101,32,99,97,115,101,32,111,102,
                 32,97]}],
              0,false},
             {text,"\n*PathInfo*"},
             {sep,[{text,[1,44]}],0,false},
             {text,"\r*RequestLine*"},
             {sep,
              [{text,
                ">is scanned from left-to-right on the hunt for longest possible"}],
              0,false},
             {text,[6,42,80,97,116,104,42]},
             {sep,
              [{text,
                "Bbeing a file or a directory. Everything after the longest possible"}],
              0,false},
             {text,[6,42,80,97,116,104,42]},
             {sep,
              [{text,
                [17,44,32,105,115,111,108,97,116,101,100,32,119,105,116,104,
                 32,97]}],
              0,false},
             {text,[3,42,47,42]},
             {sep,
              [{text,
                [16,44,32,105,115,32,114,101,103,97,114,100,101,100,32,97,
                 115]}],
              0,false},
             {text,"\n*PathInfo*"},
             {sep,
              [{text,
                [15,46,32,84,104,101,32,114,101,115,117,108,116,105,110,103]}],
              0,false},
             {text,[6,42,80,97,116,104,42]},
             {sep,
              [{text,
                [16,105,115,32,100,101,99,111,100,101,100,32,117,115,105,110,
                 103]}],
              0,false},
             {text,[14,42,100,101,99,111,100,101,95,104,101,120,47,49,42]},
             {sep,
              [{text,
                [16,98,101,102,111,114,101,32,100,101,108,105,118,101,114,121,
                 46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [28,35,35,32,115,116,114,105,112,40,83,116,114,105,110,103,41,32,45,
         62,32,83,116,114,105,112,112,101,100]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,[7,82,101,116,117,114,110,115]}],0,false},
           {text,"\b*String*"},
           {sep,
            [{text,"6where the leading and trailing space tabs are removed."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [28,83,116,114,105,110,103,32,61,32,83,116,114,105,112,112,101,100,
          32,61,32,115,116,114,105,110,103,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\t*strip/1*"},
             {sep,
              [{text,
                [128,114,101,109,111,118,101,115,32,97,110,121,32,108,101,97,
                 100,105,110,103,32,111,114,32,116,114,97,105,108,105,110,103,
                 32,108,105,110,101,97,114,32,119,104,105,116,101,32,115,112,
                 97,99,101,32,102,114,111,109,32,116,104,101,32,115,116,114,
                 105,110,103,46,32,76,105,110,101,97,114,32,119,104,105,116,
                 101,32,115,112,97,99,101,32,105,115,32,116,111,32,98,101,32,
                 114,101,97,100,32,97,115,32,104,111,114,105,122,111,110,116,
                 97,108,32,116,97,98,32,111,114,32,115,112,97,99,101,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [29,35,35,32,115,117,102,102,105,120,40,70,105,108,101,78,97,109,101,
         41,32,45,62,32,83,117,102,102,105,120]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,"/Extracts the file suffix from a given filename."}],
          0,false}],
        0,true},
       null},
      null}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [28,70,105,108,101,78,97,109,101,32,61,32,83,117,102,102,105,120,32,
          61,32,115,116,114,105,110,103,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\n*suffix/1*"},
             {sep,
              [{text,
                [16,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,
                 111]}],
              0,false},
             {text,
              [22,42,102,105,108,101,110,97,109,101,58,101,120,116,101,110,
               115,105,111,110,47,49,42]},
             {sep,
              [{text,
                [23,119,105,116,104,32,116,104,101,32,101,120,99,101,112,116,
                 105,111,110,32,116,104,97,116]}],
              0,false},
             {text,"\b*Suffix*"},
             {sep,[{text,"#is returned without a leading dot ("}],0,false},
             {text,[3,42,46,42]},
             {sep,[{text,[2,41,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## SEE ALSO"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [17,91,104,116,116,112,100,40,51,41,93,40,104,116,116,112,100,41]}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
