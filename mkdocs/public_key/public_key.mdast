{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\f# public_key"},null},null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,{above,{text,"\f# public_key"},null},null}}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,")API module for public-key infrastructure."}],0,false}],
         0,true},
        null},
       null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "GProvides functions to handle public-key infrastructure, for details see"}],
                   0,false},
                  {text,
                   [31,91,112,117,98,108,105,99,95,107,101,121,40,54,41,93,40,
                    112,117,98,108,105,99,95,107,101,121,95,97,112,112,41]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}],
        0,true},
       null},
      null}}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,{above,{text,"!## Common Records and ASN.1 Types"},null},null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
          {sep,
           [{text,[4,32,32,32,32]},
            {sep,
             [{sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{sep,
                        [{text,")All records used in this Reference Manual"}],
                        0,false},
                       {sep,
                        [{text,
                          "Sare generated from ASN.1 specifications and are documented in the User's Guide. See"}],
                        0,false},
                       {text,"([Public-key Records](public_key_records)"},
                       {sep,[{text,[1,46]}],0,false}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,true}],
           0,false}},
         {text,[0]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "|Use the following include directive to get access to the records and constant macros described here and in the User's Guide:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,"3 -include_lib(\"public_key/include/public_key.hrl\")."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f# Data Types"},null},null}},
    {sep,
     [{sep,[{text,[3,111,105,100]}],0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  ":Object identifier, a tuple of integers as generated by the"}],
                0,false},
               {text,[7,42,65,83,78,46,49,42]},
               {sep,[{text,"\tcompiler."}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,[{sep,[{text,"\vder_encoded"}],0,false},null],0,false},
    {sep,[{sep,[{text,"\rpki_asn1_type"}],0,false},null],0,false},
    {sep,
     [{sep,[{text,"\tasn1_type"}],0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "GASN.1 type present in the Public Key applications ASN.1 specifications."}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{sep,[{text,"\tpem_entry"}],0,false},
      {sep,
       [{text,
         [20,100,101,114,95,111,114,95,101,110,99,114,121,112,116,101,100,95,
          100,101,114]}],
       0,false},
      {sep,[{text,"\vcipher_info"}],0,false},
      {sep,[{text,[6,99,105,112,104,101,114]}],0,false},
      {sep,[{text,[4,115,97,108,116]}],0,false},
      {sep,
       [{text,
         [18,99,105,112,104,101,114,95,105,110,102,111,95,112,97,114,97,109,
          115]}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {above,
            {above,
             {text,[3,96,96,96]},
             {sep,
              [{text,
                "/Cipher = \"RC2-CBC\" | \"DES-CBC\" | \"DES-EDE3-CBC\""}],
              0,true}},
            {text,[3,96,96,96]}},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,[6,42,83,97,108,116,42]},
               {sep,
                [{text,
                  [23,99,111,117,108,100,32,98,101,32,103,101,110,101,114,97,
                   116,101,100,32,119,105,116,104]}],
                0,false},
               {text,
                "I[crypto/crypto#strong_rand_bytes-1](../crypto/crypto#strong_rand_bytes-1)"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false},
    {sep,
     [{sep,[{text,"\npublic_key"}],0,false},
      {sep,
       [{text,[14,114,115,97,95,112,117,98,108,105,99,95,107,101,121]}],
       0,false},
      {sep,
       [{text,[14,100,115,97,95,112,117,98,108,105,99,95,107,101,121]}],
       0,false},
      {sep,[{text,"\rec_public_key"}],0,false},
      {sep,
       [{text,[15,101,99,112,107,95,112,97,114,97,109,101,116,101,114,115]}],
       0,false},
      {sep,
       [{text,
         [19,101,99,112,107,95,112,97,114,97,109,101,116,101,114,115,95,97,
          112,105]}],
       0,false},
      null],
     0,false},
    {sep,
     [{sep,[{text,"\red_public_key"}],0,false},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,
            [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,114,110,
             105,110,103,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         "QThis format of the EdDSA curves is temporary and may change without prior notice!"}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false},
    {sep,
     [{sep,[{text,"\vprivate_key"}],0,false},
      {sep,
       [{text,[15,114,115,97,95,112,114,105,118,97,116,101,95,107,101,121]}],
       0,false},
      {sep,
       [{text,[15,100,115,97,95,112,114,105,118,97,116,101,95,107,101,121]}],
       0,false},
      {sep,
       [{text,[14,101,99,95,112,114,105,118,97,116,101,95,107,101,121]}],
       0,false},
      null],
     0,false},
    {sep,
     [{sep,
       [{text,[14,101,100,95,112,114,105,118,97,116,101,95,107,101,121]}],
       0,false},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,
            [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,114,110,
             105,110,103,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{text,
                         "QThis format of the EdDSA curves is temporary and may change without prior notice!"}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false},
    {sep,[{sep,[{text,"\nkey_params"}],0,false},null],0,false},
    {sep,[{sep,[{text,"\vdigest_type"}],0,false},null],0,false},
    {sep,[{sep,[{text,"\ncrl_reason"}],0,false},null],0,false},
    {sep,[{sep,[{text,"\tissuer_id"}],0,false},null],0,false},
    {sep,[{sep,[{text,"\vissuer_name"}],0,false},null],0,false},
    {sep,[{sep,[{text,"\bssh_file"}],0,false},null],0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[16,35,35,32,99,111,109,112,117,116,101,95,107,101,121,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [23,67,111,109,112,117,116,101,115,32,115,104,97,114,101,100,32,
            115,101,99,114,101,116,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [23,67,111,109,112,117,116,101,115,32,115,104,97,114,101,100,32,
              115,101,99,114,101,116,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[16,35,35,32,99,111,109,112,117,116,101,95,107,101,121,47,51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [23,67,111,109,112,117,116,101,115,32,115,104,97,114,101,100,32,
            115,101,99,114,101,116,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [23,67,111,109,112,117,116,101,115,32,115,104,97,114,101,100,32,
              115,101,99,114,101,116,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,100,101,99,114,121,112,116,95,112,114,105,118,97,116,101,
        47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,100,101,99,114,121,112,116,95,112,114,105,118,97,116,101,
        47,51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [22,80,117,98,108,105,99,45,107,101,121,32,100,101,99,114,121,112,
            116,105,111,110,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"5Public-key decryption using the private key. See also"}],
             0,false},
            {text,
             ">[crypto:private_decrypt/4](../crypto/crypto#private_decrypt/4)"}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [19,35,35,32,100,101,99,114,121,112,116,95,112,117,98,108,105,99,47,
        50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [19,35,35,32,100,101,99,114,121,112,116,95,112,117,98,108,105,99,47,
        51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [22,80,117,98,108,105,99,45,107,101,121,32,100,101,99,114,121,112,
            116,105,111,110,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"4Public-key decryption using the public key. See also"}],
             0,false},
            {text,
             "<[crypto:public_decrypt/4](../crypto/crypto#public_decrypt/4)"}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[15,35,35,32,100,101,114,95,100,101,99,111,100,101,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,".Decodes a public-key ASN.1 DER encoded entity."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,".Decodes a public-key ASN.1 DER encoded entity."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[15,35,35,32,100,101,114,95,101,110,99,111,100,101,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"4Encodes a public-key entity with ASN.1 DER encoding."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"4Encodes a public-key entity with ASN.1 DER encoding."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[17,35,35,32,100,104,95,103,101,120,95,103,114,111,117,112,47,52]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"/Selects a group for Diffie-Hellman key exchange"}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "NSelects a group for Diffie-Hellman key exchange with the key size in the range"}],
             0,false},
            {text,
             [19,42,77,105,110,83,105,122,101,46,46,46,77,97,120,83,105,122,
              101,42]},
            {sep,
             [{text,
               [15,97,110,100,32,97,115,32,99,108,111,115,101,32,116,111]}],
             0,false},
            {text,
             [15,42,83,117,103,103,101,115,116,101,100,83,105,122,101,42]},
            {sep,
             [{text,
               [15,97,115,32,112,111,115,115,105,98,108,101,46,32,73,102]}],
             0,false},
            {text,
             [21,42,71,114,111,117,112,115,32,61,61,32,117,110,100,101,102,
              105,110,101,100,42]},
            {sep,
             [{text,
               "@a default set will be used, otherwise the group is selected from"}],
             0,false},
            {text,"\b*Groups*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "ºFirst a size, as close as possible to SuggestedSize, is selected. Then one group with that key size is randomly selected from the specified set of groups. If no size within the limits of"}],
             0,false},
            {text,"\t*MinSize*"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,"\t*MaxSize*"},
            {sep,[{text,"\ris available,"}],0,false},
            {text,
             [24,42,123,101,114,114,111,114,44,110,111,95,103,114,111,117,112,
              95,102,111,117,110,100,125,42]},
            {sep,[{text,"\fis returned."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"&The default set of groups is listed in"}],0,false},
            {text,
             [28,42,108,105,98,47,112,117,98,108,105,99,95,107,101,121,47,112,
              114,105,118,47,109,111,100,117,108,105,42]},
            {sep,
             [{text,"). This file may be regenerated like this:"}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "Î\n\t$> cd $ERL_TOP/lib/public_key/priv/\n\t$> generate\n         ---- wait until all background jobs has finished. It may take several days !\n\t$> cat moduli-* > moduli\n\t$> cd ..; make \n      "}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,101,110,99,114,121,112,116,95,112,114,105,118,97,116,101,
        47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,101,110,99,114,121,112,116,95,112,114,105,118,97,116,101,
        47,51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,",Public-key encryption using the private key."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"5Public-key encryption using the private key. See also"}],
             0,false},
            {text,
             ">[crypto:private_encrypt/4](../crypto/crypto#private_encrypt/4)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [19,35,35,32,101,110,99,114,121,112,116,95,112,117,98,108,105,99,47,
        50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [19,35,35,32,101,110,99,114,121,112,116,95,112,117,98,108,105,99,47,
        51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"+Public-key encryption using the public key."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"4Public-key encryption using the public key. See also"}],
             0,false},
            {text,
             "<[crypto:public_encrypt/4](../crypto/crypto#public_encrypt/4)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[17,35,35,32,103,101,110,101,114,97,116,101,95,107,101,121,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [24,71,101,110,101,114,97,116,101,115,32,97,32,110,101,119,32,107,
            101,121,112,97,105,114,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "~Generates a new keypair. Note that except for Diffie-Hellman the public key is included in the private key structure. See also"}],
             0,false},
            {text,
             "8[crypto:generate_key/2](../crypto/crypto#generate_key/2)"}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[15,35,35,32,112,101,109,95,100,101,99,111,100,101,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "JDecodes PEM binary data and returns entries as ASN.1 DER encoded entities."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "JDecodes PEM binary data and returns entries as ASN.1 DER encoded entities."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[7,69,120,97,109,112,108,101]}],0,false},
            {text,
             "X*{ok, PemBin} = file:read_file(\"cert.pem\"). PemEntries = public_key:pem_decode(PemBin).*"}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[15,35,35,32,112,101,109,95,101,110,99,111,100,101,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [21,67,114,101,97,116,101,115,32,97,32,80,69,77,32,98,105,110,97,
            114,121,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [21,67,114,101,97,116,101,115,32,97,32,80,69,77,32,98,105,110,97,
              114,121,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [21,35,35,32,112,101,109,95,101,110,116,114,121,95,100,101,99,111,100,
        101,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [21,35,35,32,112,101,109,95,101,110,116,114,121,95,100,101,99,111,100,
        101,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [20,68,101,99,111,100,101,115,32,97,32,80,69,77,32,101,110,116,114,
            121,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [20,68,101,99,111,100,101,115,32,97,32,80,69,77,32,101,110,116,
                114,121,46]}],
             0,false},
            {text,[14,42,112,101,109,95,100,101,99,111,100,101,47,49,42]},
            {sep,
             [{text,
               "zreturns a list of PEM entries. Notice that if the PEM entry is of type 'SubjectPublickeyInfo', it is further decoded to an"}],
             0,false},
            {text,
             [18,42,114,115,97,95,112,117,98,108,105,99,95,107,101,121,40,41,
              42]},
            {sep,[{text,[2,111,114]}],0,false},
            {text,
             [18,42,100,115,97,95,112,117,98,108,105,99,95,107,101,121,40,41,
              42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [21,35,35,32,112,101,109,95,101,110,116,114,121,95,101,110,99,111,100,
        101,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [21,35,35,32,112,101,109,95,101,110,116,114,121,95,101,110,99,111,100,
        101,47,51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,"&Creates a PEM entry that can be fed to"}],0,false},
          {text,[14,42,112,101,109,95,101,110,99,111,100,101,47,49,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"'Creates a PEM entry that can be feed to"}],0,false},
            {text,[14,42,112,101,109,95,101,110,99,111,100,101,47,49,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,"\n*Asn1Type*"},
            {sep,[{text,[2,105,115]}],0,false},
            {text,
             [24,42,39,83,117,98,106,101,99,116,80,117,98,108,105,99,75,101,
              121,73,110,102,111,39,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,"\b*Entity*"},
            {sep,
             [{text,
               [17,109,117,115,116,32,98,101,32,101,105,116,104,101,114,32,97,
                110]}],
             0,false},
            {text,
             [18,42,114,115,97,95,112,117,98,108,105,99,95,107,101,121,40,41,
              42]},
            {sep,[{text,[1,44]}],0,false},
            {text,
             [18,42,100,115,97,95,112,117,98,108,105,99,95,107,101,121,40,41,
              42]},
            {sep,[{text,[5,111,114,32,97,110]}],0,false},
            {text,
             [17,42,101,99,95,112,117,98,108,105,99,95,107,101,121,40,41,42]},
            {sep,
             [{text,")and this function creates the appropriate"}],
             0,false},
            {text,
             [24,42,39,83,117,98,106,101,99,116,80,117,98,108,105,99,75,101,
              121,73,110,102,111,39,42]},
            {sep,[{text,[6,101,110,116,114,121,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [21,35,35,32,112,107,105,120,95,100,101,99,111,100,101,95,99,101,114,
        116,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"3Decodes an ASN.1 DER-encoded PKIX x509 certificate."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"5Decodes an ASN.1 DER-encoded PKIX certificate. Option"}],
             0,false},
            {text,[5,42,111,116,112,42]},
            {sep,
             [{text,
               "zuses the customized ASN.1 specification OTP-PKIX.asn1 for decoding and also recursively decode most of the standard parts."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[16,35,35,32,112,107,105,120,95,101,110,99,111,100,101,47,51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "BDER encodes a PKIX x509 certificate or part of such a certificate."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "°DER encodes a PKIX x509 certificate or part of such a certificate. This function must be used for encoding certificates or parts of certificates that are decoded/created in the"}],
             0,false},
            {text,[5,42,111,116,112,42]},
            {sep,
             [{text,
               "Aformat, whereas for the plain format this function directly calls"}],
             0,false},
            {text,[14,42,100,101,114,95,101,110,99,111,100,101,47,50,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [19,35,35,32,112,107,105,120,95,105,115,95,105,115,115,117,101,114,47,
        50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,"\tChecks if"}],0,false},
          {text,"\f*IssuerCert*"},
          {sep,[{text,[6,105,115,115,117,101,100]}],0,false},
          {text,[6,42,67,101,114,116,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\tChecks if"}],0,false},
            {text,"\f*IssuerCert*"},
            {sep,[{text,[6,105,115,115,117,101,100]}],0,false},
            {text,[6,42,67,101,114,116,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [26,35,35,32,112,107,105,120,95,105,115,95,102,105,120,101,100,95,100,
        104,95,99,101,114,116,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           ">Checks if a certificate is a fixed Diffie-Hellman certificate."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             ">Checks if a certificate is a fixed Diffie-Hellman certificate."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [24,35,35,32,112,107,105,120,95,105,115,95,115,101,108,102,95,115,105,
        103,110,101,100,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"'Checks if a certificate is self-signed."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"'Checks if a certificate is self-signed."}],0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [19,35,35,32,112,107,105,120,95,105,115,115,117,101,114,95,105,100,47,
        50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [22,82,101,116,117,114,110,115,32,116,104,101,32,105,115,115,117,
            101,114,32,105,100,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [22,82,101,116,117,114,110,115,32,116,104,101,32,105,115,115,117,
              101,114,32,105,100,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [24,35,35,32,112,107,105,120,95,110,111,114,109,97,108,105,122,101,95,
        110,97,109,101,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "SNormalizes an issuer name so that it can be easily compared to another issuer name."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "SNormalizes an issuer name so that it can be easily compared to another issuer name."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "{## pkix_path_validation(TrustedCert, CertChain, Options) -> {ok, {PublicKeyInfo, PolicyTree}} | {error, {bad_cert, Reason}}"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"7Performs a basic path validation according to RFC 5280."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                ":TrustedCert = #'OTPCertificate'{} | der_encoded() | atom()"}],
              0,false}],
            0,false},
           {sep,
            [{text,[1,42]},
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "±Normally a trusted certificate, but it can also be a path-validation error that can be discovered while constructing the input to this function and that is to be run through the"}],
                  0,false},
                 {text,"\f*verify_fun*"},
                 {sep,
                  [{text,
                    [14,46,32,69,120,97,109,112,108,101,115,32,97,114,101]}],
                  0,false},
                 {text,"\f*unknown_ca*"},
                 {sep,[{text,[3,97,110,100]}],0,false},
                 {text,
                  [18,42,115,101,108,102,115,105,103,110,101,100,95,112,101,
                   101,114,46,42]}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,[{text,"\eCertChain = [der_encoded()]"}],0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              "SA list of DER-encoded certificates in trust order ending with the peer certificate."}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [30,79,112,116,105,111,110,115,32,61,32,112,114,111,112,108,105,
              115,116,115,58,112,114,111,112,108,105,115,116,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            "dPublicKeyInfo = {?'rsaEncryption' | ?'id-dsa', rsa_public_key() | integer(), 'NULL' | 'Dss-Parms'{}}"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [19,80,111,108,105,99,121,84,114,101,101,32,61,32,116,101,114,109,
            40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          "SAt the moment this is always an empty list as policies are not currently supported."}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         "¡Reason = cert_expired | invalid_issuer | invalid_signature | name_not_permitted | missing_basic_constraint | invalid_key_usage | {revoked, crl_reason()} | atom()"}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"-Performs a basic path validation according to"}],
             0,false},
            {text,"0[RFC 5280.](http://www.ietf.org/rfc/rfc5280.txt)"},
            {sep,
             [{text,"-However, CRL validation is done separately by"}],
             0,false},
            {text,"-[pkix_crls_validate/3](#pkix_crls_validate-3)"},
            {sep,[{text,"%and is to be called from the supplied"}],0,false},
            {text,"\f*verify_fun*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [18,65,118,97,105,108,97,98,108,101,32,111,112,116,105,111,110,
              115,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,116,62]},
                {sep,
                 [{text,".{verify_fun, {fun(), InitialUserState::term()}"}],
                 0,false},
                {text,[5,60,47,100,116,62]}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,[{text,"\eThe fun must be defined as:"}],0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {above,
                      {above,
                       {text,[3,96,96,96]},
                       {sep,
                        [{text,
                          [330,10,102,117,110,40,79,116,112,67,101,114,116,32,
                           58,58,32,35,39,79,84,80,67,101,114,116,105,102,105,
                           99,97,116,101,39,123,125,44,10,32,32,32,32,69,118,
                           101,110,116,32,58,58,32,123,98,97,100,95,99,101,
                           114,116,44,32,82,101,97,115,111,110,32,58,58,32,97,
                           116,111,109,40,41,32,124,32,123,114,101,118,111,
                           107,101,100,44,32,97,116,111,109,40,41,125,125,32,
                           124,10,32,32,32,32,32,32,32,32,32,32,32,32,32,123,
                           101,120,116,101,110,115,105,111,110,44,32,35,39,69,
                           120,116,101,110,115,105,111,110,39,123,125,125,44,
                           10,32,32,32,32,73,110,105,116,105,97,108,85,115,
                           101,114,83,116,97,116,101,32,58,58,32,116,101,114,
                           109,40,41,41,32,45,62,10,9,123,118,97,108,105,100,
                           44,32,85,115,101,114,83,116,97,116,101,32,58,58,32,
                           116,101,114,109,40,41,125,32,124,10,9,123,118,97,
                           108,105,100,95,112,101,101,114,44,32,85,115,101,
                           114,83,116,97,116,101,32,58,58,32,116,101,114,109,
                           40,41,125,32,124,10,9,123,102,97,105,108,44,32,82,
                           101,97,115,111,110,32,58,58,32,116,101,114,109,40,
                           41,125,32,124,10,9,123,117,110,107,110,111,119,110,
                           44,32,85,115,101,114,83,116,97,116,101,32,58,58,32,
                           116,101,114,109,40,41,125,46,10,9,32,32]}],
                        0,true}},
                      {text,[3,96,96,96]}},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{sep,
                          [{text,"\"If the verify callback fun returns"}],
                          0,false},
                         {text,
                          [14,123,102,97,105,108,44,32,82,101,97,115,111,110,
                           125]},
                         {sep,
                          [{text,
                            "U, the verification process is immediately stopped. If the verify callback fun returns"}],
                          0,false},
                         {text,
                          [18,123,118,97,108,105,100,44,32,85,115,101,114,83,
                           116,97,116,101,125]},
                         {sep,
                          [{text,
                            "l, the verification process is continued. This can be used to accept specific path validation errors, such as"}],
                          0,false},
                         {text,
                          [15,115,101,108,102,115,105,103,110,101,100,95,112,
                           101,101,114]},
                         {sep,
                          [{text,
                            [133,44,32,97,115,32,119,101,108,108,32,97,115,32,
                             118,101,114,105,102,121,105,110,103,32,97,112,
                             112,108,105,99,97,116,105,111,110,45,115,112,101,
                             99,105,102,105,99,32,101,120,116,101,110,115,105,
                             111,110,115,46,32,73,102,32,99,97,108,108,101,
                             100,32,119,105,116,104,32,97,110,32,101,120,116,
                             101,110,115,105,111,110,32,117,110,107,110,111,
                             119,110,32,116,111,32,116,104,101,32,117,115,101,
                             114,32,97,112,112,108,105,99,97,116,105,111,110,
                             44,32,116,104,101,32,114,101,116,117,114,110,32,
                             118,97,108,117,101]}],
                          0,false},
                         {text,
                          [20,123,117,110,107,110,111,119,110,44,32,85,115,
                           101,114,83,116,97,116,101,125]},
                         {sep,
                          [{text,
                            [14,105,115,32,116,111,32,98,101,32,117,115,101,
                             100,46]}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}}],
                 0,false},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,
                [{text,
                  [28,123,109,97,120,95,112,97,116,104,95,108,101,110,103,116,
                   104,44,32,105,110,116,101,103,101,114,40,41,125]}],
                0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {sep,
               [{sep,[{text,[3,84,104,101]}],0,false},
                {text,
                 [15,109,97,120,95,112,97,116,104,95,108,101,110,103,116,104]},
                {sep,
                 [{text,
                   [141,105,115,32,116,104,101,32,109,97,120,105,109,117,109,
                    32,110,117,109,98,101,114,32,111,102,32,110,111,110,45,
                    115,101,108,102,45,105,115,115,117,101,100,32,105,110,116,
                    101,114,109,101,100,105,97,116,101,32,99,101,114,116,105,
                    102,105,99,97,116,101,115,32,116,104,97,116,32,99,97,110,
                    32,102,111,108,108,111,119,32,116,104,101,32,112,101,101,
                    114,32,99,101,114,116,105,102,105,99,97,116,101,32,105,
                    110,32,97,32,118,97,108,105,100,32,99,101,114,116,105,102,
                    105,99,97,116,105,111,110,32,112,97,116,104,46,32,83,111,
                    44,32,105,102]}],
                 0,false},
                {text,
                 [15,109,97,120,95,112,97,116,104,95,108,101,110,103,116,104]},
                {sep,
                 [{text,
                   "«is 0, the PEER must be signed by the trusted ROOT-CA directly, if it is 1, the path can be PEER, CA, ROOT-CA, if it is 2, the path can be PEER, CA, CA, ROOT-CA, and so on."}],
                 0,false}],
               0,false},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"'Possible reasons for a bad certificate:"}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,116,62]},
                            {sep,[{text,"\fcert_expired"}],0,false},
                            {text,[5,60,47,100,116,62]}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{text,[4,60,100,100,62]},
                            {above,
                             {above,{above,{text,[0]},null},null},
                             {above,
                              {above,
                               {sep,
                                [{sep,
                                  [{text,
                                    "ACertificate is no longer valid as its expiration date has passed."}],
                                  0,false}],
                                0,true},
                               null},
                              null}},
                            {text,[5,60,47,100,100,62]}],
                           0,true},
                          null},
                         null}}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{text,[4,60,100,116,62]},
                           {sep,
                            [{text,
                              [14,105,110,118,97,108,105,100,95,105,115,115,
                               117,101,114]}],
                            0,false},
                           {text,[5,60,47,100,116,62]}],
                          0,true},
                         null},
                        null}}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  "WCertificate issuer name does not match the name of the issuer certificate in the chain."}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,
                          [{text,
                            [17,105,110,118,97,108,105,100,95,115,105,103,110,
                             97,116,117,114,101]}],
                          0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {above,
                         {above,{above,{text,[0]},null},null},
                         {above,
                          {above,
                           {sep,
                            [{sep,
                              [{text,
                                "BCertificate was not signed by its issuer certificate in the chain."}],
                              0,false}],
                            0,true},
                           null},
                          null}},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,
                        [{text,
                          [18,110,97,109,101,95,110,111,116,95,112,101,114,
                           109,105,116,116,101,100]}],
                        0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{text,
                              "+Invalid Subject Alternative Name extension."}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,
                      [{text,
                        [24,109,105,115,115,105,110,103,95,98,97,115,105,99,
                         95,99,111,110,115,116,114,97,105,110,116]}],
                      0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,
                            "kCertificate, required to have the basic constraints extension, does not have a basic constraints extension."}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,
                    [{text,
                      [17,105,110,118,97,108,105,100,95,107,101,121,95,117,
                       115,97,103,101]}],
                    0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "OCertificate key is used in an invalid way according to the key-usage extension."}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{text,
                    [23,123,114,101,118,111,107,101,100,44,32,99,114,108,95,
                     114,101,97,115,111,110,40,41,125]}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        [29,67,101,114,116,105,102,105,99,97,116,101,32,104,
                         97,115,32,98,101,101,110,32,114,101,118,111,107,101,
                         100,46]}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[{text,[6,97,116,111,109,40,41]}],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{sep,
                      [{text,
                        ">Application-specific error reason that is to be checked by the"}],
                      0,false},
                     {text,"\nverify_fun"},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,112,107,105,120,95,99,114,108,95,105,115,115,117,101,114,
        47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [25,82,101,116,117,114,110,115,32,116,104,101,32,105,115,115,117,
              101,114,32,111,102,32,116,104,101]}],
           0,false},
          {text,[5,42,67,82,76,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [25,82,101,116,117,114,110,115,32,116,104,101,32,105,115,115,
                117,101,114,32,111,102,32,116,104,101]}],
             0,false},
            {text,[5,42,67,82,76,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [23,35,35,32,112,107,105,120,95,99,114,108,115,95,118,97,108,105,100,
        97,116,101,47,51]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [24,80,101,114,102,111,114,109,115,32,67,82,76,32,118,97,108,105,
            100,97,116,105,111,110,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "KPerforms CRL validation. It is intended to be called from the verify fun of"}],
             0,false},
            {text,"1[pkix_path_validation/3](#pkix_path_validation-3)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [18,65,118,97,105,108,97,98,108,101,32,111,112,116,105,111,110,
              115,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,
                   [{text,
                     [19,123,117,112,100,97,116,101,95,99,114,108,44,32,102,
                      117,110,40,41,125]}],
                   0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {sep,
                   [{above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,
                            "-The fun has the following type specification:"}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {above,
                        {above,
                         {text,[3,96,96,96]},
                         {sep,
                          [{text,
                            "R fun(#'DistributionPoint'{}, #'CertificateList'{}) ->\n        #'CertificateList'{}"}],
                          0,true}},
                        {text,[3,96,96,96]}},
                       null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,
                            "²The fun uses the information in the distribution point to access the latest possible version of the CRL. If this fun is not specified, Public Key uses the default implementation:"}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {above,
                        {above,
                         {text,[3,96,96,96]},
                         {sep,
                          [{text,
                            [25,32,102,117,110,40,95,68,80,44,32,67,82,76,41,
                             32,45,62,32,67,82,76,32,101,110,100]}],
                          0,true}},
                        {text,[3,96,96,96]}},
                       null},
                      null}}],
                   0,false},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{text,
                    [19,123,105,115,115,117,101,114,95,102,117,110,44,32,102,
                     117,110,40,41,125]}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "-The fun has the following type specification:"}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {above,
                      {above,
                       {text,[3,96,96,96]},
                       {sep,
                        [{text,
                          [152,10,102,117,110,40,35,39,68,105,115,116,114,105,
                           98,117,116,105,111,110,80,111,105,110,116,39,123,
                           125,44,32,35,39,67,101,114,116,105,102,105,99,97,
                           116,101,76,105,115,116,39,123,125,44,10,32,32,32,
                           32,123,114,100,110,83,101,113,117,101,110,99,101,
                           44,91,35,39,65,116,116,114,105,98,117,116,101,84,
                           121,112,101,65,110,100,86,97,108,117,101,39,123,
                           125,93,125,44,32,116,101,114,109,40,41,41,32,45,62,
                           10,9,123,111,107,44,32,35,39,79,84,80,67,101,114,
                           116,105,102,105,99,97,116,101,39,123,125,44,32,91,
                           100,101,114,95,101,110,99,111,100,101,100,93,125]}],
                        0,true}},
                      {text,[3,96,96,96]}},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "SThe fun returns the root certificate and certificate chain that has signed the CRL."}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {above,
                      {above,
                       {text,[3,96,96,96]},
                       {sep,
                        [{text,
                          "= fun(DP, CRL, Issuer, UserState) -> {ok, RootCert, CertChain}"}],
                        0,true}},
                      {text,[3,96,96,96]}},
                     null},
                    null}}],
                 0,false},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[{text,"!{undetermined_details, boolean()}"}],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,
                      "§Defaults to false. When revocation status cannot be determined, and this option is set to true, details of why no CRLs where accepted are included in the return value."}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,112,107,105,120,95,99,114,108,95,118,101,114,105,102,121,
        47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,"\vVerify that"}],0,false},
          {text,[6,42,67,101,114,116,42]},
          {sep,[{text,[6,105,115,32,116,104,101]}],0,false},
          {text,[5,42,67,82,76,42]},
          {sep,[{text,[7,115,105,103,110,101,114,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\vVerify that"}],0,false},
            {text,[6,42,67,101,114,116,42]},
            {sep,[{text,[6,105,115,32,116,104,101]}],0,false},
            {text,[5,42,67,82,76,42]},
            {sep,[{text,[7,115,105,103,110,101,114,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,112,107,105,120,95,100,105,115,116,95,112,111,105,110,116,
        47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "BCreates a distribution point for CRLs issued by the same issuer as"}],
           0,false},
          {text,[6,42,67,101,114,116,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "BCreates a distribution point for CRLs issued by the same issuer as"}],
             0,false},
            {text,[6,42,67,101,114,116,42]},
            {sep,
             [{text,
               [25,46,32,67,97,110,32,98,101,32,117,115,101,100,32,97,115,32,
                105,110,112,117,116,32,116,111]}],
             0,false},
            {text,"-[pkix_crls_validate/3](#pkix_crls_validate-3)"}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [21,35,35,32,112,107,105,120,95,100,105,115,116,95,112,111,105,110,116,
        115,47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           ">Extracts distribution points from the certificates extensions."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             ">Extracts distribution points from the certificates extensions."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [26,35,35,32,112,107,105,120,95,109,97,116,99,104,95,100,105,115,116,
        95,112,111,105,110,116,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "^Checks whether the given distribution point matches the Issuing Distribution Point of the CRL."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "àChecks whether the given distribution point matches the Issuing Distribution Point of the CRL, as described in RFC 5280. If the CRL doesn't have an Issuing Distribution Point extension, the distribution point always matches."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[14,35,35,32,112,107,105,120,95,115,105,103,110,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [18,83,105,103,110,115,32,99,101,114,116,105,102,105,99,97,116,101,
            46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "PSigns an 'OTPTBSCertificate'. Returns the corresponding DER-encoded certificate."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,112,107,105,120,95,115,105,103,110,95,116,121,112,101,115,
        47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "RTranslates signature algorithm OID to Erlang digest and signature algorithm types."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "HTranslates signature algorithm OID to Erlang digest and signature types."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,"\r*AlgorithmId*"},
            {sep,
             [{text,
               "Iis the signature OID from a certificate or a certificate revocation list."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"$## pkix_test_data(Options) -> Config"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"1## pkix_test_data([chain_opts()]) -> [conf_opt()]"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [30,67,114,101,97,116,101,115,32,99,101,114,116,105,102,105,99,97,
            116,101,32,116,101,115,116,32,100,97,116,97,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,")Options = #{chain_type() := chain_opts()}"}],
                 0,false}],
               0,false},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,"-Options for ROOT, Intermediate and Peer certs"}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,"*chain_type() = server_chain | client_chain"}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 "kchain_opts() = #{root := [cert_opt()] | root_cert(), peer := [cert_opt()], intermediates => [[cert_opt()]]}"}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "uA valid chain must have at least a ROOT and a peer cert. The root cert can be given either as a cert pre-generated by"}],
                  0,false},
                 {text,"/[pkix_test_root_cert/2](#pkix_test_root_cert-2)"},
                 {sep,
                  [{text,"%, or as root cert generation options."}],
                  0,false}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,"2root_cert() = #{cert := der_encoded(), key := Key}"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [31,65,32,114,111,111,116,32,99,101,114,116,105,102,105,99,
                   97,116,101,32,103,101,110,101,114,97,116,101,100,32,98,
                   121]}],
                0,false},
               {text,"/[pkix_test_root_cert/2](#pkix_test_root_cert-2)"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [25,99,101,114,116,95,111,112,116,40,41,32,61,32,123,75,101,121,
              44,32,86,97,108,117,101,125]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,
            [{sep,
              [{text,
                [25,70,111,114,32,97,118,97,105,108,97,98,108,101,32,111,112,
                 116,105,111,110,115,32,115,101,101]}],
              0,false},
             {text,
              [23,91,99,101,114,116,95,111,112,116,40,41,93,40,35,99,101,114,
               116,95,111,112,116,41]},
             {sep,[{text,[6,98,101,108,111,119,46]}],0,false}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           "HConfig = #{server_config := [conf_opt()], client_config := [conf_opt()]}"}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          "Rconf_opt() = {cert, der_encoded()} | {key, PrivateKey} |{cacerts, [der_encoded()]}"}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{sep,
         [{sep,
           [{text,
             [28,84,104,105,115,32,105,115,32,97,32,115,117,98,115,101,116,32,
              111,102,32,116,104,101,32,116,121,112,101]}],
           0,false},
          {text,".[ssl:tls_option()](../ssl/ssl#type-tls_option)"},
          {sep,[{text,[1,46]}],0,false},
          {text,"\f*PrivateKey*"},
          {sep,[{text,[7,105,115,32,119,104,97,116]}],0,false},
          {text,"![generate_key/1](#generate_key-1)"},
          {sep,[{text,"\breturns."}],0,false}],
         0,false}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [346,67,114,101,97,116,101,115,32,99,101,114,116,105,102,105,99,
              97,116,101,32,99,111,110,102,105,103,117,114,97,116,105,111,110,
              40,115,41,32,99,111,110,115,105,115,116,105,110,103,32,111,102,
              32,99,101,114,116,105,102,105,99,97,116,101,32,97,110,100,32,
              105,116,115,32,112,114,105,118,97,116,101,32,107,101,121,32,112,
              108,117,115,32,67,65,32,99,101,114,116,105,102,105,99,97,116,
              101,32,98,117,110,100,108,101,44,32,102,111,114,32,97,32,99,108,
              105,101,110,116,32,97,110,100,32,97,32,115,101,114,118,101,114,
              44,32,105,110,116,101,110,100,101,100,32,116,111,32,102,97,99,
              105,108,105,116,97,116,101,32,97,117,116,111,109,97,116,101,100,
              32,116,101,115,116,105,110,103,32,111,102,32,97,112,112,108,105,
              99,97,116,105,111,110,115,32,117,115,105,110,103,32,88,53,48,57,
              45,99,101,114,116,105,102,105,99,97,116,101,115,44,32,111,102,
              116,101,110,32,116,104,114,111,117,103,104,32,83,83,76,47,84,76,
              83,46,32,84,104,101,32,116,101,115,116,32,100,97,116,97,32,99,
              97,110,32,98,101,32,117,115,101,100,32,119,104,101,110,32,121,
              111,117,32,104,97,118,101,32,99,111,110,116,114,111,108,32,111,
              118,101,114,32,98,111,116,104,32,116,104,101,32,99,108,105,101,
              110,116,32,97,110,100,32,116,104,101,32,115,101,114,118,101,114,
              32,105,110,32,97,32,116,101,115,116,32,115,99,101,110,97,114,
              105,111,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [158,87,104,101,110,32,116,104,105,115,32,102,117,110,99,116,
                105,111,110,32,105,115,32,99,97,108,108,101,100,32,119,105,
                116,104,32,97,32,109,97,112,32,99,111,110,116,97,105,110,105,
                110,103,32,99,108,105,101,110,116,32,97,110,100,32,115,101,
                114,118,101,114,32,99,104,97,105,110,32,115,112,101,99,105,
                102,105,99,97,116,105,111,110,115,59,32,105,116,32,103,101,
                110,101,114,97,116,101,115,32,98,111,116,104,32,97,32,99,108,
                105,101,110,116,32,97,110,100,32,97,32,115,101,114,118,101,
                114,32,99,101,114,116,105,102,105,99,97,116,101,32,99,104,97,
                105,110,32,119,104,101,114,101,32,116,104,101]}],
             0,false},
            {text,"\t*cacerts*"},
            {sep,
             [{text,
               [274,114,101,116,117,114,110,101,100,32,102,111,114,32,116,104,
                101,32,115,101,114,118,101,114,32,99,111,110,116,97,105,110,
                115,32,116,104,101,32,114,111,111,116,32,99,101,114,116,32,
                116,104,101,32,115,101,114,118,101,114,32,115,104,111,117,108,
                100,32,116,114,117,115,116,32,97,110,100,32,116,104,101,32,
                105,110,116,101,114,109,101,100,105,97,116,101,32,99,101,114,
                116,105,102,105,99,97,116,101,115,32,116,104,101,32,115,101,
                114,118,101,114,32,115,104,111,117,108,100,32,112,114,101,115,
                101,110,116,32,116,111,32,99,111,110,110,101,99,116,105,110,
                103,32,99,108,105,101,110,116,115,46,32,84,104,101,32,114,111,
                111,116,32,99,101,114,116,32,116,104,101,32,115,101,114,118,
                101,114,32,115,104,111,117,108,100,32,116,114,117,115,116,32,
                105,115,32,116,104,101,32,111,110,101,32,117,115,101,100,32,
                97,115,32,114,111,111,116,32,111,102,32,116,104,101,32,99,108,
                105,101,110,116,32,99,101,114,116,105,102,105,99,97,116,101,
                32,99,104,97,105,110,46,32,86,105,99,101,32,118,101,114,115,
                97,32,97,112,112,108,105,101,115,32,116,111,32,116,104,101]}],
             0,false},
            {text,"\t*cacerts*"},
            {sep,
             [{text,
               "Jreturned for the client. The root cert(s) can either be pre-generated with"}],
             0,false},
            {text,"/[pkix_test_root_cert/2](#pkix_test_root_cert-2)"},
            {sep,
             [{text,
               ":, or if options are specified; it is (they are) generated."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [130,87,104,101,110,32,116,104,105,115,32,102,117,110,99,116,
                105,111,110,32,105,115,32,99,97,108,108,101,100,32,119,105,
                116,104,32,97,32,108,105,115,116,32,111,102,32,99,101,114,116,
                105,102,105,99,97,116,101,32,111,112,116,105,111,110,115,59,
                32,105,116,32,103,101,110,101,114,97,116,101,115,32,97,32,99,
                111,110,102,105,103,117,114,97,116,105,111,110,32,119,105,116,
                104,32,106,117,115,116,32,111,110,101,32,110,111,100,101,32,
                99,101,114,116,105,102,105,99,97,116,101,32,119,104,101,114,
                101]}],
             0,false},
            {text,"\t*cacerts*"},
            {sep,
             [{text,
               [465,99,111,110,116,97,105,110,115,32,116,104,101,32,114,111,
                111,116,32,99,101,114,116,32,97,110,100,32,116,104,101,32,105,
                110,116,101,114,109,101,100,105,97,116,101,32,99,101,114,116,
                115,32,116,104,97,116,32,115,104,111,117,108,100,32,98,101,32,
                112,114,101,115,101,110,116,101,100,32,116,111,32,97,32,112,
                101,101,114,46,32,73,110,32,116,104,105,115,32,99,97,115,101,
                32,116,104,101,32,115,97,109,101,32,114,111,111,116,32,99,101,
                114,116,32,109,117,115,116,32,98,101,32,117,115,101,100,32,
                102,111,114,32,97,108,108,32,112,101,101,114,115,46,32,84,104,
                105,115,32,105,115,32,117,115,101,102,117,108,32,105,110,32,
                102,111,114,32,101,120,97,109,112,108,101,32,97,110,32,69,114,
                108,97,110,103,32,100,105,115,116,114,105,98,117,116,101,100,
                32,99,108,117,115,116,101,114,32,119,104,101,114,101,32,97,
                110,121,32,110,111,100,101,44,32,116,111,119,97,114,100,115,
                32,97,110,111,116,104,101,114,32,110,111,100,101,44,32,97,99,
                116,115,32,101,105,116,104,101,114,32,97,115,32,97,32,115,101,
                114,118,101,114,32,111,114,32,97,115,32,97,32,99,108,105,101,
                110,116,32,100,101,112,101,110,100,105,110,103,32,111,110,32,
                119,104,111,32,99,111,110,110,101,99,116,115,32,116,111,32,
                119,104,111,109,46,32,84,104,101,32,103,101,110,101,114,97,
                116,101,100,32,99,101,114,116,105,102,105,99,97,116,101,32,99,
                111,110,116,97,105,110,115,32,97,32,115,117,98,106,101,99,116,
                32,97,108,116,110,97,109,101,44,32,119,104,105,99,104,32,105,
                115,32,110,111,116,32,110,101,101,100,101,100,32,105,110,32,
                97,32,99,108,105,101,110,116,32,99,101,114,116,105,102,105,99,
                97,116,101,44,32,98,117,116,32,109,97,107,101,115,32,116,104,
                101,32,99,101,114,116,105,102,105,99,97,116,101,32,117,115,
                101,102,117,108,32,102,111,114,32,98,111,116,104,32,114,111,
                108,101,115,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,
             [31,60,97,32,110,97,109,101,61,34,99,101,114,116,95,111,112,116,
              34,62,99,101,114,116,95,111,112,116,60,47,97,62]},
            {text,"\f*cert_opt()*"},
            {sep,[{text,"'type consists of the following options:"}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,116,62]},
                    {sep,
                     [{text,
                       [23,123,100,105,103,101,115,116,44,32,100,105,103,101,
                        115,116,95,116,121,112,101,40,41,125]}],
                     0,false},
                    {text,[5,60,47,100,116,62]}],
                   0,true},
                  null},
                 null}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,
                            "qHash algorithm to be used for signing the certificate together with the key option. Defaults to sha that is sha1."}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,
                    [{text,"#{key, key_params() | private_key()}"}],
                    0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "ÎParameters to be used to call public_key:generate_key/1, to generate a key, or an existing key. Defaults to generating an ECDSA key. Note this could fail if Erlang/OTP is compiled with a very old cryptolib."}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,
                  [{text,
                    ">{validity, {From::erlang:timestamp(), To::erlang:timestamp()}}"}],
                  0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,"'The validity period of the certificate."}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,
                [{text,
                  [30,123,101,120,116,101,110,115,105,111,110,115,44,32,91,35,
                   39,69,120,116,101,110,115,105,111,110,39,123,125,93,125]}],
                0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,")Extensions to include in the certificate."}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        "NDefault extensions included in CA certificates if not otherwise specified are:"}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {above,
                    {above,
                     {text,[3,96,96,96]},
                     {sep,
                      [{text,
                        [266,91,35,39,69,120,116,101,110,115,105,111,110,39,
                         123,101,120,116,110,73,68,32,61,32,63,39,105,100,45,
                         99,101,45,107,101,121,85,115,97,103,101,39,44,10,32,
                         32,32,32,32,32,32,32,32,32,32,32,32,32,101,120,116,
                         110,86,97,108,117,101,32,61,32,91,107,101,121,67,101,
                         114,116,83,105,103,110,44,32,99,82,76,83,105,103,110,
                         93,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                         99,114,105,116,105,99,97,108,32,61,32,102,97,108,115,
                         101,125,44,10,35,39,69,120,116,101,110,115,105,111,
                         110,39,123,101,120,116,110,73,68,32,61,32,63,39,105,
                         100,45,99,101,45,98,97,115,105,99,67,111,110,115,116,
                         114,97,105,110,116,115,39,44,10,32,32,32,32,32,32,32,
                         32,32,32,32,32,32,101,120,116,110,86,97,108,117,101,
                         32,61,32,35,39,66,97,115,105,99,67,111,110,115,116,
                         114,97,105,110,116,115,39,123,99,65,32,61,32,116,114,
                         117,101,125,44,10,32,32,32,32,32,32,32,32,32,32,32,
                         32,32,99,114,105,116,105,99,97,108,32,61,32,116,114,
                         117,101,125,93,10,9,32,32]}],
                      0,true}},
                    {text,[3,96,96,96]}},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        "SDefault extensions included in the server peer cert if not otherwise specified are:"}],
                      0,false}],
                    0,true},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {above,
                    {above,
                     {text,[3,96,96,96]},
                     {sep,
                      [{text,
                        [266,91,35,39,69,120,116,101,110,115,105,111,110,39,
                         123,101,120,116,110,73,68,32,61,32,63,39,105,100,45,
                         99,101,45,107,101,121,85,115,97,103,101,39,44,10,32,
                         32,32,32,32,32,32,32,32,32,32,32,32,32,101,120,116,
                         110,86,97,108,117,101,32,61,32,91,100,105,103,105,
                         116,97,108,83,105,103,110,97,116,117,114,101,44,32,
                         107,101,121,65,103,114,101,101,109,101,110,116,93,44,
                         10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,114,
                         105,116,105,99,97,108,32,61,32,102,97,108,115,101,
                         125,44,10,35,39,69,120,116,101,110,115,105,111,110,
                         39,123,101,120,116,110,73,68,32,61,32,63,39,105,100,
                         45,99,101,45,115,117,98,106,101,99,116,65,108,116,78,
                         97,109,101,39,44,10,32,32,32,32,32,32,32,32,32,32,32,
                         32,32,101,120,116,110,86,97,108,117,101,32,61,32,91,
                         123,100,78,83,78,97,109,101,44,32,72,111,115,116,110,
                         97,109,101,125,93,44,10,32,32,32,32,32,32,32,32,32,
                         32,32,32,32,99,114,105,116,105,99,97,108,32,61,32,
                         102,97,108,115,101,125,93,10,9,32,32]}],
                      0,true}},
                    {text,[3,96,96,96]}},
                   null},
                  null}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        "fHostname is the result of calling net_adm:localhost() in the Erlang node where this funcion is called."}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
          {sep,
           [{text,[4,32,32,32,32]},
            {sep,
             [{sep,
               [{above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{sep,
                      [{text,
                        "ÉNote that the generated certificates and keys does not provide a formally correct PKIX-trust-chain and they cannot be used to achieve real security. This function is provided for testing purposes only."}],
                      0,false}],
                    0,true},
                   null},
                  null}}],
               0,false}],
             0,true}],
           0,false}},
         {text,[0]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"1## pkix_test_root_cert(Name, Options) -> RootCert"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," Generates a test data root cert."}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[15,78,97,109,101,32,61,32,115,116,114,105,110,103,40,41]}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [26,84,104,101,32,114,111,111,116,32,99,101,114,116,105,102,105,
              99,97,116,101,32,110,97,109,101,46]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [22,79,112,116,105,111,110,115,32,61,32,91,99,101,114,116,95,111,
             112,116,40,41,93]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{sep,
             [{text,
               [25,70,111,114,32,97,118,97,105,108,97,98,108,101,32,111,112,
                116,105,111,110,115,32,115,101,101]}],
             0,false},
            {text,
             [23,91,99,101,114,116,95,111,112,116,40,41,93,40,35,99,101,114,
              116,95,111,112,116,41]},
            {sep,[{text,[5,117,110,100,101,114]}],0,false},
            {text,"%[pkix_test_data/1](#pkix_test_data-1)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,"/RootCert = #{cert := der_encoded(), key := Key}"}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{sep,
         [{sep,
           [{text,
             [31,65,32,114,111,111,116,32,99,101,114,116,105,102,105,99,97,
              116,101,32,97,110,100,32,107,101,121,46,32,84,104,101]}],
           0,false},
          {text,[5,42,75,101,121,42]},
          {sep,
           [{text,
             [15,105,115,32,103,101,110,101,114,97,116,101,100,32,98,121]}],
           0,false},
          {text,"![generate_key/1](#generate_key-1)"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "BGenerates a root certificate that can be used in multiple calls to"}],
             0,false},
            {text,"%[pkix_test_data/1](#pkix_test_data-1)"},
            {sep,
             [{text,
               "Kwhen you want the same root certificate for several generated certificates."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[16,35,35,32,112,107,105,120,95,118,101,114,105,102,121,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"*Verifies PKIX x.509 certificate signature."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"*Verifies PKIX x.509 certificate signature."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,"8## pkix_verify_hostname(Cert, ReferenceIDs) -> boolean()"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,">## pkix_verify_hostname(Cert, ReferenceIDs, Opts) -> boolean()"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,"&Verifies that a PKIX x.509 certificate"}],0,false},
          {text,
           [24,42,42,112,114,101,115,101,110,116,101,100,32,105,100,101,110,
            116,105,102,105,101,114,42,42]},
          {sep,[{text,"\"(e.g hostname) is an expected one."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,"*Cert = der_encoded() | #'OTPCertificate'{}"}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [24,82,101,102,101,114,101,110,99,101,73,68,115,32,61,32,91,
                   32,82,101,102,73,68,32,93]}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 "zRefID = {dns_id,string()} | {srv_id,string()} | {uri_id,string()} | {ip,inet:ip_address()|string()} | {OtherRefID,term()}}"}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [19,79,116,104,101,114,82,101,102,73,68,32,61,32,97,116,111,
                 109,40,41]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [19,79,112,116,115,32,61,32,91,32,80,118,104,79,112,116,40,41,
                32,93]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"6PvhOpt = [MatchOpt | FailCallBackOpt | FqdnExtractOpt]"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             "WMatchOpt = {match_fun, fun(RefId | FQDN::string(), PresentedID) -> boolean() | default}"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            "yPresentedID = {dNSName,string()} | {uniformResourceIdentifier,string() | {iPAddress,list(byte())} | {OtherPresId,term()}}"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [20,79,116,104,101,114,80,114,101,115,73,68,32,61,32,97,116,111,
            109,40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          "HFailCallBackOpt = {fail_callback, fun(#'OTPCertificate'{}) -> boolean()}"}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         "OFqdnExtractOpt = {fqdn_fun, fun(RefID) -> FQDN::string() | default | undefined}"}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [29,84,104,105,115,32,102,117,110,99,116,105,111,110,32,99,104,
                101,99,107,115,32,116,104,97,116,32,116,104,101]}],
             0,false},
            {text,
             [24,42,42,80,114,101,115,101,110,116,101,100,32,73,100,101,110,
              116,105,102,105,101,114,42,42]},
            {sep,
             [{text,
               "M(e.g hostname) in a peer certificate is in agreement with at least one of the"}],
             0,false},
            {text,
             [24,42,42,82,101,102,101,114,101,110,99,101,32,73,100,101,110,
              116,105,102,105,101,114,42,42]},
            {sep,
             [{text,
               [145,116,104,97,116,32,116,104,101,32,99,108,105,101,110,116,
                32,101,120,112,101,99,116,115,32,116,111,32,98,101,32,99,111,
                110,110,101,99,116,101,100,32,116,111,46,32,84,104,101,32,102,
                117,110,99,116,105,111,110,32,105,115,32,105,110,116,101,110,
                100,101,100,32,116,111,32,98,101,32,97,100,100,101,100,32,97,
                115,32,97,110,32,101,120,116,114,97,32,99,108,105,101,110,116,
                32,99,104,101,99,107,32,111,102,32,116,104,101,32,112,101,101,
                114,32,99,101,114,116,105,102,105,99,97,116,101,32,119,104,
                101,110,32,112,101,114,102,111,114,109,105,110,103]}],
             0,false},
            {text,
             "T[public_key:pkix_path_validation/3](../public_key/public_key#pkix_path_validation-3)"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,83,101,101]}],0,false},
            {text,"/[RFC 6125](https://tools.ietf.org/html/rfc6125)"},
            {sep,
             [{text,
               "9for detailed information about hostname verification. The"}],
             0,false},
            {text,"2[User's Guide](./using_public_key#verify_hostname)"},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,
             "<[code examples](./using_public_key#verify_hostname_examples)"},
            {sep,[{text,"&describes this function more detailed."}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,
             [21,42,123,79,116,104,101,114,82,101,102,73,100,44,116,101,114,
              109,40,41,125,42]},
            {sep,
             [{text,"+is defined by the user and is passed to the"}],
             0,false},
            {text,"\v*match_fun*"},
            {sep,
             [{text,
               [28,44,32,105,102,32,100,101,102,105,110,101,100,46,32,73,102,
                32,116,104,101,32,116,101,114,109,32,105,110]}],
             0,false},
            {text,"\f*OtherRefId*"},
            {sep,
             [{text,".is a binary, it will be converted to a string."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,[4,42,105,112,42]},
            {sep,
             [{text,
               [21,82,101,102,101,114,101,110,99,101,32,73,68,32,116,97,107,
                101,115,32,97,110]}],
             0,false},
            {text,"3[inet:ip_address()](../kernel/inet#type-ip_address)"},
            {sep,
             [{text,
               "Zor an ip address in string format (E.g \"10.0.1.1\" or \"1234::5678:9012\") as second element."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [16,84,104,101,32,111,112,116,105,111,110,115,32,97,114,101,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,116,62]},
                  {sep,[{text,"\tmatch_fun"}],0,false},
                  {text,[5,60,47,100,116,62]}],
                 0,true},
                null},
               null}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {sep,
                   [{sep,[{text,[3,84,104,101]}],0,false},
                    {text,[5,102,117,110,47,50]},
                    {sep,
                     [{text,
                       "Êin this option replaces the default host name matching rules. The fun should return a boolean to tell if the Reference ID and Presented ID matches or not. The fun can also return a third value, the atom"}],
                     0,false},
                    {text,[7,100,101,102,97,117,108,116]},
                    {sep,
                     [{text,
                       "m, if the default matching rules shall apply. This makes it possible to augment the tests with a special case:"}],
                     0,false},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {above,
                        {above,
                         {text,[3,96,96,96]},
                         {sep,
                          [{text,
                            "r\nfun(....) -> true;   % My special case\n   (_, _) -> default % all others falls back to the inherit tests\nend\n\t  "}],
                          0,true}},
                        {text,[3,96,96,96]}},
                       null},
                      null}},
                    {above,{above,null,null},null},
                    {sep,[{text,[3,83,101,101]}],0,false},
                    {text," pkix_verify_hostname_match_fun/1"},
                    {sep,
                     [{text,
                       "Cfor a function that takes a protocol name as argument and returns a"}],
                     0,false},
                    {text,[5,102,117,110,47,50]},
                    {sep,
                     [{text,
                       [28,115,117,105,116,97,98,108,101,32,102,111,114,32,
                        116,104,105,115,32,111,112,116,105,111,110,32,97,110,
                        100]}],
                     0,false},
                    {text,
                     [31,82,101,45,100,101,102,105,110,105,110,103,32,116,104,
                      101,32,109,97,116,99,104,32,111,112,101,114,97,116,105,
                      111,110]},
                    {sep,
                     [{text,"#in the User's Guide for an example."}],
                     0,false}],
                   0,false},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[{text,"\rfail_callback"}],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {sep,
                 [{sep,
                   [{text,
                     "ôIf a matching fails, there could be circumstances when the certificate should be accepted anyway. Think for example of a web browser where you choose to accept an outdated certificate. This option enables implementation of such a function. This"}],
                   0,false},
                  {text,[5,102,117,110,47,49]},
                  {sep,
                   [{text,
                     [17,105,115,32,99,97,108,108,101,100,32,119,104,101,110,
                      32,110,111]}],
                   0,false},
                  {text,"\vReferenceID"},
                  {sep,
                   [{text,"'matches. The return value of the fun (a"}],
                   0,false},
                  {text,"\tboolean()"},
                  {sep,
                   [{text,
                     [25,41,32,100,101,99,105,100,101,115,32,116,104,101,32,
                      111,117,116,99,111,109,101,46,32,73,102]}],
                   0,false},
                  {text,[4,116,114,117,101]},
                  {sep,
                   [{text,
                     "=the the certificate is accepted otherwise it is rejected. See"}],
                   0,false},
                  {text,
                   [23,34,80,105,110,110,105,110,103,34,32,97,32,67,101,114,
                    116,105,102,105,99,97,116,101]},
                  {sep,
                   [{text,
                     [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,
                      71,117,105,100,101,46]}],
                   0,false}],
                 0,false},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[{text,"\bfqdn_fun"}],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {sep,
               [{sep,
                 [{text,
                   "ÒThis option augments the host name extraction from URIs and other Reference IDs. It could for example be a very special URI that is not standardised. The fun takes a Reference ID as argument and returns one of:"}],
                 0,false},
                {above,
                 {above,
                  {sep,[{text,[1,42]},{text,"\fthe hostname"}],0,false},
                  {sep,
                   [{text,[1,42]},
                    {sep,
                     [{sep,[{text,"\bthe atom"}],0,false},
                      {text,[7,100,101,102,97,117,108,116]},
                      {sep,
                       [{text,
                         "5: the default host name extract function will be used"}],
                       0,false}],
                     0,false}],
                   0,false}},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{sep,[{text,"\bthe atom"}],0,false},
                     {text,"\tundefined"},
                     {sep,
                      [{text,
                        "L: a host name could not be extracted. The pkix_verify_hostname/3 will return"}],
                      0,false},
                     {text,[5,102,97,108,115,101]},
                     {sep,[{text,[1,46]}],0,false}],
                    0,false}],
                  0,false}},
                {above,{above,null,null},null},
                {sep,
                 [{text,
                   [19,70,111,114,32,97,110,32,101,120,97,109,112,108,101,44,
                    32,115,101,101]}],
                 0,false},
                {text,
                 [19,72,111,115,116,110,97,109,101,32,101,120,116,114,97,99,
                  116,105,111,110]},
                {sep,
                 [{text,
                   [20,105,110,32,116,104,101,32,85,115,101,114,39,115,32,71,
                    117,105,100,101,46]}],
                 0,false}],
               0,false},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "n## pkix_verify_hostname_match_fun(Protcol) ->  fun(RefId | FQDN::string(), PresentedID) -> boolean() | default"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "`Returns a fun that is intendended as argument to the match_fun option in pkix_verify_hostname/3."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [16,80,114,111,116,111,99,111,108,32,61,32,104,116,116,112,
                115]}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               "JThe algorithm for wich the fun should implement the special matching rules"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},{sep,[{text,[5,82,101,102,73,100]}],0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{sep,[{text,[3,83,101,101]}],0,false},
              {text,"1[pkix_verify_hostname/3](#pkix_verify_hostname-3)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,false}],
         0,false}},
       {sep,[{text,[1,42]},{sep,[{text,[4,70,81,68,78]}],0,false}],0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{sep,[{text,[3,83,101,101]}],0,false},
            {text,"1[pkix_verify_hostname/3](#pkix_verify_hostname-3)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,false}],
       0,false}},
     {sep,[{text,[1,42]},{sep,[{text,"\vPresentedID"}],0,false}],0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{sep,
         [{sep,[{text,[3,83,101,101]}],0,false},
          {text,"1[pkix_verify_hostname/3](#pkix_verify_hostname-3)"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "GThe return value of calling this function is intended to be used in the"}],
             0,false},
            {text,"\v*match_fun*"},
            {sep,[{text,"\toption in"}],0,false},
            {text,"1[pkix_verify_hostname/3](#pkix_verify_hostname-3)"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "xThe returned fun augments the verify hostname matching according to the specific rules for the protocol in the argument."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## sign/3"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\t## sign/4"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [28,67,114,101,97,116,101,115,32,97,32,100,105,103,105,116,97,108,
            32,115,105,103,110,97,116,117,114,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [28,67,114,101,97,116,101,115,32,97,32,100,105,103,105,116,97,
              108,32,115,105,103,110,97,116,117,114,101,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,[5,42,77,115,103,42]},
            {sep,
             [{text,
               "sis either the binary \"plain text\" data to be signed or it is the hashed value of \"plain text\", that is, the digest."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[15,35,35,32,115,115,104,95,100,101,99,111,100,101,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,[{sep,[{text,"\eDecodes an SSH file-binary."}],0,false}],0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,"*Decodes an SSH file-binary. In the case of"}],
             0,false},
            {text,"\r*known_hosts*"},
            {sep,[{text,[2,111,114]}],0,false},
            {text,"\v*auth_keys*"},
            {sep,
             [{text,
               "¹, the binary can include one or more lines of the file. Returns a list of public keys and their attributes, possible attribute values depends on the file type represented by the binary."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[6,73,102,32,116,104,101]}],0,false},
            {text,[6,42,84,121,112,101,42]},
            {sep,[{text,[2,105,115]}],0,false},
            {text,"\r*ssh2_pubkey*"},
            {sep,
             [{text,
               [20,44,32,116,104,101,32,114,101,115,117,108,116,32,119,105,
                108,108,32,98,101]}],
             0,false},
            {text,
             [21,42,68,101,99,111,100,101,100,95,115,115,104,50,95,112,117,98,
              107,101,121,42]},
            {sep,
             [{text,
               [22,46,32,79,116,104,101,114,119,105,115,101,32,105,116,32,119,
                105,108,108,32,98,101]}],
             0,false},
            {text,
             [19,42,68,101,99,111,100,101,100,95,79,116,104,101,114,84,121,
              112,101,42]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {text,[4,60,100,108,62]},
       {nest,4,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,116,62]},
                          {sep,
                           [{text,"\"RFC4716 attributes - see RFC 4716."}],
                           0,false},
                          {text,[5,60,47,100,116,62]}],
                         0,true},
                        null},
                       null}},
                     {above,
                      {above,{above,{text,[0]},null},null},
                      {above,
                       {above,
                        {sep,
                         [{text,[4,60,100,100,62]},
                          {above,
                           {above,{above,{text,[0]},null},null},
                           {above,
                            {above,
                             {sep,
                              [{sep,
                                [{text,
                                  "&{headers, [{string(), utf8_string()}]}"}],
                                0,false}],
                              0,true},
                             null},
                            null}},
                          {text,[5,60,47,100,100,62]}],
                         0,true},
                        null},
                       null}}},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{text,[4,60,100,116,62]},
                         {sep,
                          [{text,
                            "/auth_key attributes - see manual page for sshd."}],
                          0,false},
                         {text,[5,60,47,100,116,62]}],
                        0,true},
                       null},
                      null}}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{text,[4,60,100,100,62]},
                        {text,
                         [19,123,99,111,109,109,101,110,116,44,32,115,116,114,
                          105,110,103,40,41,125]},
                        {text,[5,60,47,100,100,62]}],
                       0,true},
                      null},
                     null}}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{text,[4,60,100,116,62]},
                       {sep,[null],0,false},
                       {text,[5,60,47,100,116,62]}],
                      0,true},
                     null},
                    null}}},
                 {above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{text,[4,60,100,100,62]},
                      {text,
                       [21,123,111,112,116,105,111,110,115,44,32,91,115,116,
                        114,105,110,103,40,41,93,125]},
                      {text,[5,60,47,100,100,62]}],
                     0,true},
                    null},
                   null}}},
                {above,
                 {above,{above,{text,[0]},null},null},
                 {above,
                  {above,
                   {sep,
                    [{text,[4,60,100,116,62]},
                     {sep,[null],0,false},
                     {text,[5,60,47,100,116,62]}],
                    0,true},
                   null},
                  null}}},
               {above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{text,[4,60,100,100,62]},
                    {above,
                     {above,{above,{text,[0]},null},null},
                     {above,
                      {above,
                       {sep,
                        [{sep,
                          [{text,
                            "+{bits, integer()} - In SSH version 1 files."}],
                          0,false}],
                        0,true},
                       null},
                      null}},
                    {text,[5,60,47,100,100,62]}],
                   0,true},
                  null},
                 null}}},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{text,[4,60,100,116,62]},
                   {sep,
                    [{text,
                      "1known_host attributes - see manual page for sshd."}],
                    0,false},
                   {text,[5,60,47,100,116,62]}],
                  0,true},
                 null},
                null}}},
             {above,
              {above,{above,{text,[0]},null},null},
              {above,
               {above,
                {sep,
                 [{text,[4,60,100,100,62]},
                  {text,
                   [23,123,104,111,115,116,110,97,109,101,115,44,32,91,115,
                    116,114,105,110,103,40,41,93,125]},
                  {text,[5,60,47,100,100,62]}],
                 0,true},
                null},
               null}}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{text,[4,60,100,116,62]},
                 {sep,[null],0,false},
                 {text,[5,60,47,100,116,62]}],
                0,true},
               null},
              null}}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{text,[4,60,100,100,62]},
                {text,
                 [19,123,99,111,109,109,101,110,116,44,32,115,116,114,105,110,
                  103,40,41,125]},
                {text,[5,60,47,100,100,62]}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{text,[4,60,100,116,62]},
               {sep,[null],0,false},
               {text,[5,60,47,100,116,62]}],
              0,true},
             null},
            null}}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{text,[4,60,100,100,62]},
              {above,
               {above,{above,{text,[0]},null},null},
               {above,
                {above,
                 {sep,
                  [{sep,
                    [{text,"+{bits, integer()} - In SSH version 1 files."}],
                    0,false}],
                  0,true},
                 null},
                null}},
              {text,[5,60,47,100,100,62]}],
             0,true},
            null},
           null}}}}},
      {text,[5,60,47,100,108,62]}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,"\bExample:"}],0,false},
            {text,".*{ok, SshBin} = file:read_file(\"known_hosts\")*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[2,73,102]}],0,false},
            {text,[6,42,84,121,112,101,42]},
            {sep,[{text,[2,105,115]}],0,false},
            {text,"\f*public_key*"},
            {sep,
             [{text,
               "Hthe binary can be either an RFC4716 public key or an OpenSSH public key."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,[15,35,35,32,115,115,104,95,101,110,99,111,100,101,47,50]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"/Encodes a list of SSH file entries to a binary."}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "}Encodes a list of SSH file entries (public keys and attributes) to a binary. Possible attributes depend on the file type, see"}],
             0,false},
            {text,
             [29,91,115,115,104,95,100,101,99,111,100,101,47,50,93,40,35,115,
              115,104,95,100,101,99,111,100,101,45,50,41]},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[6,73,102,32,116,104,101]}],0,false},
            {text,[6,42,84,121,112,101,42]},
            {sep,[{text,[2,105,115]}],0,false},
            {text,"\r*ssh2_pubkey*"},
            {sep,[{text,[5,44,32,116,104,101]}],0,false},
            {text,"\b*InData*"},
            {sep,[{text,"\bshall be"}],0,false},
            {text,
             [20,42,73,110,68,97,116,97,95,115,115,104,50,95,112,117,98,107,
              101,121,42]},
            {sep,
             [{text,
               [23,46,32,79,116,104,101,114,119,105,115,101,32,105,116,32,115,
                104,97,108,108,32,98,101]}],
             0,false},
            {text,"\r*OtherInData*"},
            {sep,[{text,[1,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"/## ssh_hostkey_fingerprint(HostKey) -> string()"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,";## ssh_hostkey_fingerprint(DigestType, HostKey) -> string()"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "?## ssh_hostkey_fingerprint([DigestType], HostKey) -> [string()]"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"+Calculates a ssh fingerprint for a hostkey."}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},
      {sep,
       [{sep,
         [{sep,[{text,"\tHostKey ="}],0,false},
          {text," [public_key()](#type-public_key)"}],
         0,false}],
       0,false}],
     0,false},
    {sep,
     [{text,[1,42]},
      {sep,
       [{sep,
         [{sep,[{text,"\fDigestType ="}],0,false},
          {text,"\"[digest_type()](#type-digest_type)"}],
         0,false}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "DCalculates a ssh fingerprint from a public host key as openssh does."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [16,84,104,101,32,97,108,103,111,114,105,116,104,109,32,105,
                110]}],
             0,false},
            {text,"\e*ssh_hostkey_fingerprint/1*"},
            {sep,
             [{text,
               "«is md5 to be compatible with older ssh-keygen commands. The string from the second variant is prepended by the algorithm name in uppercase as in newer ssh-keygen commands."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\tExamples:"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [556,10,32,50,62,32,112,117,98,108,105,99,95,107,101,121,58,115,
              115,104,95,104,111,115,116,107,101,121,95,102,105,110,103,101,
              114,112,114,105,110,116,40,75,101,121,41,46,32,32,32,32,10,32,
              34,102,53,58,54,52,58,97,54,58,99,49,58,53,97,58,99,98,58,57,
              102,58,48,97,58,49,48,58,52,54,58,97,50,58,53,99,58,51,101,58,
              50,102,58,53,55,58,56,52,34,10,10,32,51,62,32,112,117,98,108,
              105,99,95,107,101,121,58,115,115,104,95,104,111,115,116,107,101,
              121,95,102,105,110,103,101,114,112,114,105,110,116,40,109,100,
              53,44,75,101,121,41,46,10,32,34,77,68,53,58,102,53,58,54,52,58,
              97,54,58,99,49,58,53,97,58,99,98,58,57,102,58,48,97,58,49,48,58,
              52,54,58,97,50,58,53,99,58,51,101,58,50,102,58,53,55,58,56,52,
              34,10,10,32,52,62,32,112,117,98,108,105,99,95,107,101,121,58,
              115,115,104,95,104,111,115,116,107,101,121,95,102,105,110,103,
              101,114,112,114,105,110,116,40,115,104,97,44,75,101,121,41,46,
              10,32,34,83,72,65,49,58,98,83,76,89,47,67,52,81,88,76,68,76,47,
              73,119,109,104,121,103,48,80,71,87,57,85,98,89,34,10,10,32,53,
              62,32,112,117,98,108,105,99,95,107,101,121,58,115,115,104,95,
              104,111,115,116,107,101,121,95,102,105,110,103,101,114,112,114,
              105,110,116,40,115,104,97,50,53,54,44,75,101,121,41,46,10,32,34,
              83,72,65,50,53,54,58,97,90,71,88,104,97,98,102,98,102,52,111,
              120,103,108,120,108,116,73,116,87,101,72,85,55,117,98,51,68,99,
              51,49,78,99,78,119,50,99,77,74,101,80,81,34,10,10,32,54,62,32,
              112,117,98,108,105,99,95,107,101,121,58,115,115,104,95,104,111,
              115,116,107,101,121,95,102,105,110,103,101,114,112,114,105,110,
              116,40,91,115,104,97,44,115,104,97,50,53,54,93,44,75,101,121,41,
              46,10,32,91,34,83,72,65,49,58,98,83,76,89,47,67,52,81,88,76,68,
              76,47,73,119,109,104,121,103,48,80,71,87,57,85,98,89,34,44,10,
              32,32,34,83,72,65,50,53,54,58,97,90,71,88,104,97,98,102,98,102,
              52,111,120,103,108,120,108,116,73,116,87,101,72,85,55,117,98,51,
              68,99,51,49,78,99,78,119,50,99,77,74,101,80,81,34,93,10,32,32,
              32,32]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## verify/4"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v## verify/5"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,86,101,114,105,102,105,101,115,32,97,32,100,105,103,105,116,97,
            108,32,115,105,103,110,97,116,117,114,101,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [29,86,101,114,105,102,105,101,115,32,97,32,100,105,103,105,116,
              97,108,32,115,105,103,110,97,116,117,114,101,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,[{text,[3,84,104,101]}],0,false},
            {text,[5,42,77,115,103,42]},
            {sep,
             [{text,
               "fis either the binary \"plain text\" data or it is the hashed value of \"plain text\", that is, the digest."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [20,35,35,32,115,104,111,114,116,95,110,97,109,101,95,104,97,115,104,
        47,49]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,")Generates a short hash of an issuer name."}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "oGenerates a short hash of an issuer name. The hash is returned as a string containing eight hexadecimal digits."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "KThe return value of this function is the same as the result of the commands"}],
             0,false},
            {text,
             [19,42,111,112,101,110,115,115,108,32,99,114,108,32,45,104,97,
              115,104,42]},
            {sep,[{text,[3,97,110,100]}],0,false},
            {text,"\e*openssl x509 -issuer_hash*"},
            {sep,
             [{text,
               "_, when passed the issuer name of a CRL or a certificate, respectively. This hash is used by the"}],
             0,false},
            {text,"\n*c_rehash*"},
            {sep,
             [{text,
               "rtool to maintain a directory of symlinks to CRL files, in order to facilitate looking up a CRL by its issuer name."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
