{above,
 {above,
  {above,
   {above,
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,[14,35,32,101,116,95,99,111,108,108,101,99,116,111,114]},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,[14,35,32,101,116,95,99,111,108,108,101,99,116,111,114]},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "LCollect trace events and provide a backing storage appropriate for iteration"}],
         0,false}],
       0,true},
      null},
     null}}},
  {above,
   {above,{above,{text,[0]},null},null},
   {above,
    {above,
     {sep,
      [{sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,
                 "5Interface module for the Event Trace (ET) application"}],
               0,false}],
             0,true},
            null},
           null}}],
        0,false}],
      0,true},
     null},
    null}}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,">## start_link(Options) -> {ok, CollectorPid} | {error, Reason}"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [25,83,116,97,114,116,32,97,32,99,111,108,108,101,99,116,111,114,
            32,112,114,111,99,101,115,115]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {sep,
                      [{text,[1,42]},
                       {sep,
                        [{text,
                          [20,79,112,116,105,111,110,115,32,61,32,91,111,112,
                           116,105,111,110,40,41,93]}],
                        0,false}],
                      0,false},
                     {sep,
                      [{text,[1,42]},
                       {sep,
                        [{text,
                          [452,111,112,116,105,111,110,40,41,32,61,32,123,112,
                           97,114,101,110,116,95,112,105,100,44,32,112,105,
                           100,40,41,125,32,124,32,123,101,118,101,110,116,95,
                           111,114,100,101,114,44,32,101,118,101,110,116,95,
                           111,114,100,101,114,40,41,125,32,124,32,123,100,
                           105,99,116,95,105,110,115,101,114,116,44,32,123,
                           102,105,108,116,101,114,44,32,99,111,108,108,101,
                           99,116,111,114,125,44,32,99,111,108,108,101,99,116,
                           111,114,95,102,117,110,40,41,125,32,124,32,123,100,
                           105,99,116,95,105,110,115,101,114,116,44,32,123,
                           102,105,108,116,101,114,44,32,101,118,101,110,116,
                           95,102,105,108,116,101,114,95,110,97,109,101,40,41,
                           125,44,32,101,118,101,110,116,95,102,105,108,116,
                           101,114,95,102,117,110,40,41,125,32,124,32,123,100,
                           105,99,116,95,105,110,115,101,114,116,44,32,123,
                           115,117,98,115,99,114,105,98,101,114,44,32,112,105,
                           100,40,41,125,44,32,100,105,99,116,95,118,97,108,
                           40,41,125,32,124,32,123,100,105,99,116,95,105,110,
                           115,101,114,116,44,32,100,105,99,116,95,107,101,
                           121,40,41,44,32,100,105,99,116,95,118,97,108,40,41,
                           125,32,124,32,123,100,105,99,116,95,100,101,108,
                           101,116,101,44,32,100,105,99,116,95,107,101,121,40,
                           41,125,32,124,32,123,116,114,97,99,101,95,99,108,
                           105,101,110,116,44,32,116,114,97,99,101,95,99,108,
                           105,101,110,116,40,41,125,32,124,32,123,116,114,97,
                           99,101,95,103,108,111,98,97,108,44,32,98,111,111,
                           108,101,97,110,40,41,125,32,124,32,123,116,114,97,
                           99,101,95,112,97,116,116,101,114,110,44,32,116,114,
                           97,99,101,95,112,97,116,116,101,114,110,40,41,125,
                           32,124,32,123,116,114,97,99,101,95,112,111,114,116,
                           44,32,105,110,116,101,103,101,114,40,41,125,32,124,
                           32,123,116,114,97,99,101,95,109,97,120,95,113,117,
                           101,117,101,44,32,105,110,116,101,103,101,114,40,
                           41,125]}],
                        0,false}],
                      0,false}},
                    {sep,
                     [{text,[1,42]},
                      {sep,
                       [{text,"#event_order() = trace_ts | event_ts"}],
                       0,false}],
                     0,false}},
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{text,
                        "Jtrace_pattern() = {report_module(), extended_dbg_match_spec()} | undefined"}],
                      0,false}],
                    0,false}},
                  {sep,
                   [{text,[1,42]},
                    {sep,
                     [{text,"$report_module() = atom() | undefined"}],
                     0,false}],
                   0,false}},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{text,
                      "=extended_dbg_match_spec() = detail_level() | dbg_match_spec()"}],
                    0,false}],
                  0,false}},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,
                     "=detail_level() = min | max | integer(X) when X =< 0, X >= 100"}],
                   0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    "Wtrace_client() = {event_file, file_name()} | {dbg_trace_type(), dbg_trace_parameters()}"}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   [22,102,105,108,101,95,110,97,109,101,40,41,32,61,32,115,
                    116,114,105,110,103,40,41]}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "9collector_fun() = trace_filter_fun() | event_filter_fun()"}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 "Ftrace_filter_fun() = fun(TraceData) -> false | true | {true, NewEvent}"}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "Bevent_filter_fun() = fun(Event) -> false | true | {true, NewEvent}"}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [28,101,118,101,110,116,95,102,105,108,116,101,114,95,110,97,
                109,101,40,41,32,61,32,97,116,111,109,40,41]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [31,84,114,97,99,101,68,97,116,97,32,61,32,101,114,108,97,110,
               103,95,116,114,97,99,101,95,100,97,116,97,40,41]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,[{text," Event = NewEvent = record(event)"}],0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [19,100,105,99,116,95,107,101,121,40,41,32,61,32,116,101,114,109,
             40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [19,100,105,99,116,95,118,97,108,40,41,32,61,32,116,101,114,109,40,
            41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,
           100,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [26,83,116,97,114,116,32,97,32,99,111,108,108,101,99,116,111,114,
              32,112,114,111,99,101,115,115,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [378,84,104,101,32,99,111,108,108,101,99,116,111,114,32,99,111,
              108,108,101,99,116,115,32,116,114,97,99,101,32,101,118,101,110,
              116,115,32,97,110,100,32,107,101,101,112,115,32,116,104,101,109,
              32,111,114,100,101,114,101,100,32,98,121,32,116,104,101,105,114,
              32,116,105,109,101,115,116,97,109,112,46,32,84,104,101,32,116,
              105,109,101,115,116,97,109,112,32,109,97,121,32,101,105,116,104,
              101,114,32,114,101,102,108,101,99,116,32,116,104,101,32,116,105,
              109,101,32,119,104,101,110,32,116,104,101,32,97,99,116,117,97,
              108,32,116,114,97,99,101,32,100,97,116,97,32,119,97,115,32,103,
              101,110,101,114,97,116,101,100,32,40,116,114,97,99,101,95,116,
              115,41,32,111,114,32,119,104,101,110,32,116,104,101,32,116,114,
              97,99,101,32,100,97,116,97,32,119,97,115,32,116,114,97,110,115,
              102,111,114,109,101,100,32,105,110,116,111,32,97,110,32,101,118,
              101,110,116,32,114,101,99,111,114,100,32,40,101,118,101,110,116,
              95,116,115,41,46,32,73,102,32,116,104,101,32,116,105,109,101,32,
              115,116,97,109,112,32,105,115,32,109,105,115,115,105,110,103,32,
              105,110,32,116,104,101,32,116,114,97,99,101,32,100,97,116,97,32,
              40,109,105,115,115,105,110,103,32,116,105,109,101,115,116,97,
              109,112,32,111,112,116,105,111,110,32,116,111,32,101,114,108,97,
              110,103,58,116,114,97,99,101,47,52,41,32,116,104,101,32,116,114,
              97,99,101,95,116,115,32,119,105,108,108,32,98,101,32,115,101,
              116,32,116,111,32,116,104,101,32,101,118,101,110,116,95,116,115,
              46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [564,69,118,101,110,116,115,32,97,114,101,32,114,101,112,111,114,
              116,101,100,32,116,111,32,116,104,101,32,99,111,108,108,101,99,
              116,111,114,32,100,105,114,101,99,116,108,121,32,119,105,116,
              104,32,116,104,101,32,114,101,112,111,114,116,32,102,117,110,99,
              116,105,111,110,32,111,114,32,105,110,100,105,114,101,99,116,
              108,121,32,118,105,97,32,111,110,101,32,111,114,32,109,111,114,
              101,32,116,114,97,99,101,32,99,108,105,101,110,116,115,46,32,65,
              108,108,32,114,101,112,111,114,116,101,100,32,101,118,101,110,
              116,115,32,97,114,101,32,102,105,114,115,116,32,102,105,108,116,
              101,114,101,100,32,116,104,114,117,32,116,104,101,32,99,111,108,
              108,101,99,116,111,114,32,102,105,108,116,101,114,32,98,101,102,
              111,114,101,32,116,104,101,121,32,97,114,101,32,115,116,111,114,
              101,100,32,98,121,32,116,104,101,32,99,111,108,108,101,99,116,
              111,114,46,32,66,121,32,114,101,112,108,97,99,105,110,103,32,
              116,104,101,32,100,101,102,97,117,108,116,32,99,111,108,108,101,
              99,116,111,114,32,102,105,108,116,101,114,32,119,105,116,104,32,
              97,32,99,117,115,116,111,109,105,122,101,100,32,100,105,116,111,
              32,105,116,32,105,115,32,112,111,115,115,105,98,108,101,32,116,
              111,32,97,108,108,111,119,32,97,110,121,32,116,114,97,99,101,32,
              100,97,116,97,32,97,115,32,105,110,112,117,116,46,32,84,104,101,
              32,99,111,108,108,101,99,116,111,114,32,102,105,108,116,101,114,
              32,105,115,32,97,32,100,105,99,116,105,111,110,97,114,121,32,
              101,110,116,114,121,32,119,105,116,104,32,116,104,101,32,112,
              114,101,100,101,102,105,110,101,100,32,107,101,121,32,123,102,
              105,108,116,101,114,44,32,99,111,108,108,101,99,116,111,114,125,
              32,97,110,100,32,116,104,101,32,118,97,108,117,101,32,105,115,
              32,97,32,102,117,110,32,111,102,32,97,114,105,116,121,32,49,46,
              32,83,101,101,32,101,116,95,115,101,108,101,99,116,111,114,58,
              109,97,107,101,95,101,118,101,110,116,47,49,32,102,111,114,32,
              105,110,116,101,114,102,97,99,101,32,100,101,116,97,105,108,115,
              44,32,115,117,99,104,32,97,115,32,119,104,105,99,104,32,101,114,
              108,97,110,103,58,116,114,97,99,101,47,49,32,116,117,112,108,
              101,115,32,116,104,97,116,32,97,114,101,32,97,99,99,101,112,116,
              101,100,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [482,84,104,101,32,99,111,108,108,101,99,116,111,114,32,104,97,
              115,32,97,32,98,117,105,108,116,45,105,110,32,100,105,99,116,
              105,111,110,97,114,121,32,115,101,114,118,105,99,101,46,32,65,
              110,121,32,116,101,114,109,32,109,97,121,32,98,101,32,115,116,
              111,114,101,100,32,97,115,32,118,97,108,117,101,32,105,110,32,
              116,104,101,32,100,105,99,116,105,111,110,97,114,121,32,97,110,
              100,32,98,111,117,110,100,32,116,111,32,97,32,117,110,105,113,
              117,101,32,107,101,121,46,32,87,104,101,110,32,110,101,119,32,
              118,97,108,117,101,115,32,97,114,101,32,105,110,115,101,114,116,
              101,100,32,119,105,116,104,32,97,110,32,101,120,105,115,116,105,
              110,103,32,107,101,121,44,32,116,104,101,32,110,101,119,32,118,
              97,108,117,101,115,32,119,105,108,108,32,111,118,101,114,119,
              114,105,116,101,32,116,104,101,32,101,120,105,115,116,105,110,
              103,32,111,110,101,115,46,32,80,114,111,99,101,115,115,101,115,
              32,109,97,121,32,115,117,98,115,99,114,105,98,101,32,111,110,32,
              100,105,99,116,105,111,110,97,114,121,32,117,112,100,97,116,101,
              115,32,98,121,32,117,115,105,110,103,32,123,115,117,98,115,99,
              114,105,98,101,114,44,32,112,105,100,40,41,125,32,97,115,32,100,
              105,99,116,105,111,110,97,114,121,32,107,101,121,46,32,65,108,
              108,32,100,105,99,116,105,111,110,97,114,121,32,117,112,100,97,
              116,101,115,32,119,105,108,108,32,98,101,32,112,114,111,112,97,
              103,97,116,101,100,32,116,111,32,116,104,101,32,115,117,98,115,
              99,114,105,98,101,114,32,112,114,111,99,101,115,115,101,115,32,
              109,97,116,99,104,105,110,103,32,116,104,101,32,112,97,116,116,
              101,114,110,32,123,123,115,117,98,115,99,114,105,98,101,114,44,
              32,39,95,39,125,44,32,39,95,39,125,32,119,104,101,114,101,32,
              116,104,101,32,102,105,114,115,116,32,39,95,39,32,105,115,32,
              105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,32,
              112,105,100,40,41,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÜIn global trace mode, the collector will automatically start tracing on all connected Erlang nodes. When a node connects, a port tracer will be started on that node and a corresponding trace client on the collector node."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [15,68,101,102,97,117,108,116,32,118,97,108,117,101,115,58]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,
       {above,
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {text,
             [20,112,97,114,101,110,116,95,112,105,100,32,45,32,115,101,108,
              102,40,41,46]}],
           0,false},
          {sep,
           [{text,[1,42]},
            {text,
             [23,101,118,101,110,116,95,111,114,100,101,114,32,45,32,116,114,
              97,99,101,95,116,115,46]}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {text,
            [21,116,114,97,99,101,95,103,108,111,98,97,108,32,45,32,102,97,
             108,115,101,46]}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {text,
           [26,116,114,97,99,101,95,112,97,116,116,101,114,110,32,45,32,117,
            110,100,101,102,105,110,101,100,46]}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {text,
          [18,116,114,97,99,101,95,112,111,114,116,32,45,32,52,55,49,49,46]}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {text,
         [21,116,114,97,99,101,95,109,97,120,95,113,117,101,117,101,32,45,32,
          53,48,46]}],
       0,false}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\e## stop(CollectorPid) -> ok"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [24,83,116,111,112,32,97,32,99,111,108,108,101,99,116,111,114,32,
            112,114,111,99,101,115,115]}],
         0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{text,[1,42]},
     {sep,
      [{text,
        [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,100,
         40,41]}],
      0,false}],
    0,false},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [25,83,116,111,112,32,97,32,99,111,108,108,101,99,116,111,114,32,
              112,114,111,99,101,115,115,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "K## save_event_file(CollectorPid, FileName, Options) -> ok | {error, Reason}"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [25,83,97,118,101,32,116,104,101,32,101,118,101,110,116,115,32,116,
            111,32,97,32,102,105,108,101]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,
                105,100,40,41]}],
             0,false}],
           0,false},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [19,70,105,108,101,78,97,109,101,32,61,32,115,116,114,105,110,
                103,40,41]}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [20,79,112,116,105,111,110,115,32,61,32,91,111,112,116,105,111,
               110,40,41,93]}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            ":option() = event_option() | file_option() | table_option()"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [25,101,118,101,110,116,95,111,112,116,105,111,110,40,41,32,61,32,
            101,120,105,115,116,105,110,103]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [30,102,105,108,101,95,111,112,116,105,111,110,40,41,32,61,32,119,
           114,105,116,101,32,124,32,97,112,112,101,110,100]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [29,116,97,98,108,101,95,111,112,116,105,111,110,40,41,32,61,32,107,
          101,101,112,32,124,32,99,108,101,97,114]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [26,83,97,118,101,32,116,104,101,32,101,118,101,110,116,115,32,
              116,111,32,97,32,102,105,108,101,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¢By default the currently stored events (existing) are written to a brand new file (write) and the events are kept (keep) after they have been written to the file."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [154,73,110,115,116,101,97,100,32,111,102,32,107,101,101,112,105,
              110,103,32,116,104,101,32,101,118,101,110,116,115,32,97,102,116,
              101,114,32,119,114,105,116,105,110,103,32,116,104,101,109,32,
              116,111,32,102,105,108,101,44,32,105,116,32,105,115,32,112,111,
              115,115,105,98,108,101,32,116,111,32,114,101,109,111,118,101,32,
              97,108,108,32,115,116,111,114,101,100,32,101,118,101,110,116,
              115,32,97,102,116,101,114,32,116,104,101,121,32,104,97,118,101,
              32,115,117,99,99,101,115,115,102,117,108,108,121,32,119,114,105,
              116,116,101,110,32,116,111,32,102,105,108,101,32,40,99,108,101,
              97,114,41,46]}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"1The options defaults to existing, write and keep."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "K## load_event_file(CollectorPid, FileName) -> {ok, BadBytes} | exit(Reason)"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," Load the event table from a file"}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,
            100,40,41]}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [19,70,105,108,101,78,97,109,101,32,61,32,115,116,114,105,110,103,
            40,41]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"\"BadBytes = integer(X) where X >= 0"}],0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"!Load the event table from a file."}],0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "D## report(Handle, TraceOrEvent) -> {ok, Continuation} | exit(Reason)"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "b## report_event(Handle, DetailLevel, FromTo, Label, Contents) -> {ok, Continuation} | exit(Reason)"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "d## report_event(Handle, DetailLevel, From, To, Label, Contents) -> {ok, Continuation} | exit(Reason)"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text," Report an event to the collector"}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    [31,72,97,110,100,108,101,32,61,32,73,110,105,116,105,97,
                     108,32,124,32,67,111,110,116,105,110,117,97,116,105,111,
                     110]}],
                  0,false}],
                0,false},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,
                    [25,73,110,105,116,105,97,108,32,61,32,99,111,108,108,101,
                     99,116,111,114,95,112,105,100,40,41]}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   [23,99,111,108,108,101,99,116,111,114,95,112,105,100,40,41,
                    32,61,32,112,105,100,40,41]}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,[{text,"#Continuation = record(table_handle)"}],0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 "?TraceOrEvent = record(event) | dbg_trace_tuple() | end_of_trace"}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,".DetailLevel = integer(X) when X =< 0, X >= 100"}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,[14,70,114,111,109,32,61,32,97,99,116,111,114,40,41]}],
            0,false}],
          0,false}},
        {sep,[{text,[1,42]},{sep,[{text,"\fTo = actor()"}],0,false}],0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[16,70,114,111,109,84,111,32,61,32,97,99,116,111,114,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,[{text,"\"Label = atom() | string() | term()"}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"\"Contents = [{Key, Value}] | term()"}],0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[16,97,99,116,111,114,40,41,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"!Report an event to the collector."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "èAll events are filtered thru the collector filter, which optionally may transform or discard the event. The first call should use the pid of the collector process as report handle, while subsequent calls should use the table handle."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [31,35,35,32,109,97,107,101,95,107,101,121,40,84,121,112,101,44,32,83,
        116,117,102,102,41,32,45,62,32,75,101,121]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"/Make a key out of an event record or an old key"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,"1Type = record(table_handle) | trace_ts | event_ts"}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},{sep,[{text,"\eStuff = record(event) | Key"}],0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,[{text,")Key = record(event_ts) | record(trace_ts)"}],0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"0Make a key out of an event record or an old key."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"+## get_table_handle(CollectorPid) -> Handle"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [21,82,101,116,117,114,110,32,97,32,116,97,98,108,101,32,104,97,
            110,100,108,101]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,
          100,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [29,72,97,110,100,108,101,32,61,32,114,101,99,111,114,100,40,116,97,
          98,108,101,95,104,97,110,100,108,101,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [22,82,101,116,117,114,110,32,97,32,116,97,98,108,101,32,104,97,
              110,100,108,101,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"2## get_global_pid() -> CollectorPid | exit(Reason)"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "JReturn a the identity of the globally registered collector if there is any"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,
          100,40,41]}],
       0,false}],
     0,false},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "KReturn a the identity of the globally registered collector if there is any."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "J## change_pattern(CollectorPid, RawPattern) -> {old_pattern, TracePattern}"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"7Change active trace pattern globally on all trace nodes"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,
               105,100,40,41]}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              "9RawPattern = {report_module(), extended_dbg_match_spec()}"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,[{text,"$report_module() = atom() | undefined"}],0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            "=extended_dbg_match_spec() = detail_level() | dbg_match_spec()"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},{sep,[{text,"\eRawPattern = detail_level()"}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          "=detail_level() = min | max | integer(X) when X =< 0, X >= 100"}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         "=TracePattern = {report_module(), dbg_match_spec_match_spec()}"}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "8Change active trace pattern globally on all trace nodes."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "B## dict_insert(CollectorPid, {filter, collector}, FilterFun) -> ok"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "E## dict_insert(CollectorPid, {subscriber, SubscriberPid}, Void) -> ok"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,",## dict_insert(CollectorPid, Key, Val) -> ok"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "gInsert a dictionary entry and send a {et, {dict_insert, Key, Val}} tuple to all registered subscribers."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,
              105,100,40,41]}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [24,70,105,108,116,101,114,70,117,110,32,61,32,102,105,108,116,
              101,114,95,102,117,110,40,41]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [21,83,117,98,115,99,114,105,98,101,114,80,105,100,32,61,32,112,
             105,100,40,41]}],
          0,false}],
        0,false}},
      {sep,[{text,[1,42]},{sep,[{text,"\rVoid = term()"}],0,false}],0,false}},
     {sep,[{text,[1,42]},{sep,[{text,"\fKey = term()"}],0,false}],0,false}},
    {sep,[{text,[1,42]},{sep,[{text,"\fVal = term()"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "gInsert a dictionary entry and send a {et, {dict_insert, Key, Val}} tuple to all registered subscribers."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [392,73,102,32,116,104,101,32,101,110,116,114,121,32,105,115,32,
              97,32,110,101,119,32,115,117,98,115,99,114,105,98,101,114,44,32,
              105,116,32,119,105,108,108,32,105,109,112,108,121,32,116,104,97,
              116,32,116,104,101,32,110,101,119,32,115,117,98,115,99,114,105,
              98,101,114,32,112,114,111,99,101,115,115,32,102,105,114,115,116,
              32,119,105,108,108,32,103,101,116,32,111,110,101,32,109,101,115,
              115,97,103,101,32,102,111,114,32,101,97,99,104,32,97,108,114,
              101,97,100,121,32,115,116,111,114,101,100,32,100,105,99,116,105,
              111,110,97,114,121,32,101,110,116,114,121,44,32,98,101,102,111,
              114,101,32,105,116,32,97,110,100,32,97,108,108,32,111,108,100,
              32,115,117,98,115,99,114,105,98,101,114,115,32,119,105,108,108,
              32,103,101,116,32,116,104,105,115,32,112,97,114,116,105,99,117,
              108,97,114,32,101,110,116,114,121,46,32,84,104,101,32,99,111,
              108,108,101,99,116,111,114,32,112,114,111,99,101,115,115,32,108,
              105,110,107,115,32,116,111,32,97,110,100,32,116,104,101,110,32,
              115,117,112,101,114,118,105,115,101,115,32,116,104,101,32,115,
              117,98,115,99,114,105,98,101,114,32,112,114,111,99,101,115,115,
              46,32,73,102,32,116,104,101,32,115,117,98,115,99,114,105,98,101,
              114,32,112,114,111,99,101,115,115,32,100,105,101,115,32,105,116,
              32,119,105,108,108,32,105,109,112,108,121,32,116,104,97,116,32,
              105,116,32,103,101,116,115,32,117,110,114,101,103,105,115,116,
              101,114,101,100,32,97,115,32,119,105,116,104,32,97,32,110,111,
              114,109,97,108,32,100,105,99,116,95,100,101,108,101,116,101,47,
              50,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"*## dict_lookup(CollectorPid, Key) -> [Val]"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"6Lookup a dictionary entry and return zero or one value"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,
             100,40,41]}],
          0,false}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,
            [24,70,105,108,116,101,114,70,117,110,32,61,32,102,105,108,116,
             101,114,95,102,117,110,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,
            100,40,41]}],
         0,false}],
       0,false}},
     {sep,[{text,[1,42]},{sep,[{text,"\fKey = term()"}],0,false}],0,false}},
    {sep,[{text,[1,42]},{sep,[{text,"\fVal = term()"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"7Lookup a dictionary entry and return zero or one value."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"'## dict_delete(CollectorPid, Key) -> ok"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "bDelete a dictionary entry and send a {et, {dict_delete, Key}} tuple to all registered subscribers."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,
           100,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [21,83,117,98,115,99,114,105,98,101,114,80,105,100,32,61,32,112,105,
           100,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,[{text,"*Key = {subscriber, SubscriberPid} | term()"}],0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "bDelete a dictionary entry and send a {et, {dict_delete, Key}} tuple to all registered subscribers."}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "¢If the deleted entry is a registered subscriber, it will imply that the subscriber process gets is unregistered as subscriber as well as it gets it final message."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"/## dict_match(CollectorPid, Pattern) -> [Match]"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [29,77,97,116,99,104,32,115,111,109,101,32,100,105,99,116,105,111,
            110,97,114,121,32,101,110,116,114,105,101,115]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,
               105,100,40,41]}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,".Pattern = '_' | {key_pattern(), val_pattern()}"}],
            0,false}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,"*key_pattern() = ets_match_object_pattern()"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,[{text,"*val_pattern() = ets_match_object_pattern()"}],0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [22,77,97,116,99,104,32,61,32,123,107,101,121,40,41,44,32,118,97,
            108,40,41,125]}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,[14,107,101,121,40,41,32,61,32,116,101,114,109,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[14,118,97,108,40,41,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [29,77,97,116,99,104,32,115,111,109,101,32,100,105,99,116,105,
              111,110,97,114,121,32,101,110,116,114,105,101,115]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,"&## multicast(_CollectorPid, Msg) -> ok"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"-Sends a message to all registered subscribers"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,
           100,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [20,67,111,108,108,101,99,116,111,114,80,105,100,32,61,32,112,105,
           100,40,41]}],
        0,false}],
      0,false}},
    {sep,[{text,[1,42]},{sep,[{text,"\fMsg = term()"}],0,false}],0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,".Sends a message to all registered subscribers."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "o## start_trace_client(CollectorPid, Type, Parameters) -> file_loaded | {trace_client_pid, pid()} | exit(Reason)"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"3Load raw Erlang trace from a file, port or process."}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [30,84,121,112,101,32,61,32,100,98,103,95,116,114,97,99,101,95,99,
           108,105,101,110,116,95,116,121,112,101,40,41]}],
        0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,[{text,"*Parameters = dbg_trace_client_parameters()"}],0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [28,80,105,100,32,61,32,100,98,103,95,116,114,97,99,101,95,99,108,
          105,101,110,116,95,112,105,100,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,"3Load raw Erlang trace from a file, port or process."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,{text,")## iterate(Handle, Prev, Limit) -> NewAcc"},null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,")Iterates over the currently stored events"}],0,false}],
       0,true},
      null},
     null}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "AShort for iterate(Handle, Prev, Limit, undefined, Prev) -> NewAcc"}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,"3## iterate(Handle, Prev, Limit, Fun, Acc) -> NewAcc"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"(Iterate over the currently stored events"}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,")Handle = collector_pid() | table_handle()"}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,[{text,"!Prev = first | last | event_key()"}],0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,"'Limit = done() | forward() | backward()"}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [23,99,111,108,108,101,99,116,111,114,95,112,105,100,40,41,32,
                 61,32,112,105,100,40,41]}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,[{text,"%table_handle() = record(table_handle)"}],0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,
              "Aevent_key() = record(event) | record(event_ts) | record(trace_ts)"}],
            0,false}],
          0,false}},
        {sep,[{text,[1,42]},{sep,[{text,"\ndone() = 0"}],0,false}],0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,"-forward() = infinity | integer(X) where X > 0"}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,"1backward() = '-infinity' | integer(X) where X < 0"}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [31,70,117,110,32,61,32,102,117,110,40,69,118,101,110,116,44,32,65,
           99,99,41,32,45,62,32,78,101,119,65,99,99]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [21,65,99,99,32,61,32,78,101,119,65,99,99,32,61,32,116,101,114,109,
          40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,")Iterate over the currently stored events."}],0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "ÄIterates over the currently stored events and applies a function for each event. The iteration may be performed forwards or backwards and may be limited to a maximum number of events (abs(Limit))."}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       [28,35,35,32,99,108,101,97,114,95,116,97,98,108,101,40,72,97,110,100,
        108,101,41,32,45,62,32,111,107]},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [21,67,108,101,97,114,32,116,104,101,32,101,118,101,110,116,32,116,
            97,98,108,101]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {sep,
      [{text,[1,42]},
       {sep,[{text,")Handle = collector_pid() | table_handle()"}],0,false}],
      0,false},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,
          [23,99,111,108,108,101,99,116,111,114,95,112,105,100,40,41,32,61,32,
           112,105,100,40,41]}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,[{text,"%table_handle() = record(table_handle)"}],0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             [22,67,108,101,97,114,32,116,104,101,32,101,118,101,110,116,32,
              116,97,98,108,101,46]}],
           0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
