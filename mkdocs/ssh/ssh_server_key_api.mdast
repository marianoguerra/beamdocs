{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [20,35,32,115,115,104,95,115,101,114,118,101,114,95,107,101,121,95,
          97,112,105]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [20,35,32,115,115,104,95,115,101,114,118,101,114,95,107,101,121,95,
          97,112,105]},
        null},
       null}}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            [31,45,98,101,104,97,118,105,111,117,114,40,115,115,104,95,115,
             101,114,118,101,114,95,107,101,121,95,97,112,105,41,46]}],
          0,false}],
        0,true},
       null},
      null}}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    [291,66,101,104,97,118,105,111,117,114,32,100,101,115,99,
                     114,105,98,105,110,103,32,116,104,101,32,65,80,73,32,102,
                     111,114,32,112,117,98,108,105,99,32,107,101,121,32,104,
                     97,110,100,108,105,110,103,32,111,102,32,97,110,32,83,83,
                     72,32,115,101,114,118,101,114,46,32,66,121,32,105,109,
                     112,108,101,109,101,110,116,105,110,103,32,116,104,101,
                     32,99,97,108,108,98,97,99,107,115,32,100,101,102,105,110,
                     101,100,32,105,110,32,116,104,105,115,32,98,101,104,97,
                     118,105,111,114,44,32,116,104,101,32,112,117,98,108,105,
                     99,32,107,101,121,32,104,97,110,100,108,105,110,103,32,
                     111,102,32,97,110,32,83,83,72,32,115,101,114,118,101,114,
                     32,99,97,110,32,98,101,32,99,117,115,116,111,109,105,122,
                     101,100,46,32,66,121,32,100,101,102,97,117,108,116,32,
                     116,104,101,32,83,83,72,32,97,112,112,108,105,99,97,116,
                     105,111,110,32,105,109,112,108,101,109,101,110,116,115,
                     32,116,104,105,115,32,98,101,104,97,118,105,111,114,32,
                     119,105,116,104,32,104,101,108,112,32,111,102,32,116,104,
                     101,32,115,116,97,110,100,97,114,100,32,79,112,101,110,
                     83,83,72,32,102,105,108,101,115,44,32,115,101,101,32,116,
                     104,101]}],
                  0,false},
                 {text,
                  [17,91,115,115,104,40,54,41,93,40,83,83,72,95,97,112,112,
                   41]},
                 {sep,
                  [{text,
                    [19,97,112,112,108,105,99,97,116,105,111,110,32,109,97,
                     110,117,97,108,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}}],
         0,false}],
       0,true},
      null},
     null}}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,{above,{text,"\f# Data Types"},null},null}},
    {sep,
     [{sep,
       [{text,
         [21,100,97,101,109,111,110,95,107,101,121,95,99,98,95,111,112,116,
          105,111,110,115]}],
       0,false},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [19,79,112,116,105,111,110,115,32,112,114,111,118,105,100,
                   101,100,32,116,111]}],
                0,false},
               {text," [ssh:daemon/2,3](./ssh#daemon-2)"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  [28,84,104,101,32,111,112,116,105,111,110,32,108,105,115,
                   116,32,103,105,118,101,110,32,105,110,32,116,104,101]}],
                0,false},
               {text,
                "@[ssh#type-key_cb_common_option](./ssh#type-key_cb_common_option)"},
               {sep,[{text," option is available with the key"}],0,false},
               {text,
                [16,42,107,101,121,95,99,98,95,112,114,105,118,97,116,101,42]},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,true},
           null},
          null}}],
       0,false}],
     0,false}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\v# Functions"},null},null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "Q## Module:host_key(Algorithm, DaemonOptions) ->\n      {ok, Key} | {error, Reason}"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [33,70,101,116,99,104,101,115,32,116,104,101,32,104,111,115,116,
            226,128,153,115,32,112,114,105,118,97,116,101,32,107,101,121,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{sep,[{text,"\vAlgorithm ="}],0,false},
              {text,")[ssh:pubkey_alg()](./ssh#type-pubkey_alg)"}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             [19,72,111,115,116,32,107,101,121,32,97,108,103,111,114,105,116,
              104,109,46]}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,
            [{sep,
              [{text,
                [15,68,97,101,109,111,110,79,112,116,105,111,110,115,32,61]}],
              0,false},
             {text,"6[daemon_key_cb_options()](#type-daemon_key_cb_options)"}],
            0,false}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},
        {sep,
         [{sep,
           [{sep,[{text,"\fPrivateKey ="}],0,false},
            {text,
             "E[public_key:private_key()](../public_key/public_key#type-private_key)"},
            {sep,[{text,[1,124]}],0,false},
            {text,
             "?[crypto:engine_key_ref()](../crypto/crypto#type-engine_key_ref)"}],
           0,false}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{sep,
          [{sep,[{text,"$Private key of the host matching the"}],0,false},
           {text,"\v*Algorithm*"},
           {sep,
            [{text,
              "k. It may be a reference to a 'ssh-rsa', rsa-sha2-\\* or 'ssh-dss' (NOT ecdsa) key stored in a loaded Engine."}],
            0,false}],
          0,false}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,[15,82,101,97,115,111,110,32,61,32,116,101,114,109,40,41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"$Fetches the private key of the host."}],0,false}],
         0,true},
        null},
       null}}],
    0,false},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {text,
       "C## Module:is_auth_key(PublicUserKey, User, DaemonOptions) -> Result"},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,[{text,"%Checks if the user key is authorized."}],0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,
     {above,
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{sep,
               [{text,
                 [15,80,117,98,108,105,99,85,115,101,114,75,101,121,32,61]}],
               0,false},
              {text,
               "C[public_key:public_key()](../public_key/public_key#type-public_key)"}],
             0,false}],
           0,false}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text,
             "XNormally an RSA, DSA or ECDSA public key, but handling of other public keys can be added"}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{text,[15,85,115,101,114,32,61,32,115,116,114,105,110,103,40,41]}],
          0,false}],
        0,false}},
      {sep,
       [{text,[1,42]},{sep,[{text,"\eUser owning the public key."}],0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{sep,
          [{sep,
            [{text,
              [15,68,97,101,109,111,110,79,112,116,105,111,110,115,32,61]}],
            0,false},
           {text,"6[daemon_key_cb_options()](#type-daemon_key_cb_options)"}],
          0,false}],
        0,false}],
      0,false}},
    {sep,
     [{text,[1,42]},
      {sep,
       [{text,
         [18,82,101,115,117,108,116,32,61,32,98,111,111,108,101,97,110,40,
          41]}],
       0,false}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,[{text,"%Checks if the user key is authorized."}],0,false}],
         0,true},
        null},
       null}}],
    0,false}],
  0,false}}
