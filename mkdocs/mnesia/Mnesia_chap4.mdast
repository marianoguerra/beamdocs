{above,
 {above,
  {above,
   {above,
    {above,
     {above,
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,{text,"(# Transactions and Other Access Contexts"},null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [26,84,104,105,115,32,115,101,99,116,105,111,110,32,100,
                      101,115,99,114,105,98,101,115,32,116,104,101]}],
                   0,false},
                  {text,"\b*Mnesia*"},
                  {sep,
                   [{text,
                     ";transaction system and the transaction properties that make"}],
                   0,false},
                  {text,"\b*Mnesia*"},
                  {sep,
                   [{text,
                     "@a fault-tolerant, distributed Database Management System (DBMS)."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  [339,84,104,105,115,32,115,101,99,116,105,111,110,32,97,108,
                   115,111,32,100,101,115,99,114,105,98,101,115,32,116,104,
                   101,32,108,111,99,107,105,110,103,32,102,117,110,99,116,
                   105,111,110,115,44,32,105,110,99,108,117,100,105,110,103,
                   32,116,97,98,108,101,32,108,111,99,107,115,32,97,110,100,
                   32,115,116,105,99,107,121,32,108,111,99,107,115,44,32,97,
                   115,32,119,101,108,108,32,97,115,32,97,108,116,101,114,110,
                   97,116,105,118,101,32,102,117,110,99,116,105,111,110,115,
                   32,116,104,97,116,32,98,121,112,97,115,115,32,116,104,101,
                   32,116,114,97,110,115,97,99,116,105,111,110,32,115,121,115,
                   116,101,109,32,105,110,32,102,97,118,111,114,32,111,102,32,
                   105,109,112,114,111,118,101,100,32,115,112,101,101,100,32,
                   97,110,100,32,114,101,100,117,99,101,100,32,111,118,101,
                   114,104,101,97,100,46,32,84,104,101,115,101,32,102,117,110,
                   99,116,105,111,110,115,32,97,114,101,32,99,97,108,108,101,
                   100,32,34,100,105,114,116,121,32,111,112,101,114,97,116,
                   105,111,110,115,34,46,32,84,104,101,32,117,115,101,32,111,
                   102,32,110,101,115,116,101,100,32,116,114,97,110,115,97,99,
                   116,105,111,110,115,32,105,115,32,97,108,115,111,32,100,
                   101,115,99,114,105,98,101,100,46,32,84,104,101,32,102,111,
                   108,108,111,119,105,110,103,32,116,111,112,105,99,115,32,
                   97,114,101,32,105,110,99,108,117,100,101,100,58]}],
                0,false}],
              0,true},
             null},
            null}}},
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {sep,
                 [{text,[1,42]},
                  {text,
                   "WTransaction properties, which include atomicity, consistency, isolation, and durability"}],
                 0,false},
                {sep,
                 [{text,[1,42]},{text,[7,76,111,99,107,105,110,103]}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {text,
                  [16,68,105,114,116,121,32,111,112,101,114,97,116,105,111,
                   110,115]}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {text,
                 [31,82,101,99,111,114,100,32,110,97,109,101,115,32,118,101,
                  114,115,117,115,32,116,97,98,108,101,32,110,97,109,101,
                  115]}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {text,",Activity concept and various access contexts"}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {text,
               [19,78,101,115,116,101,100,32,116,114,97,110,115,97,99,116,105,
                111,110,115]}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {text,
              [16,80,97,116,116,101,114,110,32,109,97,116,99,104,105,110,
               103]}],
            0,false}},
          {sep,[{text,[1,42]},{text,"\tIteration"}],0,false}}},
        {sep,
         [{text,"#<a name=\"trans_prop\">trans_prop</a>"},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {text,
              [25,35,35,32,84,114,97,110,115,97,99,116,105,111,110,32,80,114,
               111,112,101,114,116,105,101,115]},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,
                  [{text,
                    "PTransactions are important when designing fault-tolerant, distributed systems. A"}],
                  0,false},
                 {text,"\b*Mnesia*"},
                 {sep,
                  [{text,
                    "ítransaction is a mechanism by which a series of database operations can be executed as one functional block. The functional block that is run as a transaction is called a Functional Object (Fun), and this code can read, write, and delete"}],
                  0,false},
                 {text,"\b*Mnesia*"},
                 {sep,
                  [{text,
                    "Órecords. The Fun is evaluated as a transaction that either commits or terminates. If a transaction succeeds in executing the Fun, it replicates the action on all nodes involved, or terminates if an error occurs."}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{text,
                  "]The following example shows a transaction that raises the salary of certain employee numbers:"}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {above,
              {above,
               {text,[3,96,96,96]},
               {sep,
                [{text,
                  [273,10,10,114,97,105,115,101,40,69,110,111,44,32,82,97,105,
                   115,101,41,32,45,62,10,32,32,32,32,70,32,61,32,102,117,110,
                   40,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
                   32,32,32,91,69,93,32,61,32,109,110,101,115,105,97,58,114,
                   101,97,100,40,101,109,112,108,111,121,101,101,44,32,69,110,
                   111,44,32,119,114,105,116,101,41,44,10,32,32,32,32,32,32,
                   32,32,32,32,32,32,32,32,32,32,83,97,108,97,114,121,32,61,
                   32,69,35,101,109,112,108,111,121,101,101,46,115,97,108,97,
                   114,121,32,43,32,82,97,105,115,101,44,10,32,32,32,32,32,32,
                   32,32,32,32,32,32,32,32,32,32,78,101,119,32,61,32,69,35,
                   101,109,112,108,111,121,101,101,123,115,97,108,97,114,121,
                   32,61,32,83,97,108,97,114,121,125,44,10,32,32,32,32,32,32,
                   32,32,32,32,32,32,32,32,32,32,109,110,101,115,105,97,58,
                   119,114,105,116,101,40,78,101,119,41,10,32,32,32,32,32,32,
                   32,32,101,110,100,44,10,32,32,32,32,109,110,101,115,105,97,
                   58,116,114,97,110,115,97,99,116,105,111,110,40,70,41,46]}],
                0,true}},
              {text,[3,96,96,96]}},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,"\fThe function"}],0,false},
                 {text,"\t*raise/2*"},
                 {sep,
                  [{text,
                    "Ncontains a Fun made up of four code lines. This Fun is called by the statement"}],
                  0,false},
                 {text,
                  [23,42,109,110,101,115,105,97,58,116,114,97,110,115,97,99,
                   116,105,111,110,40,70,41,42]},
                 {sep,
                  [{text,
                    [20,97,110,100,32,114,101,116,117,114,110,115,32,97,32,
                     118,97,108,117,101,46]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,{above,{text,[0]},null},null},
           {above,
            {above,
             {sep,
              [{sep,
                [{sep,[{text,[3,84,104,101]}],0,false},
                 {text,"\b*Mnesia*"},
                 {sep,
                  [{text,
                    [129,116,114,97,110,115,97,99,116,105,111,110,32,115,121,
                     115,116,101,109,32,102,97,99,105,108,105,116,97,116,101,
                     115,32,116,104,101,32,99,111,110,115,116,114,117,99,116,
                     105,111,110,32,111,102,32,114,101,108,105,97,98,108,101,
                     44,32,100,105,115,116,114,105,98,117,116,101,100,32,115,
                     121,115,116,101,109,115,32,98,121,32,112,114,111,118,105,
                     100,105,110,103,32,116,104,101,32,102,111,108,108,111,
                     119,105,110,103,32,105,109,112,111,114,116,97,110,116,32,
                     112,114,111,112,101,114,116,105,101,115,58]}],
                  0,false}],
                0,false}],
              0,true},
             null},
            null}},
          {above,
           {above,
            {sep,
             [{text,[1,42]},
              {text,
               "ÆThe transaction handler ensures that a Fun, which is placed inside a transaction, does not interfere with operations embedded in other transactions when it executes a series of operations on tables."}],
             0,false},
            {sep,
             [{text,[1,42]},
              {text,
               "ÀThe transaction handler ensures that either all operations in the transaction are performed successfully on all nodes atomically, or the transaction fails without permanent effect on any node."}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{sep,[{text,[3,84,104,101]}],0,false},
               {text,"\b*Mnesia*"},
               {sep,
                [{text,
                  "3transactions have four important properties, called"}],
                0,false},
               {text,[5,42,42,65,42,42]},
               {sep,[{text,"\ttomicity,"}],0,false},
               {text,[5,42,42,67,42,42]},
               {sep,[{text,"\vonsistency,"}],0,false},
               {text,[5,42,42,73,42,42]},
               {sep,[{text,"\rsolation, and"}],0,false},
               {text,[5,42,42,68,42,42]},
               {sep,
                [{text,
                  "Kurability (ACID). These properties are described in the following sections."}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,{above,{text,"\f## Atomicity"},null},null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "ÍAtomicity means that database changes that are executed by a transaction take effect on all nodes involved, or on none of the nodes. That is, the transaction either succeeds entirely, or it fails entirely."}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "wAtomicity is important when it is needed to write atomically more than one record in the same transaction. The function"}],
                    0,false},
                   {text,"\t*raise/2*"},
                   {sep,
                    [{text,
                      "E, shown in the previous example, writes one record only. The function"}],
                    0,false},
                   {text,
                    [14,42,105,110,115,101,114,116,95,101,109,112,47,51,42]},
                   {sep,[{text,"!, shown in the program listing in"}],0,false},
                   {text,"1[Getting Started](./Mnesia_chap2#getting_started)"},
                   {sep,
                    [{text,
                      [19,44,32,119,114,105,116,101,115,32,116,104,101,32,114,
                       101,99,111,114,100]}],
                    0,false},
                   {text,"\n*employee*"},
                   {sep,
                    [{text,"&as well as employee relations, such as"}],
                    0,false},
                   {text,"\b*at_dep*"},
                   {sep,[{text,[3,97,110,100]}],0,false},
                   {text,"\t*in_proj*"},
                   {sep,
                    [{text,
                      "¥, into the database. If this latter code is run inside a transaction, the transaction handler ensures that the transaction either succeeds completely, or not at all."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,"\b*Mnesia*"},
                   {sep,
                    [{text,
                      [273,105,115,32,97,32,100,105,115,116,114,105,98,117,
                       116,101,100,32,68,66,77,83,32,119,104,101,114,101,32,
                       100,97,116,97,32,99,97,110,32,98,101,32,114,101,112,
                       108,105,99,97,116,101,100,32,111,110,32,115,101,118,
                       101,114,97,108,32,110,111,100,101,115,46,32,73,110,32,
                       109,97,110,121,32,97,112,112,108,105,99,97,116,105,111,
                       110,115,44,32,105,116,32,105,115,32,105,109,112,111,
                       114,116,97,110,116,32,116,104,97,116,32,97,32,115,101,
                       114,105,101,115,32,111,102,32,119,114,105,116,101,32,
                       111,112,101,114,97,116,105,111,110,115,32,97,114,101,
                       32,112,101,114,102,111,114,109,101,100,32,97,116,111,
                       109,105,99,97,108,108,121,32,105,110,115,105,100,101,
                       32,97,32,116,114,97,110,115,97,99,116,105,111,110,46,
                       32,84,104,101,32,97,116,111,109,105,99,105,116,121,32,
                       112,114,111,112,101,114,116,121,32,101,110,115,117,114,
                       101,115,32,116,104,97,116,32,97,32,116,114,97,110,115,
                       97,99,116,105,111,110,32,116,97,107,101,115,32,101,102,
                       102,101,99,116,32,111,110,32,97,108,108,32,110,111,100,
                       101,115,44,32,111,114,32,110,111,110,101,46]}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {text,[14,35,35,32,67,111,110,115,105,115,116,101,110,99,121]},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "nThe consistency property ensures that a transaction always leaves the DBMS in a consistent state. For example,"}],
                    0,false},
                   {text,"\b*Mnesia*"},
                   {sep,
                    [{text,
                      "0ensures that no inconsistencies occur if Erlang,"}],
                    0,false},
                   {text,"\b*Mnesia*"},
                   {sep,
                    [{text,
                      "A, or the computer crashes while a write operation is in progress."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,{above,{text,"\f## Isolation"},null},null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{sep,
                    [{text,
                      "òThe isolation property ensures that transactions that execute on different nodes in a network, and access and manipulate the same data records, do not interfere with each other. The isolation property makes it possible to execute the function"}],
                    0,false},
                   {text,"\t*raise/2*"},
                   {sep,
                    [{text,
                      "]concurrently. A classical problem in concurrency control theory is the \"lost update problem\"."}],
                    0,false}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    "ÜThe isolation property is in particular useful if the following circumstances occur where an employee (with employee number 123) and two processes (P1 and P2) are concurrently trying to raise the salary for the employee:"}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,
              {above,
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,"\v**Step 1:**"},
                   {sep,
                    [{text,
                      [144,84,104,101,32,105,110,105,116,105,97,108,32,118,97,
                       108,117,101,32,111,102,32,116,104,101,32,101,109,112,
                       108,111,121,101,101,115,32,115,97,108,97,114,121,32,
                       105,115,44,32,102,111,114,32,101,120,97,109,112,108,
                       101,44,32,53,46,32,80,114,111,99,101,115,115,32,80,49,
                       32,115,116,97,114,116,115,32,116,111,32,101,120,101,99,
                       117,116,101,44,32,114,101,97,100,115,32,116,104,101,32,
                       101,109,112,108,111,121,101,101,32,114,101,99,111,114,
                       100,44,32,97,110,100,32,97,100,100,115,32,50,32,116,
                       111,32,116,104,101,32,115,97,108,97,114,121,46]}],
                    0,false}],
                  0,false}],
                0,false},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text,"\v**Step 2:**"},
                   {sep,
                    [{text,
                      "SProcess P1 is for some reason pre-empted and process P2 has the opportunity to run."}],
                    0,false}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,"\v**Step 3:**"},
                  {sep,
                   [{text,
                     "uProcess P2 reads the record, adds 3 to the salary, and finally writes a new employee record with the salary set to 8."}],
                   0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,"\v**Step 4:**"},
                 {sep,
                  [{text,
                    "ÂProcess P1 starts to run again and writes its employee record with salary set to 7, thus effectively overwriting and undoing the work performed by process P2. The update performed by P2 is lost."}],
                  0,false}],
                0,false}],
              0,false}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [356,65,32,116,114,97,110,115,97,99,116,105,111,110,32,
                     115,121,115,116,101,109,32,109,97,107,101,115,32,105,116,
                     32,112,111,115,115,105,98,108,101,32,116,111,32,101,120,
                     101,99,117,116,101,32,116,119,111,32,111,114,32,109,111,
                     114,101,32,112,114,111,99,101,115,115,101,115,32,99,111,
                     110,99,117,114,114,101,110,116,108,121,32,116,104,97,116,
                     32,109,97,110,105,112,117,108,97,116,101,32,116,104,101,
                     32,115,97,109,101,32,114,101,99,111,114,100,46,32,84,104,
                     101,32,112,114,111,103,114,97,109,109,101,114,32,100,111,
                     101,115,32,110,111,116,32,110,101,101,100,32,116,111,32,
                     99,104,101,99,107,32,116,104,97,116,32,116,104,101,32,
                     117,112,100,97,116,101,115,32,97,114,101,32,115,121,110,
                     99,104,114,111,110,111,117,115,59,32,116,104,105,115,32,
                     105,115,32,111,118,101,114,115,101,101,110,32,98,121,32,
                     116,104,101,32,116,114,97,110,115,97,99,116,105,111,110,
                     32,104,97,110,100,108,101,114,46,32,65,108,108,32,112,
                     114,111,103,114,97,109,115,32,97,99,99,101,115,115,105,
                     110,103,32,116,104,101,32,100,97,116,97,98,97,115,101,32,
                     116,104,114,111,117,103,104,32,116,104,101,32,116,114,97,
                     110,115,97,99,116,105,111,110,32,115,121,115,116,101,109,
                     32,99,97,110,32,98,101,32,119,114,105,116,116,101,110,32,
                     97,115,32,105,102,32,116,104,101,121,32,104,97,100,32,
                     115,111,108,101,32,97,99,99,101,115,115,32,116,111,32,
                     116,104,101,32,100,97,116,97,46]}],
                  0,false}],
                0,true},
               null},
              null}}],
           0,false},
          {sep,
           [{above,
             {above,{above,{text,[0]},null},null},
             {above,{above,{text,"\r## Durability"},null},null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {sep,
                [{sep,
                  [{text,
                    [263,84,104,101,32,100,117,114,97,98,105,108,105,116,121,
                     32,112,114,111,112,101,114,116,121,32,101,110,115,117,
                     114,101,115,32,116,104,97,116,32,99,104,97,110,103,101,
                     115,32,109,97,100,101,32,116,111,32,116,104,101,32,68,66,
                     77,83,32,98,121,32,97,32,116,114,97,110,115,97,99,116,
                     105,111,110,32,97,114,101,32,112,101,114,109,97,110,101,
                     110,116,46,32,79,110,99,101,32,97,32,116,114,97,110,115,
                     97,99,116,105,111,110,32,105,115,32,99,111,109,109,105,
                     116,116,101,100,44,32,97,108,108,32,99,104,97,110,103,
                     101,115,32,109,97,100,101,32,116,111,32,116,104,101,32,
                     100,97,116,97,98,97,115,101,32,97,114,101,32,100,117,114,
                     97,98,108,101,44,32,116,104,97,116,32,105,115,44,32,116,
                     104,101,121,32,97,114,101,32,119,114,105,116,116,101,110,
                     32,115,97,102,101,108,121,32,116,111,32,100,105,115,99,
                     32,97,110,100,32,100,111,32,110,111,116,32,98,101,99,111,
                     109,101,32,99,111,114,114,117,112,116,101,100,32,97,110,
                     100,32,100,111,32,110,111,116,32,100,105,115,97,112,112,
                     101,97,114,46]}],
                  0,false}],
                0,true},
               null},
              null}},
            {above,
             {above,{above,{text,[0]},null},null},
             {above,
              {above,
               {above,
                {above,
                 {text,
                  [15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
                 {sep,
                  [{text,[4,32,32,32,32]},
                   {sep,
                    [{sep,
                      [{above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "LThe described durability feature does not entirely apply to situations where"}],
                               0,false},
                              {text,"\b*Mnesia*"},
                              {sep,
                               [{text,
                                 "2is configured as a \"pure\" primary memory database."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}}],
                      0,false}],
                    0,true}],
                  0,false}},
                {text,[0]}},
               null},
              null}}],
           0,false}],
         0,false}},
       {sep,
        [{above,
          {above,{above,{text,[0]},null},null},
          {above,{above,{text,"\n## Locking"},null},null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "]Different transaction managers employ different strategies to satisfy the isolation property."}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   "tuses the standard technique of two phase locking. That is, locks are set on records before they are read or written."}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   [30,117,115,101,115,32,116,104,101,32,102,111,108,108,111,
                    119,105,110,103,32,108,111,99,107,32,116,121,112,101,115,
                    58]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,
           {above,
            {above,
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,[14,42,42,82,101,97,100,32,108,111,99,107,115,42,42]},
                 {sep,
                  [{text,
                    "F. A read lock is set on one replica of a record before it can be read."}],
                  0,false}],
                0,false}],
              0,false},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  [15,42,42,87,114,105,116,101,32,108,111,99,107,115,42,42]},
                 {sep,
                  [{text,
                    "q. Whenever a transaction writes to a record, write locks are first set on all replicas of that particular record."}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 [20,42,42,82,101,97,100,32,116,97,98,108,101,32,108,111,99,
                  107,115,42,42]},
                {sep,
                 [{text,
                   [299,46,32,73,102,32,97,32,116,114,97,110,115,97,99,116,
                    105,111,110,32,116,114,97,118,101,114,115,101,115,32,97,
                    110,32,101,110,116,105,114,101,32,116,97,98,108,101,32,
                    105,110,32,115,101,97,114,99,104,32,102,111,114,32,97,32,
                    114,101,99,111,114,100,32,116,104,97,116,32,115,97,116,
                    105,115,102,105,101,115,32,115,111,109,101,32,112,97,114,
                    116,105,99,117,108,97,114,32,112,114,111,112,101,114,116,
                    121,44,32,105,116,32,105,115,32,109,111,115,116,32,105,
                    110,101,102,102,105,99,105,101,110,116,32,116,111,32,115,
                    101,116,32,114,101,97,100,32,108,111,99,107,115,32,111,
                    110,32,116,104,101,32,114,101,99,111,114,100,115,32,111,
                    110,101,32,98,121,32,111,110,101,46,32,73,116,32,105,115,
                    32,97,108,115,111,32,109,101,109,111,114,121,32,99,111,
                    110,115,117,109,105,110,103,44,32,97,115,32,116,104,101,
                    32,114,101,97,100,32,108,111,99,107,115,32,116,104,101,
                    109,115,101,108,118,101,115,32,99,97,110,32,116,97,107,
                    101,32,117,112,32,99,111,110,115,105,100,101,114,97,98,
                    108,101,32,115,112,97,99,101,32,105,102,32,116,104,101,32,
                    116,97,98,108,101,32,105,115,32,108,97,114,103,101,46,32,
                    84,104,101,114,101,102,111,114,101,44]}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,"'can set a read lock on an entire table."}],
                 0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                [21,42,42,87,114,105,116,101,32,116,97,98,108,101,32,108,111,
                 99,107,115,42,42]},
               {sep,
                [{text,
                  "a. If a transaction writes many records to one table, a write lock can be set on the entire table."}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               [16,42,42,83,116,105,99,107,121,32,108,111,99,107,115,42,42]},
              {sep,
               [{text,
                 "r. These are write locks that stay in place at a node after the transaction that initiated the lock has terminated."}],
               0,false}],
             0,false}],
           0,false}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\b*Mnesia*"},
                {sep,
                 [{text,"-employs a strategy whereby functions, such as"}],
                 0,false},
                {text," [mnesia:read/1](./mnesia#read/1)"},
                {sep,
                 [{text,
                   "Dacquire the necessary locks dynamically as the transactions execute."}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   "dautomatically sets and releases the locks and the programmer does not need to code these operations."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "XDeadlocks can occur when concurrent processes set and release locks on the same records."}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   "=employs a \"wait-die\" strategy to resolve these situations. If"}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   "Çsuspects that a deadlock can occur when a transaction tries to set a lock, the transaction is forced to release all its locks and sleep for a while. The Fun in the transaction is evaluated once more."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   "?It is therefore important that the code inside the Fun given to"}],
                 0,false},
                {text,".[mnesia#transaction/2](./mnesia#transaction/2)"},
                {sep,
                 [{text,
                   [148,105,115,32,112,117,114,101,46,32,83,111,109,101,32,
                    115,116,114,97,110,103,101,32,114,101,115,117,108,116,115,
                    32,99,97,110,32,111,99,99,117,114,32,105,102,44,32,102,
                    111,114,32,101,120,97,109,112,108,101,44,32,109,101,115,
                    115,97,103,101,115,32,97,114,101,32,115,101,110,116,32,98,
                    121,32,116,104,101,32,116,114,97,110,115,97,99,116,105,
                    111,110,32,70,117,110,46,32,84,104,101,32,102,111,108,108,
                    111,119,105,110,103,32,101,120,97,109,112,108,101,32,105,
                    108,108,117,115,116,114,97,116,101,115,32,116,104,105,115,
                    32,115,105,116,117,97,116,105,111,110,58]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {above,
             {above,
              {text,[3,96,96,96]},
              {sep,
               [{text,
                 [329,10,10,98,97,100,95,114,97,105,115,101,40,69,110,111,44,
                  32,82,97,105,115,101,41,32,45,62,10,32,32,32,32,70,32,61,32,
                  102,117,110,40,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,91,69,93,32,61,32,109,110,101,115,105,97,
                  58,114,101,97,100,40,123,101,109,112,108,111,121,101,101,44,
                  32,69,110,111,125,41,44,10,32,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,83,97,108,97,114,121,32,61,32,69,35,101,109,
                  112,108,111,121,101,101,46,115,97,108,97,114,121,32,43,32,
                  82,97,105,115,101,44,10,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,32,32,32,78,101,119,32,61,32,69,35,101,109,112,108,111,
                  121,101,101,123,115,97,108,97,114,121,32,61,32,83,97,108,97,
                  114,121,125,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
                  32,32,105,111,58,102,111,114,109,97,116,40,34,84,114,121,
                  105,110,103,32,116,111,32,119,114,105,116,101,32,46,46,46,
                  32,126,110,34,44,32,91,93,41,44,10,32,32,32,32,32,32,32,32,
                  32,32,32,32,32,32,32,32,109,110,101,115,105,97,58,119,114,
                  105,116,101,40,78,101,119,41,10,32,32,32,32,32,32,32,32,101,
                  110,100,44,10,32,32,32,32,109,110,101,115,105,97,58,116,114,
                  97,110,115,97,99,116,105,111,110,40,70,41,46]}],
               0,true}},
             {text,[3,96,96,96]}},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,"#This transaction can write the text"}],0,false},
                {text,
                 [24,42,34,84,114,121,105,110,103,32,116,111,32,119,114,105,
                  116,101,32,46,46,46,32,34,42]},
                {sep,[{text,"$1000 times to the terminal. However,"}],0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   "Bguarantees that each transaction will eventually run. As a result,"}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   "2is not only deadlock free, but also livelock free."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,[{text,[3,84,104,101]}],0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   [138,112,114,111,103,114,97,109,109,101,114,32,99,97,110,
                    110,111,116,32,112,114,105,111,114,105,116,105,122,101,32,
                    111,110,101,32,112,97,114,116,105,99,117,108,97,114,32,
                    116,114,97,110,115,97,99,116,105,111,110,32,116,111,32,
                    101,120,101,99,117,116,101,32,98,101,102,111,114,101,32,
                    111,116,104,101,114,32,116,114,97,110,115,97,99,116,105,
                    111,110,115,32,116,104,97,116,32,97,114,101,32,119,97,105,
                    116,105,110,103,32,116,111,32,101,120,101,99,117,116,101,
                    46,32,65,115,32,97,32,114,101,115,117,108,116,44,32,116,
                    104,101]}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   "QDBMS transaction system is not suitable for hard real-time applications. However,"}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   "7contains other features that have real-time properties."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   [150,100,121,110,97,109,105,99,97,108,108,121,32,115,101,
                    116,115,32,97,110,100,32,114,101,108,101,97,115,101,115,
                    32,108,111,99,107,115,32,97,115,32,116,114,97,110,115,97,
                    99,116,105,111,110,115,32,101,120,101,99,117,116,101,46,
                    32,73,116,32,105,115,32,116,104,101,114,101,102,111,114,
                    101,32,100,97,110,103,101,114,111,117,115,32,116,111,32,
                    101,120,101,99,117,116,101,32,99,111,100,101,32,119,105,
                    116,104,32,116,114,97,110,115,97,99,116,105,111,110,32,
                    115,105,100,101,45,101,102,102,101,99,116,115,46,32,73,
                    110,32,112,97,114,116,105,99,117,108,97,114,44,32,97]}],
                 0,false},
                {text,"\t*receive*"},
                {sep,
                 [{text,
                   [330,115,116,97,116,101,109,101,110,116,32,105,110,115,105,
                    100,101,32,97,32,116,114,97,110,115,97,99,116,105,111,110,
                    32,99,97,110,32,108,101,97,100,32,116,111,32,97,32,115,
                    105,116,117,97,116,105,111,110,32,119,104,101,114,101,32,
                    116,104,101,32,116,114,97,110,115,97,99,116,105,111,110,
                    32,104,97,110,103,115,32,97,110,100,32,110,101,118,101,
                    114,32,114,101,116,117,114,110,115,44,32,119,104,105,99,
                    104,32,105,110,32,116,117,114,110,32,99,97,110,32,99,97,
                    117,115,101,32,108,111,99,107,115,32,110,111,116,32,116,
                    111,32,114,101,108,101,97,115,101,46,32,84,104,105,115,32,
                    115,105,116,117,97,116,105,111,110,32,99,97,110,32,98,114,
                    105,110,103,32,116,104,101,32,119,104,111,108,101,32,115,
                    121,115,116,101,109,32,116,111,32,97,32,115,116,97,110,
                    100,115,116,105,108,108,44,32,97,115,32,111,116,104,101,
                    114,32,116,114,97,110,115,97,99,116,105,111,110,115,32,
                    116,104,97,116,32,101,120,101,99,117,116,101,32,105,110,
                    32,111,116,104,101,114,32,112,114,111,99,101,115,115,101,
                    115,44,32,111,114,32,111,110,32,111,116,104,101,114,32,
                    110,111,100,101,115,44,32,97,114,101,32,102,111,114,99,
                    101,100,32,116,111,32,119,97,105,116,32,102,111,114,32,
                    116,104,101,32,100,101,102,101,99,116,105,118,101,32,116,
                    114,97,110,115,97,99,116,105,111,110,46]}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,"'If a transaction terminates abnormally,"}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   "9automatically releases the locks held by the transaction."}],
                 0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,{above,{text,[0]},null},null},
          {above,
           {above,
            {sep,
             [{sep,
               [{sep,
                 [{text,
                   [128,85,112,32,116,111,32,110,111,119,44,32,101,120,97,109,
                    112,108,101,115,32,111,102,32,97,32,110,117,109,98,101,
                    114,32,111,102,32,102,117,110,99,116,105,111,110,115,32,
                    116,104,97,116,32,99,97,110,32,98,101,32,117,115,101,100,
                    32,105,110,115,105,100,101,32,97,32,116,114,97,110,115,97,
                    99,116,105,111,110,32,104,97,118,101,32,98,101,101,110,32,
                    115,104,111,119,110,46,32,84,104,101,32,102,111,108,108,
                    111,119,105,110,103,32,108,105,115,116,32,115,104,111,119,
                    115,32,116,104,101]}],
                 0,false},
                {text,"\f**simplest**"},
                {text,"\b*Mnesia*"},
                {sep,
                 [{text,
                   [149,102,117,110,99,116,105,111,110,115,32,116,104,97,116,
                    32,119,111,114,107,32,119,105,116,104,32,116,114,97,110,
                    115,97,99,116,105,111,110,115,46,32,78,111,116,105,99,101,
                    32,116,104,97,116,32,116,104,101,115,101,32,102,117,110,
                    99,116,105,111,110,115,32,109,117,115,116,32,98,101,32,
                    101,109,98,101,100,100,101,100,32,105,110,32,97,32,116,
                    114,97,110,115,97,99,116,105,111,110,46,32,73,102,32,110,
                    111,32,101,110,99,108,111,115,105,110,103,32,116,114,97,
                    110,115,97,99,116,105,111,110,32,40,111,114,32,111,116,
                    104,101,114,32,101,110,99,108,111,115,105,110,103]}],
                 0,false},
                {text,"\b*Mnesia*"},
                {sep,[{text," activity) exists, they all fail."}],0,false}],
               0,false}],
             0,true},
            null},
           null}},
         {above,
          {above,
           {above,
            {above,
             {above,
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   "W[mnesia:transaction(Fun) -> {aborted, Reason} |{atomic, Value}](./mnesia#transaction/2)"},
                  {sep,
                   [{text,
                     "3executes one transaction with the functional object"}],
                   0,false},
                  {text,[5,42,70,117,110,42]},
                  {sep,
                   [{text,
                     [24,97,115,32,116,104,101,32,115,105,110,103,108,101,32,
                      112,97,114,97,109,101,116,101,114,46]}],
                   0,false}],
                 0,false}],
               0,false},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,
                   "L[mnesia:read({Tab, Key}) -> transaction abort | RecordList](./mnesia#read/1)"},
                  {sep,
                   [{text,
                     [22,114,101,97,100,115,32,97,108,108,32,114,101,99,111,
                      114,100,115,32,119,105,116,104]}],
                   0,false},
                  {text,[5,42,75,101,121,42]},
                  {sep,
                   [{text,
                     [17,97,115,32,107,101,121,32,102,114,111,109,32,116,97,
                      98,108,101]}],
                   0,false},
                  {text,[5,42,84,97,98,42]},
                  {sep,
                   [{text,
                     "D. This function has the same semantics regardless of the location of"}],
                   0,false},
                  {text,[7,42,84,97,98,108,101,42]},
                  {sep,
                   [{text,
                     [25,46,32,73,102,32,116,104,101,32,116,97,98,108,101,32,
                      105,115,32,111,102,32,116,121,112,101]}],
                   0,false},
                  {text,[5,42,98,97,103,42]},
                  {sep,[{text,[1,44]}],0,false},
                  {text,
                   [18,42,114,101,97,100,40,123,84,97,98,44,32,75,101,121,125,
                    41,42]},
                  {sep,
                   [{text,
                     "<can return an arbitrarily long list. If the table is of type"}],
                   0,false},
                  {text,[5,42,115,101,116,42]},
                  {sep,
                   [{text,"%, the list is either of length one or"}],
                   0,false},
                  {text,[4,42,91,93,42]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "N[mnesia:wread({Tab, Key}) -> transaction abort | RecordList](./mnesia#wread/1)"},
                 {sep,
                  [{text,
                    "6behaves the same way as the previously listed function"}],
                  0,false},
                 {text,"\b*read/1*"},
                 {sep,
                  [{text,
                    "å, except that it acquires a write lock instead of a read lock. To execute a transaction that reads a record, modifies the record, and then writes the record, it is slightly more efficient to set the write lock immediately. When a"}],
                  0,false},
                 {text," [mnesia:read/1](./mnesia#read/1)"},
                 {sep,
                  [{text,
                    [24,105,115,32,105,115,115,117,101,100,44,32,102,111,108,
                     108,111,119,101,100,32,98,121,32,97]}],
                  0,false},
                 {text,"\"[mnesia:write/1](./mnesia#write/1)"},
                 {sep,
                  [{text,
                    "Zthe first read lock must be upgraded to a write lock when the write operation is executed."}],
                  0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 "B[mnesia:write(Record) -> transaction abort | ok](./mnesia#write/1)"},
                {sep,
                 [{text,"+writes a record into the database. Argument"}],
                 0,false},
                {text,"\b*Record*"},
                {sep,
                 [{text,"0is an instance of a record. The function returns"}],
                 0,false},
                {text,[4,42,111,107,42]},
                {sep,
                 [{text,
                   "3, or terminates the transaction if an error occurs."}],
                 0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "H[mnesia:delete({Tab, Key}) -> transaction abort | ok](./mnesia#delete/1)"},
               {sep,
                [{text,"'deletes all records with the given key."}],
                0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               "R[mnesia:delete_object(Record) -> transaction abort | ok](./mnesia#delete_object/1)"},
              {sep,
               [{text,
                 [28,100,101,108,101,116,101,115,32,114,101,99,111,114,100,
                  115,32,119,105,116,104,32,116,104,101,32,79,73,68]}],
               0,false},
              {text,"\b*Record*"},
              {sep,
               [{text,
                 "B. Use this function to delete only some records in a table of type"}],
               0,false},
              {text,[5,42,98,97,103,42]},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,false}},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,[15,35,35,32,83,116,105,99,107,121,32,76,111,99,107,115]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     "2As previously stated, the locking strategy used by"}],
                   0,false},
                  {text,"\b*Mnesia*"},
                  {sep,
                   [{text,
                     [132,105,115,32,116,111,32,108,111,99,107,32,111,110,101,
                      32,114,101,99,111,114,100,32,119,104,101,110,32,114,101,
                      97,100,105,110,103,32,97,32,114,101,99,111,114,100,44,
                      32,97,110,100,32,108,111,99,107,32,97,108,108,32,114,
                      101,112,108,105,99,97,115,32,111,102,32,97,32,114,101,
                      99,111,114,100,32,119,104,101,110,32,119,114,105,116,
                      105,110,103,32,97,32,114,101,99,111,114,100,46,32,72,
                      111,119,101,118,101,114,44,32,115,111,109,101,32,97,112,
                      112,108,105,99,97,116,105,111,110,115,32,117,115,101]}],
                   0,false},
                  {text,"\b*Mnesia*"},
                  {sep,
                   [{text,
                     [279,109,97,105,110,108,121,32,102,111,114,32,105,116,
                      115,32,102,97,117,108,116,45,116,111,108,101,114,97,110,
                      116,32,113,117,97,108,105,116,105,101,115,46,32,84,104,
                      101,115,101,32,97,112,112,108,105,99,97,116,105,111,110,
                      115,32,99,97,110,32,98,101,32,99,111,110,102,105,103,
                      117,114,101,100,32,119,105,116,104,32,111,110,101,32,
                      110,111,100,101,32,100,111,105,110,103,32,97,108,108,32,
                      116,104,101,32,104,101,97,118,121,32,119,111,114,107,44,
                      32,97,110,100,32,97,32,115,116,97,110,100,98,121,32,110,
                      111,100,101,32,116,104,97,116,32,105,115,32,114,101,97,
                      100,121,32,116,111,32,116,97,107,101,32,111,118,101,114,
                      32,105,102,32,116,104,101,32,109,97,105,110,32,110,111,
                      100,101,32,102,97,105,108,115,46,32,83,117,99,104,32,97,
                      112,112,108,105,99,97,116,105,111,110,115,32,99,97,110,
                      32,98,101,110,101,102,105,116,32,102,114,111,109,32,117,
                      115,105,110,103,32,115,116,105,99,107,121,32,108,111,99,
                      107,115,32,105,110,115,116,101,97,100,32,111,102,32,116,
                      104,101,32,110,111,114,109,97,108,32,108,111,99,107,105,
                      110,103,32,115,99,104,101,109,101,46]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "ÀA sticky lock is a lock that stays in place at a node, after the transaction that first acquired the lock has terminated. To illustrate this, assume that the following transaction is executed:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "q\n        F = fun() ->\n              mnesia:write(#foo{a = kalle})\n            end,\n        mnesia:transaction(F)."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,[3,84,104,101]}],0,false},
                  {text,[5,42,102,111,111,42]},
                  {sep,
                   [{text,"$table is replicated on the two nodes"}],
                   0,false},
                  {text,[4,42,78,49,42]},
                  {sep,[{text,[3,97,110,100]}],0,false},
                  {text,[4,42,78,50,42]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"&Normal locking requires the following:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {sep,
             [{text,[1,42]},
              {text,
               "8One network RPC (two messages) to acquire the write lock"}],
             0,false},
            {sep,
             [{text,[1,42]},
              {text,
               "?Three network messages to execute the two-phase commit protocol"}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "DIf sticky locks are used, the code must first be changed as follows:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "s\n        F = fun() ->\n              mnesia:s_write(#foo{a = kalle})\n            end,\n        mnesia:transaction(F)."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\eThis code uses the function"}],0,false},
                  {text,
                   [31,91,115,95,119,114,105,116,101,47,49,93,40,46,47,109,
                    110,101,115,105,97,35,115,95,119,114,105,116,101,47,49,
                    41]},
                  {sep,
                   [{text,
                     [23,105,110,115,116,101,97,100,32,111,102,32,116,104,101,
                      32,102,117,110,99,116,105,111,110]}],
                   0,false},
                  {text,"\e[write/1](./mnesia#write/1)"},
                  {sep,[{text,"\fThe function"}],0,false},
                  {text,"\v*s_write/1*"},
                  {sep,
                   [{text,
                     "®sets a sticky lock instead of a normal lock. If the table is not replicated, sticky locks have no special effect. If the table is replicated, and a sticky lock is set on node"}],
                   0,false},
                  {text,[4,42,78,49,42]},
                  {sep,
                   [{text,
                     [31,44,32,116,104,105,115,32,108,111,99,107,32,116,104,
                      101,110,32,115,116,105,99,107,115,32,116,111,32,110,111,
                      100,101]}],
                   0,false},
                  {text,[4,42,78,49,42]},
                  {sep,
                   [{text,
                     "G. The next time you try to set a sticky lock on the same record at node"}],
                   0,false},
                  {text,[4,42,78,49,42]},
                  {sep,[{text,[1,44]}],0,false},
                  {text,"\b*Mnesia*"},
                  {sep,
                   [{text,
                     "Udetects that the lock is already set and do no network operation to acquire the lock."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "ÒIt is more efficient to set a local lock than it is to set a networked lock. Sticky locks can therefore benefit an application that uses a replicated table and perform most of the work on only one of the nodes."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [28,73,102,32,97,32,114,101,99,111,114,100,32,105,115,32,
                      115,116,117,99,107,32,97,116,32,110,111,100,101]}],
                   0,false},
                  {text,[4,42,78,49,42]},
                  {sep,
                   [{text,
                     "7and you try to set a sticky lock for the record on node"}],
                   0,false},
                  {text,[4,42,78,50,42]},
                  {sep,
                   [{text,
                     [132,44,32,116,104,101,32,114,101,99,111,114,100,32,109,
                      117,115,116,32,98,101,32,117,110,115,116,117,99,107,46,
                      32,84,104,105,115,32,111,112,101,114,97,116,105,111,110,
                      32,105,115,32,101,120,112,101,110,115,105,118,101,32,97,
                      110,100,32,114,101,100,117,99,101,115,32,112,101,114,
                      102,111,114,109,97,110,99,101,46,32,84,104,101,32,117,
                      110,115,116,105,99,107,105,110,103,32,105,115,32,100,
                      111,110,101,32,97,117,116,111,109,97,116,105,99,97,108,
                      108,121,32,105,102,32,121,111,117,32,105,115,115,117,
                      101]}],
                   0,false},
                  {text,"\v*s_write/1*"},
                  {sep,[{text,"\vrequests at"}],0,false},
                  {text,[4,42,78,50,42]},
                  {sep,[{text,[1,46]}],0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,[14,35,35,32,84,97,98,108,101,32,76,111,99,107,115]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,"\b*Mnesia*"},
                  {sep,
                   [{text,
                     "zsupports read and write locks on whole tables as a complement to the normal locks on single records. As previously stated,"}],
                   0,false},
                  {text,"\b*Mnesia*"},
                  {sep,
                   [{text,
                     [420,115,101,116,115,32,97,110,100,32,114,101,108,101,97,
                      115,101,115,32,108,111,99,107,115,32,97,117,116,111,109,
                      97,116,105,99,97,108,108,121,44,32,97,110,100,32,116,
                      104,101,32,112,114,111,103,114,97,109,109,101,114,32,
                      100,111,101,115,32,110,111,116,32,110,101,101,100,32,
                      116,111,32,99,111,100,101,32,116,104,101,115,101,32,111,
                      112,101,114,97,116,105,111,110,115,46,32,72,111,119,101,
                      118,101,114,44,32,116,114,97,110,115,97,99,116,105,111,
                      110,115,32,116,104,97,116,32,114,101,97,100,32,97,110,
                      100,32,119,114,105,116,101,32,109,97,110,121,32,114,101,
                      99,111,114,100,115,32,105,110,32,97,32,115,112,101,99,
                      105,102,105,99,32,116,97,98,108,101,32,101,120,101,99,
                      117,116,101,32,109,111,114,101,32,101,102,102,105,99,
                      105,101,110,116,108,121,32,105,102,32,116,104,101,32,
                      116,114,97,110,115,97,99,116,105,111,110,32,105,115,32,
                      115,116,97,114,116,101,100,32,98,121,32,115,101,116,116,
                      105,110,103,32,97,32,116,97,98,108,101,32,108,111,99,
                      107,32,111,110,32,116,104,105,115,32,116,97,98,108,101,
                      46,32,84,104,105,115,32,98,108,111,99,107,115,32,111,
                      116,104,101,114,32,99,111,110,99,117,114,114,101,110,
                      116,32,116,114,97,110,115,97,99,116,105,111,110,115,32,
                      102,114,111,109,32,116,104,101,32,116,97,98,108,101,46,
                      32,84,104,101,32,102,111,108,108,111,119,105,110,103,32,
                      116,119,111,32,102,117,110,99,116,105,111,110,115,32,97,
                      114,101,32,117,115,101,100,32,116,111,32,115,101,116,32,
                      101,120,112,108,105,99,105,116,32,116,97,98,108,101,32,
                      108,111,99,107,115,32,102,111,114,32,114,101,97,100,32,
                      97,110,100,32,119,114,105,116,101,32,111,112,101,114,97,
                      116,105,111,110,115,58]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 "9[mnesia:read_lock_table(Tab)](./mnesia#read_lock_table/1)"},
                {sep,
                 [{text,
                   [25,115,101,116,115,32,97,32,114,101,97,100,32,108,111,99,
                    107,32,111,110,32,116,97,98,108,101]}],
                 0,false},
                {text,[5,42,84,97,98,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 ";[mnesia:write_lock_table(Tab)](./mnesia#write_lock_table/1)"},
                {sep,
                 [{text,
                   [26,115,101,116,115,32,97,32,119,114,105,116,101,32,108,
                    111,99,107,32,111,110,32,116,97,98,108,101]}],
                 0,false},
                {text,[5,42,84,97,98,42]},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "@Alternative syntax for acquisition of table locks is as follows:"}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "Q\n        mnesia:lock({table, Tab}, read)\n        mnesia:lock({table, Tab}, write)"}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [26,84,104,101,32,109,97,116,99,104,105,110,103,32,111,
                      112,101,114,97,116,105,111,110,115,32,105,110]}],
                   0,false},
                  {text,"\b*Mnesia*"},
                  {sep,
                   [{text,
                     "`can either lock the entire table or only a single record (when the key is bound in the pattern)."}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false},
         {sep,
          [{above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {text,[15,35,35,32,71,108,111,98,97,108,32,76,111,99,107,115]},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{text,
                   "³Write locks are normally acquired on all nodes where a replica of the table resides (and is active). Read locks are acquired on one node (the local one if a local replica exists)."}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,[{text,"\fThe function"}],0,false},
                  {text," [mnesia:lock/2](./mnesia#lock/2)"},
                  {sep,
                   [{text,
                     "¢is intended to support table locks (as mentioned previously) but also for situations when locks need to be acquired regardless of how tables have been replicated:"}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {above,
               {above,
                {text,[3,96,96,96]},
                {sep,
                 [{text,
                   "c\n        mnesia:lock({global, GlobalKey, Nodes}, LockKind)\n\n        LockKind ::= read | write | ..."}],
                 0,true}},
               {text,[3,96,96,96]}},
              null},
             null}},
           {above,
            {above,{above,{text,[0]},null},null},
            {above,
             {above,
              {sep,
               [{sep,
                 [{sep,
                   [{text,
                     [23,84,104,101,32,108,111,99,107,32,105,115,32,97,99,113,
                      117,105,114,101,100,32,111,110]}],
                   0,false},
                  {text,"\n*LockItem*"},
                  {sep,
                   [{text,
                     [30,111,110,32,97,108,108,32,110,111,100,101,115,32,105,
                      110,32,116,104,101,32,110,111,100,101,32,108,105,115,
                      116,46]}],
                   0,false}],
                 0,false}],
               0,true},
              null},
             null}}],
          0,false}],
        0,false}},
      {sep,
       [{above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {text,
            [19,35,35,32,68,105,114,116,121,32,79,112,101,114,97,116,105,111,
             110,115]},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "ÐIn many applications, the overhead of processing a transaction can result in a loss of performance. Dirty operation are short cuts that bypass much of the processing and increase the speed of the transaction."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "VDirty operation are often useful, for example, in a datagram routing application where"}],
                0,false},
               {text,"\b*Mnesia*"},
               {sep,
                [{text,
                  "pstores the routing table, and it is time consuming to start a whole transaction every time a packet is received."}],
                0,false},
               {text,"\b*Mnesia*"},
               {sep,
                [{text,
                  "Úhas therefore functions that manipulate tables without using transactions. This alternative to processing is known as a dirty operation. However, notice the trade-off in avoiding the overhead of transaction processing:"}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {sep,
          [{text,[1,42]},
           {sep,
            [{sep,
              [{text,"-The atomicity and the isolation properties of"}],
              0,false},
             {text,"\b*Mnesia*"},
             {sep,[{text,"\tare lost."}],0,false}],
            0,false}],
          0,false},
         {sep,
          [{text,[1,42]},
           {text,
            "óThe isolation property is compromised, because other Erlang processes, which use transaction to manipulate the data, do not get the benefit of isolation if dirty operations simultaneously are used to read and write records from the same table."}],
          0,false}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "¢The major advantage of dirty operations is that they execute much faster than equivalent operations that are processed as functional objects within a transaction."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,
                [{text,
                  "MDirty operations are written to disc if they are performed on a table of type"}],
                0,false},
               {text,"\r*disc_copies*"},
               {sep,[{text,[7,111,114,32,116,121,112,101]}],0,false},
               {text,
                [18,42,100,105,115,99,95,111,110,108,121,95,99,111,112,105,
                 101,115,42]},
               {sep,[{text,[1,46]}],0,false},
               {text,"\b*Mnesia*"},
               {sep,
                [{text,
                  "ialso ensures that all replicas of a table are updated if a dirty write operation is performed on a table."}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{text,
                "ÇA dirty operation ensures a certain level of consistency. For example, dirty operations cannot return garbled records. Hence, each individual read or write operation is performed in an atomic manner."}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,{above,{text,[0]},null},null},
         {above,
          {above,
           {sep,
            [{sep,
              [{sep,[{text,"%All dirty functions execute a call to"}],0,false},
               {text,
                [25,42,101,120,105,116,40,123,97,98,111,114,116,101,100,44,32,
                 82,101,97,115,111,110,125,41,42]},
               {sep,
                [{text,
                  [139,111,110,32,102,97,105,108,117,114,101,46,32,69,118,101,
                   110,32,105,102,32,116,104,101,32,102,111,108,108,111,119,
                   105,110,103,32,102,117,110,99,116,105,111,110,115,32,97,
                   114,101,32,101,120,101,99,117,116,101,100,32,105,110,115,
                   105,100,101,32,97,32,116,114,97,110,115,97,99,116,105,111,
                   110,32,110,111,32,108,111,99,107,115,32,97,114,101,32,97,
                   99,113,117,105,114,101,100,46,32,84,104,101,32,102,111,108,
                   108,111,119,105,110,103,32,102,117,110,99,116,105,111,110,
                   115,32,97,114,101,32,97,118,97,105,108,97,98,108,101,58]}],
                0,false}],
              0,false}],
            0,true},
           null},
          null}},
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {above,
                  {above,
                   {above,
                    {above,
                     {above,
                      {sep,
                       [{text,[1,42]},
                        {sep,
                         [{text,
                           "6[mnesia:dirty_read({Tab, Key})](./mnesia#dirty_read/1)"},
                          {sep,
                           [{text,
                             [30,114,101,97,100,115,32,111,110,101,32,111,114,
                              32,109,111,114,101,32,114,101,99,111,114,100,
                              115,32,102,114,111,109]}],
                           0,false},
                          {text,"\b*Mnesia*"},
                          {sep,[{text,[1,46]}],0,false}],
                         0,false}],
                       0,false},
                      {sep,
                       [{text,[1,42]},
                        {sep,
                         [{text,
                           "4[mnesia:dirty_write(Record)](./mnesia#dirty_write/1)"},
                          {sep,
                           [{text,
                             [17,119,114,105,116,101,115,32,116,104,101,32,
                              114,101,99,111,114,100]}],
                           0,false},
                          {text,"\b*Record*"},
                          {sep,[{text,[1,46]}],0,false}],
                         0,false}],
                       0,false}},
                     {sep,
                      [{text,[1,42]},
                       {sep,
                        [{text,
                          ":[mnesia:dirty_delete({Tab, Key})](./mnesia#dirty_delete/1)"},
                         {sep,
                          [{text,"$deletes one or more records with key"}],
                          0,false},
                         {text,[5,42,75,101,121,42]},
                         {sep,[{text,[1,46]}],0,false}],
                        0,false}],
                      0,false}},
                    {sep,
                     [{text,[1,42]},
                      {sep,
                       [{text,
                         "D[mnesia:dirty_delete_object(Record)](./mnesia#dirty_delete_object/1)"},
                        {sep,
                         [{text,
                           "2is the dirty operation alternative to the function"}],
                         0,false},
                        {text,"+[delete_object/1](./mnesia#delete_object/1)"},
                        {sep,[{text,[1,46]}],0,false}],
                       0,false}],
                     0,false}},
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{text,
                               "1[mnesia:dirty_first(Tab)](./mnesia#dirty_first/1)"},
                              {sep,
                               [{text," returns the \"first\" key in table"}],
                               0,false},
                              {text,[5,42,84,97,98,42]},
                              {sep,[{text,[1,46]}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,[{text,"\nRecords in"}],0,false},
                              {text,[5,42,115,101,116,42]},
                              {sep,[{text,[2,111,114]}],0,false},
                              {text,[5,42,98,97,103,42]},
                              {sep,
                               [{text,
                                 " tables are not sorted. However, there is a record order that is unknown to the user. This means that a table can be traversed by this function with the function"}],
                               0,false},
                              {text,
                               ",[mnesia:dirty_next/2](./mnesia#dirty_next/2)"},
                              {sep,[{text,[1,46]}],0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}},
                       {above,
                        {above,{above,{text,[0]},null},null},
                        {above,
                         {above,
                          {sep,
                           [{sep,
                             [{sep,
                               [{text,
                                 "DIf there are no records in the table, this function returns the atom"}],
                               0,false},
                              {text,
                               [17,42,39,36,101,110,100,95,111,102,95,116,97,
                                98,108,101,39,42]},
                              {sep,
                               [{text,
                                 "I. It is not recommended to use this atom as the key for any user records."}],
                               0,false}],
                             0,false}],
                           0,true},
                          null},
                         null}}],
                      0,false}],
                    0,false}},
                  {sep,
                   [{text,[1,42]},
                    {sep,
                     [{above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{text,
                              "4[mnesia:dirty_next(Tab, Key)](./mnesia#dirty_next/2)"},
                             {sep,
                              [{text,
                                [31,114,101,116,117,114,110,115,32,116,104,
                                 101,32,34,110,101,120,116,34,32,107,101,121,
                                 32,105,110,32,116,97,98,108,101]}],
                              0,false},
                             {text,[5,42,84,97,98,42]},
                             {sep,
                              [{text,
                                "£. This function makes it possible to traverse a table and perform some operation on all records in the table. When the end of the table is reached, the special key"}],
                              0,false},
                             {text,
                              [17,42,39,36,101,110,100,95,111,102,95,116,97,
                               98,108,101,39,42]},
                             {sep,
                              [{text,
                                "^is returned. Otherwise, the function returns a key that can be used to read the actual record."}],
                              0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}},
                      {above,
                       {above,{above,{text,[0]},null},null},
                       {above,
                        {above,
                         {sep,
                          [{sep,
                            [{sep,
                              [{text,
                                "}The behavior is undefined if any process performs a write operation on the table while traversing the table with the function"}],
                              0,false},
                             {text,"%[dirty_next/2](./mnesia#dirty_next/2)"},
                             {sep,
                              [{text,
                                [15,84,104,105,115,32,105,115,32,98,101,99,97,
                                 117,115,101]}],
                              0,false},
                             {text,[7,42,119,114,105,116,101,42]},
                             {sep,
                              [{text,
                                [15,111,112,101,114,97,116,105,111,110,115,32,
                                 111,110,32,97]}],
                              0,false},
                             {text,"\b*Mnesia*"},
                             {sep,
                              [{text,
                                " table can lead to internal reorganizations of the table itself. This is an implementation detail, but remember that the dirty functions are low-level functions."}],
                              0,false}],
                            0,false}],
                          0,true},
                         null},
                        null}}],
                     0,false}],
                   0,false}},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{text,"/[mnesia:dirty_last(Tab)](./mnesia#dirty_last/1)"},
                     {sep,
                      [{text,
                        [18,119,111,114,107,115,32,101,120,97,99,116,108,121,
                         32,108,105,107,101]}],
                      0,false},
                     {text,".[mnesia:dirty_first/1](./mnesia#dirty_first/1)"},
                     {sep,
                      [{text,
                        "Cbut returns the last object in Erlang term order for the table type"}],
                      0,false},
                     {text,"\r*ordered_set*"},
                     {sep,
                      [{text,
                        [28,46,32,70,111,114,32,97,108,108,32,111,116,104,101,
                         114,32,116,97,98,108,101,32,116,121,112,101,115,44]}],
                      0,false},
                     {text,
                      [22,42,109,110,101,115,105,97,58,100,105,114,116,121,95,
                       102,105,114,115,116,47,49,42]},
                     {sep,[{text,[3,97,110,100]}],0,false},
                     {text,
                      [21,42,109,110,101,115,105,97,58,100,105,114,116,121,95,
                       108,97,115,116,47,49,42]},
                     {sep,[{text,"\rare synonyms."}],0,false}],
                    0,false}],
                  0,false}},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,
                     "4[mnesia:dirty_prev(Tab, Key)](./mnesia#dirty_prev/2)"},
                    {sep,
                     [{text,
                       [18,119,111,114,107,115,32,101,120,97,99,116,108,121,
                        32,108,105,107,101]}],
                     0,false},
                    {text,
                     [21,42,109,110,101,115,105,97,58,100,105,114,116,121,95,
                      110,101,120,116,47,50,42]},
                    {sep,
                     [{text,
                       "Gbut returns the previous object in Erlang term order for the table type"}],
                     0,false},
                    {text,"\r*ordered_set*"},
                    {sep,
                     [{text,
                       [28,46,32,70,111,114,32,97,108,108,32,111,116,104,101,
                        114,32,116,97,98,108,101,32,116,121,112,101,115,44]}],
                     0,false},
                    {text,
                     [21,42,109,110,101,115,105,97,58,100,105,114,116,121,95,
                      110,101,120,116,47,50,42]},
                    {sep,[{text,[3,97,110,100]}],0,false},
                    {text,
                     [21,42,109,110,101,115,105,97,58,100,105,114,116,121,95,
                      112,114,101,118,47,50,42]},
                    {sep,[{text,"\rare synonyms."}],0,false}],
                   0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{text,
                           "5[mnesia:dirty_slot(Tab, Slot)](./mnesia#dirty_slot/2)"},
                          {sep,
                           [{text,
                             "4returns the list of records that are associated with"}],
                           0,false},
                          {text,[6,42,83,108,111,116,42]},
                          {sep,
                           [{text,
                             "Rin a table. It can be used to traverse a table in a manner similar to the function"}],
                           0,false},
                          {text,
                           [14,42,100,105,114,116,121,95,110,101,120,116,47,
                            50,42]},
                          {sep,
                           [{text,
                             "^. A table has a number of slots that range from zero to some unknown upper bound. The function"}],
                           0,false},
                          {text,
                           [14,42,100,105,114,116,121,95,115,108,111,116,47,
                            50,42]},
                          {sep,
                           [{text,
                             [24,114,101,116,117,114,110,115,32,116,104,101,
                              32,115,112,101,99,105,97,108,32,97,116,111,
                              109]}],
                           0,false},
                          {text,
                           [17,42,39,36,101,110,100,95,111,102,95,116,97,98,
                            108,101,39,42]},
                          {sep,
                           [{text,"%when the end of the table is reached."}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}},
                   {above,
                    {above,{above,{text,[0]},null},null},
                    {above,
                     {above,
                      {sep,
                       [{sep,
                         [{sep,
                           [{text,
                             "iThe behavior of this function is undefined if the table is written on while being traversed. The function"}],
                           0,false},
                          {text,
                           "9[mnesia:read_lock_table(Tab)](./mnesia#read_lock_table/1)"},
                          {sep,
                           [{text,
                             "^can be used to ensure that no transaction-protected writes are performed during the iteration."}],
                           0,false}],
                         0,false}],
                       0,true},
                      null},
                     null}}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "N[mnesia:dirty_update_counter({Tab,Key}, Val)](./mnesia#dirty_update_counter/2)"},
                         {sep,
                          [{text,
                            "d. Counters are positive integers with a value greater than or equal to zero. Updating a counter adds"}],
                          0,false},
                         {text,[5,42,86,97,108,42]},
                         {sep,
                          [{text,
                            [21,97,110,100,32,116,104,101,32,99,111,117,110,
                             116,101,114,32,119,104,101,114,101]}],
                          0,false},
                         {text,[5,42,86,97,108,42]},
                         {sep,
                          [{text,"\"is a positive or negative integer."}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,"\b*Mnesia*"},
                         {sep,
                          [{text,
                            "<has no special counter records. However, records of the form"}],
                          0,false},
                         {text,
                          [25,42,123,84,97,98,78,97,109,101,44,32,75,101,121,
                           44,32,73,110,116,101,103,101,114,125,42]},
                         {sep,
                          [{text,
                            "/can be used as counters, and can be persistent."}],
                          0,false}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          "BTransaction-protected updates of counter records are not possible."}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {above,{above,{text,[0]},null},null},
                   {above,
                    {above,
                     {sep,
                      [{sep,
                        [{text,
                          [144,84,104,101,114,101,32,97,114,101,32,116,119,
                           111,32,115,105,103,110,105,102,105,99,97,110,116,
                           32,100,105,102,102,101,114,101,110,99,101,115,32,
                           119,104,101,110,32,117,115,105,110,103,32,116,104,
                           105,115,32,102,117,110,99,116,105,111,110,32,105,
                           110,115,116,101,97,100,32,111,102,32,114,101,97,
                           100,105,110,103,32,116,104,101,32,114,101,99,111,
                           114,100,44,32,112,101,114,102,111,114,109,105,110,
                           103,32,116,104,101,32,97,114,105,116,104,109,101,
                           116,105,99,44,32,97,110,100,32,119,114,105,116,105,
                           110,103,32,116,104,101,32,114,101,99,111,114,100,
                           58]}],
                        0,false}],
                      0,true},
                     null},
                    null}},
                  {above,
                   {sep,
                    [{text,[1,42]},
                     {text,
                      [26,73,116,32,105,115,32,109,117,99,104,32,109,111,114,
                       101,32,101,102,102,105,99,105,101,110,116,46]}],
                    0,false},
                   {sep,
                    [{text,[1,42]},
                     {sep,
                      [{sep,[{text,"\vThe funcion"}],0,false},
                       {text,
                        "9[dirty_update_counter/2](./mnesia#dirty_update_counter/2)"},
                       {sep,
                        [{text,
                          "¨is performed as an atomic operation although it is not protected by a transaction. Therfore no table update is lost if two processes simultaneously execute the function"}],
                        0,false},
                       {text,
                        [24,42,100,105,114,116,121,95,117,112,100,97,116,101,
                         95,99,111,117,110,116,101,114,47,50,42]},
                       {sep,[{text,[1,46]}],0,false}],
                      0,false}],
                    0,false}}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,
                  "?[mnesia:dirty_match_object(Pat)](./mnesia#dirty_match_object/2)"},
                 {sep,
                  [{text,
                    [26,105,115,32,116,104,101,32,100,105,114,116,121,32,101,
                     113,117,105,118,97,108,101,110,116,32,111,102]}],
                  0,false},
                 {text,"0[mnesia:match_object/1](./mnesia#match_object/1)"},
                 {sep,[{text,[1,46]}],0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,
                 "8[mnesia:dirty_select(Tab, Pat)](./mnesia#dirty_select/2)"},
                {sep,
                 [{text,
                   [26,105,115,32,116,104,101,32,100,105,114,116,121,32,101,
                    113,117,105,118,97,108,101,110,116,32,111,102]}],
                 0,false},
                {text,"$[mnesia:select/2](./mnesia#select/2)"},
                {sep,[{text,[1,46]}],0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},
             {sep,
              [{text,
                "P[mnesia:dirty_index_match_object(Pat, Pos)](./mnesia#dirty_index_match_object/2)"},
               {sep,
                [{text,
                  [26,105,115,32,116,104,101,32,100,105,114,116,121,32,101,
                   113,117,105,118,97,108,101,110,116,32,111,102]}],
                0,false},
               {text,
                "<[mnesia:index_match_object/2](./mnesia#index_match_object/2)"},
               {sep,[{text,[1,46]}],0,false}],
              0,false}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               "N[mnesia:dirty_index_read(Tab, SecondaryKey, Pos)](./mnesia#dirty_index_read/3)"},
              {sep,
               [{text,
                 [26,105,115,32,116,104,101,32,100,105,114,116,121,32,101,113,
                  117,105,118,97,108,101,110,116,32,111,102]}],
               0,false},
              {text,",[mnesia:index_read/3](./mnesia#index_read/3)"},
              {sep,[{text,[1,46]}],0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {sep,
            [{text,"7[mnesia:dirty_all_keys(Tab)](./mnesia#dirty_all_keys/1)"},
             {sep,
              [{text,
                [26,105,115,32,116,104,101,32,100,105,114,116,121,32,101,113,
                 117,105,118,97,108,101,110,116,32,111,102]}],
              0,false},
             {text,"([mnesia:all_keys/1](./mnesia#all_keys/1)"},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,false}}],
       0,false}},
     {sep,
      [{text,";<a name=\"recordnames_tablenames\">recordnames_tablenames</a>"},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,{text,"\"## Record Names versus Table Names"},null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,[{text,[2,73,110]}],0,false},
              {text,"\b*Mnesia*"},
              {sep,
               [{text,
                 [305,44,32,97,108,108,32,114,101,99,111,114,100,115,32,105,
                  110,32,97,32,116,97,98,108,101,32,109,117,115,116,32,104,97,
                  118,101,32,116,104,101,32,115,97,109,101,32,110,97,109,101,
                  46,32,65,108,108,32,116,104,101,32,114,101,99,111,114,100,
                  115,32,109,117,115,116,32,98,101,32,105,110,115,116,97,110,
                  99,101,115,32,111,102,32,116,104,101,32,115,97,109,101,32,
                  114,101,99,111,114,100,32,116,121,112,101,46,32,84,104,101,
                  32,114,101,99,111,114,100,32,110,97,109,101,44,32,104,111,
                  119,101,118,101,114,44,32,100,111,101,115,32,110,111,116,32,
                  110,101,99,101,115,115,97,114,105,108,121,32,104,97,118,101,
                  32,116,111,32,98,101,32,116,104,101,32,115,97,109,101,32,97,
                  115,32,116,104,101,32,116,97,98,108,101,32,110,97,109,101,
                  44,32,97,108,116,104,111,117,103,104,32,116,104,105,115,32,
                  105,115,32,116,104,101,32,99,97,115,101,32,105,110,32,109,
                  111,115,116,32,111,102,32,116,104,101,32,101,120,97,109,112,
                  108,101,115,32,105,110,32,116,104,105,115,32,85,115,101,114,
                  39,115,32,71,117,105,100,101,46,32,73,102,32,97,32,116,97,
                  98,108,101,32,105,115,32,99,114,101,97,116,101,100,32,119,
                  105,116,104,111,117,116,32,112,114,111,112,101,114,116,
                  121]}],
               0,false},
              {text,"\r*record_name*"},
              {sep,
               [{text,
                 "\\, the following code ensures that all records in the tables have the same name as the table:"}],
               0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,"*\n      mnesia:create_table(subscriber, [])"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "ÃHowever, if the table is created with an explicit record name as argument, as shown in the following example, subscriber records can be stored in both of the tables regardless of the table names:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [146,10,32,32,32,32,32,32,84,97,98,68,101,102,32,61,32,91,123,
                114,101,99,111,114,100,95,110,97,109,101,44,32,115,117,98,115,
                99,114,105,98,101,114,125,93,44,10,32,32,32,32,32,32,109,110,
                101,115,105,97,58,99,114,101,97,116,101,95,116,97,98,108,101,
                40,109,121,95,115,117,98,115,99,114,105,98,101,114,44,32,84,
                97,98,68,101,102,41,44,10,32,32,32,32,32,32,109,110,101,115,
                105,97,58,99,114,101,97,116,101,95,116,97,98,108,101,40,121,
                111,117,114,95,115,117,98,115,99,114,105,98,101,114,44,32,84,
                97,98,68,101,102,41,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{sep,
               [{text,
                 "¥To access such tables, simplified access functions (as described earlier) cannot be used. For example, writing a subscriber record into a table requires the function"}],
               0,false},
              {text,"\"[mnesia:write/3](./mnesia#write/3)"},
              {sep,[{text,"#instead of the simplified functions"}],0,false},
              {text,"\"[mnesia:write/1](./mnesia#write/1)"},
              {sep,[{text,[3,97,110,100]}],0,false},
              {text,"&[mnesia:s_write/1](./mnesia#s_write/1)"},
              {sep,[{text,[1,58]}],0,false}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               "®\n      mnesia:write(subscriber, #subscriber{}, write)\n      mnesia:write(my_subscriber, #subscriber{}, sticky_write)\n      mnesia:write(your_subscriber, #subscriber{}, write)"}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {sep,
           [{sep,
             [{text,
               "¡The following simple code illustrates the relationship between the simplified access functions used in most of the examples and their more flexible counterparts:"}],
             0,false}],
           0,true},
          null},
         null}},
       {above,
        {above,{above,{text,[0]},null},null},
        {above,
         {above,
          {above,
           {above,
            {text,[3,96,96,96]},
            {sep,
             [{text,
               [1969,10,32,32,32,32,32,32,109,110,101,115,105,97,58,100,105,
                114,116,121,95,119,114,105,116,101,40,82,101,99,111,114,100,
                41,32,45,62,10,32,32,32,32,32,32,32,32,84,97,98,32,61,32,101,
                108,101,109,101,110,116,40,49,44,32,82,101,99,111,114,100,41,
                44,10,32,32,32,32,32,32,32,32,109,110,101,115,105,97,58,100,
                105,114,116,121,95,119,114,105,116,101,40,84,97,98,44,32,82,
                101,99,111,114,100,41,46,10,32,32,32,32,32,32,10,32,32,32,32,
                32,32,109,110,101,115,105,97,58,100,105,114,116,121,95,100,
                101,108,101,116,101,40,123,84,97,98,44,32,75,101,121,125,41,
                32,45,62,10,32,32,32,32,32,32,32,32,109,110,101,115,105,97,58,
                100,105,114,116,121,95,100,101,108,101,116,101,40,84,97,98,44,
                32,75,101,121,41,46,10,32,32,32,32,32,32,10,32,32,32,32,32,32,
                109,110,101,115,105,97,58,100,105,114,116,121,95,100,101,108,
                101,116,101,95,111,98,106,101,99,116,40,82,101,99,111,114,100,
                41,32,45,62,10,32,32,32,32,32,32,32,32,84,97,98,32,61,32,101,
                108,101,109,101,110,116,40,49,44,32,82,101,99,111,114,100,41,
                44,10,32,32,32,32,32,32,32,32,109,110,101,115,105,97,58,100,
                105,114,116,121,95,100,101,108,101,116,101,95,111,98,106,101,
                99,116,40,84,97,98,44,32,82,101,99,111,114,100,41,32,10,32,32,
                32,32,32,32,10,32,32,32,32,32,32,109,110,101,115,105,97,58,
                100,105,114,116,121,95,117,112,100,97,116,101,95,99,111,117,
                110,116,101,114,40,123,84,97,98,44,32,75,101,121,125,44,32,73,
                110,99,114,41,32,45,62,10,32,32,32,32,32,32,32,32,109,110,101,
                115,105,97,58,100,105,114,116,121,95,117,112,100,97,116,101,
                95,99,111,117,110,116,101,114,40,84,97,98,44,32,75,101,121,44,
                32,73,110,99,114,41,46,10,32,32,32,32,32,32,10,32,32,32,32,32,
                32,109,110,101,115,105,97,58,100,105,114,116,121,95,114,101,
                97,100,40,123,84,97,98,44,32,75,101,121,125,41,32,45,62,10,32,
                32,32,32,32,32,32,32,84,97,98,32,61,32,101,108,101,109,101,
                110,116,40,49,44,32,82,101,99,111,114,100,41,44,10,32,32,32,
                32,32,32,32,32,109,110,101,115,105,97,58,100,105,114,116,121,
                95,114,101,97,100,40,84,97,98,44,32,75,101,121,41,46,10,32,32,
                32,32,32,32,10,32,32,32,32,32,32,109,110,101,115,105,97,58,
                100,105,114,116,121,95,109,97,116,99,104,95,111,98,106,101,99,
                116,40,80,97,116,116,101,114,110,41,32,45,62,10,32,32,32,32,
                32,32,32,32,84,97,98,32,61,32,101,108,101,109,101,110,116,40,
                49,44,32,80,97,116,116,101,114,110,41,44,10,32,32,32,32,32,32,
                32,32,109,110,101,115,105,97,58,100,105,114,116,121,95,109,97,
                116,99,104,95,111,98,106,101,99,116,40,84,97,98,44,32,80,97,
                116,116,101,114,110,41,46,10,32,32,32,32,32,32,10,32,32,32,32,
                32,32,109,110,101,115,105,97,58,100,105,114,116,121,95,105,
                110,100,101,120,95,109,97,116,99,104,95,111,98,106,101,99,116,
                40,80,97,116,116,101,114,110,44,32,65,116,116,114,41,32,10,32,
                32,32,32,32,32,32,32,84,97,98,32,61,32,101,108,101,109,101,
                110,116,40,49,44,32,80,97,116,116,101,114,110,41,44,10,32,32,
                32,32,32,32,32,32,109,110,101,115,105,97,58,100,105,114,116,
                121,95,105,110,100,101,120,95,109,97,116,99,104,95,111,98,106,
                101,99,116,40,84,97,98,44,32,80,97,116,116,101,114,110,44,32,
                65,116,116,114,41,46,10,32,32,32,32,32,32,10,32,32,32,32,32,
                32,109,110,101,115,105,97,58,119,114,105,116,101,40,82,101,99,
                111,114,100,41,32,45,62,10,32,32,32,32,32,32,32,32,84,97,98,
                32,61,32,101,108,101,109,101,110,116,40,49,44,32,82,101,99,
                111,114,100,41,44,10,32,32,32,32,32,32,32,32,109,110,101,115,
                105,97,58,119,114,105,116,101,40,84,97,98,44,32,82,101,99,111,
                114,100,44,32,119,114,105,116,101,41,46,10,32,32,32,32,32,32,
                10,32,32,32,32,32,32,109,110,101,115,105,97,58,115,95,119,114,
                105,116,101,40,82,101,99,111,114,100,41,32,45,62,10,32,32,32,
                32,32,32,32,32,84,97,98,32,61,32,101,108,101,109,101,110,116,
                40,49,44,32,82,101,99,111,114,100,41,44,10,32,32,32,32,32,32,
                32,32,109,110,101,115,105,97,58,119,114,105,116,101,40,84,97,
                98,44,32,82,101,99,111,114,100,44,32,115,116,105,99,107,121,
                95,119,114,105,116,101,41,46,10,32,32,32,32,32,32,10,32,32,32,
                32,32,32,109,110,101,115,105,97,58,100,101,108,101,116,101,40,
                123,84,97,98,44,32,75,101,121,125,41,32,45,62,10,32,32,32,32,
                32,32,32,32,109,110,101,115,105,97,58,100,101,108,101,116,101,
                40,84,97,98,44,32,75,101,121,44,32,119,114,105,116,101,41,46,
                10,32,32,32,32,32,32,10,32,32,32,32,32,32,109,110,101,115,105,
                97,58,115,95,100,101,108,101,116,101,40,123,84,97,98,44,32,75,
                101,121,125,41,32,45,62,10,32,32,32,32,32,32,32,32,109,110,
                101,115,105,97,58,100,101,108,101,116,101,40,84,97,98,44,32,
                75,101,121,44,32,115,116,105,99,107,121,95,119,114,105,116,
                101,41,46,10,32,32,32,32,32,32,10,32,32,32,32,32,32,109,110,
                101,115,105,97,58,100,101,108,101,116,101,95,111,98,106,101,
                99,116,40,82,101,99,111,114,100,41,32,45,62,10,32,32,32,32,32,
                32,32,32,84,97,98,32,61,32,101,108,101,109,101,110,116,40,49,
                44,32,82,101,99,111,114,100,41,44,10,32,32,32,32,32,32,32,32,
                109,110,101,115,105,97,58,100,101,108,101,116,101,95,111,98,
                106,101,99,116,40,84,97,98,44,32,82,101,99,111,114,100,44,32,
                119,114,105,116,101,41,46,10,32,32,32,32,32,32,10,32,32,32,32,
                32,32,109,110,101,115,105,97,58,115,95,100,101,108,101,116,
                101,95,111,98,106,101,99,116,40,82,101,99,111,114,100,41,32,
                45,62,10,32,32,32,32,32,32,32,32,84,97,98,32,61,32,101,108,
                101,109,101,110,116,40,49,44,32,82,101,99,111,114,100,41,44,
                10,32,32,32,32,32,32,32,32,109,110,101,115,105,97,58,100,101,
                108,101,116,101,95,111,98,106,101,99,116,40,84,97,98,44,32,82,
                101,99,111,114,100,44,32,115,116,105,99,107,121,95,119,114,
                105,116,101,41,46,10,32,32,32,32,32,32,10,32,32,32,32,32,32,
                109,110,101,115,105,97,58,114,101,97,100,40,123,84,97,98,44,
                32,75,101,121,125,41,32,45,62,10,32,32,32,32,32,32,32,32,109,
                110,101,115,105,97,58,114,101,97,100,40,84,97,98,44,32,75,101,
                121,44,32,114,101,97,100,41,46,10,32,32,32,32,32,32,10,32,32,
                32,32,32,32,109,110,101,115,105,97,58,119,114,101,97,100,40,
                123,84,97,98,44,32,75,101,121,125,41,32,45,62,10,32,32,32,32,
                32,32,32,32,109,110,101,115,105,97,58,114,101,97,100,40,84,97,
                98,44,32,75,101,121,44,32,119,114,105,116,101,41,46,10,32,32,
                32,32,32,32,10,32,32,32,32,32,32,109,110,101,115,105,97,58,
                109,97,116,99,104,95,111,98,106,101,99,116,40,80,97,116,116,
                101,114,110,41,32,45,62,10,32,32,32,32,32,32,32,32,84,97,98,
                32,61,32,101,108,101,109,101,110,116,40,49,44,32,80,97,116,
                116,101,114,110,41,44,10,32,32,32,32,32,32,32,32,109,110,101,
                115,105,97,58,109,97,116,99,104,95,111,98,106,101,99,116,40,
                84,97,98,44,32,80,97,116,116,101,114,110,44,32,114,101,97,100,
                41,46,10,32,32,32,32,32,32,10,32,32,32,32,32,32,109,110,101,
                115,105,97,58,105,110,100,101,120,95,109,97,116,99,104,95,111,
                98,106,101,99,116,40,80,97,116,116,101,114,110,44,32,65,116,
                116,114,41,32,45,62,10,32,32,32,32,32,32,32,32,84,97,98,32,61,
                32,101,108,101,109,101,110,116,40,49,44,32,80,97,116,116,101,
                114,110,41,44,10,32,32,32,32,32,32,32,32,109,110,101,115,105,
                97,58,105,110,100,101,120,95,109,97,116,99,104,95,111,98,106,
                101,99,116,40,84,97,98,44,32,80,97,116,116,101,114,110,44,32,
                65,116,116,114,44,32,114,101,97,100,41,46]}],
             0,true}},
           {text,[3,96,96,96]}},
          null},
         null}}],
      0,false}},
    {sep,
     [{above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,{text,"/## Activity Concept and Various Access Contexts"},null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [148,65,115,32,112,114,101,118,105,111,117,115,108,121,32,100,
                 101,115,99,114,105,98,101,100,44,32,97,32,70,117,110,99,116,
                 105,111,110,97,108,32,79,98,106,101,99,116,32,40,70,117,110,
                 41,32,112,101,114,102,111,114,109,105,110,103,32,116,97,98,
                 108,101,32,97,99,99,101,115,115,32,111,112,101,114,97,116,
                 105,111,110,115,44,32,97,115,32,108,105,115,116,101,100,32,
                 104,101,114,101,44,32,99,97,110,32,98,101,32,112,97,115,115,
                 101,100,32,111,110,32,97,115,32,97,114,103,117,109,101,110,
                 116,115,32,116,111,32,116,104,101,32,102,117,110,99,116,105,
                 111,110]}],
              0,false},
             {text,"2[mnesia:transaction/1,2,3](./mnesia#transaction/2)"},
             {sep,[{text,[1,58]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {above,
          {above,
           {above,
            {above,
             {above,
              {above,
               {above,
                {above,
                 {sep,
                  [{text,[1,42]},
                   {text,
                    "7[mnesia:write/3 (write/1, s_write/1)](./mnesia#write/3)"}],
                  0,false},
                 {sep,
                  [{text,[1,42]},
                   {sep,
                    [{text,"$[mnesia:delete/3](./mnesia#delete/3)"},
                     {sep,[{text,[1,40]}],0,false},
                     {text,"$[mnesia:delete/1](./mnesia#delete/1)"},
                     {sep,[{text,[1,44]}],0,false},
                     {text,"([mnesia:s_delete/1](./mnesia#s_delete/1)"},
                     {sep,[{text,[1,41]}],0,false}],
                    0,false}],
                  0,false}},
                {sep,
                 [{text,[1,42]},
                  {sep,
                   [{text,
                     "2[mnesia:delete_object/3](./mnesia#delete_object/3)"},
                    {sep,[{text,[1,40]}],0,false},
                    {text,
                     "2[mnesia:delete_object/1](./mnesia#delete_object/1)"},
                    {sep,[{text,[1,44]}],0,false},
                    {text,
                     "6[mnesia:s_delete_object/1](./mnesia#s_delete_object/1)"},
                    {sep,[{text,[1,41]}],0,false}],
                   0,false}],
                 0,false}},
               {sep,
                [{text,[1,42]},
                 {sep,
                  [{text," [mnesia:read/3](./mnesia#read/3)"},
                   {sep,[{text,[1,40]}],0,false},
                   {text," [mnesia:read/1](./mnesia#read/1)"},
                   {sep,[{text,[1,44]}],0,false},
                   {text,"\"[mnesia:wread/1](./mnesia#wread/1)"},
                   {sep,[{text,[1,41]}],0,false}],
                  0,false}],
                0,false}},
              {sep,
               [{text,[1,42]},
                {sep,
                 [{text,"0[mnesia:match_object/2](./mnesia#match_object/3)"},
                  {sep,[{text,[1,40]}],0,false},
                  {text,"0[mnesia:match_object/1](./mnesia#match_object/1)"},
                  {sep,[{text,[1,41]}],0,false}],
                 0,false}],
               0,false}},
             {sep,
              [{text,[1,42]},
               {sep,
                [{text,"$[mnesia:select/3](./mnesia#select/2)"},
                 {sep,[{text,[1,40]}],0,false},
                 {text,"$[mnesia:select/2](./mnesia#select/2)"},
                 {sep,[{text,[1,41]}],0,false}],
                0,false}],
              0,false}},
            {sep,
             [{text,[1,42]},
              {sep,
               [{text,"\"[mnesia:foldl/3](./mnesia#foldl/3)"},
                {sep,[{text,[1,40]}],0,false},
                {text,
                 [16,42,109,110,101,115,105,97,58,102,111,108,100,108,47,52,
                  42]},
                {sep,[{text,[1,44]}],0,false},
                {text,"\"[mnesia:foldr/3](./mnesia#foldr/3)"},
                {sep,[{text,[1,44]}],0,false},
                {text,
                 [16,42,109,110,101,115,105,97,58,102,111,108,100,114,47,52,
                  42]},
                {sep,[{text,[1,41]}],0,false}],
               0,false}],
             0,false}},
           {sep,
            [{text,[1,42]},{text,"([mnesia:all_keys/1](./mnesia#all_keys/1)"}],
            0,false}},
          {sep,
           [{text,[1,42]},
            {sep,
             [{text,
               "<[mnesia:index_match_object/4](./mnesia#index_match_object/4)"},
              {sep,[{text,[1,40]}],0,false},
              {text,
               "<[mnesia:index_match_object/2](./mnesia#index_match_object/2)"},
              {sep,[{text,[1,41]}],0,false}],
             0,false}],
           0,false}},
         {sep,
          [{text,[1,42]},
           {text,",[mnesia:index_read/3](./mnesia#index_read/3)"}],
          0,false}},
        {sep,
         [{text,[1,42]},
          {sep,
           [{text," [mnesia:lock/2](./mnesia#lock/2)"},
            {sep,[{text,[1,40]}],0,false},
            {text,"6[mnesia:read_lock_table/1](./mnesia#read_lock_table/1)"},
            {sep,[{text,[1,44]}],0,false},
            {text,"8[mnesia:write_lock_table/1](./mnesia#write_lock_table/1)"},
            {sep,[{text,[1,41]}],0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},{text,",[mnesia:table_info/2](./mnesia#table_info/2)"}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "òThese functions are performed in a transaction context involving mechanisms, such as locking, logging, replication, checkpoints, subscriptions, and commit protocols. However, the same function can also be evaluated in other activity contexts."}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              "?The following activity access contexts are currently supported:"}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {above,
         {above,
          {sep,[{text,[1,42]},{text,"\r*transaction*"}],0,false},
          {sep,
           [{text,[1,42]},
            {text,
             [18,42,115,121,110,99,95,116,114,97,110,115,97,99,116,105,111,
              110,42]}],
           0,false}},
         {sep,[{text,[1,42]},{text,"\r*async_dirty*"}],0,false}},
        {sep,[{text,[1,42]},{text,"\f*sync_dirty*"}],0,false}},
       {sep,[{text,[1,42]},{text,[5,42,101,116,115,42]}],0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "5By passing the same \"fun\" as argument to the function"}],
              0,false},
             {text,
              "D[mnesia:sync_transaction(Fun [, Args])](./mnesia#sync_transaction/3)"},
             {sep,
              [{text,
                "£it is performed in synced transaction context. Synced transactions wait until all active replicas has committed the transaction (to disc) before returning from the"}],
              0,false},
             {text,
              [25,42,109,110,101,115,105,97,58,115,121,110,99,95,116,114,97,
               110,115,97,99,116,105,111,110,42]},
             {sep,[{text,"\vcall. Using"}],0,false},
             {text,
              [18,42,115,121,110,99,95,116,114,97,110,115,97,99,116,105,111,
               110,42]},
             {sep,[{text,"!is useful in the following cases:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,
        {sep,
         [{text,[1,42]},
          {text,
           "ÀWhen an application executes on several nodes and wants to be sure that the update is performed on the remote nodes before a remote process is spawned or a message is sent to a remote process."}],
         0,false},
        {sep,
         [{text,[1,42]},
          {sep,
           [{sep,
             [{text,
               "NWhen a combining transaction writes with \"dirty_reads\", that is, the functions"}],
             0,false},
            {text,
             [20,42,100,105,114,116,121,95,109,97,116,99,104,95,111,98,106,
              101,99,116,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,"\f*dirty_read*"},
            {sep,[{text,[1,44]}],0,false},
            {text,
             [18,42,100,105,114,116,121,95,105,110,100,101,120,95,114,101,97,
              100,42]},
            {sep,[{text,[1,44]}],0,false},
            {text,[14,42,100,105,114,116,121,95,115,101,108,101,99,116,42]},
            {sep,[{text,"\f, and so on."}],0,false}],
           0,false}],
         0,false}},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,
            [{text,
              "MWhen an application performs frequent or voluminous updates that can overload"}],
            0,false},
           {text,"\b*Mnesia*"},
           {sep,
            [{text,
              [15,111,110,32,111,116,104,101,114,32,110,111,100,101,115,46]}],
            0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "5By passing the same \"fun\" as argument to the function"}],
              0,false},
             {text,
              ":[mnesia:async_dirty(Fun [, Args])](./mnesia#async_dirty/2)"},
             {sep,
              [{text,
                [467,44,32,105,116,32,105,115,32,112,101,114,102,111,114,109,
                 101,100,32,105,110,32,100,105,114,116,121,32,99,111,110,116,
                 101,120,116,46,32,84,104,101,32,102,117,110,99,116,105,111,
                 110,32,99,97,108,108,115,32,97,114,101,32,109,97,112,112,101,
                 100,32,116,111,32,116,104,101,32,99,111,114,114,101,115,112,
                 111,110,100,105,110,103,32,100,105,114,116,121,32,102,117,
                 110,99,116,105,111,110,115,46,32,84,104,105,115,32,115,116,
                 105,108,108,32,105,110,118,111,108,118,101,115,32,108,111,
                 103,103,105,110,103,44,32,114,101,112,108,105,99,97,116,105,
                 111,110,44,32,97,110,100,32,115,117,98,115,99,114,105,112,
                 116,105,111,110,115,32,98,117,116,32,110,111,32,108,111,99,
                 107,105,110,103,44,32,108,111,99,97,108,32,116,114,97,110,
                 115,97,99,116,105,111,110,32,115,116,111,114,97,103,101,44,
                 32,111,114,32,99,111,109,109,105,116,32,112,114,111,116,111,
                 99,111,108,115,32,97,114,101,32,105,110,118,111,108,118,101,
                 100,46,32,67,104,101,99,107,112,111,105,110,116,32,114,101,
                 116,97,105,110,101,114,115,32,97,114,101,32,117,112,100,97,
                 116,101,100,32,98,117,116,32,117,112,100,97,116,101,100,32,
                 34,100,105,114,116,121,34,46,32,84,104,117,115,44,32,116,104,
                 101,121,32,97,114,101,32,117,112,100,97,116,101,100,32,97,
                 115,121,110,99,104,114,111,110,111,117,115,108,121,46,32,84,
                 104,101,32,102,117,110,99,116,105,111,110,115,32,119,97,105,
                 116,32,102,111,114,32,116,104,101,32,111,112,101,114,97,116,
                 105,111,110,32,116,111,32,98,101,32,112,101,114,102,111,114,
                 109,101,100,32,111,110,32,111,110,101,32,110,111,100,101,32,
                 98,117,116,32,110,111,116,32,116,104,101,32,111,116,104,101,
                 114,115,46,32,73,102,32,116,104,101,32,116,97,98,108,101,32,
                 114,101,115,105,100,101,115,32,108,111,99,97,108,108,121,44,
                 32,110,111,32,119,97,105,116,105,110,103,32,111,99,99,117,
                 114,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "8By passing the same \"fun\" as an argument to the function"}],
              0,false},
             {text,
              "8[mnesia:sync_dirty(Fun [, Args])](./mnesia#sync_dirty/2)"},
             {sep,
              [{text,
                "<, it is performed in almost the same context as the function"}],
              0,false},
             {text,"0[mnesia:async_dirty/1,2](./mnesia#async_dirty/2)"},
             {sep,
              [{text,
                [147,46,32,84,104,101,32,100,105,102,102,101,114,101,110,99,
                 101,32,105,115,32,116,104,97,116,32,116,104,101,32,111,112,
                 101,114,97,116,105,111,110,115,32,97,114,101,32,112,101,114,
                 102,111,114,109,101,100,32,115,121,110,99,104,114,111,110,
                 111,117,115,108,121,46,32,84,104,101,32,99,97,108,108,101,
                 114,32,119,97,105,116,115,32,102,111,114,32,116,104,101,32,
                 117,112,100,97,116,101,115,32,116,111,32,98,101,32,112,101,
                 114,102,111,114,109,101,100,32,111,110,32,97,108,108,32,97,
                 99,116,105,118,101,32,114,101,112,108,105,99,97,115,46,32,85,
                 115,105,110,103]}],
              0,false},
             {text,
              [23,42,109,110,101,115,105,97,58,115,121,110,99,95,100,105,114,
               116,121,47,49,44,50,42]},
             {sep,[{text,"!is useful in the following cases:"}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {sep,
        [{text,[1,42]},
         {text,
          "ÀWhen an application executes on several nodes and wants to be sure that the update is performed on the remote nodes before a remote process is spawned or a message is sent to a remote process."}],
        0,false},
       {sep,
        [{text,[1,42]},
         {sep,
          [{sep,
            [{text,
              "MWhen an application performs frequent or voluminous updates that can overload"}],
            0,false},
           {text,"\b*Mnesia*"},
           {sep,[{text,"\ron the nodes."}],0,false}],
          0,false}],
        0,false}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "HTo check if your code is executed within a transaction, use the function"}],
              0,false},
             {text,"4[mnesia:is_transaction/0](./mnesia#is_transaction/0)"},
             {sep,[{text,"\f. It returns"}],0,false},
             {text,[6,42,116,114,117,101,42]},
             {sep,
              [{text,"3when called inside a transaction context, otherwise"}],
              0,false},
             {text,[7,42,102,97,108,115,101,42]},
             {sep,[{text,[1,46]}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,"\b*Mnesia*"},
             {sep,
              [{text,
                [24,116,97,98,108,101,115,32,119,105,116,104,32,115,116,111,
                 114,97,103,101,32,116,121,112,101]}],
              0,false},
             {text,"\f*RAM_copies*"},
             {sep,[{text,[3,97,110,100]}],0,false},
             {text,"\r*disc_copies*"},
             {sep,
              [{text,
                [29,97,114,101,32,105,109,112,108,101,109,101,110,116,101,100,
                 32,105,110,116,101,114,110,97,108,108,121,32,97,115]}],
              0,false},
             {text,[5,42,101,116,115,42]},
             {sep,
              [{text,
                "Õtables. Applications can access the these tables directly. This is only recommended if all options have been weighed and the possible outcomes are understood. By passing the earlier mentioned \"fun\" to the function"}],
              0,false},
             {text,"*[mnesia:ets(Fun [, Args])](./mnesia#ets/2)"},
             {sep,
              [{text,
                "Z, it is performed but in a raw context. The operations are performed directly on the local"}],
              0,false},
             {text,[5,42,101,116,115,42]},
             {sep,
              [{text,"/tables, assuming that the local storage type is"}],
              0,false},
             {text,"\f*RAM_copies*"},
             {sep,
              [{text,"4and that the table is not replicated on other nodes."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                [154,83,117,98,115,99,114,105,112,116,105,111,110,115,32,97,
                 114,101,32,110,111,116,32,116,114,105,103,103,101,114,101,
                 100,32,97,110,100,32,110,111,32,99,104,101,99,107,112,111,
                 105,110,116,115,32,97,114,101,32,117,112,100,97,116,101,100,
                 44,32,98,117,116,32,116,104,105,115,32,111,112,101,114,97,
                 116,105,111,110,32,105,115,32,98,108,105,110,100,105,110,103,
                 108,121,32,102,97,115,116,46,32,68,105,115,99,32,114,101,115,
                 105,100,101,110,116,32,116,97,98,108,101,115,32,97,114,101,
                 32,110,111,116,32,116,111,32,98,101,32,117,112,100,97,116,
                 101,100,32,119,105,116,104,32,116,104,101]}],
              0,false},
             {text,[5,42,101,116,115,42]},
             {sep,[{text,"%function, as the disc is not updated."}],0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "9The Fun can also be passed as an argument to the function"}],
              0,false},
             {text,",[mnesia:activity/2,3,4](./mnesia#activity-4)"},
             {sep,
              [{text,
                "¾, which enables use of customized activity access callback modules. It can either be obtained directly by stating the module name as argument, or implicitly by use of configuration parameter"}],
              0,false},
             {text,[15,42,97,99,99,101,115,115,95,109,111,100,117,108,101,42]},
             {sep,
              [{text,
                [154,46,32,65,32,99,117,115,116,111,109,105,122,101,100,32,99,
                 97,108,108,98,97,99,107,32,109,111,100,117,108,101,32,99,97,
                 110,32,98,101,32,117,115,101,100,32,102,111,114,32,115,101,
                 118,101,114,97,108,32,112,117,114,112,111,115,101,115,44,32,
                 115,117,99,104,32,97,115,32,112,114,111,118,105,100,105,110,
                 103,32,116,114,105,103,103,101,114,115,44,32,105,110,116,101,
                 103,114,105,116,121,32,99,111,110,115,116,114,97,105,110,116,
                 115,44,32,114,117,110,116,105,109,101,32,115,116,97,116,105,
                 115,116,105,99,115,44,32,111,114,32,118,105,114,116,117,97,
                 108,32,116,97,98,108,101,115,46]}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,"0The callback module does not have to access real"}],
              0,false},
             {text,"\b*Mnesia*"},
             {sep,
              [{text,
                "Ztables, it is free to do whatever it wants as long as the callback interface is fulfilled."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{text,
              ">[Appendix B, Activity Access Callback Interface](Mnesia_App_B)"},
             {sep,
              [{text,
                [25,112,114,111,118,105,100,101,115,32,116,104,101,32,115,111,
                 117,114,99,101,32,99,111,100,101,44]}],
              0,false},
             {text,
              [17,42,109,110,101,115,105,97,95,102,114,97,103,46,101,114,108,
               42]},
             {sep,
              [{text,
                "D, for one alternative implementation. The context-sensitive function"}],
              0,false},
             {text,",[mnesia:table_info/2](./mnesia#table_info/2)"},
             {sep,
              [{text,
                "Wcan be used to provide virtual information about a table. One use of this is to perform"}],
              0,false},
             {text,[5,42,81,76,67,42]},
             {sep,
              [{text,
                [130,113,117,101,114,105,101,115,32,119,105,116,104,105,110,
                 32,97,110,32,97,99,116,105,118,105,116,121,32,99,111,110,116,
                 101,120,116,32,119,105,116,104,32,97,32,99,117,115,116,111,
                 109,105,122,101,100,32,99,97,108,108,98,97,99,107,32,109,111,
                 100,117,108,101,46,32,66,121,32,112,114,111,118,105,100,105,
                 110,103,32,116,97,98,108,101,32,105,110,102,111,114,109,97,
                 116,105,111,110,32,97,98,111,117,116,32,116,97,98,108,101,32,
                 105,110,100,101,120,101,115,32,97,110,100,32,111,116,104,101,
                 114]}],
              0,false},
             {text,[5,42,81,76,67,42]},
             {sep,[{text,"\rrequirements,"}],0,false},
             {text,[5,42,81,76,67,42]},
             {sep,
              [{text,
                "Acan be used as a generic query language to access virtual tables."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {sep,
          [{sep,
            [{sep,
              [{text,
                "=QLC queries can be performed in all these activity contexts ("}],
              0,false},
             {text,"\r*transaction*"},
             {sep,[{text,[1,44]}],0,false},
             {text,
              [18,42,115,121,110,99,95,116,114,97,110,115,97,99,116,105,111,
               110,42]},
             {sep,[{text,[1,44]}],0,false},
             {text,"\r*async_dirty*"},
             {sep,[{text,[1,44]}],0,false},
             {text,"\f*sync_dirty*"},
             {sep,[{text,[5,44,32,97,110,100]}],0,false},
             {text,[5,42,101,116,115,42]},
             {sep,[{text,[6,41,46,32,84,104,101]}],0,false},
             {text,[5,42,101,116,115,42]},
             {sep,
              [{text,"0activity only works if the table has no indexes."}],
              0,false}],
            0,false}],
          0,true},
         null},
        null}},
      {above,
       {above,{above,{text,[0]},null},null},
       {above,
        {above,
         {above,
          {above,
           {text,[15,33,33,33,32,105,110,102,111,32,34,78,111,116,101,34]},
           {sep,
            [{text,[4,32,32,32,32]},
             {sep,
              [{sep,
                [{above,
                  {above,{above,{text,[0]},null},null},
                  {above,
                   {above,
                    {sep,
                     [{sep,
                       [{sep,[{text,"\fThe function"}],0,false},
                        {text,
                         [16,42,109,110,101,115,105,97,58,100,105,114,116,121,
                          95,42,42]},
                        {sep,
                         [{text,
                           [20,97,108,119,97,121,115,32,101,120,101,99,117,
                            116,101,115,32,119,105,116,104]}],
                         0,false},
                        {text,"\r*async_dirty*"},
                        {sep,
                         [{text,
                           [146,115,101,109,97,110,116,105,99,115,32,114,101,
                            103,97,114,100,108,101,115,115,32,111,102,32,119,
                            104,105,99,104,32,97,99,116,105,118,105,116,121,
                            32,97,99,99,101,115,115,32,99,111,110,116,101,120,
                            116,115,32,116,104,97,116,32,97,114,101,32,115,
                            116,97,114,116,101,100,46,32,73,116,32,99,97,110,
                            32,101,118,101,110,32,115,116,97,114,116,32,99,
                            111,110,116,101,120,116,115,32,119,105,116,104,
                            111,117,116,32,97,110,121,32,101,110,99,108,111,
                            115,105,110,103,32,97,99,116,105,118,105,116,121,
                            32,97,99,99,101,115,115,32,99,111,110,116,101,120,
                            116,46]}],
                         0,false}],
                       0,false}],
                     0,true},
                    null},
                   null}}],
                0,false}],
              0,true}],
            0,false}},
          {text,[0]}},
         null},
        null}}],
     0,false}},
   {sep,
    [{above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {text,
         [22,35,35,32,78,101,115,116,101,100,32,84,114,97,110,115,97,99,116,
          105,111,110,115]},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "ÎTransactions can be nested in an arbitrary fashion. A child transaction must run in the same process as its parent. When a child transaction terminates, the caller of the child transaction gets return value"}],
             0,false},
            {text,
             [19,42,123,97,98,111,114,116,101,100,44,32,82,101,97,115,111,110,
              125,42]},
            {sep,
             [{text,
               [141,97,110,100,32,97,110,121,32,119,111,114,107,32,112,101,
                114,102,111,114,109,101,100,32,98,121,32,116,104,101,32,99,
                104,105,108,100,32,105,115,32,101,114,97,115,101,100,46,32,73,
                102,32,97,32,99,104,105,108,100,32,116,114,97,110,115,97,99,
                116,105,111,110,32,99,111,109,109,105,116,115,44,32,116,104,
                101,32,114,101,99,111,114,100,115,32,119,114,105,116,116,101,
                110,32,98,121,32,116,104,101,32,99,104,105,108,100,32,97,114,
                101,32,112,114,111,112,97,103,97,116,101,100,32,116,111,32,
                116,104,101,32,112,97,114,101,110,116,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [429,78,111,32,108,111,99,107,115,32,97,114,101,32,114,101,108,
                101,97,115,101,100,32,119,104,101,110,32,99,104,105,108,100,
                32,116,114,97,110,115,97,99,116,105,111,110,115,32,116,101,
                114,109,105,110,97,116,101,46,32,76,111,99,107,115,32,99,114,
                101,97,116,101,100,32,98,121,32,97,32,115,101,113,117,101,110,
                99,101,32,111,102,32,110,101,115,116,101,100,32,116,114,97,
                110,115,97,99,116,105,111,110,115,32,97,114,101,32,107,101,
                112,116,32,117,110,116,105,108,32,116,104,101,32,116,111,112,
                109,111,115,116,32,116,114,97,110,115,97,99,116,105,111,110,
                32,116,101,114,109,105,110,97,116,101,115,46,32,70,117,114,
                116,104,101,114,109,111,114,101,44,32,97,110,121,32,117,112,
                100,97,116,101,32,112,101,114,102,111,114,109,101,100,32,98,
                121,32,97,32,110,101,115,116,101,100,32,116,114,97,110,115,97,
                99,116,105,111,110,32,105,115,32,111,110,108,121,32,112,114,
                111,112,97,103,97,116,101,100,32,105,110,32,115,117,99,104,32,
                97,32,109,97,110,110,101,114,32,115,111,32,116,104,97,116,32,
                116,104,101,32,112,97,114,101,110,116,32,111,102,32,116,104,
                101,32,110,101,115,116,101,100,32,116,114,97,110,115,97,99,
                116,105,111,110,32,115,101,101,115,32,116,104,101,32,117,112,
                100,97,116,101,115,46,32,78,111,32,102,105,110,97,108,32,99,
                111,109,109,105,116,109,101,110,116,32,105,115,32,100,111,110,
                101,32,117,110,116,105,108,32,116,104,101,32,116,111,112,45,
                108,101,118,101,108,32,116,114,97,110,115,97,99,116,105,111,
                110,32,116,101,114,109,105,110,97,116,101,115,46,32,83,111,44,
                32,97,108,116,104,111,117,103,104,32,97,32,110,101,115,116,
                101,100,32,116,114,97,110,115,97,99,116,105,111,110,32,114,
                101,116,117,114,110,115]}],
             0,false},
            {text,[15,42,123,97,116,111,109,105,99,44,32,86,97,108,125,42]},
            {sep,
             [{text,
               "Y, if the enclosing parent transaction terminates, the entire nested operation terminates."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               [147,84,104,101,32,97,98,105,108,105,116,121,32,116,111,32,104,
                97,118,101,32,110,101,115,116,101,100,32,116,114,97,110,115,
                97,99,116,105,111,110,32,119,105,116,104,32,105,100,101,110,
                116,105,99,97,108,32,115,101,109,97,110,116,105,99,115,32,97,
                115,32,116,111,112,45,108,101,118,101,108,32,116,114,97,110,
                115,97,99,116,105,111,110,32,109,97,107,101,115,32,105,116,32,
                101,97,115,105,101,114,32,116,111,32,119,114,105,116,101,32,
                108,105,98,114,97,114,121,32,102,117,110,99,116,105,111,110,
                115,32,116,104,97,116,32,109,97,110,105,112,117,108,97,116,
                101]}],
             0,false},
            {text,"\b*Mnesia*"},
            {sep,[{text,[7,116,97,98,108,101,115,46]}],0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{text,
             "AConsider a function that adds a subscriber to a telephony system:"}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             "l\n      add_subscriber(S) ->\n          mnesia:transaction(fun() ->\n              case mnesia:read( .........."}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "xThis function needs to be called as a transaction. Assume that you wish to write a function that both calls the function"}],
             0,false},
            {text,
             [18,42,97,100,100,95,115,117,98,115,99,114,105,98,101,114,47,49,
              42]},
            {sep,
             [{text,
               "Fand is in itself protected by the context of a transaction. By calling"}],
             0,false},
            {text,
             [18,42,97,100,100,95,115,117,98,115,99,114,105,98,101,114,47,49,
              42]},
            {sep,
             [{text,
               "Afrom within another transaction, a nested transaction is created."}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {sep,
         [{sep,
           [{sep,
             [{text,
               "^Also, different activity access contexts can be mixed while nesting. However, the dirty ones ("}],
             0,false},
            {text,"\r*async_dirty*"},
            {sep,[{text,[1,44]}],0,false},
            {text,"\f*sync_dirty*"},
            {sep,[{text,[5,44,32,97,110,100]}],0,false},
            {text,[5,42,101,116,115,42]},
            {sep,
             [{text,
               [130,41,32,105,110,104,101,114,105,116,32,116,104,101,32,116,
                114,97,110,115,97,99,116,105,111,110,32,115,101,109,97,110,
                116,105,99,115,32,105,102,32,116,104,101,121,32,97,114,101,32,
                99,97,108,108,101,100,32,105,110,115,105,100,101,32,97,32,116,
                114,97,110,115,97,99,116,105,111,110,32,97,110,100,32,116,104,
                117,115,32,103,114,97,98,32,108,111,99,107,115,32,97,110,100,
                32,117,115,101,32,116,119,111,32,111,114,32,116,104,114,101,
                101,32,112,104,97,115,101,32,99,111,109,109,105,116,46]}],
             0,false}],
           0,false}],
         0,true},
        null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
       null}},
     {above,
      {above,{above,{text,[0]},null},null},
      {above,
       {above,
        {above,
         {above,
          {text,[3,96,96,96]},
          {sep,
           [{text,
             [584,10,32,32,32,32,32,32,97,100,100,95,115,117,98,115,99,114,
              105,98,101,114,40,83,41,32,45,62,10,32,32,32,32,32,32,32,32,32,
              32,109,110,101,115,105,97,58,116,114,97,110,115,97,99,116,105,
              111,110,40,102,117,110,40,41,32,45,62,10,32,32,32,32,32,32,32,
              32,32,32,32,32,32,37,37,32,84,114,97,110,115,97,99,116,105,111,
              110,32,99,111,110,116,101,120,116,32,10,32,32,32,32,32,32,32,32,
              32,32,32,32,32,109,110,101,115,105,97,58,114,101,97,100,40,123,
              115,111,109,101,95,116,97,98,44,32,115,111,109,101,95,100,97,
              116,97,125,41,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,109,
              110,101,115,105,97,58,115,121,110,99,95,100,105,114,116,121,40,
              102,117,110,40,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,
              32,32,32,32,32,32,37,37,32,83,116,105,108,108,32,105,110,32,97,
              32,116,114,97,110,115,97,99,116,105,111,110,32,99,111,110,116,
              101,120,116,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
              32,32,99,97,115,101,32,109,110,101,115,105,97,58,114,101,97,100,
              40,32,46,46,41,32,46,46,101,110,100,41,44,32,101,110,100,41,46,
              10,32,32,32,32,32,32,97,100,100,95,115,117,98,115,99,114,105,98,
              101,114,50,40,83,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,
              109,110,101,115,105,97,58,115,121,110,99,95,100,105,114,116,121,
              40,102,117,110,40,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,
              32,32,32,37,37,32,73,110,32,100,105,114,116,121,32,99,111,110,
              116,101,120,116,32,10,32,32,32,32,32,32,32,32,32,32,32,32,32,
              109,110,101,115,105,97,58,114,101,97,100,40,123,115,111,109,101,
              95,116,97,98,44,32,115,111,109,101,95,100,97,116,97,125,41,44,
              10,32,32,32,32,32,32,32,32,32,32,32,32,32,109,110,101,115,105,
              97,58,116,114,97,110,115,97,99,116,105,111,110,40,102,117,110,
              40,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
              32,32,37,37,32,73,110,32,97,32,116,114,97,110,115,97,99,116,105,
              111,110,32,99,111,110,116,101,120,116,46,10,32,32,32,32,32,32,
              32,32,32,32,32,32,32,32,32,32,32,99,97,115,101,32,109,110,101,
              115,105,97,58,114,101,97,100,40,32,46,46,41,32,46,46,101,110,
              100,41,44,32,101,110,100,41,46]}],
           0,true}},
         {text,[3,96,96,96]}},
        null},
       null}}],
    0,false}},
  {sep,
   [{above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {text,
        [19,35,35,32,80,97,116,116,101,114,110,32,77,97,116,99,104,105,110,
         103]},
       null},
      null}},
    {text,
     [31,60,97,32,110,97,109,101,61,34,109,97,116,99,104,105,110,103,34,62,
      109,97,116,99,104,105,110,103,60,47,97,62]},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [17,87,104,101,110,32,116,104,101,32,102,117,110,99,116,105,111,
               110]}],
            0,false},
           {text," [mnesia:read/3](./mnesia#read/3)"},
           {sep,
            [{text,
              [15,99,97,110,110,111,116,32,98,101,32,117,115,101,100,44]}],
            0,false},
           {text,"\b*Mnesia*"},
           {sep,
            [{text,
              "~provides the programmer with several functions for matching records against a pattern. The most useful ones are the following:"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [434,10,32,32,32,32,32,32,109,110,101,115,105,97,58,115,101,108,
             101,99,116,40,84,97,98,44,32,77,97,116,99,104,83,112,101,99,105,
             102,105,99,97,116,105,111,110,44,32,76,111,99,107,75,105,110,100,
             41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,116,114,97,110,115,
             97,99,116,105,111,110,32,97,98,111,114,116,32,124,32,91,79,98,
             106,101,99,116,76,105,115,116,93,10,32,32,32,32,32,32,109,110,
             101,115,105,97,58,115,101,108,101,99,116,40,84,97,98,44,32,77,97,
             116,99,104,83,112,101,99,105,102,105,99,97,116,105,111,110,44,32,
             78,79,98,106,101,99,116,115,44,32,76,111,99,107,41,32,45,62,32,
             32,10,32,32,32,32,32,32,32,32,32,32,116,114,97,110,115,97,99,116,
             105,111,110,32,97,98,111,114,116,32,124,32,123,91,79,98,106,101,
             99,116,93,44,67,111,110,116,105,110,117,97,116,105,111,110,125,
             32,124,32,39,36,101,110,100,95,111,102,95,116,97,98,108,101,39,
             10,32,32,32,32,32,32,109,110,101,115,105,97,58,115,101,108,101,
             99,116,40,67,111,110,116,41,32,45,62,10,32,32,32,32,32,32,32,32,
             32,32,116,114,97,110,115,97,99,116,105,111,110,32,97,98,111,114,
             116,32,124,32,123,91,79,98,106,101,99,116,93,44,67,111,110,116,
             105,110,117,97,116,105,111,110,125,32,124,32,39,36,101,110,100,
             95,111,102,95,116,97,98,108,101,39,10,32,32,32,32,32,32,109,110,
             101,115,105,97,58,109,97,116,99,104,95,111,98,106,101,99,116,40,
             84,97,98,44,32,80,97,116,116,101,114,110,44,32,76,111,99,107,75,
             105,110,100,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,116,114,
             97,110,115,97,99,116,105,111,110,32,97,98,111,114,116,32,124,32,
             82,101,99,111,114,100,76,105,115,116]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [23,84,104,101,115,101,32,102,117,110,99,116,105,111,110,115,32,
               109,97,116,99,104,32,97]}],
            0,false},
           {text,"\t*Pattern*"},
           {sep,
            [{text,
              [28,97,103,97,105,110,115,116,32,97,108,108,32,114,101,99,111,
               114,100,115,32,105,110,32,116,97,98,108,101]}],
            0,false},
           {text,[5,42,84,97,98,42]},
           {sep,[{text,[6,46,32,73,110,32,97]}],0,false},
           {text,"\"[mnesia:select](./mnesia#select/2)"},
           {sep,[{text,[5,99,97,108,108,44]}],0,false},
           {text,"\t*Pattern*"},
           {sep,[{text,"\fis a part of"}],0,false},
           {text,
            [20,42,77,97,116,99,104,83,112,101,99,105,102,105,99,97,116,105,
             111,110,42]},
           {sep,
            [{text,
              "údescribed in the following. It is not necessarily performed as an exhaustive search of the entire table. By using indexes and bound values in the key of the pattern, the actual work done by the function can be condensed into a few hash lookups. Using"}],
            0,false},
           {text,"\r*ordered_set*"},
           {sep,
            [{text,
              "Ctables can reduce the search space if the keys are partially bound."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "uThe pattern provided to the functions must be a valid record, and the first element of the provided tuple must be the"}],
            0,false},
           {text,"\r*record_name*"},
           {sep,[{text,"!of the table. The special element"}],0,false},
           {text,[5,42,39,95,39,42]},
           {sep,
            [{text,
              "Ymatches any data structure in Erlang (also known as an Erlang term). The special elements"}],
            0,false},
           {text,"\r*'$<number>'*"},
           {sep,
            [{text,
              [159,98,101,104,97,118,101,32,97,115,32,69,114,108,97,110,103,
               32,118,97,114,105,97,98,108,101,115,44,32,116,104,97,116,32,
               105,115,44,32,116,104,101,121,32,109,97,116,99,104,32,97,110,
               121,116,104,105,110,103,44,32,98,105,110,100,32,116,104,101,32,
               102,105,114,115,116,32,111,99,99,117,114,114,101,110,99,101,44,
               32,97,110,100,32,109,97,116,99,104,32,116,104,101,32,99,111,
               109,105,110,103,32,111,99,99,117,114,114,101,110,99,101,115,32,
               111,102,32,116,104,97,116,32,118,97,114,105,97,98,108,101,32,
               97,103,97,105,110,115,116,32,116,104,101,32,98,111,117,110,100,
               32,118,97,108,117,101,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\fUse function"}],0,false},
           {text,
            "=[mnesia:table_info(Tab, wild_pattern)](./mnesia#table_info/2)"},
           {sep,
            [{text,
              "äto obtain a basic pattern, which matches all records in a table, or use the default value in record creation. Do not make the pattern hard-coded, as this makes the code more vulnerable to future changes of the record definition."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,{sep,[{sep,[{text,"\f**Example:**"}],0,false}],0,true},null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "x\n      Wildpattern = mnesia:table_info(employee, wild_pattern), \n      %% Or use\n      Wildpattern = #employee{_ = '_'},"}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            ":For the employee table, the wild pattern looks as follows:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,"0\n      {employee, '_', '_', '_', '_', '_',' _'}."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              ";To constrain the match, it is needed to replace some of the"}],
            0,false},
           {text,[5,42,39,95,39,42]},
           {sep,
            [{text,
              "Jelements. The code for matching out all female employees looks as follows:"}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [134,10,32,32,32,32,32,32,80,97,116,32,61,32,35,101,109,112,108,
             111,121,101,101,123,115,101,120,32,61,32,102,101,109,97,108,101,
             44,32,95,32,61,32,39,95,39,125,44,10,32,32,32,32,32,32,70,32,61,
             32,102,117,110,40,41,32,45,62,32,109,110,101,115,105,97,58,109,
             97,116,99,104,95,111,98,106,101,99,116,40,80,97,116,41,32,101,
             110,100,44,10,32,32,32,32,32,32,70,101,109,97,108,101,115,32,61,
             32,109,110,101,115,105,97,58,116,114,97,110,115,97,99,116,105,
             111,110,40,70,41,46]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{text,
            "©The match function can also be used to check the equality of different attributes. For example, to find all employees with an employee number equal to their room number:"}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            [147,10,32,32,32,32,32,32,80,97,116,32,61,32,35,101,109,112,108,
             111,121,101,101,123,101,109,112,95,110,111,32,61,32,39,36,49,39,
             44,32,114,111,111,109,95,110,111,32,61,32,39,36,49,39,44,32,95,
             32,61,32,39,95,39,125,44,10,32,32,32,32,32,32,70,32,61,32,102,
             117,110,40,41,32,45,62,32,109,110,101,115,105,97,58,109,97,116,
             99,104,95,111,98,106,101,99,116,40,80,97,116,41,32,101,110,100,
             44,10,32,32,32,32,32,32,79,100,100,32,61,32,109,110,101,115,105,
             97,58,116,114,97,110,115,97,99,116,105,111,110,40,70,41,46]}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\fThe function"}],0,false},
           {text,"0[mnesia:match_object/3](./mnesia#match_object/3)"},
           {sep,[{text,"\"lacks some important features that"}],0,false},
           {text,"$[mnesia:select/3](./mnesia#select/2)"},
           {sep,
            [{text,
              [18,104,97,118,101,46,32,70,111,114,32,101,120,97,109,112,108,
               101,44]}],
            0,false},
           {text,
            [23,42,109,110,101,115,105,97,58,109,97,116,99,104,95,111,98,106,
             101,99,116,47,51,42]},
           {sep,
            [{text,
              [153,99,97,110,32,111,110,108,121,32,114,101,116,117,114,110,32,
               116,104,101,32,109,97,116,99,104,105,110,103,32,114,101,99,111,
               114,100,115,44,32,97,110,100,32,105,116,32,99,97,110,110,111,
               116,32,101,120,112,114,101,115,115,32,99,111,110,115,116,114,
               97,105,110,116,115,32,111,116,104,101,114,32,116,104,97,110,32,
               101,113,117,97,108,105,116,121,46,32,84,111,32,102,105,110,100,
               32,116,104,101,32,110,97,109,101,115,32,111,102,32,116,104,101,
               32,109,97,108,101,32,101,109,112,108,111,121,101,101,115,32,
               111,110,32,116,104,101,32,115,101,99,111,110,100,32,102,108,
               111,111,114,58]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "Õ\n\n      MatchHead = #employee{name='$1', sex=male, room_no={'$2', '_'}, _='_'},\n      Guard = [{'>=', '$2', 220},{'<', '$2', 230}],\n      Result = '$1',\n      mnesia:select(employee,[{MatchHead, Guard, [Result]}])"}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\fThe function"}],0,false},
           {text,"\b*select*"},
           {sep,
            [{text,
              "Ncan be used to add more constraints and create output that cannot be done with"}],
            0,false},
           {text,
            [23,42,109,110,101,115,105,97,58,109,97,116,99,104,95,111,98,106,
             101,99,116,47,51,42]},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [22,84,104,101,32,115,101,99,111,110,100,32,97,114,103,117,109,
               101,110,116,32,116,111]}],
            0,false},
           {text,"\b*select*"},
           {sep,[{text,[4,105,115,32,97]}],0,false},
           {text,
            [20,42,77,97,116,99,104,83,112,101,99,105,102,105,99,97,116,105,
             111,110,42]},
           {sep,[{text,[3,46,32,65]}],0,false},
           {text,
            [20,42,77,97,116,99,104,83,112,101,99,105,102,105,99,97,116,105,
             111,110,42]},
           {sep,[{text,"\fis a list of"}],0,false},
           {text,[15,42,77,97,116,99,104,70,117,110,99,116,105,111,110,42]},
           {sep,[{text,"\rs, where each"}],0,false},
           {text,[15,42,77,97,116,99,104,70,117,110,99,116,105,111,110,42]},
           {sep,
            [{text,
              [30,99,111,110,115,105,115,116,115,32,111,102,32,97,32,116,117,
               112,108,101,32,99,111,110,116,97,105,110,105,110,103]}],
            0,false},
           {text,"(*{MatchHead, MatchCondition, MatchBody}*"},
           {sep,[{text,[1,58]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,"\v*MatchHead*"},
          {sep,
           [{text,
             [30,105,115,32,116,104,101,32,115,97,109,101,32,112,97,116,116,
              101,114,110,32,97,115,32,117,115,101,100,32,105,110]}],
           0,false},
          {text,
           [23,42,109,110,101,115,105,97,58,109,97,116,99,104,95,111,98,106,
            101,99,116,47,51,42]},
          {sep,
           [{text,
             [18,100,101,115,99,114,105,98,101,100,32,101,97,114,108,105,101,
              114,46]}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,
           [16,42,77,97,116,99,104,67,111,110,100,105,116,105,111,110,42]},
          {sep,
           [{text,"6is a list of extra constraints applied to each record."}],
           0,false}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,"\v*MatchBody*"},
         {sep,
          [{text,
            [29,99,111,110,115,116,114,117,99,116,115,32,116,104,101,32,114,
             101,116,117,114,110,32,118,97,108,117,101,115,46]}],
          0,false}],
        0,false}],
      0,false}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "SFor details about the match specifications, see \"Match Specifications in Erlang\" in"}],
            0,false},
           {text,[15,91,69,82,84,83,93,40,46,47,105,110,100,101,120,41]},
           {sep,
            [{text,"+User's Guide. For more information, see the"}],
            0,false},
           {text,"\f[ets](./ets)"},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,[14,91,100,101,116,115,93,40,46,47,100,101,116,115,41]},
           {sep,
            [{text,
              [15,109,97,110,117,97,108,32,112,97,103,101,115,32,105,110]}],
            0,false},
           {text,"\b*STDLIB*"},
           {sep,[{text,[1,46]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\rThe functions"}],0,false},
           {text,
            [29,91,115,101,108,101,99,116,47,52,93,40,46,47,109,110,101,115,
             105,97,35,115,101,108,101,99,116,47,52,41]},
           {sep,[{text,[3,97,110,100]}],0,false},
           {text,
            [29,91,115,101,108,101,99,116,47,49,93,40,46,47,109,110,101,115,
             105,97,35,115,101,108,101,99,116,47,50,41]},
           {sep,
            [{text,"2are used to get a limited number of results, where"}],
            0,false},
           {text,[14,42,67,111,110,116,105,110,117,97,116,105,111,110,42]},
           {sep,
            [{text,
              [31,103,101,116,115,32,116,104,101,32,110,101,120,116,32,99,104,
               117,110,107,32,111,102,32,114,101,115,117,108,116,115,46]}],
            0,false},
           {text,"\b*Mnesia*"},
           {sep,[{text,[4,117,115,101,115]}],0,false},
           {text,"\n*NObjects*"},
           {sep,
            [{text,
              "Has a recommendation only. Thus, more or less results than specified with"}],
            0,false},
           {text,"\n*NObjects*"},
           {sep,
            [{text,
              "rcan be returned in the result list, even the empty list can be returned even if there are more results to collect."}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,
          [21,33,33,33,32,119,97,114,110,105,110,103,32,34,87,97,114,110,105,
           110,103,34]},
         {sep,
          [{text,[4,32,32,32,32]},
           {sep,
            [{sep,
              [{above,
                {above,{above,{text,[0]},null},null},
                {above,
                 {above,
                  {sep,
                   [{sep,
                     [{sep,
                       [{text,
                         ".There is a severe performance penalty in using"}],
                       0,false},
                      {text,
                       [25,42,109,110,101,115,105,97,58,115,101,108,101,99,
                        116,47,91,49,124,50,124,51,124,52,93,42]},
                      {sep,
                       [{text,
                         "aafter any modifying operation is done on that table in the same transaction. That is, avoid using"}],
                       0,false},
                      {text,"\"[mnesia:write/1](./mnesia#write/1)"},
                      {sep,[{text,[2,111,114]}],0,false},
                      {text,"$[mnesia:delete/1](./mnesia#delete/1)"},
                      {sep,[{text,[6,98,101,102,111,114,101]}],0,false},
                      {text,
                       [15,42,109,110,101,115,105,97,58,115,101,108,101,99,
                        116,42]},
                      {sep,
                       [{text,
                         [24,105,110,32,116,104,101,32,115,97,109,101,32,116,
                          114,97,110,115,97,99,116,105,111,110,46]}],
                       0,false}],
                     0,false}],
                   0,true},
                  null},
                 null}}],
              0,false}],
            0,true}],
          0,false}},
        {text,[0]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              [132,73,102,32,116,104,101,32,107,101,121,32,97,116,116,114,105,
               98,117,116,101,32,105,115,32,98,111,117,110,100,32,105,110,32,
               97,32,112,97,116,116,101,114,110,44,32,116,104,101,32,109,97,
               116,99,104,32,111,112,101,114,97,116,105,111,110,32,105,115,32,
               101,102,102,105,99,105,101,110,116,46,32,72,111,119,101,118,
               101,114,44,32,105,102,32,116,104,101,32,107,101,121,32,97,116,
               116,114,105,98,117,116,101,32,105,110,32,97,32,112,97,116,116,
               101,114,110,32,105,115,32,103,105,118,101,110,32,97,115]}],
            0,false},
           {text,[5,42,39,95,39,42]},
           {sep,[{text,[2,111,114]}],0,false},
           {text,[6,42,39,36,49,39,42]},
           {sep,[{text,"\v, the whole"}],0,false},
           {text,"\n*employee*"},
           {sep,
            [{text,
              " table must be searched for records that match. Hence if the table is large, this can become a time-consuming operation, but it can be remedied with indexes (see"}],
            0,false},
           {text,"#[Indexing](./Mnesia_chap5#indexing)"},
           {sep,
            [{text,
              [17,41,32,105,102,32,116,104,101,32,102,117,110,99,116,105,111,
               110]}],
            0,false},
           {text,".[mnesia:match_object](./mnesia#match_object/1)"},
           {sep,[{text,"\bis used."}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"&QLC queries can also be used to search"}],0,false},
           {text,"\b*Mnesia*"},
           {sep,
            [{text,
              [29,116,97,98,108,101,115,46,32,66,121,32,117,115,105,110,103,
               32,116,104,101,32,102,117,110,99,116,105,111,110]}],
            0,false},
           {text,"&[mnesia:table/[1|2]](./mnesia#table/1)"},
           {sep,
            [{text,
              "Cas the generator inside a QLC query, you let the query operate on a"}],
            0,false},
           {text,"\b*Mnesia*"},
           {sep,[{text,[6,116,97,98,108,101,46]}],0,false},
           {text,"\b*Mnesia*"},
           {sep,
            [{text,
              [20,45,115,112,101,99,105,102,105,99,32,111,112,116,105,111,110,
               115,32,116,111]}],
            0,false},
           {text,[16,42,109,110,101,115,105,97,58,116,97,98,108,101,47,50,42]},
           {sep,[{text,[3,97,114,101]}],0,false},
           {text,[14,42,123,108,111,99,107,44,32,76,111,99,107,125,42]},
           {sep,[{text,[1,44]}],0,false},
           {text,
            [21,42,123,110,95,111,98,106,101,99,116,115,44,73,110,116,101,103,
             101,114,125,42]},
           {sep,[{text,[5,44,32,97,110,100]}],0,false},
           {text,
            [23,42,123,116,114,97,118,101,114,115,101,44,32,83,101,108,77,101,
             116,104,111,100,125,42]},
           {sep,[{text,[1,58]}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,[6,42,108,111,99,107,42]},
          {sep,
           [{text,
             [17,115,112,101,99,105,102,105,101,115,32,119,104,101,116,104,
              101,114]}],
           0,false},
          {text,"\b*Mnesia*"},
          {sep,
           [{text,"0is to acquire a read or write lock on the table."}],
           0,false}],
         0,false}],
       0,false},
      {sep,
       [{text,[1,42]},
        {sep,
         [{text,"\v*n_objects*"},
          {sep,
           [{text,
             "Cspecifies how many results are to be returned in each chunk to QLC."}],
           0,false}],
         0,false}],
       0,false}},
     {sep,
      [{text,[1,42]},
       {sep,
        [{text,"\n*traverse*"},
         {sep,
          [{text,
            [24,115,112,101,99,105,102,105,101,115,32,119,104,105,99,104,32,
             102,117,110,99,116,105,111,110]}],
          0,false},
         {text,"\b*Mnesia*"},
         {sep,[{text,"(is to use to traverse the table. Default"}],0,false},
         {text,"\b*select*"},
         {sep,
          [{text,
            [21,105,115,32,117,115,101,100,44,32,98,117,116,32,98,121,32,117,
             115,105,110,103]}],
          0,false},
         {text,"**{traverse, {select, MatchSpecification}}*"},
         {sep,
          [{text,[15,97,115,32,97,110,32,111,112,116,105,111,110,32,116,111]}],
          0,false},
         {text,"\"[mnesia:table/2](./mnesia#table/1)"},
         {sep,
          [{text,"/the user can specify its own view of the table."}],
          0,false}],
        0,false}],
      0,false}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,
            [{text,
              "aIf no options are specified, a read lock is acquired, 100 results are returned in each chunk, and"}],
            0,false},
           {text,"\b*select*"},
           {sep,[{text,"'is used to traverse the table, that is:"}],0,false}],
          0,false}],
        0,true},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {above,
        {above,
         {text,[3,96,96,96]},
         {sep,
          [{text,
            "l\n      mnesia:table(Tab) ->\n          mnesia:table(Tab, [{n_objects,100},{lock, read}, {traverse, select}])."}],
          0,true}},
        {text,[3,96,96,96]}},
       null},
      null}},
    {above,
     {above,{above,{text,[0]},null},null},
     {above,
      {above,
       {sep,
        [{sep,
          [{sep,[{text,"\fThe function"}],0,false},
           {text,"+[mnesia:all_keys(Tab)](./mnesia#all_keys/1)"},
           {sep,
            [{text,
              [28,114,101,116,117,114,110,115,32,97,108,108,32,107,101,121,
               115,32,105,110,32,97,32,116,97,98,108,101,46]}],
            0,false}],
          0,false}],
        0,true},
       null},
      null}}],
   0,false}},
 {sep,
  [{above,
    {above,{above,{text,[0]},null},null},
    {above,{above,{text,"\f## Iteration"},null},null}},
   {text,"!<a name=\"iteration\">iteration</a>"},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"\b*Mnesia*"},
          {sep,
           [{text,
             "Nprovides the following functions that iterate over all the records in a table:"}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [280,10,32,32,32,32,32,32,109,110,101,115,105,97,58,102,111,108,
            100,108,40,70,117,110,44,32,65,99,99,48,44,32,84,97,98,41,32,45,
            62,32,78,101,119,65,99,99,32,124,32,116,114,97,110,115,97,99,116,
            105,111,110,32,97,98,111,114,116,10,32,32,32,32,32,32,109,110,101,
            115,105,97,58,102,111,108,100,114,40,70,117,110,44,32,65,99,99,48,
            44,32,84,97,98,41,32,45,62,32,78,101,119,65,99,99,32,124,32,116,
            114,97,110,115,97,99,116,105,111,110,32,97,98,111,114,116,10,32,
            32,32,32,32,32,109,110,101,115,105,97,58,102,111,108,100,108,40,
            70,117,110,44,32,65,99,99,48,44,32,84,97,98,44,32,76,111,99,107,
            84,121,112,101,41,32,45,62,32,78,101,119,65,99,99,32,124,32,116,
            114,97,110,115,97,99,116,105,111,110,32,97,98,111,114,116,10,32,
            32,32,32,32,32,109,110,101,115,105,97,58,102,111,108,100,114,40,
            70,117,110,44,32,65,99,99,48,44,32,84,97,98,44,32,76,111,99,107,
            84,121,112,101,41,32,45,62,32,78,101,119,65,99,99,32,124,32,116,
            114,97,110,115,97,99,116,105,111,110,32,97,98,111,114,116]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text," These functions iterate over the"}],0,false},
          {text,"\b*Mnesia*"},
          {sep,[{text,[5,116,97,98,108,101]}],0,false},
          {text,[5,42,84,97,98,42]},
          {sep,
           [{text,
             [22,97,110,100,32,97,112,112,108,121,32,116,104,101,32,102,117,
              110,99,116,105,111,110]}],
           0,false},
          {text,[5,42,70,117,110,42]},
          {sep,
           [{text,[15,116,111,32,101,97,99,104,32,114,101,99,111,114,100,46]}],
           0,false},
          {text,[5,42,70,117,110,42]},
          {sep,
           [{text,
             "]takes two arguments, the first is a record from the table, and the second is the accumulator."}],
           0,false},
          {text,[5,42,70,117,110,42]},
          {sep,
           [{text,
             [26,114,101,116,117,114,110,115,32,97,32,110,101,119,32,97,99,99,
              117,109,117,108,97,116,111,114,46]}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,[14,84,104,101,32,102,105,114,115,116,32,116,105,109,101]}],
           0,false},
          {text,[5,42,70,117,110,42]},
          {sep,[{text,"\vis applied,"}],0,false},
          {text,[6,42,65,99,99,48,42]},
          {sep,[{text,"%is the second argument. The next time"}],0,false},
          {text,[5,42,70,117,110,42]},
          {sep,
           [{text,
             "lis called, the return value from the previous call is used as the second argument. The term the last call to"}],
           0,false},
          {text,[5,42,70,117,110,42]},
          {sep,
           [{text,"+returns is the return value of the function"}],
           0,false},
          {text,"\"[mnesia:foldl/3](./mnesia#foldl/3)"},
          {sep,[{text,[2,111,114]}],0,false},
          {text,"\"[mnesia:foldr/3](./mnesia#foldr/3)"},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "MThe difference between these functions is the order the table is accessed for"}],
           0,false},
          {text,"\r*ordered_set*"},
          {sep,
           [{text,
             ";tables. For other table types the functions are equivalent."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"\n*LockType*"},
          {sep,
           [{text,
             "Pspecifies what type of lock that is to be acquired for the iteration, default is"}],
           0,false},
          {text,[6,42,114,101,97,100,42]},
          {sep,
           [{text,
             "Y. If records are written or deleted during the iteration, a write lock is to be acquired."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "rThese functions can be used to find records in a table when it is impossible to write constraints for the function"}],
           0,false},
          {text,"0[mnesia:match_object/3](./mnesia#match_object/3)"},
          {sep,
           [{text,
             "=, or when you want to perform some action on certain records."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "ZFor example, finding all the employees who have a salary less than 10 can look as follows:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [321,10,32,32,32,32,32,32,102,105,110,100,95,108,111,119,95,115,97,
            108,97,114,105,101,115,40,41,32,45,62,10,32,32,32,32,32,32,32,32,
            67,111,110,115,116,114,97,105,110,116,32,61,32,10,32,32,32,32,32,
            32,32,32,32,32,32,32,32,102,117,110,40,69,109,112,44,32,65,99,99,
            41,32,119,104,101,110,32,69,109,112,35,101,109,112,108,111,121,
            101,101,46,115,97,108,97,114,121,32,60,32,49,48,32,45,62,10,32,32,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,91,69,109,
            112,32,124,32,65,99,99,93,59,10,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,40,95,44,32,65,99,99,41,32,45,62,10,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,65,99,99,10,32,32,32,
            32,32,32,32,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,32,32,
            32,32,70,105,110,100,32,61,32,102,117,110,40,41,32,45,62,32,109,
            110,101,115,105,97,58,102,111,108,100,108,40,67,111,110,115,116,
            114,97,105,110,116,44,32,91,93,44,32,101,109,112,108,111,121,101,
            101,41,32,101,110,100,44,10,32,32,32,32,32,32,32,32,109,110,101,
            115,105,97,58,116,114,97,110,115,97,99,116,105,111,110,40,70,105,
            110,100,41,46,10,32,32,32,32]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           "cTo raise the salary to 10 for everyone with a salary less than 10 and return the sum of all raises:"}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [450,10,32,32,32,32,32,32,105,110,99,114,101,97,115,101,95,108,111,
            119,95,115,97,108,97,114,105,101,115,40,41,32,45,62,10,32,32,32,
            32,32,32,32,32,32,73,110,99,114,101,97,115,101,32,61,32,10,32,32,
            32,32,32,32,32,32,32,32,32,32,32,102,117,110,40,69,109,112,44,32,
            65,99,99,41,32,119,104,101,110,32,69,109,112,35,101,109,112,108,
            111,121,101,101,46,115,97,108,97,114,121,32,60,32,49,48,32,45,62,
            10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,79,
            108,100,83,32,61,32,69,109,112,35,101,109,112,108,111,121,101,101,
            46,115,97,108,97,114,121,44,10,32,32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,111,107,32,61,32,109,110,101,115,105,
            97,58,119,114,105,116,101,40,69,109,112,35,101,109,112,108,111,
            121,101,101,123,115,97,108,97,114,121,32,61,32,49,48,125,41,44,10,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,65,99,
            99,32,43,32,49,48,32,45,32,79,108,100,83,59,10,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,40,95,44,32,65,99,99,41,32,45,62,10,
            32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,65,99,
            99,10,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,100,44,10,32,
            32,32,32,32,32,32,32,73,110,99,76,111,119,32,61,32,102,117,110,40,
            41,32,45,62,32,109,110,101,115,105,97,58,102,111,108,100,108,40,
            73,110,99,114,101,97,115,101,44,32,48,44,32,101,109,112,108,111,
            121,101,101,44,32,119,114,105,116,101,41,32,101,110,100,44,10,32,
            32,32,32,32,32,32,32,109,110,101,115,105,97,58,116,114,97,110,115,
            97,99,116,105,111,110,40,73,110,99,76,111,119,41,46,10,32,32,32,
            32]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,
           [129,77,97,110,121,32,110,105,99,101,32,116,104,105,110,103,115,32,
            99,97,110,32,98,101,32,100,111,110,101,32,119,105,116,104,32,116,
            104,101,32,105,116,101,114,97,116,111,114,32,102,117,110,99,116,
            105,111,110,115,32,98,117,116,32,116,97,107,101,32,115,111,109,
            101,32,99,97,117,116,105,111,110,32,97,98,111,117,116,32,112,101,
            114,102,111,114,109,97,110,99,101,32,97,110,100,32,109,101,109,
            111,114,121,32,117,115,101,32,102,111,114,32,108,97,114,103,101,
            32,116,97,98,108,101,115,46]}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "fCall these iteration functions on nodes that contain a replica of the table. Each call to the function"}],
           0,false},
          {text,[5,42,70,117,110,42]},
          {sep,
           [{text,
             "haccess the table and if the table resides on another node it generates much unnecessary network traffic."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{text,"\b*Mnesia*"},
          {sep,
           [{text,
             " also provides some functions that make it possible for the user to iterate over the table. The order of the iteration is unspecified if the table is not of type"}],
           0,false},
          {text,"\r*ordered_set*"},
          {sep,[{text,[1,58]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {above,
       {above,
        {text,[3,96,96,96]},
        {sep,
         [{text,
           [292,10,32,32,32,32,32,32,109,110,101,115,105,97,58,102,105,114,
            115,116,40,84,97,98,41,32,45,62,32,32,75,101,121,32,124,32,116,
            114,97,110,115,97,99,116,105,111,110,32,97,98,111,114,116,10,32,
            32,32,32,32,32,109,110,101,115,105,97,58,108,97,115,116,40,84,97,
            98,41,32,32,45,62,32,32,75,101,121,32,124,32,116,114,97,110,115,
            97,99,116,105,111,110,32,97,98,111,114,116,10,32,32,32,32,32,32,
            109,110,101,115,105,97,58,110,101,120,116,40,84,97,98,44,75,101,
            121,41,32,32,45,62,32,32,75,101,121,32,124,32,116,114,97,110,115,
            97,99,116,105,111,110,32,97,98,111,114,116,10,32,32,32,32,32,32,
            109,110,101,115,105,97,58,112,114,101,118,40,84,97,98,44,75,101,
            121,41,32,32,45,62,32,32,75,101,121,32,124,32,116,114,97,110,115,
            97,99,116,105,111,110,32,97,98,111,114,116,10,32,32,32,32,32,32,
            109,110,101,115,105,97,58,115,110,109,112,95,103,101,116,95,110,
            101,120,116,95,105,110,100,101,120,40,84,97,98,44,73,110,100,101,
            120,41,32,45,62,32,123,111,107,44,32,78,101,120,116,73,110,100,
            101,120,125,32,124,32,101,110,100,79,102,84,97,98,108,101]}],
         0,true}},
       {text,[3,96,96,96]}},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,[{text,"\fThe order of"}],0,false},
          {text,[7,42,102,105,114,115,116,42]},
          {sep,[{text,[1,47]}],0,false},
          {text,[6,42,108,97,115,116,42]},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,[6,42,110,101,120,116,42]},
          {sep,[{text,[1,47]}],0,false},
          {text,[6,42,112,114,101,118,42]},
          {sep,
           [{text,
             [17,105,115,32,111,110,108,121,32,118,97,108,105,100,32,102,111,
              114]}],
           0,false},
          {text,"\r*ordered_set*"},
          {sep,
           [{text,
             "atables, they are synonyms for other tables. When the end of the table is reached, the special key"}],
           0,false},
          {text,
           [17,42,39,36,101,110,100,95,111,102,95,116,97,98,108,101,39,42]},
          {sep,[{text,"\fis returned."}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             "IIf records are written and deleted during the traversal, use the function"}],
           0,false},
          {text," [mnesia:foldl/3](./mnesia#foldl)"},
          {sep,[{text,[2,111,114]}],0,false},
          {text," [mnesia:foldr/3](./mnesia#foldr)"},
          {sep,[{text,[6,119,105,116,104,32,97]}],0,false},
          {text,[7,42,119,114,105,116,101,42]},
          {sep,
           [{text,
             [21,108,111,99,107,46,32,79,114,32,116,104,101,32,102,117,110,99,
              116,105,111,110]}],
           0,false},
          {text,"8[mnesia:write_lock_table/1](./mnesia#write_lock_table/1)"},
          {sep,[{text,"\nwhen using"}],0,false},
          {text,[7,42,102,105,114,115,116,42]},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,[6,42,110,101,120,116,42]},
          {sep,[{text,[1,46]}],0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [151,87,114,105,116,105,110,103,32,111,114,32,100,101,108,101,
              116,105,110,103,32,105,110,32,116,114,97,110,115,97,99,116,105,
              111,110,32,99,111,110,116,101,120,116,32,99,114,101,97,116,101,
              115,32,97,32,108,111,99,97,108,32,99,111,112,121,32,111,102,32,
              101,97,99,104,32,109,111,100,105,102,105,101,100,32,114,101,99,
              111,114,100,46,32,84,104,117,115,44,32,109,111,100,105,102,121,
              105,110,103,32,101,97,99,104,32,114,101,99,111,114,100,32,105,
              110,32,97,32,108,97,114,103,101,32,116,97,98,108,101,32,117,115,
              101,115,32,109,117,99,104,32,109,101,109,111,114,121,46]}],
           0,false},
          {text,"\b*Mnesia*"},
          {sep,
           [{text,
             "ècompensates for every written or deleted record during the iteration in a transaction context, which can reduce the performance. If possible, avoid writing or deleting records in the same transaction before iterating over the table."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}},
   {above,
    {above,{above,{text,[0]},null},null},
    {above,
     {above,
      {sep,
       [{sep,
         [{sep,
           [{text,
             [26,73,110,32,100,105,114,116,121,32,99,111,110,116,101,120,116,
              44,32,116,104,97,116,32,105,115,44]}],
           0,false},
          {text,"\f*sync_dirty*"},
          {sep,[{text,[2,111,114]}],0,false},
          {text,"\r*async_dirty*"},
          {sep,
           [{text,
             [261,44,32,116,104,101,32,109,111,100,105,102,105,101,100,32,114,
              101,99,111,114,100,115,32,97,114,101,32,110,111,116,32,115,116,
              111,114,101,100,32,105,110,32,97,32,108,111,99,97,108,32,99,111,
              112,121,59,32,105,110,115,116,101,97,100,44,32,101,97,99,104,32,
              114,101,99,111,114,100,32,105,115,32,117,112,100,97,116,101,100,
              32,115,101,112,97,114,97,116,101,108,121,46,32,84,104,105,115,
              32,103,101,110,101,114,97,116,101,115,32,109,117,99,104,32,110,
              101,116,119,111,114,107,32,116,114,97,102,102,105,99,32,105,102,
              32,116,104,101,32,116,97,98,108,101,32,104,97,115,32,97,32,114,
              101,112,108,105,99,97,32,111,110,32,97,110,111,116,104,101,114,
              32,110,111,100,101,32,97,110,100,32,104,97,115,32,97,108,108,32,
              116,104,101,32,111,116,104,101,114,32,100,114,97,119,98,97,99,
              107,115,32,116,104,97,116,32,100,105,114,116,121,32,111,112,101,
              114,97,116,105,111,110,115,32,104,97,118,101,46,32,69,115,112,
              101,99,105,97,108,108,121,32,102,111,114,32,99,111,109,109,97,
              110,100,115]}],
           0,false},
          {text,"\"[mnesia:first/1](./mnesia#first/1)"},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text," [mnesia:next/2](./mnesia#next/2)"},
          {sep,
           [{text,"0, the same drawbacks as described previously for"}],
           0,false},
          {text,".[mnesia:dirty_first/1](./mnesia#dirty_first/1)"},
          {sep,[{text,[3,97,110,100]}],0,false},
          {text,",[mnesia:dirty_next/2](./mnesia#dirty_next/2)"},
          {sep,
           [{text,
             "Iapplies, that is, no writing to the table is to be done during iteration."}],
           0,false}],
         0,false}],
       0,true},
      null},
     null}}],
  0,false}}
