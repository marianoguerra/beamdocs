
fn tag @public
case Tag, Attrs, Childs when is_binary(Childs) or is_tuple(Childs):
  tag(Tag, Attrs, [Childs])
case Tag, Attrs, Childs:
  (Tag, Attrs, Childs)
end

fn br @public case: tag(br, {}, []) end
fn hr @public case: tag(hr, {}, []) end
fn empty @public case: tag(empty, {}, []) end

fn ol @public case Childs: ol({}, Childs) end
fn ol @public case Attrs, Childs: tag(ol, Attrs, Childs) end
fn ul @public case Childs: ul({}, Childs) end
fn ul @public case Attrs, Childs: tag(ul, Attrs, Childs) end
fn li @public case Childs: li({}, Childs) end
fn li @public case Attrs, Childs: tag(li, Attrs, Childs) end

fn dl @public case Childs: dl({}, Childs) end
fn dl @public case Attrs, Childs: tag(dl, Attrs, Childs) end
fn dd @public case Childs: dd({}, Childs) end
fn dd @public case Attrs, Childs: tag(dd, Attrs, Childs) end
fn dt @public case Childs: dt({}, Childs) end
fn dt @public case Attrs, Childs: tag(dt, Attrs, Childs) end

fn strong @public case Childs: strong({}, Childs) end
fn strong @public case Attrs, Childs: tag(strong, Attrs, Childs) end
fn em @public case Childs: em({}, Childs) end
fn em @public case Attrs, Childs: tag(em, Attrs, Childs) end
fn u @public case Childs: u({}, Childs) end
fn u @public case Attrs, Childs: tag(u, Attrs, Childs) end

fn div @public case Childs: div({}, Childs) end
fn div @public case Attrs, Childs: tag(div, Attrs, Childs) end
fn span @public case Childs: span({}, Childs) end
fn span @public case Attrs, Childs: tag(span, Attrs, Childs) end
fn p @public case Childs: p({}, Childs) end
fn p @public case Attrs, Childs: tag(p, Attrs, Childs) end

fn a @public case Childs: a({}, Childs) end
fn a @public case Attrs, Childs: tag(a, Attrs, Childs) end

fn code @public case Attrs, Childs: tag(code, Attrs, Childs) end

fn pre @public case Childs: pre({}, Childs) end
fn pre @public case Attrs, Childs: tag(pre, Attrs, Childs) end

fn img @public case Attrs: img(Attrs, []) end
fn img @public case Attrs, Childs: tag(img, Attrs, Childs) end

fn figure @public case Attrs, Childs: tag(figure, Attrs, Childs) end
#_ "used for references?"

fn link @public case Attrs, Childs: tag(link, Attrs, Childs) end
#_ "used for error warning info?"

fn dialog @public case Attrs, Childs: tag(dialog, Attrs, Childs) end

fn h1 @public case Childs: h1({}, Childs) end
fn h1 @public case Attrs, Childs: tag(h1, Attrs, Childs) end
fn h2 @public case Childs: h2({}, Childs) end
fn h2 @public case Attrs, Childs: tag(h2, Attrs, Childs) end
fn h3 @public case Childs: h3({}, Childs) end
fn h3 @public case Attrs, Childs: tag(h3, Attrs, Childs) end
fn h4 @public case Childs: h4({}, Childs) end
fn h4 @public case Attrs, Childs: tag(h4, Attrs, Childs) end
fn h5 @public case Childs: h5({}, Childs) end
fn h5 @public case Attrs, Childs: tag(h5, Attrs, Childs) end
fn h6 @public case Childs: h6({}, Childs) end
fn h6 @public case Attrs, Childs: tag(h6, Attrs, Childs) end

fn table @public case Childs: table({}, Childs) end
fn table @public case Attrs, Childs: tag(table, Attrs, Childs) end
fn thead @public case Childs: thead({}, Childs) end
fn thead @public case Attrs, Childs: tag(thead, Attrs, Childs) end
fn tbody @public case Childs: tbody({}, Childs) end
fn tbody @public case Attrs, Childs: tag(tbody, Attrs, Childs) end
fn tr @public case Childs: tr({}, Childs) end
fn tr @public case Attrs, Childs: tag(tr, Attrs, Childs) end
fn th @public case Childs: th({}, Childs) end
fn th @public case Attrs, Childs: tag(th, Attrs, Childs) end
fn td @public case Childs: td({}, Childs) end
fn td @public case Attrs, Childs: tag(td, Attrs, Childs) end

fn to_md @public case Doc:
  beamdocs_md.from_ast(Doc)
end

fn test @public case:
  R = to_md(div([
      h1('Heading 1'),
      p('some paragraph'),
      p('another paragraph'),
      hr(),
      p('yet another paragraph'),
      h2('Heading 2'),
      p([
        span('other paragraph'),
        em('some emphasis'),
        strong('strong words'), 
        u('mark my words'),
      ]),
      h3('Heading 3'),
      ol([
        li('one'),
        li('two'),
        li('tres'),
      ]),
      dialog({type: danger, title: 'Danger Title'}, p('some content')),
      dialog({type: warning, title: 'Warning Title'}, p('some content')),
      dialog({type: success, title: 'Success Title'}, p('some content')),
      h4('Heading 4'),
      ul([
        li('apple'),
        li('orange'),
        li('I\'m a BANANA!'),
        li(p([
          'a really really really really',
          'long', em('loooooooooooooong'),
          strong('list item.....'),
          ul([
            li('sub item 1'),
            li('sub item 2')
          ])
        ])),
      ]),
      h5('Heading 5'),
      p([
        a({href: 'https://efene.org'}, 'a link'),
        a({name: 'a-name'}, 'a link'),
        img({src: 'https://via.placeholder.com/350x150', alt: 'Placeholder'}),
        dl([
          dd('atom'), dt('a value whose value is itself'),
          dd('number'), dt('a value whose value is a number'),
        ])
      ]),
      h6('Heading 6'),
      code({lang: 'erl'}, 'io:format("hi~n")'),
      br(),
      pre('io:format("hi~n")'),
      p([
        span('nested * special _ chars **!'),
        em('nested * special _ chars **!'),
        strong('nested * special _ chars **!'),
        u('nested * special _ chars **!'),
      ]),
    ]))

  io.format("~s~n", [R])
end

fn new_ctx case:
  {no_nl: false}
end

fn transform @public case Childs:
  Ctx = new_ctx()
  for Node in beamdocs_aft.transform(Childs): to_ast(Node, Ctx) end
end

fn top_level_title case Items:
  for (Item=(title, _, _)) in Items: Item end
end

fn wrap_if_raw
case V = (_, _, _): V
case V: span({}, V)
end

fn to_ast
case (section, _, []), _Ctx:
  empty()
case (section, {t=T}, Childs), Ctx
when T is warning or T is `do` or T is dont or T is note:
  (AlertType, Title) =
  match T:
    case warning: (warning, 'Warning')
    case `do`: (success, 'Do')
    case dont: (danger, 'Don\'t')
    case note: (info, 'Note')
  end

  dialog({type: AlertType, title: Title}, to_ast(Childs, Ctx))
 
case (section, {t=header}, Items), Ctx:
  match top_level_title(Items):
    case [Title]:
      to_ast(Title, Ctx)
    case []:
      empty()
  end

case (section, _, [Node=(section, _, _)]), Ctx:
  to_ast(Node, Ctx)
case (section, _, Childs), Ctx:
  #_ "TODO: check the attributes"
  div({type: section}, childs(Childs, Ctx))

case (table, Attrs, Rows), Ctx:
  Caption = maps.get(caption, Attrs, '')
  TBody =
  for (row, Row) in Rows:
    Tr = for (cell, Cell) in Row: td(to_ast(Cell, Ctx)) end
    tr(Tr)
  end
  table({caption: Caption}, tbody(TBody))

case Other, Ctx:
  inline(Other, Ctx)
end

fn remove_redundant
case Items when is_list(Items):
  remove_redundant(Items, [])
case Item:
  remove_redundant([Item], [])
end

fn remove_redundant
case [], Accum:
  lists.reverse(Accum)
case (span, _, '') :: T, Accum:
  remove_redundant(T, Accum)
case (span, _, ['']) :: T, Accum:
  remove_redundant(T, Accum)
case H :: T, Accum:
  remove_redundant(T, H :: Accum)
end

fn inline
case (title, {level=1}, Childs), Ctx:
  h1({}, plain(Childs, Ctx # {no_nl=true}))
case (title, {level=2}, Childs), Ctx:
  h2({}, plain(Childs, Ctx # {no_nl=true}))
case (title, {level=3}, Childs), Ctx:
  h3({}, plain(Childs, Ctx # {no_nl=true}))
case (title, {level=4}, Childs), Ctx:
  h4({}, plain(Childs, Ctx # {no_nl=true}))
case (title, {level=5}, Childs), Ctx:
  h5({}, plain(Childs, Ctx # {no_nl=true}))
case (title, {level=6}, Childs), Ctx:
  h6({}, plain(Childs, Ctx # {no_nl=true}))
case (title, {level=_}, Childs), Ctx:
  h6({}, plain(Childs, Ctx # {no_nl=true}))

case (img, {ref=Ref}, Title), _Ctx:
  img({src: Ref, alt: Title})

case (marker, {ref=Id}, _), _Ctx:
  a({name: Id}, [])
case (link, {ref=Ref}, Childs), Ctx:
  a({href: Ref}, inline_unwrap_safe(Childs, Ctx))
case (em, _, Childs), Ctx:
  em({}, inline_unwrap_safe(Childs, Ctx))
case (strong, _, Childs), Ctx:
  strong({}, inline_unwrap_safe(Childs, Ctx))
case (p, _, Childs), Ctx:
  p({}, inline(Childs, Ctx))
case Text, _Ctx when is_binary(Text):
  span({}, strip(nl_to_space(Text)))
case List, Ctx when is_list(List):
  match io_lib.deep_char_list(List):
    case true:
      span({}, strip(nl_to_space(List)))
    else:
      div({}, remove_redundant((for Item in List: inline(Item, Ctx) end)))
  end

case (span, {t=T}, Childs), Ctx:
  span({type: T}, inline_unwrap_safe(Childs, Ctx))
case (span, _, Childs), Ctx:
  span({}, inline_unwrap_safe(Childs, Ctx))
case (li, _, Childs), Ctx:
  ul(li(inline_unwrap_safe(Childs, Ctx)))
case (list, _, Items), Ctx:
  ul((for (li, _, Item) in Items: li(inline_unwrap_safe(Item, Ctx)) end))

case (dl, _, Childs), Ctx:
  Items = for (dd, _, (Name, Desc)) in Childs:
    [dt(to_ast(wrap_if_raw(Name), Ctx)), dd(inline_unwrap_safe(Desc, Ctx))]
  end

  dl({}, lists.flatten(Items))

case (pre, _, Childs), Ctx:
  #_ "TODO: plain text childs"
  pre(plain_unwrap_safe(Childs, Ctx))
case (code, {lang=Lang}, Childs), Ctx:
  #_ "TODO: plain text childs"
  code({lang: Lang}, plain_unwrap_safe(Childs, Ctx))


case (ignore, A, C), _Ctx:
  io.format("ast:ignore: ~p ~p~n", [A, C])
  empty()

case (br, _), _Ctx:
  br()

case (section, _, Childs), Ctx:
  div({}, childs(Childs, Ctx))
case Other=(Tag, _, Childs), Ctx:
  io.format("wat: ~p~n~n", [Other])
  div({type: Tag}, childs(Childs, Ctx))
case Other, _Ctx:
  io.format("wat??: ~p~n~n", [Other])
  span({}, 'WAT')
end

fn plain
case (img, {ref=Ref}, Title), _Ctx:
  span(iol2b(["image:", Ref, " (", Title, ")"]))

case (marker, {id=Id}, _), _Ctx:
  span(iol2b(["id:", Id]))
case (marker, {ref=_}, Childs), Ctx:
  plain(Childs, Ctx)
case (link, {ref=_}, Childs), Ctx:
  plain(Childs, Ctx)
case (em, _, Childs), Ctx:
  plain(Childs, Ctx)
case (strong, _, Childs), Ctx:
  plain(Childs, Ctx)
case (p, _, Childs), Ctx:
  plain(Childs, Ctx)
case Text, _Ctx when is_binary(Text):
  span(Text)
case List, Ctx when is_list(List):
  match io_lib.deep_char_list(List):
    case true:
      span(iol2b(List))
    else:
      try
        for Item in List:
          plain(Item, Ctx)
        end
      catch case T, E:
        io.format("WATTTT: ~p ~p ~p", [T, E, List])
        empty()
      end
  end

case (span, _, Childs), Ctx:
  plain(Childs, Ctx)
case (li, _, Childs), Ctx:
  plain(Childs, Ctx)
case (list, _, Items), Ctx:
  for (li, _, Item) in Items: plain(Item, Ctx) end

case (dl, _, Childs), Ctx:
  Items = for (dd, _, (Name, Desc)) in Childs:
    [plain(Name, Ctx), span(': '), plain(Desc, Ctx)]
  end

  lists.flatten(Items)

case (pre, _, Childs), Ctx:
  plain(Childs, Ctx)
case (code, _, Childs), Ctx:
  plain(Childs, Ctx)


case (ignore, A, C), _Ctx:
  io.format("ast:ignore: ~p ~p~n", [A, C])
  empty()

case (br, _), _Ctx:
  br()

case (_, _, Childs), Ctx:
  plain(Childs, Ctx)
case V, {no_nl=true} when is_binary(V):
  span(nl_to_space(V))
case V, _Ctx when is_binary(V):
  span(V)
case Other, _Ctx:
  io.format("wat??: ~p~n~n", [Other])
  span({}, 'WAT')
end

fn plain_unwrap_safe case Childs, Ctx:
  x_unwrap_safe(Childs, Ctx, fn plain:2)
end

fn inline_unwrap_safe case Childs, Ctx:
  x_unwrap_safe(Childs, Ctx, fn inline:2)
end

fn x_unwrap_safe
case Childs, Ctx, Fn:
  match Fn(Childs, Ctx):
  case Items when is_list(Items):
    for Item in Items: unwrap_safe(Item) end
  case Item:
    unwrap_safe(Item)
  end
end

fn unwrap_safe
case (div, Attrs, [Child]) when map_size(Attrs) is 0:
  unwrap_safe(Child)
case (span, Attrs, Child) when map_size(Attrs) is 0:
  unwrap_safe(Child)
case (span, Attrs, Childs) when map_size(Attrs) is 0:
  (span, Attrs, (for Item in Childs: unwrap_safe(Item) end))
case [V]:
  unwrap_safe(V)
case V:
  V
end

fn childs
case Childs, Ctx when is_list(Childs):
  for Child in Childs : to_ast(Child, Ctx) end
case Node, Ctx:
  to_ast(Node, Ctx)
end

fn bs case V: unicode.characters_to_binary(V) end

fn escape_entities @public case Text:
  xmerl_lib.export_text(bs(Text))
end

fn strip @public case IOList: strip(IOList, binary) end

fn strip @public case IOList, RetType:
    re.replace(IOList, "(^(\n|\\s)+|(\n|\\s)+$)", "",
      [global, unicode, (return, RetType)])
end
  
fn nl_to_space @public case IOList:
  re.replace(IOList, "(\n|\\s)+", " ", [global, unicode, (return, binary)])
end

fn iol2b @public case IOList:
  list_to_binary(lists.flatten(IOList))
end
