@include_lib("xmerl/include/xmerl.hrl")

fn parse @public
case #r.xmlElement {name: erlref, content: Nodes}, Info:
  child_nodes(Nodes, Info, fn erlref_tags:2)
case #r.xmlElement {name: appref, content: Nodes}, Info:
  child_nodes(Nodes, Info, fn appref_tags:2)
case #r.xmlElement {name: cref, content: Nodes}, Info:
  child_nodes(Nodes, Info, fn cref_tags:2)
case #r.xmlElement {name: comref, content: Nodes}, Info:
  child_nodes(Nodes, Info, fn comref_tags:2)
case #r.xmlElement {name: fileref, content: Nodes}, Info:
  child_nodes(Nodes, Info, fn fileref_tags:2)
case #r.xmlElement {name: application, content: Nodes}, Info:
  child_nodes(Nodes, Info, fn application_tags:2)
case #r.xmlElement {name: chapter, content: Nodes}, Info:
  child_nodes(Nodes, Info, fn chapter_tags:2)
case #r.xmlElement {name: part, content: Nodes}, Info:
  child_nodes(Nodes, Info, fn chapter_tags:2)
case #r.xmlElement {name: bookinsidecover}, _Info:
  (bookinsidecover, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: specs}, _Info:
  (specs, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: fascicules}, _Info:
  (fascicules, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: book}, _Info:
  (book, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: section}, _Info:
  (section, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: cites}, _Info:
  (cites, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: terms}, _Info:
  (terms, {}, 'NOT IMPLEMENTED')
case Node=#r.xmlElement {name: Name}, Info:
  (ignore, {node: Node, node_name: Name, info: Info}, '')
end

fn application_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#id68222")
case Other, Info:
  ref_tags(Other, Info)
end

fn fileref_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#id65633")
case #r.xmlElement {name: file, content: NText}, _Info:
  (file, {}, ntext(NText))
case #r.xmlElement {name: filesummary, content: NText}, _Info:
  (filesummary, {}, ntext(NText))
case Other, Info:
  ref_tags(Other, Info)
end

fn appref_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#id68212")
case #r.xmlElement {name: app, content: NText}, _Info:
  (app, {}, ntext(NText))
case #r.xmlElement {name: appsummary, content: NText}, _Info:
  (appsummary, {}, ntext(NText))
case Other, Info:
  ref_tags(Other, Info)
end

fn cref_tags
case #r.xmlElement {name: lib, content: NText}, _Info:
  (lib, {}, ntext(NText))
case #r.xmlElement {name: libsummary, content: NText}, _Info:
  (libsummary, {}, ntext(NText))
case Other, Info:
  ref_tags(Other, Info)
end

fn comref_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#id68212")
case #r.xmlElement {name: com, content: NText}, _Info:
  (com, {}, ntext(NText))
case #r.xmlElement {name: comsummary, content: NText}, _Info:
  (comsummary, {}, ntext(NText))
case Other, Info:
  ref_tags(Other, Info)
end

fn erlref_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#erlrefDTD")
case #r.xmlElement {name: module, content: NText}, _Info:
  (module, {}, ntext(NText))
case #r.xmlElement {name: modulesummary, content: NText}, _Info:
  (modulesummary, {}, ntext(NText))
case Other, Info:
  ref_tags(Other, Info)
end

fn chapter_tags
@ref("http://erlang.org/doc/apps/erl_docgen/user_guide_dtds.html#chapterDTD")
case Node, Info:
  match ref_tags(Node, Info):
    case unknown, _, _:
      block_tags(Node)
    case Result:
      Result
  end
end

fn handle_include case Attrs, Info={path=Path, dtd_paths=DtdPaths}:
  #_ "lib/common_test/doc/src/part_notes_history.xml has file attr"
  HRef= match attrs(Attrs):
    case {href=HR}: HR
    case {file=Name}: #b {Name: binary, '.xml': binary}
  end
  DirName = filename.dirname(Path)
  IncludePath = filename.join(DirName, HRef)
  try
    match xmerl_scan.file(IncludePath, [(fetch_path, DtdPaths)]):
      case error, Reason:
        io.format("Error: ~p~nincluder: ~p~nincluded: ~p~n~n", [Reason, Path, IncludePath])
        (error, {}, Reason)
      case ParseResult, _Misc:
        (include,
          {file: HRef, path: Path, parent: Path},
          parse(ParseResult, Info#{path: IncludePath}))
    end
  catch case Type, Error:
    io.format("Error: ~p ~p~nincluder: ~p~nincluded: ~p~n~n",
      [Type, Error, Path, IncludePath])
    (error, {}, Error)
  end
end

fn ref_tags
case #r.xmlElement {name: header, content: Nodes}, _Info:
  (header, {}, child_nodes(Nodes, fn header_tags:1))
case #r.xmlElement {name: description, content: Nodes}, _Info:
  (description, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: section, content: Nodes}, _Info:
  (section, {}, child_nodes(Nodes, fn section_tags:1))
case #r.xmlElement {name: funcs, content: Nodes}, _Info:
  (funcs, {}, child_nodes(Nodes, fn func_tags:1))
case #r.xmlElement {name: authors, content: Nodes}, _Info:
  (authors, {}, child_nodes(Nodes, fn authors_tags:1))
case #r.xmlElement {name: datatypes, content: Nodes}, _Info:
  (datatypes, {}, child_nodes(Nodes, fn datatypes_tags:1))
case #r.xmlElement {name: include, attributes: Attrs}, Info:
  handle_include(Attrs, Info)
case #r.xmlElement {name: `xi:include`, attributes: Attrs}, Info:
  handle_include(Attrs, Info)
case #r.xmlElement {name: `xi:lude`, attributes: Attrs}, Info:
  #_ "https://bugs.erlang.org/browse/ERL-409"
  handle_include(Attrs, Info)
case Other, _Info:
  (unknown, {}, Other)
end

fn datatypes_tags
case #r.xmlElement {name: datatype_title, attributes: Attrs, content: NText}:
  (datatype_title, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: datatype, attributes: Attrs, content: Nodes}:
  (datatype, attrs(Attrs), child_nodes(Nodes, fn datatype_content:1))
end

fn datatype_content
case #r.xmlElement {name: name, attributes: Attrs, content: NText}:
  (name, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: desc, content: Nodes}:
  (desc, {}, child_nodes(Nodes, fn block_tags:1))
end

fn section_tags
case #r.xmlElement {name: marker, attributes: Attrs}:
  (marker, attrs(Attrs), '')
case #r.xmlElement {name: title, content: NText}:
  (title, {}, ntext(NText))
case Other:
  block_tags(Other)
end

fn func_tags
case #r.xmlElement {name: func, content: Nodes}:
  (func, {}, child_nodes(Nodes, fn func_content: 1))
end

fn func_content
case #r.xmlElement {name: name, attributes: Attrs, content: Nodes}:
  (name, attrs(Attrs), remove_blank_text(all_child_nodes(Nodes, fn name_content:1)))
case #r.xmlElement {name: fsummary, content: Nodes}:
  (fsummary, {}, all_child_nodes(Nodes, fn inline_tags:1))
case #r.xmlElement {name: type, attributes: Attrs, content: []}:
  (type, attrs(Attrs), [])
case #r.xmlElement {name: type, content: Nodes}:
  (type, {}, child_nodes(Nodes, fn type_tags:1))
case #r.xmlElement {name: desc, content: Nodes}:
  (desc, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: type_desc, attributes: Attrs, content: Nodes}:
  (type_desc, attrs(Attrs), all_child_nodes(Nodes, fn inline_tags:1))
end

fn remove_blank_text case Nodes:
  lists.filter(Nodes) <<-
  case (text, _, Node) when is_binary(Node):
    match strip(Node):
      case '': false
      else: true
    end
  else: true
  end
end

fn name_content
case #r.xmlElement {name: ret, attributes: Attrs, content: NText}:
  (ret, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: nametext, attributes: Attrs, content: NText}:
  (nametext, attrs(Attrs), ntext(NText))
case Node=#r.xmlElement {name: seealso}:
  #_ "seen in diameter.xml: <name>origin_state_id() -> &dict_Unsigned32;</name>"
  seealso(Node)
case NText=#r.xmlText {}:
  (text, {}, ntext([NText]))
end

fn type_tags
case #r.xmlElement {name: v, content: Nodes}:
  (v, {}, all_child_nodes(Nodes, fn inline_tags:1))
case #r.xmlElement {name: d, content: Nodes}:
  (d, {}, child_nodes(Nodes, fn inline_tags:1))
end

fn authors_tags
case #r.xmlElement {name: authors, content: Nodes}:
  (authors, {}, child_nodes(Nodes, fn authors_content:1))
end

fn authors_content
case #r.xmlElement {name: aname, content: NText}:
  (aname, {}, ntext(NText))
case #r.xmlElement {name: email, content: NText}:
  (email, {}, ntext(NText))
end

fn text case Nodes:
  Texts = for #r.xmlText {value: Text} in Nodes: Text end
  Texts -> to_bstr() 
end

fn ntext case Nodes:
  Texts = for #r.xmlText {value: Text} in Nodes: trim(Text) end
  Texts -> to_bstr() 
end

fn rtext case Nodes:
  Texts = for #r.xmlText {value: Text} in Nodes: Text end
  Texts -> to_bstr() 
end

fn titext case Nodes:
  Texts = for #r.xmlText {value: Text} in Nodes: Text end
  indents_to_space(Texts)
end

fn header_tags
@ref("http://erlang.org/doc/apps/erl_docgen/header_tags.html")
case #r.xmlElement {name: copyright, content: Nodes}:
  (copyright, {}, child_nodes(Nodes, fn copyright_content:1))
case #r.xmlElement {name: legalnotice, content: Text}:
  (legalnotice, {}, text(Text))
case #r.xmlElement {name: title, content: NText}:
  (title, {}, ntext(NText))
case #r.xmlElement {name: shorttitle, content: NText}:
  (shorttitle, {}, ntext(NText))
case #r.xmlElement {name: prepared, content: NText}:
  (prepared, {}, ntext(NText))
case #r.xmlElement {name: responsible, content: NText}:
  (responsible, {}, ntext(NText))
case #r.xmlElement {name: docno, content: NText}:
  (docno, {}, ntext(NText))
case #r.xmlElement {name: approved, content: NText}:
  (approved, {}, ntext(NText))
case #r.xmlElement {name: checked, content: NText}:
  (checked, {}, ntext(NText))
case #r.xmlElement {name: date, content: NText}:
  (date, {}, ntext(NText))
case #r.xmlElement {name: rev, content: NText}:
  (rev, {}, ntext(NText))
case #r.xmlElement {name: file, content: NText}:
  (file, {}, ntext(NText))
end

fn copyright_content
case #r.xmlElement {name: year, content: NText}:
  (year, {}, ntext(NText))
case #r.xmlElement {name: holder, content: NText}:
  (holder, {}, ntext(NText))
end

fn child_nodes case Nodes, Fn:
  child_nodes(Nodes, nil, Fn, [])
end

fn child_nodes case Nodes, Info, Fn:
  child_nodes(Nodes, Info, Fn, [])
end

fn child_nodes
case [], _Info, _Fn, Accum:
  lists.reverse(Accum)
case #r.xmlText {} :: T, Info, Fn, Accum:
  child_nodes(T, Info, Fn, Accum)
case #r.xmlComment {value: Value} :: T, Info, Fn, Accum:
  Result = (comment, {}, to_bstr(Value))
  child_nodes(T, Info, Fn, Result :: Accum)
case H :: T, Info=nil, Fn, Accum:
  Result = Fn(H)
  child_nodes(T, Info, Fn, Result :: Accum)
case H :: T, Info, Fn, Accum:
  Result = Fn(H, Info)
  child_nodes(T, Info, Fn, Result :: Accum)
end

fn all_child_nodes case Nodes, Fn:
  all_child_nodes(Nodes, Fn, [])
end

fn all_child_nodes
case [], _Fn, Accum:
  lists.reverse(Accum)
case #r.xmlComment {value: Value} :: T, Fn, Accum:
  Result = (comment, {}, to_bstr(Value))
  all_child_nodes(T, Fn, Result :: Accum)
case H :: T, Fn, Accum:
  Result = Fn(H)
  all_child_nodes(T, Fn, Result :: Accum)
end

fn parse_mark
case #c "#" :: MarkRef:
  (anchor, MarkRef)
case MarkRef:
  match string.tokens(MarkRef, "#"):
    case [Id, Ref]:
      match string.tokens(Id, ":"):
        case [App, Mod]:
          (app_anchor, (App, Mod, Ref))
        case [Mod]:
          (mod_anchor, (Mod, Ref))
      end
    case [Id]:
      match string.tokens(Id, ":"):
        case [App, Mod]:
          (app_mod, (App, Mod))
        case [Mod]:
          (mod, Mod)
      end
  end
end

fn seealso
case #r.xmlElement {name: seealso, attributes: Attrs, content: RText}:
  Mark = maps.get(marker, attrs(Attrs), '#unknown') -> binary_to_list()
  (seealso, {marker: parse_mark(Mark)}, titext(RText))
end

fn inline_tags
@ref("http://erlang.org/doc/apps/erl_docgen/inline_tags.html")
case #r.xmlElement {name: br}: (br, {}, '')
case #r.xmlElement {name: c, content: Nodes}:
  (c, {}, all_child_nodes(Nodes, fn inline_tags:1))
case #r.xmlElement {name: i, content: RText}:
  (i, {}, titext(RText))
case #r.xmlElement {name: strong, content: RText}:
  (strong, {}, titext(RText))
case #r.xmlElement {name: anno, content: RText}:
  (anno, {}, titext(RText))
case #r.xmlElement {name: em, content: Nodes}:
  (em, {}, all_child_nodes(Nodes, fn inline_tags:1))
case #r.xmlElement {name: marker, attributes: Attrs}:
  (marker, attrs(Attrs), '')
case Node=#r.xmlElement {name: seealso}:
  seealso(Node)
case #r.xmlElement {name: url, attributes: Attrs, content: RText}:
  (url, attrs(Attrs), titext(RText))
case #r.xmlElement {name: term, attributes: Attrs,
  content: [#r.xmlElement {name: termdef, content: RText}]}:
    (term, attrs(Attrs), titext(RText))
case #r.xmlElement {name: term, attributes: Attrs, content: RText}:
    (term, attrs(Attrs), titext(RText))
case #r.xmlElement {name: cite, attributes: Attrs,
  content: [#r.xmlElement {name: citedef, content: RText}]}:
    (cite, attrs(Attrs), titext(RText))
case #r.xmlElement {name: cite, attributes: Attrs, content: RText}:
    (cite, attrs(Attrs), titext(RText))
case #r.xmlElement {name: path, attributes: Attrs, content: NText}:
  (path, attrs(Attrs), ntext(NText))

case #r.xmlText {value: Text}:
  (text, {}, indents_to_space(Text))
end

fn block_tags
@ref("http://erlang.org/doc/apps/erl_docgen/block_tags.html")
case #r.xmlElement {name: br}: (br, {}, '')
case #r.xmlElement {name: terms, attributes: Attrs, content: Nodes}:
  (terms, attrs(Attrs), child_nodes(Nodes, fn terms_content:1))
case #r.xmlElement {name: code, content: RText, attributes: Attrs}:
  (code, attrs(Attrs), rtext(RText))
case #r.xmlElement {name: codeinclude, attributes: Attrs}:
  (codeinclude, attrs(Attrs), '')
case #r.xmlElement {name: erleval, attributes: Attrs}:
  (erleval, attrs(Attrs), '')
case #r.xmlElement {name: list, attributes: Attrs, content: Nodes}:
  (list, attrs(Attrs), child_nodes(Nodes, fn list_content:1))
case #r.xmlElement {name: marker, attributes: Attrs}:
  (marker, attrs(Attrs), '')
case XN=#r.xmlElement {name: p}:
  p(XN)
case #r.xmlElement {name: pre, content: Nodes}:
  (pre, {}, all_child_nodes(Nodes, fn pre_content:1))
case #r.xmlElement {name: quote, content: Nodes}:
  (quote, {}, child_nodes(Nodes, fn p:1))
case #r.xmlElement {name: taglist, content: Nodes}:
  (taglist, {}, child_nodes(Nodes, fn taglist_tags:1))
case #r.xmlElement {name: note, content: Nodes}:
  (note, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: dont, content: Nodes}:
  (dont, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: `do`, content: Nodes}:
  (`do`, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: warning, content: Nodes}:
  (warning, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: image, attributes: Attrs, content: Nodes}:
  (image, attrs(Attrs), child_nodes(Nodes, fn image_content:1))
case #r.xmlElement {name: table, attributes: Attrs, content: Nodes}:
  (table, attrs(Attrs), child_nodes(Nodes, fn table_content:1))

case #r.xmlElement {name: section, content: Nodes}:
  #_ "found in appup docs"
  (section, {}, child_nodes(Nodes, fn section_tags:1))

case #r.xmlElement {name: `xi:include`, attributes: Attrs}:
  #_ "seen in diameter chapter"
  (include, attrs(Attrs), '')

case Other:
  inline_tags(Other)
end

fn table_content
case #r.xmlElement {name: row, attributes: Attrs, content: Nodes}:
  (row, attrs(Attrs), child_nodes(Nodes, fn row_content:1))
case #r.xmlElement {name: tcaption, content: NText}:
  (tcaption, {}, ntext(NText))
end

fn row_content
case #r.xmlElement {name: cell, attributes: Attrs, content: Nodes}:
  (cell, attrs(Attrs), all_child_nodes(Nodes, fn cell_content:1))
end

fn cell_content case Node: inline_tags(Node) end

fn terms_content
case #r.xmlElement {name: term, attributes: Attrs, content: Nodes}:
  (term, attrs(Attrs), child_nodes(Nodes, fn term_content:1))
end

fn term_content
case #r.xmlElement {name: id, attributes: Attrs, content: NText}:
  (id, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: shortdef, attributes: Attrs, content: NText}:
  (shortdef, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: `def`, attributes: Attrs, content: NText}:
  (`def`, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: resp, attributes: Attrs, content: NText}:
  (resp, attrs(Attrs), ntext(NText))
end

fn image_content
case #r.xmlElement {name: icaption, content: NText}:
  (icaption, {}, ntext(NText))
end

fn list_content case #r.xmlElement {name: item, content: Nodes}:
  (list_item, {}, all_child_nodes(Nodes, fn list_item_content:1))
end

fn list_item_content
case #r.xmlText {value: Text}: (text, {}, indents_to_space(Text))
case Other: block_tags(Other)
end

fn taglist_tags
case #r.xmlElement {name: tag, content: TagNodes}:
  (tag, {}, child_nodes(TagNodes, fn taglist_tag_content:1))
case #r.xmlElement {name: item, content: ItemNodes}:
  (tagitem, {}, all_child_nodes(ItemNodes, fn taglist_item_content:1))
end

fn taglist_tag_content case Node: inline_tags(Node) end

fn taglist_item_content case Node:
  list_item_content(Node)
end

fn p case #r.xmlElement {name: p, content: Nodes}:
  (p, {}, all_child_nodes(Nodes, fn p_content:1))
end

fn p_content
case #r.xmlText {value: Text}:
  (text, {}, trim_indents(Text))
case Other:
  inline_tags(Other)
end

fn pre_content
case #r.xmlText {value: Text}: (text, {}, Text)
case #r.xmlElement {name: input, content: RText}:
  (input, {}, titext(RText))
case Other: inline_tags(Other)
end

fn attrs case Attrs:
  AList = for #r.xmlAttribute {name: Name, value: Value} in Attrs:
    (Name, to_bstr(Value))
  end
  maps.from_list(AList)
end

fn to_bstr
case LStr when is_list(LStr): unicode.characters_to_binary(LStr, utf8)
case BStr when is_binary(BStr): BStr
case Atom when is_atom(Atom): Atom -> atom_to_list() -> to_bstr()
end

fn trim_indents case Val:
  re.replace(Val, "\n\\s*", "\n", [global, unicode, (return, binary)])
end

fn indents_to_space case Val:
  re.replace(Val, "\n\\s*", " ", [global, unicode, (return, binary)])
end

fn trim case Val: string.strip(Val) end

fn strip case IOList: strip(IOList, binary) end

fn strip case IOList, RetType:
  re.replace(IOList, "(^(\n|\\s)+|(\n|\\s)+$)", "",
    [global, unicode, (return, RetType)])
end
