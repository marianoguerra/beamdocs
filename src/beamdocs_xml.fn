@include_lib("xmerl/include/xmerl.hrl")

fn parse @public
case #r.xmlElement {name: erlref, content: Nodes}:
  child_nodes(Nodes, fn erlref_tags:1)
case #r.xmlElement {name: appref, content: Nodes}:
  child_nodes(Nodes, fn appref_tags:1)
case #r.xmlElement {name: cref, content: Nodes}:
  child_nodes(Nodes, fn cref_tags:1)
case #r.xmlElement {name: comref, content: Nodes}:
  child_nodes(Nodes, fn comref_tags:1)
case #r.xmlElement {name: fileref, content: Nodes}:
  child_nodes(Nodes, fn fileref_tags:1)
case #r.xmlElement {name: application, content: Nodes}:
  child_nodes(Nodes, fn application_tags:1)
case #r.xmlElement {name: bookinsidecover}:
  (bookinsidecover, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: specs}:
  (specs, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: fascicules}:
  (fascicules, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: chapter}:
  (chapter, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: part}:
  (part, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: book}:
  (book, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: section}:
  (section, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: cites}:
  (cites, {}, 'NOT IMPLEMENTED')
case #r.xmlElement {name: terms}:
  (terms, {}, 'NOT IMPLEMENTED')
end

fn application_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#id68222")
case Other:
  ref_tags(Other)
end

fn fileref_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#id65633")
case #r.xmlElement {name: file, content: NText}:
  (file, {}, ntext(NText))
case #r.xmlElement {name: filesummary, content: NText}:
  (filesummary, {}, ntext(NText))
case Other:
  ref_tags(Other)
end

fn appref_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#id68212")
case #r.xmlElement {name: app, content: NText}:
  (app, {}, ntext(NText))
case #r.xmlElement {name: appsummary, content: NText}:
  (appsummary, {}, ntext(NText))
case Other:
  ref_tags(Other)
end

fn cref_tags
case #r.xmlElement {name: lib, content: NText}:
  (lib, {}, ntext(NText))
case #r.xmlElement {name: libsummary, content: NText}:
  (libsummary, {}, ntext(NText))
case Other:
  ref_tags(Other)
end

fn comref_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#id68212")
case #r.xmlElement {name: com, content: NText}:
  (com, {}, ntext(NText))
case #r.xmlElement {name: comsummary, content: NText}:
  (comsummary, {}, ntext(NText))
case Other:
  ref_tags(Other)
end

fn erlref_tags
@ref("http://erlang.org/doc/apps/erl_docgen/refman_dtds.html#erlrefDTD")
case #r.xmlElement {name: module, content: NText}:
  (module, {}, ntext(NText))
case #r.xmlElement {name: modulesummary, content: NText}:
  (modulesummary, {}, ntext(NText))
case Other:
  ref_tags(Other)
end

fn ref_tags
case #r.xmlElement {name: header, content: Nodes}:
  (header, {}, child_nodes(Nodes, fn header_tags:1))
case #r.xmlElement {name: description, content: Nodes}:
  (description, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: section, content: Nodes}:
  (section, {}, child_nodes(Nodes, fn section_tags:1))
case #r.xmlElement {name: funcs, content: Nodes}:
  (funcs, {}, child_nodes(Nodes, fn func_tags:1))
case #r.xmlElement {name: authors, content: Nodes}:
  (authors, {}, child_nodes(Nodes, fn authors_tags:1))
case #r.xmlElement {name: datatypes, content: Nodes}:
  (datatypes, {}, child_nodes(Nodes, fn datatypes_tags:1))
case #r.xmlElement {name: include, attributes: Attrs}:
  (include, attrs(Attrs), '')
case #r.xmlElement {name: `xi:include`, attributes: Attrs}:
  (include, attrs(Attrs), '')
end

fn datatypes_tags
case #r.xmlElement {name: datatype, attributes: Attrs, content: Nodes}:
  (datatype, attrs(Attrs), child_nodes(Nodes, fn datatype_content:1))
end

fn datatype_content
case #r.xmlElement {name: name, attributes: Attrs, content: NText}:
  (name, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: desc, content: Nodes}:
  (desc, {}, child_nodes(Nodes, fn block_tags:1))
end

fn section_tags
case #r.xmlElement {name: marker, attributes: Attrs}:
  (marker, attrs(Attrs), '')
case #r.xmlElement {name: title, content: NText}:
  (title, {}, ntext(NText))
case Other:
  block_tags(Other)
end

fn func_tags
case #r.xmlElement {name: func, content: Nodes}:
  (func, {}, child_nodes(Nodes, fn func_content: 1))
end

fn func_content
case #r.xmlElement {name: name, attributes: Attrs, content: NText}:
  (name, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: fsummary, content: Nodes}:
  (fsummary, {}, child_nodes(Nodes, fn inline_tags:1))
case #r.xmlElement {name: type, content: Nodes}:
  (type, {}, child_nodes(Nodes, fn type_tags:1))
case #r.xmlElement {name: desc, content: Nodes}:
  (desc, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: type_desc, attributes: Attrs, content: Nodes}:
  (type_desc, attrs(Attrs), child_nodes(Nodes, fn inline_tags:1))
end

fn type_tags
case #r.xmlElement {name: v, content: NText}:
  (v, {}, ntext(NText))
case #r.xmlElement {name: d, content: Nodes}:
  (d, {}, child_nodes(Nodes, fn inline_tags:1))
end

fn authors_tags
case #r.xmlElement {name: authors, content: Nodes}:
  (authors, {}, child_nodes(Nodes, fn authors_content:1))
end

fn authors_content
case #r.xmlElement {name: aname, content: NText}:
  (aname, {}, ntext(NText))
case #r.xmlElement {name: email, content: NText}:
  (email, {}, ntext(NText))
end

fn text case Nodes:
  Texts = for #r.xmlText {value: Text} in Nodes: Text end
  Texts -> to_bstr() 
end

fn ntext case Nodes:
  Texts = for #r.xmlText {value: Text} in Nodes: trim(Text) end
  Texts -> to_bstr() 
end

fn rtext case Nodes:
  Texts = for #r.xmlText {value: Text} in Nodes: Text end
  Texts -> to_bstr() 
end

fn titext case Nodes:
  Texts = for #r.xmlText {value: Text} in Nodes: Text end
  indents_to_space(Texts)
end

fn header_tags
@ref("http://erlang.org/doc/apps/erl_docgen/header_tags.html")
case #r.xmlElement {name: copyright, content: Nodes}:
  (copyright, {}, child_nodes(Nodes, fn copyright_content:1))
case #r.xmlElement {name: legalnotice, content: Text}:
  (legalnotice, {}, text(Text))
case #r.xmlElement {name: title, content: NText}:
  (title, {}, ntext(NText))
case #r.xmlElement {name: shorttitle, content: NText}:
  (shorttitle, {}, ntext(NText))
case #r.xmlElement {name: prepared, content: NText}:
  (prepared, {}, ntext(NText))
case #r.xmlElement {name: responsible, content: NText}:
  (responsible, {}, ntext(NText))
case #r.xmlElement {name: docno, content: NText}:
  (docno, {}, ntext(NText))
case #r.xmlElement {name: approved, content: NText}:
  (approved, {}, ntext(NText))
case #r.xmlElement {name: checked, content: NText}:
  (checked, {}, ntext(NText))
case #r.xmlElement {name: date, content: NText}:
  (date, {}, ntext(NText))
case #r.xmlElement {name: rev, content: NText}:
  (rev, {}, ntext(NText))
case #r.xmlElement {name: file, content: NText}:
  (file, {}, ntext(NText))
end

fn copyright_content
case #r.xmlElement {name: year, content: NText}:
  (year, {}, ntext(NText))
case #r.xmlElement {name: holder, content: NText}:
  (holder, {}, ntext(NText))
end

fn child_nodes case Nodes, Fn:
  child_nodes(Nodes, Fn, [])
end

fn child_nodes
case [], _Fn, Accum:
  lists.reverse(Accum)
case #r.xmlText {} :: T, Fn, Accum:
  child_nodes(T, Fn, Accum)
case #r.xmlComment {value: Value} :: T, Fn, Accum:
  Result = (comment, {}, to_bstr(Value))
  child_nodes(T, Fn, Result :: Accum)
case H :: T, Fn, Accum:
  Result = Fn(H)
  child_nodes(T, Fn, Result :: Accum)
end

fn all_child_nodes case Nodes, Fn:
  all_child_nodes(Nodes, Fn, [])
end

fn all_child_nodes
case [], _Fn, Accum:
  lists.reverse(Accum)
case #r.xmlComment {value: Value} :: T, Fn, Accum:
  Result = (comment, {}, to_bstr(Value))
  all_child_nodes(T, Fn, Result :: Accum)
case H :: T, Fn, Accum:
  Result = Fn(H)
  all_child_nodes(T, Fn, Result :: Accum)
end

fn inline_tags
@ref("http://erlang.org/doc/apps/erl_docgen/inline_tags.html")
case #r.xmlElement {name: br}: (br, {}, '')
case #r.xmlElement {name: c, content: Nodes}:
  (c, {}, all_child_nodes(Nodes, fn inline_tags:1))
case #r.xmlElement {name: i, content: RText}:
  (i, {}, titext(RText))
case #r.xmlElement {name: anno, content: RText}:
  (anno, {}, titext(RText))
case #r.xmlElement {name: em, content: RText}:
  (em, {}, titext(RText))
case #r.xmlElement {name: marker, attributes: Attrs}:
  (marker, attrs(Attrs), '')
case #r.xmlElement {name: seealso, attributes: Attrs,
    content: RText}:
  (seealso, attrs(Attrs), titext(RText))
case #r.xmlElement {name: url, attributes: Attrs, content: RText}:
  (url, attrs(Attrs), titext(RText))
case #r.xmlElement {name: term, attributes: Attrs,
  content: [#r.xmlElement {name: termdef, content: RText}]}:
    (term, attrs(Attrs), titext(RText))
case #r.xmlElement {name: term, attributes: Attrs, content: []}:
    (term, attrs(Attrs), '')
case #r.xmlElement {name: cite, attributes: Attrs,
  content: [#r.xmlElement {name: citedef, content: RText}]}:
    (cite, attrs(Attrs), titext(RText))
case #r.xmlElement {name: path, attributes: Attrs, content: NText}:
  (path, attrs(Attrs), ntext(NText))

case #r.xmlText {value: Text}:
  (text, {}, indents_to_space(Text))
end

fn block_tags
@ref("http://erlang.org/doc/apps/erl_docgen/block_tags.html")
case #r.xmlElement {name: br}: (br, {}, '')
case #r.xmlElement {name: terms, attributes: Attrs, content: Nodes}:
  (terms, attrs(Attrs), child_nodes(Nodes, fn terms_content:1))
case #r.xmlElement {name: code, content: RText, attributes: Attrs}:
  (code, attrs(Attrs), rtext(RText))
case #r.xmlElement {name: codeinclude, attributes: Attrs}:
  (codeinclude, attrs(Attrs), '')
case #r.xmlElement {name: erleval, attributes: Attrs}:
  (erleval, attrs(Attrs), '')
case #r.xmlElement {name: list, attributes: Attrs, content: Nodes}:
  (list, attrs(Attrs), child_nodes(Nodes, fn list_content:1))
case #r.xmlElement {name: marker, attributes: Attrs}:
  (marker, attrs(Attrs), '')
case XN=#r.xmlElement {name: p}:
  p(XN)
case #r.xmlElement {name: note, content: Nodes}:
  (note, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: pre, content: Nodes}:
  (pre, {}, all_child_nodes(Nodes, fn pre_content:1))
case #r.xmlElement {name: quote, content: Nodes}:
  (quote, {}, child_nodes(Nodes, fn p:1))
case #r.xmlElement {name: taglist, content: Nodes}:
  (taglist, {}, child_nodes(Nodes, fn taglist_tags:1))
case #r.xmlElement {name: warning, content: Nodes}:
  (warning, {}, child_nodes(Nodes, fn block_tags:1))
case #r.xmlElement {name: image, attributes: Attrs, content: Nodes}:
  (image, attrs(Attrs), child_nodes(Nodes, fn image_content:1))
case #r.xmlElement {name: table, attributes: Attrs, content: Nodes}:
  (table, attrs(Attrs), child_nodes(Nodes, fn table_content:1))

case #r.xmlElement {name: section, content: Nodes}:
  #_ "found in appup docs"
  (section, {}, child_nodes(Nodes, fn section_tags:1))

case Other:
  inline_tags(Other)
end

fn table_content
case #r.xmlElement {name: row, attributes: Attrs, content: Nodes}:
  (row, attrs(Attrs), child_nodes(Nodes, fn row_content:1))
case #r.xmlElement {name: tcaption, content: NText}:
  (tcaption, {}, ntext(NText))
end

fn row_content
case #r.xmlElement {name: cell, attributes: Attrs, content: Nodes}:
  (cell, attrs(Attrs), child_nodes(Nodes, fn cell_content:1))
end

fn cell_content case Node: inline_tags(Node) end

fn terms_content
case #r.xmlElement {name: term, attributes: Attrs, content: Nodes}:
  (term, attrs(Attrs), child_nodes(Nodes, fn term_content:1))
end

fn term_content
case #r.xmlElement {name: id, attributes: Attrs, content: NText}:
  (id, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: shortdef, attributes: Attrs, content: NText}:
  (shortdef, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: `def`, attributes: Attrs, content: NText}:
  (`def`, attrs(Attrs), ntext(NText))
case #r.xmlElement {name: resp, attributes: Attrs, content: NText}:
  (resp, attrs(Attrs), ntext(NText))
end

fn image_content
case #r.xmlElement {name: icaption, content: NText}:
  (icaption, {}, ntext(NText))
end

fn list_content case #r.xmlElement {name: item, content: Nodes}:
  (list_item, {}, all_child_nodes(Nodes, fn list_item_content:1))
end

fn list_item_content
case #r.xmlText {value: Text}: (text, {}, indents_to_space(Text))
case Other: block_tags(Other)
end

fn taglist_tags
case #r.xmlElement {name: tag, content: TagNodes}:
  (tag, {}, child_nodes(TagNodes, fn taglist_tag_content:1))
case #r.xmlElement {name: item, content: ItemNodes}:
  (tagitem, {}, child_nodes(ItemNodes, fn taglist_item_content:1))
end

fn taglist_tag_content case Node: inline_tags(Node) end

fn taglist_item_content case Node:
  list_item_content(Node)
end

fn p case #r.xmlElement {name: p, content: Nodes}:
  (p, {}, all_child_nodes(Nodes, fn p_content:1))
end

fn p_content
case #r.xmlText {value: Text}:
  (text, {}, trim_indents(Text))
case Other:
  inline_tags(Other)
end

fn pre_content
case #r.xmlText {value: Text}: (text, {}, Text)
case #r.xmlElement {name: input, content: RText}:
  (input, {}, titext(RText))
case Other: inline_tags(Other)
end

fn attrs case Attrs:
  AList = for #r.xmlAttribute {name: Name, value: Value} in Attrs:
    (Name, to_bstr(Value))
  end
  maps.from_list(AList)
end

fn to_bstr
case LStr when is_list(LStr): unicode.characters_to_binary(LStr, utf8)
case BStr when is_binary(BStr): BStr
case Atom when is_atom(Atom): Atom -> atom_to_list() -> to_bstr()
end

fn trim_indents case Val:
  re.replace(Val, "\n\\s*", "\n", [global, unicode, (return, binary)])
end

fn indents_to_space case Val:
  re.replace(Val, "\n\\s*", " ", [global, unicode, (return, binary)])
end

fn trim case Val: string.strip(Val) end
