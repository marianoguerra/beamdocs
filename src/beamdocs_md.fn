@import(prettypr, [above/2, beside/2, break/1, empty/0, nest/2, text/1, text_par/1, sep/1, par/1, follow/3])

fn layout_from_ast @public case Doc:
  Ctx = new_ctx()
  to_layout(Doc, Ctx)
end

fn transform_pre @public case Nodes:
  Ctx = new_ctx()
  abovel((for Node in beamdocs_ast.transform(Nodes): to_layout(Node, Ctx) end))
end

fn transform @public case Nodes:
  Layout = transform_pre(Nodes)
  prettypr.format(Layout, 500)
end

fn to_layout @public
case (div, _Attrs, Childs), Ctx:
  clear_indent(layout_items_sep_fixed(Childs, Ctx))
case (span, _Attrs, ''), Ctx:
  empty()
case (span, _Attrs, ['']), Ctx:
  empty()
case (span, _Attrs, Childs), Ctx:
  layout_items_beside(Childs, Ctx)
case (p, _Attrs, Childs), Ctx:
  clear_both(layout_items_beside(Childs, Ctx))
case (hr, _Attrs, _Childs), _Ctx:
  clear_both(clear_both(markup("***")))
case (br, _Attrs, _Childs), _Ctx:
  break(break(empty()))
case (empty, _Attrs, _Childs), _Ctx:
  empty()
case (h1, _Attrs, Childs), Ctx:
  clear_both(wrap(Childs, Ctx, "# ", ""))
case (h2, _Attrs, Childs), Ctx:
  clear_both(wrap(Childs, Ctx, "## ", ""))
case (h3, _Attrs, Childs), Ctx:
  clear_both(wrap(Childs, Ctx, "### ", ""))
case (h4, _Attrs, Childs), Ctx:
  clear_both(wrap(Childs, Ctx, "#### ", ""))
case (h5, _Attrs, Childs), Ctx:
  clear_both(wrap(Childs, Ctx, "##### ", ""))
case (h6, _Attrs, Childs), Ctx:
  clear_both(wrap(Childs, Ctx, "###### ", ""))
case (em, _Attrs, Childs), Ctx:
  wrap(Childs, Ctx, "**", "**")
case (strong, _Attrs, Childs), Ctx:
  wrap(Childs, Ctx, "*", "*")
case (u, _Attrs, Childs), Ctx:
  wrap(Childs, Ctx, "_", "_")

case (a, {name=Ref}, []), Ctx:
  wrap(Ref, Ctx, iol2b(["<a name=\"", Ref, "\">"]), "</a>")
case (a, {name=Ref}, Childs), Ctx:
  wrap(Childs, Ctx, iol2b(["<a name=\"", Ref, "\">"]), "</a>")

case (a, {href=Ref}, []), Ctx:
  wrap(Ref, Ctx, iol2b(["<a name=\"", Ref, "\">"]), "</a>")
case (a, {href=Ref}, Childs), Ctx:
  wrap(Childs, Ctx, "[", iol2b(["](", Ref, ")"]))

case (img, {src=Src, alt=Alt}, _Childs), Ctx:
  wrap([Alt], Ctx, "![", iol2b(["](", Src, ")"]))
case (img, {src=Src}, _Childs), Ctx:
  wrap(["image"], Ctx, "![", iol2b(["](", Src, ")"]))
case (code, Attrs, Childs), Ctx:
  Lang = maps.get(lang, Attrs, "")
  Prefix = iol2b(["```", Lang, ""])
  mdt(Childs, Ctx # {escape=false, plain=true}, Prefix, "```")
case (pre, _Attrs, Childs), Ctx:
  mdt(Childs, Ctx # {escape=false, plain=true}, "```", "```")
case (ul, _Attrs, Childs), Ctx:
  clear_both(abovel(layout_items(Childs, Ctx)))
case (ol, _Attrs, Childs), Ctx:
  #_ "TODO: number items"
  clear_both(abovel(layout_items(Childs, Ctx)))
case (li, _Attrs, Childs), Ctx:
  mdli(Childs, Ctx)

case (dialog, {type=Type, title=Title}, Childs), Ctx:
  AlertType = match Type:
  case danger: "danger"
  case warning: "warning"
  case success: "success"
  case info: "info"
  else: "info"
  end

  clear_both(abovel([
    raw_txt(iol2b(["!!! ", AlertType, " \"", Title, "\""])),
    nestc(layout_items_par(Childs, Ctx), Ctx),
    raw_txt("")]))

case (dl, _Attrs, Childs), Ctx:
  abovel([
    raw_txt("<dl>"),
    nestc(abovel(layout_items(Childs, Ctx)), Ctx),
    raw_txt("</dl>"),
  ])
case (dt, _Attrs, Childs), Ctx:
  clear_both(parl([raw_txt("<dt>"), layout_items_beside(Childs, Ctx # {plain=true, escape=false}), raw_txt("</dt>")]))
case (dd, _Attrs, Childs), Ctx:
  clear_both(parl([raw_txt("<dd>"), layout_items_beside(Childs, Ctx # {plain=true, escape=false}), raw_txt("</dd>")]))

case (table, _, _), _Ctx:
  text("TODO: TABLE")

case Item, Ctx when is_binary(Item):
  txt(Item, Ctx)
end

fn unwrap_groupers
case Childs when is_list(Childs):
  for Child in Childs:
    unwrap_grouper(Child) 
  end
case Child:
  unwrap_grouper(Child)
end

fn unwrap_grouper
case (Tag, nil, Txt) when Tag is p or Tag is nil:
  unwrap_grouper(Txt)
case (Tag, Attrs, Txt) when (Tag is p or Tag is nil) and map_size(Attrs) is 0:
  unwrap_grouper(Txt)
case [V]:
  unwrap_grouper(V)
case L when is_list(L):
  for V in L: unwrap_grouper(V) end
case Other: Other
end

fn mdli case Childs, Ctx:
  beside(raw_txt("* "), layout_items_beside(unwrap_groupers(Childs), Ctx))
end

fn mdt
case Childs, Ctx, Prefix, Suffix:
  clear_both(abovel([markup(Prefix), layout_items_par(Childs, Ctx), markup(Suffix)]))
end

fn wrap case Childs, Ctx, Prefix, Suffix:
  wrap(Childs, Ctx, Prefix, Suffix, fn besidel:1)
end

fn wrap
case Childs, Ctx={plain=true}, _, _, JoinFn:
  JoinFn(layout_items(Childs, Ctx))
case [(span, _Attrs, Child)], Ctx, Prefix, Suffix, JoinFn:
  #_ "Note: we unwrap all spans, we may want to special case somes"
  raw_txt(iol2b([Prefix, Child, Suffix]))
case Child, Ctx, Prefix, Suffix, JoinFn when is_binary(Child):
  raw_txt(iol2b([Prefix, Child, Suffix]))
case [Child], Ctx, Prefix, Suffix, JoinFn when is_binary(Child):
  raw_txt(iol2b([Prefix, Child, Suffix]))
case Childs, Ctx, Prefix, Suffix, JoinFn:
  besidel([markup(Prefix), JoinFn(layout_items(Childs, Ctx)), markup(Suffix)])
end

fn sepl
case []: empty()
case [Item]: Item
case Items: sep(Items)
end

fn layout_items
case Childs, Ctx when is_list(Childs):
  for Child in Childs: to_layout(Child, Ctx) end
case Child, Ctx:
  [to_layout(Child, Ctx)]
end

fn layout_items_beside
case [], _Ctx:
  empty()
case Child, Ctx:
  besidel(layout_items(Child, Ctx))
end

fn layout_items_par
case [], _Ctx:
  empty()
case Child, Ctx:
  parl(layout_items(Child, Ctx))
end

fn layout_items_sep
case [], _Ctx:
  empty()
case Child, Ctx:
  sepl(layout_items(Child, Ctx))
end

fn layout_items_sep_fixed
case [], _Ctx:
  empty()
case Child, Ctx:
  besidel(lists.join(text(" "), layout_items(Child, Ctx)))
end

fn parl
case []: empty()
case Items: par(Items)
end

fn abovel
case [Item]:
  Item
case Items:
  fnl(Items, fn prettypr.above:2)
end

fn besidel
case [Item]:
  Item
case Items:
  fnl(Items, fn prettypr.beside:2)
end

fn followl
case [Item]:
  Item
case Items:
  fnl(Items, fn prettypr.follow:2)
end

fn fnl
case [], _Fn:
  empty()
case Items, Fn:
  lists.foldl(nothing, Items) <<-
  case Item, nothing:
    Item
  case Item, AccumIn:
    Fn(AccumIn, Item)
  end
end

fn nestc case Doc, _Ctx:
  nest(4, Doc)
end

fn raw_txt case V: text(to_ls(V)) end
fn markup case V: text_par(to_ls(V)) end

fn to_ls
case T when is_list(T): T
case T when is_binary(T): b2l(T)
end

fn txt
case V, {escape=false} when is_binary(V):
  text(binary_to_list(V))
case V, {escape=false} when is_list(V):
  text(V)
case V, _Ctx when is_binary(V):
  text(escape_md(binary_to_list(V)))
case V, _Ctx when is_list(V):
  text(escape_md(V))
end

fn escape_md case Str:
  re.replace(Str, "[*]", "\\\\&", [global, (return, list)])
end

fn iol2b case IOList: list_to_binary(lists.flatten(IOList)) end
fn b2l case V: binary_to_list(V) end

fn clear_both case V:
  clear_indent(above(break(break(raw_txt(""))),  break(break(V))))
end

fn clear_indent case V:
  nest(-10000, V)
end

fn new_ctx case:
  {escape: true, plain: false}
end
