
fn to_rst @public
case (Type, {}, 'NOT IMPLEMENTED'):
  ['Not Implemented: ', atom_to_list(Type)]
case Nodes:
  child_nodes(Nodes, fn root_nodes:1)
end

fn child_nodes case Nodes, Fn: child_nodes(Nodes, Fn, []) end

fn child_nodes
case Node, Fn, Accum when is_tuple(Node):
  child_nodes([Node], Fn, Accum)
case [], _Fn, Accum:
  lists.reverse(Accum)
case (comment, _, _) :: Nodes, Fn, Accum:
  child_nodes(Nodes, Fn, Accum)
case (ignore, {node_name=Name}, _) :: Nodes, Fn, Accum:
  io.format("Ignoring tag: ~p~n", [Name])
  child_nodes(Nodes, Fn, Accum)
case Node :: Nodes, Fn, Accum:
  Result = Fn(Node)
  child_nodes(Nodes, Fn, Result :: Accum)
end

fn root_nodes
case (book, _, Nodes):
  child_nodes(Nodes, fn book_nodes:1)
case (header, _, Nodes):
  IGNORED = child_nodes(Nodes, fn header_nodes:1)
  ''
case (module, _, Text):
  title(Text, '=')
case (modulesummary, _, Text):
  ['\n', normalize_nls(Text), '\n\n']
case (lib, _, Text):
  title(Text, '=')
case (libsummary, _, Text):
  ['\n', normalize_nls(Text), '\n\n']
case (com, _, Text):
  title(Text, '=')
case (comsummary, _, Text):
  ['\n', normalize_nls(Text), '\n\n']
case (app, _, Text):
  title(Text, '~')
case (appsummary, _, Text):
  ['\n', normalize_nls(Text), '\n\n']
case (file, _, Text):
  title(Text, '=')
case (filesummary, _, Text):
  ['\n', normalize_nls(Text), '\n\n']

case (description, _, Nodes):
  markup(Nodes)
case (funcs, _, Items):
  [title('Functions', '-'), child_nodes(Items, fn func:1)]
case (datatypes, _, Items):
  [title('Data Types', '-'), child_nodes(Items, fn datatype:1)]
case (authors, _, Items):
  [title('Authors', '-'), [child_nodes(Items, fn author:1), '\n']]
case (section, _, Nodes):
  child_nodes(Nodes, fn section_nodes: 1)
case (include, _, _ :: Nodes):
  child_nodes(Nodes, fn root_nodes:1)
case Other:
  markup_node(Other)
end

fn markup case Nodes:
  child_nodes(fix_markup(Nodes, []), fn markup_node:1)
end

fn pre_markup case Nodes:
  child_nodes(Nodes, fn pre_markup_node:1)
end

fn fix_markup
case [], Accum:
  lists.reverse(Accum)
case (N1=(Tag, _, _)) :: N2 :: T, Accum
when Tag is c or Tag is em or Tag is i or Tag is input:
  fix_markup(N2 :: T, (text, {}, '\\ ') :: N1 :: Accum)
case H :: T, Accum:
  fix_markup(T, H :: Accum)
end

fn datatype
case (datatype_title, _, Title):
  title(Title, '.')
case (datatype, _, Nodes):
  child_nodes(Nodes, fn datatype_nodes:1)
end

fn datatype_nodes
case (name, {name=Name}, ''):
  ['* ', to_one_line(Name), '\n']
case (name, {}, Name):
  ['* ', to_one_line(Name), '\n']
case (desc, _, Nodes):
  ['\n', markup(Nodes), '\n']
end

fn author
case (author, _, Nodes):
  child_nodes(Nodes, fn author_nodes:1)
case Other:
  author_nodes(Other)
end

fn author_nodes
case (aname, _, Text): [Text, '\n']
case (email, _, Text): [Text, '\n']
end

fn func case (func, _, Nodes):
  child_nodes(Nodes, fn func_nodes:1)
end

fn func_nodes
case (name, {name=Name, arity=Arity}, []):
  title([Name, '/', Arity], '.')
case (name, {}, [(ret, {}, Ret), (nametext, {}, Name)]):
  title([Name, ': ', Ret], '.')
case (name, {}, [Name]) when is_binary(Name): title(to_one_line(Name), '.')
case (name, {}, Nodes): title(to_one_line(markup(Nodes)), '.')
case (fsummary, _, Nodes): [markup(Nodes), '\n\n']
case (type, {name=Name}, []):
  ['\n\n* ', Name, '\n\n']
case (type, {variable=Name}, []):
  ['\n\n* ', Name, '\n\n']
case (type, _, Nodes):
  ['\n', child_nodes(Nodes, fn type:1), '\n']
case (type_desc, {variable=Name}, Nodes):
  ['\n\n\t', Name, ': ', strip(markup(Nodes)), '\n\n']
case (type_desc, _, Nodes):
  ['\n\n\t', strip(markup(Nodes)), '\n\n']
case (desc, _, Nodes):
 markup(Nodes) 
end


fn type
case (v, _, Nodes): ['\n', indent(markup(Nodes), 1), '\n']
case (d, _, Nodes): ['\n', indent(markup(Nodes), 2), '\n']
end

fn section_nodes
case (marker, {id=Id}, _):
  ['\n.. _', Id, ':\n\n']
case (title, _, Text):
  #_ "TODO: thread level to support nested sections"
  title(Text, '-')
case (section, _, Nodes):
  #_ "seen in appup.xml"
  child_nodes(Nodes, fn section_nodes: 1)
case Node:
  markup_node(Node)
end

fn to_one_line case IOList:
  nl_to_space(strip(IOList, iodata))
end

fn marker_text case Text0, Default:
  match strip(nl_to_space(Text0)):
    case '': Default
    case Text: Text
  end
end

fn pre_markup_node
case (text, _, Text): Text
case (input, _, Text):
  #_ "TODO: add backticks to this but not on code examples"
  Text
case Node=(seealso, _, _): seealso_node(Node)
case Node=(url, _, _): url_node(Node)
case Node=(c, _, _):
  #_ "seen in common_test chapter"
  c_node(Node)
end

fn url_node case (url, {href=HRef}, Text):
  ['`', strip(nl_to_space(Text)), ' <', HRef, '>`_ ']
end

fn seealso_node
case (seealso, {marker=(mod, Id)}, Text0):
  Text = marker_text(Text0, Id)
  [':doc:`', Text, ' <./', Id ,'>`']
case (seealso, {marker=(mod_anchor, (Page, Id))}, Text0):
  Text = marker_text(Text0, [Page, '#', Id])
  ['`', Text , ' <./', Page ,'.html#', Id, '>`_']
case (seealso, {marker=(app_anchor, (App, Page, Id))}, Text0):
  Text = marker_text(Text0, [App, '/', Page, '#', Id])
  ['`', Text , ' <../', App, '/', Page ,'.html#', Id, '>`_']
case (seealso, {marker=(app_mod, (App, Page))}, Text0):
  Text = marker_text(Text0, [App, '/', Page])
  [':doc:`', Text , ' <../', App, '/', Page, '>`']
case (seealso, {marker=(anchor, Id)}, Text0):
  Text = marker_text(Text0, Id)
  [':ref:`', Text, ' <', Id ,'>`']
end

fn c_node case (c, _, Nodes):
  ['**', strip(nl_to_space(markup(Nodes))), '**']
end

fn markup_node
case (text, _, Text): nl_to_space(escape_chars(Text))
case (term, {id=Text}, ''):
  #_ "TODO: make a reference to the term"
  ['`', nl_to_space(escape_chars(Text)), '`']
case (term, {id=_Id}, Text):
  #_ "TODO: make a reference to the term"
  ['`', nl_to_space(escape_chars(Text)), '`']
case (cite, {id=Text}, ''):
  #_ "TODO: make a reference to the term"
  ['`', nl_to_space(escape_chars(Text)), '`']
case (path, _, Text):
  ['`', nl_to_space(escape_chars(Text)), '`']
case (input, _, Text):
  #_ "TODO: add backticks to this but not on code examples"
  Text
case (pre, _, Nodes): ['\n::\n', indent(pre_markup(Nodes), 1), '\n\n']
case (quote, _, Nodes): ['\n::\n', indent(markup(Nodes), 1), '\n\n']
case Node=(url, _, _): url_node(Node)
case (code, Attrs, Nodes):
  Type = match maps.get(type, Attrs, 'erl'):
    case 'erl': 'erlang'
    case 'none': 'erlang'
    case Other: Other
  end
  ['\n.. code-block:: ', Type, '\n\n', indent(Nodes, 1), '\n\n']
case (em, _, Nodes): ['*', strip(nl_to_space(markup(Nodes))), '*']
case Node=(c, _, _): c_node(Node)
case (anno, _, Text): nl_to_space(Text)
case (i, _, Text): ['*', strip(nl_to_space(Text)), '*']
case (strong, _, Text): ['**', strip(nl_to_space(Text)), '**']
case (image, {file=Path}, [(icaption, {}, Caption)]):
  ['\n.. image:: ', Path, '\n\n\t', Caption, '\n\n']
case (table, _, Nodes): ['\n', format_table(Nodes), '\n']
case (br, _, _): '\n\n'
case (vfill, _, _): ''
case (tt, _, Text): ['tt: ', Text]
case (list, _, Items):
  #_ "TODO: thread list nesting to support nested lists"
  R = for (list_item, _, LINodes) in Items:
    ['* ', strip(markup(LINodes)), '\n']
  end
  ['\n', R, '\n']
case (taglist, _, Items):
  R = for Node in Items:
    match Node:
      case (tag, _, TagNodes):
        ['\n', strip(markup(TagNodes)), '\n']
      case (tagitem, _, TINodes):
        ['\t', indent(markup(TINodes), 1), '\n']
      case (comment, _, _): ''
    end
  end
  ['\n', R, '\n']
case (p, _, Nodes):
  ['\n\n', strip(normalize_nls(markup(Nodes))), '\n\n']
case (marker, {id=Id}, _): ['\n.. _', Id, ':\n\n']
case Node=(seealso, _, _): seealso_node(Node)
case (warning, _, Nodes):
  ['\n.. warning::\n\n\t', indent(markup(Nodes), 1), '\n\n']
case (`do`, _, Nodes):
  ['\n.. tip::\n\n\t', indent(markup(Nodes), 1), '\n\n']
case (dont, _, Nodes):
  ['\n.. attention::\n\n\t', indent(markup(Nodes), 1), '\n\n']
case (note, _, Nodes):
  ['\n.. note::\n\n\t', indent(markup(Nodes), 1), '\n\n']

case (error, {type=include_error, source=Source, target=Target}, _):
  ['\n\nError Including file: ', Target, ' from ', Source, '\n\n']
case Other:
  io_lib.format("(unknown_tag ~p)", [Other])
end

fn book_nodes
case (header, _, Nodes):
  IGNORED = child_nodes(Nodes, fn header_nodes:1)
  ''
case (insidecover, _, Nodes):
  child_nodes(Nodes, fn root_nodes:1)
case (preamble, _, Nodes):
  ''
case (pagetext, _, Nodes):
  title(strip(nl_to_space(Nodes)), '~')
case (parts, _, Nodes):
  child_nodes(Nodes, fn root_nodes:1)
case (applications, _, Nodes):
  child_nodes(Nodes, fn root_nodes:1)
case (releasenotes, _, Nodes):
  child_nodes(Nodes, fn root_nodes:1)
case (index, _, []):
  ''
case (listofterms, _, []):
  ''
case Other:
  io.format("unkown book tag: ~p~n", [Other])
  io_lib.format("(unknown_tag ~p)", [Other])
end

fn header_nodes
case (copyright, _, Nodes):
  Holders = accum_text(holder, Nodes)
  THolders = lists.join(', ', Holders)
  Years = accum_text(year, Nodes)
  TYears = lists.join(' - ', Years)
  ['Copyright ', THolders, ' ', TYears, '\n\n']
case (legalnotice, _, Text):
  [title('Legal Notice', '-'), '\n::\n\n', Text, '\n\n']
case (title, _, Text):
  ['\n', title(Text, '=')]
case (prepared, _, ''): ''
case (prepared, _, Text):
  ['Prepared\n\t', Text, '\n']
case (responsible, _, ''): ''
case (responsible, _, Text):
  ['Responsible\n\t', Text, '\n']
case (docno, _, ''): ''
case (docno, _, Text):
  ['Document Number\n\t', Text, '\n']
case (approved, _, ''): ''
case (approved, _, Text):
  ['Approved\n\t', Text, '\n']
case (checked, _, ''): ''
case (checked, _, Text):
  ['Checked\n\t', Text, '\n']
case (date, _, ''): ''
case (date, _, Text):
  ['Date\n\t', Text, '\n']
case (rev, _, ''): ''
case (rev, _, Text):
  ['Revision\n\t', Text, '\n']
case (file, _, ''): ''
case (file, _, Text):
  ['File\n\t', Text, '\n']
end

fn title case Text, Char:
  #_ "TODO: make it work for unicode"
  OLText = to_one_line(escape_chars(Text))
  Len = size(OLText)
  ['\n', OLText, '\n', lists.duplicate(Len, Char), '\n\n']
end

fn accum_text case Tag, Nodes:
  for (NTag, _, Text) in Nodes; when Tag is NTag: Text end
end

fn indent case IOList, Count:
  Indent = (#c "\n") :: lists.duplicate(Count, (#c "\t"))
  re.replace(["\n", IOList], "\n", Indent,
    [global, unicode, (return, binary)])
end

fn strip case IOList: strip(IOList, binary) end

fn strip case IOList, RetType:
  re.replace(IOList, "(^(\n|\\s)+|(\n|\\s)+$)", "",
    [global, unicode, (return, RetType)])
end

fn nl_to_space case IOList:
  re.replace(IOList, "(\n|\\s)+", "  ", [global, unicode, (return, binary)])
end

fn normalize_nls case IOList:
  re.replace(IOList, "(\n+)\\s*", "\\g1", [global, unicode, (return, binary)])
end

fn escape_chars case Text:
  re.replace(Text, "(\\*|`|\\|)", "\\\\&", [global, unicode, (return, binary)])
end

fn format_table case Nodes:
  State0 = {max_col_sizes: {}, max_cols: 1, rows: [], caption: '', row_num: 0}
  R = format_table(Nodes, State0)
  {caption=Caption, max_col_sizes=MaxColSizes, max_cols=MaxCols, rows=Rows} = R
  Delim = format_cols(MaxCols, MaxColSizes, '=')
  ['\n.. table:: ', Caption, '\n\t:widths: auto\n\n',
    Delim, '\n', format_rows(MaxColSizes, Rows), Delim, '\n\n']
end

fn format_cols
case MaxCols, MaxColSizes, Char:
  for I in lists.seq(1, MaxCols):
    MaxSize = match maps.get(I, MaxColSizes, 0):
      case 0: 1
      case MS: MS
    end
    [lists.duplicate(MaxSize, Char), ' ']
  end
end

fn format_rows case MaxColSizes, Rows:
  for Cells in Rows:
    (_, OCells) = lists.foldl((1, []), Cells) <<- case (CLen, CText), (I, ICells):
      MaxSize = match maps.get(I, MaxColSizes, 0):
        case 0: 1
        case MS: MS
      end
      RemSpace = MaxSize - CLen + 1
      (I + 1, [CText, lists.duplicate(RemSpace, #c " ")] :: ICells)
    end
    
    [lists.reverse(OCells), '\n']
  end
end

fn format_table
case [], State0={rows=RRows}:
  State0#{rows: lists.reverse(RRows)}
case (comment, _, _) :: T, State:
  format_table(T, State)
case (row, _, Cells) :: T,
State={rows=Rows0, row_num=RowNum0, max_cols=MaxCols0, max_col_sizes=MaxColSizes0}:
  RowNum = RowNum0 + 1
  Row = row_cells(Cells, [])
  Cols = length(Row)
  MaxCols = max(Cols, MaxCols0)
  Rows = Row :: Rows0
  MaxColSizes = update_max_col_sizes(Row, MaxColSizes0, 1)
  format_table(T, State#{
    rows: Rows,
    row_num: RowNum,
    max_col_sizes: MaxColSizes,
    max_cols: MaxCols
  })
case (tcaption, _, Text) :: T, State:
  format_table(T, State#{caption: Text})
end

fn row_cells
case [], Accum:
  lists.reverse(Accum)
case (comment, _, _) :: T, Accum:
  row_cells(T, Accum)
case (cell, _, Nodes) :: T, Accum:
  LStr = lists.flatten(io_lib.format("~s", [strip(to_one_line(markup(Nodes)))]))
  Len = length(LStr)
  Cell = (Len, list_to_binary(LStr))
  row_cells(T, Cell :: Accum)
end

fn update_max_col_sizes
case [], State, _I: State
case (Len, _) :: T, State, I:
  CurLen = maps.get(I, State, 0)
  NewSize = max(Len, CurLen)
  update_max_col_sizes(T, State#{I: NewSize}, I + 1)
end

  

