
fn transform @public case Nodes:
  State = {level: 1}
  child_nodes(Nodes, State, fn root_nodes:2)
end

fn child_nodes case Nodes, State, Fn: child_nodes(Nodes, State, Fn, []) end

fn child_nodes
case Node, State, Fn, Accum when is_tuple(Node):
  child_nodes([Node], State, Fn, Accum)
case [], _State, _Fn, Accum:
  lists.reverse(Accum)
case (comment, _, _) :: Nodes, State, Fn, Accum:
  child_nodes(Nodes, State, Fn, Accum)
case V=(T=ignore, _, _) :: Nodes, State, Fn, Accum:
  Result = (ignore, {t: T, v: V})
  child_nodes(Nodes, State, Fn, Result :: Accum)
case Node :: Nodes, State, Fn, Accum:
  Result = Fn(Node, State)
  child_nodes(Nodes, State, Fn, Result :: Accum)
end

fn root_nodes
case (T=book, _, Nodes), State:
  (section, {t: T}, child_nodes(Nodes, State, fn book_nodes:2))
case V=(T=header, _, _Nodes), _State:
  #_ child_nodes(Nodes, State, fn header_nodes:2)
  (ignore, {t: T, v: V})
case (T=module, _, Text), State:
  title({t: T}, State, Text)
case (T=modulesummary, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case (T=lib, _, Text), State:
  title({t: T}, State, Text)
case (T=libsummary, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case (T=com, _, Text), State:
  title({t: T}, State, Text)
case (T=comsummary, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case (T=app, _, Text), State:
  title({t: T}, State, Text)
case (T=appsummary, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case (T=file, _, Text), State:
  title({t: T}, State, Text)
case (T=filesummary, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))

case (T=description, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case (T=funcs, _, Items), State:
  [title({t: T}, State, 'Functions'),
    child_nodes(Items, inc_level(State), fn func:2)]
case (T=datatypes, _, Items), State:
  [title({t: T}, State, 'Data Types'),
    child_nodes(Items, inc_level(State), fn datatype:2)]
case (T=authors, _, Items), State:
  [title({t: T}, State, 'Authors'),
    (section, {t: T}, child_nodes(Items, inc_level(State), fn author:2))]
case (T=section, _, Nodes), State:
  (section, {t: T}, child_nodes(Nodes, inc_level(State), fn section_nodes:2))
case (T=include, _, _ :: Nodes), State:
  (section, {t: T}, child_nodes(Nodes, inc_level(State), fn root_nodes:2))
case Other, State:
  markup_node(Other, State)
end

fn inc_level case State={level=Level}:
  State # {level=Level + 1}
end

fn markup
case Text, _State when is_binary(Text):
  Text
case [(text, _, Text)], _State:
  Text
case Nodes, State:
  child_nodes(Nodes, State, fn markup_node:2)
end

fn pre_markup case Nodes, State:
  child_nodes(Nodes, State, fn pre_markup_node:2)
end

fn datatype
case (T=datatype_title, _, Text), State:
  title({t: T}, State, Text)
case (datatype, _, Nodes), State:
  child_nodes(Nodes, State, fn datatype_nodes:2)
end

fn datatype_nodes
case (T=name, {name=Name}, ''), _State:
  (li, {t: T}, Name)
case (T=name, {}, Name), _State:
  (li, {t: T}, Name)
case (T=desc, _, Nodes), State:
  (p, {t: T}, markup(Nodes, State))
end

fn author
case (T=author, _, Nodes), State:
  (section, {t: T}, child_nodes(Nodes, State, fn author_nodes:2))
case Other, State:
  (section, {t: author}, author_nodes(Other, State))
end

fn author_nodes
case (T=aname, _, Text), _State:
  (t, {t: T}, Text)
case (T=email, _, Text), _State:
  (t, {t: T}, Text)
end

fn func case (func, _, Nodes), State:
  child_nodes(Nodes, State, fn func_nodes:2)
end

fn func_nodes
case (T=name, {name=Name, arity=Arity}, []), State:
  title({t: T, pt: func}, State, list_to_binary([Name, '/', Arity]))
case (T=name, {}, [(ret, {}, Ret), (nametext, {}, Name)]), State:
  title({t: T, pt: func}, State, list_to_binary([Name, ':', Ret]))
case (T=name, {}, [Name]), State when is_binary(Name):
  title({t: T, pt: func}, State, Name)
case (T=name, {}, Nodes), State:
  title({t: T, pt: func}, State, Nodes)
case (T=fsummary, _, Nodes), State:
  p({t: T, pt: func}, State, markup(Nodes, State))
case (T=type, {name=Name}, []), _State:
  (li, {t: T, pt: func, a: name}, Name)
case (T=type, {variable=Name}, []), _State:
  (li, {t: T, pt: func, a: variable}, Name)
case (T=type, _, Nodes), State:
  (list, {t: T, pt: func, a: list}, child_nodes(Nodes, State, fn type:2))
case (T=type_desc, {variable=Name}, Nodes), State:
  (dd, {t: T, pt: func}, (Name, markup(Nodes, State)))
case (T=type_desc, _, Nodes), State:
  (p, {t: T, pt: func}, markup(Nodes, State))
case (T=desc, _, Nodes), State:
  (p, {t: T, pt: func}, markup(Nodes, State) )
end

fn type
case (T=v, _, Nodes), State:
  p({t: T, pt: type}, State, markup(Nodes, State))
case (T=d, _, Nodes), State:
  p({t: T, pt: type}, State, markup(Nodes, State))
end

fn section_nodes
case (T=marker, {id=Id}, _), _State:
  (marker, {t: T}, Id)
case (T=title, _, Text), State:
  title({t: T}, State, Text)
case (T=section, _, Nodes), State:
  #_ "seen in appup.xml"
  (section, {t: T}, child_nodes(Nodes, State, fn section_nodes:2))
case Node, State:
  markup_node(Node, State)
end

fn marker_text case Text0, Default:
  match strip(nl_to_space(Text0)):
    case '': Default
    case _: Text0
  end
end

fn pre_markup_node
case (text, _, Text), _State: 
  Text
case (T=input, _, Text), _State:
  (t, {t: T, pt: pre}, Text)
case Node=(seealso, _, _), State:
  seealso_node(Node, State)
case Node=(url, _, _), State:
  url_node(Node, State)
case Node=(c, _, _), State:
  #_ "seen in common_test chapter"
  c_node(Node, State)
end

fn url_node case (T=url, {href=HRef}, Text), _State:
  (link, {t: T, href: HRef}, Text)
end

fn seealso_node
case (T=seealso, {marker=(mod, Id)}, Text0), _State:
  Text = marker_text(Text0, Id)
  (link, {t: T, mod: Id}, Text)
case (T=seealso, {marker=(mod_anchor, (Page, Id))}, Text0), _State:
  Text = marker_text(Text0, [Page, '#', Id])
  (link, {t: T, page: Page, id: Id}, Text)
case (T=seealso, {marker=(app_anchor, (App, Page, Id))}, Text0), _State:
  Text = marker_text(Text0, [App, '/', Page, '#', Id])
  (link, {t: T, app: App, page: Page, id: Id}, Text)
case (T=seealso, {marker=(app_mod, (App, Page))}, Text0), _State:
  Text = marker_text(Text0, [App, '/', Page])
  (link, {t: T, app: App, page: Page}, Text)
case (T=seealso, {marker=(anchor, Id)}, Text0), _State:
  Text = marker_text(Text0, Id)
  (link, {t: T, anchor: Id}, Text)
end

fn c_node case (T=c, _, Nodes), State:
  (strong, {t: T}, markup(Nodes, State))
end

fn markup_node
case (text, _, Text), _State:
  Text
case (T=term, {id=Id}, ''), _State:
  (t, {t: T, id: Id}, Id)
case (T=term, {id=Id}, Text), _State:
  (t, {t: T, id: Id}, Text)
case (T=cite, {id=Id}, ''), _State:
  (t, {t: T, id: Id}, Id)
case (T=path, _, Text), _State:
  (t, {t: T}, Text)
case (T=input, _, Text), _State:
  (t, {t: T}, Text)
case (T=pre, _, Nodes), State:
  (t, {t: T}, pre_markup(Nodes, State))
case (T=quote, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case Node=(url, _, _), State:
  url_node(Node, State)
case (T=code, Attrs, Nodes), State:
  Type = maps.get(type, Attrs, 'none')
  (t, {t: T, type: Type}, markup(Nodes, State))
case (T=em, _, Nodes), State:
  (t, {t: T}, markup(Nodes, State))
case Node=(c, _, _), State:
  c_node(Node, State)
case (T=anno, _, Nodes), State:
  (t, {t: T}, markup(Nodes, State))
case (i, _, Nodes), State:
  (t, {t: em}, markup(Nodes, State))
case (T=strong, _, Nodes), State:
  (t, {t: T}, markup(Nodes, State))
case (T=image, {file=Path}, [(icaption, {}, Caption)]), _State:
  (img, {t: T, path: Path, caption: Caption})
case (table, _, Nodes), State:
  table(Nodes, State)
case (T=br, _, _), _State:
  (br, {t: T})
case (T=vfill, _, _), _State:
  (br, {t: T})
case (T=tt, _, Nodes), State:
  (t, {t: T}, markup(Nodes, State))
case (TT=list, _, Items), State:
  R = for (T=list_item, _, LINodes) in Items:
    (li, {t: T}, markup(LINodes, State))
  end
  (list, {t: TT}, R)
case (TT=taglist, _, Items), State:
  R = for Node in Items:
    match Node:
      case (T=tag, _, TagNodes):
        (t, {t: T}, markup(TagNodes, State))
      case (T=tagitem, _, TINodes):
        (t, {t: T}, markup(TINodes, State))
      case Text when is_binary(Text):
        Text
      case V=(T=comment, _, _):
        (ignore, {t: T, v: V})
    end
  end
  (list, {t: TT}, R)
case (T=p, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case (T=marker, {id=Id}, _), _State:
  (marker, {t: T}, Id)
case Node=(seealso, _, _), State:
  seealso_node(Node, State)
case (T=warning, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case (T=`do`, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case (T=dont, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))
case (T=note, _, Nodes), State:
  p({t: T}, State, markup(Nodes, State))

case V=(T=error, {type=include_error, source=_Source, target=_Target}, _), _State:
  (ignore, {t: T, v: V})
case V, _State:
  (ignore, {t: unknown, v: V})
end

fn book_nodes
case (T=header, _, Nodes), State:
  V = child_nodes(Nodes, State, fn header_nodes:2)
  (ignore, {t: T, v: V})
case (insidecover, _, Nodes), State:
  child_nodes(Nodes, State, fn root_nodes:2)
case V=(T=preamble, _, _Nodes), _State:
  (ignore, {t: T, v: V})
case (T=pagetext, _, Nodes), State:
  title({t: T}, State, Nodes)
case (parts, _, Nodes), State:
  child_nodes(Nodes, State, fn root_nodes:2)
case (applications, _, Nodes), State:
  child_nodes(Nodes, State, fn root_nodes:2)
case V=(T=releasenotes, _, _Nodes), _State:
  (ignore, {t: T, v: V})
case V=(T=index, _, []), _State:
  (ignore, {t: T, v: V})
case V=(T=listofterms, _, []), _State:
  (ignore, {t: T, v: V})
case V, _State:
  (ignore, {t: unknown, v: V})
end

fn header_nodes
case (T=copyright, _, Nodes), _State:
  Holders = accum_text(holder, Nodes)
  THolders = lists.join(', ', Holders)
  Years = accum_text(year, Nodes)
  TYears = lists.join(' - ', Years)
  (p, {t: T}, ['Copyright ', THolders, ' ', TYears])
case (T=legalnotice, _, Nodes), State:
  [title({t: T}, State, 'Legal Notice'),
   p({t: T}, State, markup(Nodes, State))]
case (T=title, _, Text), State:
  title({t: T, pt: header}, State, Text)
case (T=prepared, _, Text), State:
  p({t: T}, State, Text)
case (T=responsible, _, Text), State:
  p({t: T}, State, Text)
case (T=docno, _, Text), State:
  p({t: T}, State, Text)
case (T=approved, _, Text), State:
  p({t: T}, State, Text)
case (T=checked, _, Text), State:
  p({t: T}, State, Text)
case (T=date, _, Text), State:
  p({t: T}, State, Text)
case (T=rev, _, Text), State:
  p({t: T}, State, Text)
case (T=file, _, Text), State:
  p({t: T}, State, Text)
end

fn title case Attrs, State={level=Level}, Nodes:
  (title, Attrs # {level: Level}, markup(Nodes, State))
end

fn p case Attrs, _, Text:
  (p, Attrs, Text)
end

fn accum_text case Tag, Nodes:
  for (NTag, _, Text) in Nodes; when Tag is NTag: Text end
end

fn strip case IOList: strip(IOList, binary) end

fn strip case IOList, RetType:
  re.replace(IOList, "(^(\n|\\s)+|(\n|\\s)+$)", "",
    [global, unicode, (return, RetType)])
end

fn nl_to_space case IOList:
  re.replace(IOList, "(\n|\\s)+", "  ", [global, unicode, (return, binary)])
end

fn table case Nodes, State:
  TState0 = {max_cols: 1, rows: [], caption: '', row_num: 0}
  R = table(Nodes, TState0, State)
  {caption=_Caption, max_cols=_MaxCols, rows=Rows} = R
  (table, R, Rows)
end

fn table
case [], TState0={rows=RRows}, _State:
  TState0#{rows: lists.reverse(RRows)}
case (comment, _, _) :: T, TState, State:
  table(T, TState, State)
case (row, _, Cells) :: T, TState={rows=Rows0, row_num=RowNum0, max_cols=MaxCols0}, State:
  RowNum = RowNum0 + 1
  Row = row_cells(Cells, [], State)
  Cols = length(Row)
  MaxCols = max(Cols, MaxCols0)
  Rows = Row :: Rows0
  table(T, TState#{
    rows: Rows,
    row_num: RowNum,
    max_cols: MaxCols
  }, State)
case (tcaption, _, Text) :: T, TState, State:
  table(T, TState#{caption: Text}, State)
end

fn row_cells
case [], Accum, _State:
  lists.reverse(Accum)
case (comment, _, _) :: T, Accum, State:
  row_cells(T, Accum, State)
case (cell, _, Nodes) :: T, Accum, State:
  Cell = markup(Nodes, State)
  row_cells(T, Cell :: Accum, State)
end
